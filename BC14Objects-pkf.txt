OBJECT Table 14 Location
{
  OBJECT-PROPERTIES
  {
    Date=02-10-21;
    Time=12:00:00;
    Modified=Yes;
    Version List=NAVW114.30;
  }
  PROPERTIES
  {
    DataCaptionFields=Code,Name;
    OnDelete=VAR
               TransferRoute@1000 : Record 5742;
               WhseEmployee@1003 : Record 7301;
               WorkCenter@1004 : Record 99000754;
               StockkeepingUnit@1001 : Record 5700;
             BEGIN
               StockkeepingUnit.SETRANGE("Location Code",Code);
               IF NOT StockkeepingUnit.ISEMPTY THEN
                 ERROR(CannotDeleteLocSKUExistErr,Code);

               WMSCheckWarehouse;

               TransferRoute.SETRANGE("Transfer-from Code",Code);
               TransferRoute.DELETEALL;
               TransferRoute.RESET;
               TransferRoute.SETRANGE("Transfer-to Code",Code);
               TransferRoute.DELETEALL;

               WhseEmployee.SETRANGE("Location Code",Code);
               WhseEmployee.DELETEALL(TRUE);

               WorkCenter.SETRANGE("Location Code",Code);
               IF WorkCenter.FINDSET(TRUE) THEN
                 REPEAT
                   WorkCenter.VALIDATE("Location Code",'');
                   WorkCenter.MODIFY(TRUE);
                 UNTIL WorkCenter.NEXT = 0;

               CalendarManagement.DeleteCustomizedBaseCalendarData(CustomizedCalendarChange."Source Type"::Location,Code);
             END;

    OnRename=BEGIN
               CalendarManagement.RenameCustomizedBaseCalendarData(CustomizedCalendarChange."Source Type"::Location,Code,xRec.Code);
             END;

    LookupPageID=Page15;
    DrillDownPageID=Page15;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code10        ;NotBlank=Yes }
    { 2   ;   ;Name                ;Text100        }
    { 130 ;   ;Default Bin Code    ;Code20        ;TableRelation=Bin.Code WHERE (Location Code=FIELD(Code)) }
    { 5700;   ;Name 2              ;Text50         }
    { 5701;   ;Address             ;Text100        }
    { 5702;   ;Address 2           ;Text50         }
    { 5703;   ;City                ;Text30        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   OnLookup=BEGIN
                                                              PostCode.LookupPostCode(City,"Post Code",County,"Country/Region Code");
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No }
    { 5704;   ;Phone No.           ;Text30        ;ExtendedDatatype=Phone No. }
    { 5705;   ;Phone No. 2         ;Text30        ;ExtendedDatatype=Phone No. }
    { 5706;   ;Telex No.           ;Text30         }
    { 5707;   ;Fax No.             ;Text30         }
    { 5713;   ;Contact             ;Text100        }
    { 5714;   ;Post Code           ;Code20        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code"
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   OnLookup=BEGIN
                                                              PostCode.LookupPostCode(City,"Post Code",County,"Country/Region Code");
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Post Code;
                                                              ENN=Postcode] }
    { 5715;   ;County              ;Text30        ;CaptionClass='5,1,' + "Country/Region Code" }
    { 5718;   ;E-Mail              ;Text80        ;OnValidate=VAR
                                                                MailManagement@1000 : Codeunit 9520;
                                                              BEGIN
                                                                MailManagement.ValidateEmailAddressField("E-Mail");
                                                              END;

                                                   ExtendedDatatype=E-Mail;
                                                   CaptionML=[ENU=Email;
                                                              ENN=Email] }
    { 5719;   ;Home Page           ;Text90        ;ExtendedDatatype=URL }
    { 5720;   ;Country/Region Code ;Code10        ;TableRelation=Country/Region;
                                                   OnValidate=BEGIN
                                                                PostCode.CheckClearPostCodeCityCounty(City,"Post Code",County,"Country/Region Code",xRec."Country/Region Code");
                                                              END;
                                                               }
    { 5724;   ;Use As In-Transit   ;Boolean       ;OnValidate=BEGIN
                                                                IF "Use As In-Transit" THEN BEGIN
                                                                  TESTFIELD("Require Put-away",FALSE);
                                                                  TESTFIELD("Require Pick",FALSE);
                                                                  TESTFIELD("Use Cross-Docking",FALSE);
                                                                  TESTFIELD("Require Receive",FALSE);
                                                                  TESTFIELD("Require Shipment",FALSE);
                                                                  TESTFIELD("Bin Mandatory",FALSE);
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 5740=R }
    { 5726;   ;Require Put-away    ;Boolean       ;OnValidate=VAR
                                                                WhseActivHeader@1000 : Record 5766;
                                                                WhseRcptHeader@1001 : Record 7316;
                                                              BEGIN
                                                                WhseRcptHeader.SETRANGE("Location Code",Code);
                                                                IF NOT WhseRcptHeader.ISEMPTY THEN
                                                                  ERROR(Text008,FIELDCAPTION("Require Put-away"),xRec."Require Put-away",WhseRcptHeader.TABLECAPTION);

                                                                IF NOT "Require Put-away" THEN BEGIN
                                                                  TESTFIELD("Directed Put-away and Pick",FALSE);
                                                                  WhseActivHeader.SETRANGE(Type,WhseActivHeader.Type::"Put-away");
                                                                  WhseActivHeader.SETRANGE("Location Code",Code);
                                                                  IF NOT WhseActivHeader.ISEMPTY THEN
                                                                    ERROR(Text008,FIELDCAPTION("Require Put-away"),TRUE,WhseActivHeader.TABLECAPTION);
                                                                  "Use Cross-Docking" := FALSE;
                                                                  "Cross-Dock Bin Code" := '';
                                                                END ELSE
                                                                  CreateInboundWhseRequest;
                                                              END;

                                                   AccessByPermission=TableData 5771=R }
    { 5727;   ;Require Pick        ;Boolean       ;OnValidate=VAR
                                                                WhseActivHeader@1000 : Record 5766;
                                                                WhseShptHeader@1001 : Record 7320;
                                                              BEGIN
                                                                WhseShptHeader.SETRANGE("Location Code",Code);
                                                                IF NOT WhseShptHeader.ISEMPTY THEN
                                                                  ERROR(Text008,FIELDCAPTION("Require Pick"),xRec."Require Pick",WhseShptHeader.TABLECAPTION);

                                                                IF NOT "Require Pick" THEN BEGIN
                                                                  TESTFIELD("Directed Put-away and Pick",FALSE);
                                                                  WhseActivHeader.SETRANGE(Type,WhseActivHeader.Type::Pick);
                                                                  WhseActivHeader.SETRANGE("Location Code",Code);
                                                                  IF NOT WhseActivHeader.ISEMPTY THEN
                                                                    ERROR(Text008,FIELDCAPTION("Require Pick"),TRUE,WhseActivHeader.TABLECAPTION);
                                                                  "Use Cross-Docking" := FALSE;
                                                                  "Cross-Dock Bin Code" := '';
                                                                  "Pick According to FEFO" := FALSE;
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 5771=R }
    { 5728;   ;Cross-Dock Due Date Calc.;DateFormula;
                                                   AccessByPermission=TableData 5771=R }
    { 5729;   ;Use Cross-Docking   ;Boolean       ;OnValidate=BEGIN
                                                                IF "Use Cross-Docking" THEN BEGIN
                                                                  TESTFIELD("Require Receive");
                                                                  TESTFIELD("Require Shipment");
                                                                  TESTFIELD("Require Put-away");
                                                                  TESTFIELD("Require Pick");
                                                                END ELSE
                                                                  "Cross-Dock Bin Code" := '';
                                                              END;

                                                   AccessByPermission=TableData 5771=R }
    { 5730;   ;Require Receive     ;Boolean       ;OnValidate=VAR
                                                                WhseRcptHeader@1000 : Record 7316;
                                                                WhseActivHeader@1001 : Record 5766;
                                                              BEGIN
                                                                IF NOT "Require Receive" THEN BEGIN
                                                                  TESTFIELD("Directed Put-away and Pick",FALSE);
                                                                  WhseRcptHeader.SETRANGE("Location Code",Code);
                                                                  IF NOT WhseRcptHeader.ISEMPTY THEN
                                                                    ERROR(Text008,FIELDCAPTION("Require Receive"),TRUE,WhseRcptHeader.TABLECAPTION);
                                                                  "Receipt Bin Code" := '';
                                                                  "Use Cross-Docking" := FALSE;
                                                                  "Cross-Dock Bin Code" := '';
                                                                END ELSE BEGIN
                                                                  WhseActivHeader.SETRANGE(Type,WhseActivHeader.Type::"Put-away");
                                                                  WhseActivHeader.SETRANGE("Location Code",Code);
                                                                  IF NOT WhseActivHeader.ISEMPTY THEN
                                                                    ERROR(Text008,FIELDCAPTION("Require Receive"),FALSE,WhseActivHeader.TABLECAPTION);

                                                                  CreateInboundWhseRequest;
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 7316=R }
    { 5731;   ;Require Shipment    ;Boolean       ;OnValidate=VAR
                                                                WhseShptHeader@1000 : Record 7320;
                                                                WhseActivHeader@1001 : Record 5766;
                                                              BEGIN
                                                                IF NOT "Require Shipment" THEN BEGIN
                                                                  TESTFIELD("Directed Put-away and Pick",FALSE);
                                                                  WhseShptHeader.SETRANGE("Location Code",Code);
                                                                  IF NOT WhseShptHeader.ISEMPTY THEN
                                                                    ERROR(Text008,FIELDCAPTION("Require Shipment"),TRUE,WhseShptHeader.TABLECAPTION);
                                                                  "Shipment Bin Code" := '';
                                                                  "Use Cross-Docking" := FALSE;
                                                                  "Cross-Dock Bin Code" := '';
                                                                END ELSE BEGIN
                                                                  WhseActivHeader.SETRANGE(Type,WhseActivHeader.Type::Pick);
                                                                  WhseActivHeader.SETRANGE("Location Code",Code);
                                                                  IF NOT WhseActivHeader.ISEMPTY THEN
                                                                    ERROR(Text008,FIELDCAPTION("Require Shipment"),FALSE,WhseActivHeader.TABLECAPTION);
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 7320=R }
    { 5732;   ;Bin Mandatory       ;Boolean       ;OnValidate=VAR
                                                                ItemLedgEntry@1004 : Record 32;
                                                                WhseEntry@1000 : Record 7312;
                                                                WhseActivHeader@1001 : Record 5766;
                                                                WhseShptHeader@1002 : Record 7320;
                                                                WhseRcptHeader@1003 : Record 7316;
                                                                WhseIntegrationMgt@1006 : Codeunit 7317;
                                                                Window@1005 : Dialog;
                                                              BEGIN
                                                                IF "Bin Mandatory" AND NOT xRec."Bin Mandatory" THEN BEGIN
                                                                  Window.OPEN(Text010);
                                                                  ItemLedgEntry.SETRANGE(Open,TRUE);
                                                                  ItemLedgEntry.SETRANGE("Location Code",Code);
                                                                  IF NOT ItemLedgEntry.ISEMPTY THEN
                                                                    ERROR(Text009,FIELDCAPTION("Bin Mandatory"));

                                                                  "Default Bin Selection" := "Default Bin Selection"::"Fixed Bin";
                                                                END;

                                                                WhseActivHeader.SETRANGE("Location Code",Code);
                                                                IF NOT WhseActivHeader.ISEMPTY THEN
                                                                  ERROR(Text008,FIELDCAPTION("Bin Mandatory"),xRec."Bin Mandatory",WhseActivHeader.TABLECAPTION);

                                                                WhseRcptHeader.SETCURRENTKEY("Location Code");
                                                                WhseRcptHeader.SETRANGE("Location Code",Code);
                                                                IF NOT WhseRcptHeader.ISEMPTY THEN
                                                                  ERROR(Text008,FIELDCAPTION("Bin Mandatory"),xRec."Bin Mandatory",WhseRcptHeader.TABLECAPTION);

                                                                WhseShptHeader.SETCURRENTKEY("Location Code");
                                                                WhseShptHeader.SETRANGE("Location Code",Code);
                                                                IF NOT WhseShptHeader.ISEMPTY THEN
                                                                  ERROR(Text008,FIELDCAPTION("Bin Mandatory"),xRec."Bin Mandatory",WhseShptHeader.TABLECAPTION);

                                                                IF NOT "Bin Mandatory" AND xRec."Bin Mandatory" THEN BEGIN
                                                                  WhseEntry.SETRANGE("Location Code",Code);
                                                                  WhseEntry.CALCSUMS("Qty. (Base)");
                                                                  IF WhseEntry."Qty. (Base)" <> 0 THEN
                                                                    ERROR(Text002,FIELDCAPTION("Bin Mandatory"));
                                                                END;

                                                                IF NOT "Bin Mandatory" THEN BEGIN
                                                                  "Open Shop Floor Bin Code" := '';
                                                                  "To-Production Bin Code" := '';
                                                                  "From-Production Bin Code" := '';
                                                                  "Adjustment Bin Code" := '';
                                                                  "Receipt Bin Code" := '';
                                                                  "Shipment Bin Code" := '';
                                                                  "Cross-Dock Bin Code" := '';
                                                                  "To-Assembly Bin Code" := '';
                                                                  "From-Assembly Bin Code" := '';
                                                                  WhseIntegrationMgt.CheckLocationOnManufBins(Rec);
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 5771=R }
    { 5733;   ;Directed Put-away and Pick;Boolean ;OnValidate=VAR
                                                                WhseActivHeader@1002 : Record 5766;
                                                                WhseShptHeader@1001 : Record 7320;
                                                                WhseRcptHeader@1000 : Record 7316;
                                                              BEGIN
                                                                WhseActivHeader.SETRANGE("Location Code",Code);
                                                                IF NOT WhseActivHeader.ISEMPTY THEN
                                                                  ERROR(Text014,FIELDCAPTION("Directed Put-away and Pick"),WhseActivHeader.TABLECAPTION);

                                                                WhseRcptHeader.SETCURRENTKEY("Location Code");
                                                                WhseRcptHeader.SETRANGE("Location Code",Code);
                                                                IF NOT WhseRcptHeader.ISEMPTY THEN
                                                                  ERROR(Text014,FIELDCAPTION("Directed Put-away and Pick"),WhseRcptHeader.TABLECAPTION);

                                                                WhseShptHeader.SETCURRENTKEY("Location Code");
                                                                WhseShptHeader.SETRANGE("Location Code",Code);
                                                                IF NOT WhseShptHeader.ISEMPTY THEN
                                                                  ERROR(Text014,FIELDCAPTION("Directed Put-away and Pick"),WhseShptHeader.TABLECAPTION);

                                                                IF "Directed Put-away and Pick" THEN BEGIN
                                                                  TESTFIELD("Use As In-Transit",FALSE);
                                                                  TESTFIELD("Bin Mandatory");
                                                                  VALIDATE("Require Receive",TRUE);
                                                                  VALIDATE("Require Shipment",TRUE);
                                                                  VALIDATE("Require Put-away",TRUE);
                                                                  VALIDATE("Require Pick",TRUE);
                                                                  VALIDATE("Use Cross-Docking",TRUE);
                                                                  "Default Bin Selection" := "Default Bin Selection"::" ";
                                                                END ELSE
                                                                  VALIDATE("Adjustment Bin Code",'');

                                                                IF (NOT "Directed Put-away and Pick") AND xRec."Directed Put-away and Pick" THEN BEGIN
                                                                  "Default Bin Selection" := "Default Bin Selection"::"Fixed Bin";
                                                                  "Use Put-away Worksheet" := FALSE;
                                                                  VALIDATE("Use Cross-Docking",FALSE);
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 5771=R }
    { 5734;   ;Default Bin Selection;Option       ;OnValidate=BEGIN
                                                                IF ("Default Bin Selection" <> xRec."Default Bin Selection") AND ("Default Bin Selection" = "Default Bin Selection"::" ") THEN
                                                                  TESTFIELD("Directed Put-away and Pick");
                                                              END;

                                                   AccessByPermission=TableData 5771=R;
                                                   OptionString=[ ,Fixed Bin,Last-Used Bin] }
    { 5790;   ;Outbound Whse. Handling Time;DateFormula;
                                                   AccessByPermission=TableData 14=R }
    { 5791;   ;Inbound Whse. Handling Time;DateFormula;
                                                   AccessByPermission=TableData 14=R }
    { 7305;   ;Put-away Template Code;Code10      ;TableRelation="Put-away Template Header" }
    { 7306;   ;Use Put-away Worksheet;Boolean     ;AccessByPermission=TableData 5771=R }
    { 7307;   ;Pick According to FEFO;Boolean     ;AccessByPermission=TableData 5771=R }
    { 7308;   ;Allow Breakbulk     ;Boolean       ;AccessByPermission=TableData 5771=R }
    { 7309;   ;Bin Capacity Policy ;Option        ;AccessByPermission=TableData 5771=R;
                                                   OptionString=Never Check Capacity,Allow More Than Max. Capacity,Prohibit More Than Max. Cap. }
    { 7313;   ;Open Shop Floor Bin Code;Code20    ;TableRelation=Bin.Code WHERE (Location Code=FIELD(Code));
                                                   OnValidate=VAR
                                                                WhseIntegrationMgt@1000 : Codeunit 7317;
                                                              BEGIN
                                                                WhseIntegrationMgt.CheckBinCode(Code,
                                                                  "Open Shop Floor Bin Code",
                                                                  FIELDCAPTION("Open Shop Floor Bin Code"),
                                                                  DATABASE::Location,Code);
                                                              END;
                                                               }
    { 7314;   ;To-Production Bin Code;Code20      ;TableRelation=Bin.Code WHERE (Location Code=FIELD(Code));
                                                   OnValidate=VAR
                                                                WhseIntegrationMgt@1000 : Codeunit 7317;
                                                              BEGIN
                                                                WhseIntegrationMgt.CheckBinCode(Code,
                                                                  "To-Production Bin Code",
                                                                  FIELDCAPTION("To-Production Bin Code"),
                                                                  DATABASE::Location,Code);
                                                              END;
                                                               }
    { 7315;   ;From-Production Bin Code;Code20    ;TableRelation=Bin.Code WHERE (Location Code=FIELD(Code));
                                                   OnValidate=VAR
                                                                WhseIntegrationMgt@1000 : Codeunit 7317;
                                                              BEGIN
                                                                WhseIntegrationMgt.CheckBinCode(Code,
                                                                  "From-Production Bin Code",
                                                                  FIELDCAPTION("From-Production Bin Code"),
                                                                  DATABASE::Location,Code);
                                                              END;
                                                               }
    { 7317;   ;Adjustment Bin Code ;Code20        ;TableRelation=Bin.Code WHERE (Location Code=FIELD(Code));
                                                   OnValidate=BEGIN
                                                                IF "Adjustment Bin Code" <> xRec."Adjustment Bin Code" THEN BEGIN
                                                                  IF "Adjustment Bin Code" = '' THEN
                                                                    CheckEmptyBin(
                                                                      xRec."Adjustment Bin Code",FIELDCAPTION("Adjustment Bin Code"))
                                                                  ELSE
                                                                    CheckEmptyBin(
                                                                      "Adjustment Bin Code",FIELDCAPTION("Adjustment Bin Code"));

                                                                  CheckWhseAdjmtJnl;
                                                                END;
                                                              END;
                                                               }
    { 7319;   ;Always Create Put-away Line;Boolean;AccessByPermission=TableData 5771=R }
    { 7320;   ;Always Create Pick Line;Boolean    ;AccessByPermission=TableData 5771=R }
    { 7321;   ;Special Equipment   ;Option        ;AccessByPermission=TableData 5771=R;
                                                   OptionString=[ ,According to Bin,According to SKU/Item] }
    { 7323;   ;Receipt Bin Code    ;Code20        ;TableRelation=Bin.Code WHERE (Location Code=FIELD(Code)) }
    { 7325;   ;Shipment Bin Code   ;Code20        ;TableRelation=Bin.Code WHERE (Location Code=FIELD(Code)) }
    { 7326;   ;Cross-Dock Bin Code ;Code20        ;TableRelation=Bin.Code WHERE (Location Code=FIELD(Code)) }
    { 7330;   ;To-Assembly Bin Code;Code20        ;TableRelation=Bin.Code WHERE (Location Code=FIELD(Code));
                                                   OnValidate=VAR
                                                                WhseIntegrationMgt@1000 : Codeunit 7317;
                                                              BEGIN
                                                                WhseIntegrationMgt.CheckBinCode(Code,
                                                                  "To-Assembly Bin Code",
                                                                  FIELDCAPTION("To-Assembly Bin Code"),
                                                                  DATABASE::Location,Code);
                                                              END;
                                                               }
    { 7331;   ;From-Assembly Bin Code;Code20      ;TableRelation=Bin.Code WHERE (Location Code=FIELD(Code));
                                                   OnValidate=VAR
                                                                WhseIntegrationMgt@1000 : Codeunit 7317;
                                                              BEGIN
                                                                WhseIntegrationMgt.CheckBinCode(Code,
                                                                  "From-Assembly Bin Code",
                                                                  FIELDCAPTION("From-Assembly Bin Code"),
                                                                  DATABASE::Location,Code);
                                                              END;
                                                               }
    { 7332;   ;Asm.-to-Order Shpt. Bin Code;Code20;TableRelation=Bin.Code WHERE (Location Code=FIELD(Code));
                                                   OnValidate=VAR
                                                                WhseIntegrationMgt@1000 : Codeunit 7317;
                                                              BEGIN
                                                                WhseIntegrationMgt.CheckBinCode(Code,
                                                                  "Asm.-to-Order Shpt. Bin Code",
                                                                  FIELDCAPTION("Asm.-to-Order Shpt. Bin Code"),
                                                                  DATABASE::Location,Code);
                                                              END;
                                                               }
    { 7600;   ;Base Calendar Code  ;Code10        ;TableRelation="Base Calendar" }
    { 7700;   ;Use ADCS            ;Boolean       ;AccessByPermission=TableData 7700=R }
    { 50000;  ;Cleartax Owner ID   ;Text100       ;DataClassification=ToBeClassified }
    { 50001;  ;MSME No.            ;Code20        ;DataClassification=ToBeClassified }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
    {    ;Name                                     }
    {    ;Use As In-Transit,Bin Mandatory          }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Bin@1000 : Record 7354;
      PostCode@1001 : Record 225;
      WhseSetup@1002 : Record 5769;
      InvtSetup@1003 : Record 313;
      Location@1004 : Record 14;
      CustomizedCalendarChange@1023 : Record 7602;
      Text000@1005 : TextConst 'ENU=You cannot delete the %1 %2, because they contain items.';
      Text001@1006 : TextConst 'ENU=You cannot delete the %1 %2, because one or more Warehouse Activity Lines exist for this %1.';
      Text002@1007 : TextConst 'ENU=%1 must be Yes, because the bins contain items.';
      Text003@1009 : TextConst 'ENU=Cancelled.';
      Text004@1010 : TextConst 'ENU=The total quantity of items in the warehouse is 0, but the Adjustment Bin contains a negative quantity and other bins contain a positive quantity.\';
      Text005@1012 : TextConst 'ENU=Do you still want to delete this %1?';
      Text006@1011 : TextConst 'ENU=You cannot change the %1 until the inventory stored in %2 %3 is 0.';
      Text007@1013 : TextConst 'ENU=You have to delete all Adjustment Warehouse Journal Lines first before you can change the %1.';
      Text008@1008 : TextConst 'ENU=%1 must be %2, because one or more %3 exist.';
      Text009@1014 : TextConst 'ENU=You cannot change %1 because there are one or more open ledger entries on this location.';
      Text010@1015 : TextConst 'ENU=Checking item ledger entries for open entries...';
      Text011@1016 : TextConst 'ENU=You cannot change the %1 to %2 until the inventory stored in this bin is 0.';
      Text012@1017 : TextConst 'ENU=Before you can use Online Map, you must fill in the Online Map Setup window.\See Setting Up Online Map in Help.';
      Text013@1018 : TextConst 'ENU=You cannot delete %1 because there are one or more ledger entries on this location.';
      Text014@1019 : TextConst 'ENU=You cannot change %1 because one or more %2 exist.';
      CannotDeleteLocSKUExistErr@1021 : TextConst '@@@=%1: Field(Code);ENU=You cannot delete %1 because one or more stockkeeping units exist at this location.;ENN=You cannot delete %1 because one or more stockkeeping units exist at this location.';
      CalendarManagement@1022 : Codeunit 7600;
      UnspecifiedLocationLbl@1020 : TextConst 'ENU=(Unspecified Location);ENN=(Unspecified Location)';

    [External]
    PROCEDURE RequireShipment@5(LocationCode@1000 : Code[10]) : Boolean;
    BEGIN
      IF Location.GET(LocationCode) THEN
        EXIT(Location."Require Shipment");
      WhseSetup.GET;
      EXIT(WhseSetup."Require Shipment");
    END;

    [External]
    PROCEDURE RequirePicking@1(LocationCode@1000 : Code[10]) : Boolean;
    BEGIN
      IF Location.GET(LocationCode) THEN
        EXIT(Location."Require Pick");
      WhseSetup.GET;
      EXIT(WhseSetup."Require Pick");
    END;

    [External]
    PROCEDURE RequireReceive@4(LocationCode@1000 : Code[10]) : Boolean;
    BEGIN
      IF Location.GET(LocationCode) THEN
        EXIT(Location."Require Receive");
      WhseSetup.GET;
      EXIT(WhseSetup."Require Receive");
    END;

    [External]
    PROCEDURE RequirePutaway@2(LocationCode@1000 : Code[10]) : Boolean;
    BEGIN
      IF Location.GET(LocationCode) THEN
        EXIT(Location."Require Put-away");
      WhseSetup.GET;
      EXIT(WhseSetup."Require Put-away");
    END;

    [External]
    PROCEDURE GetLocationSetup@3(LocationCode@1000 : Code[10];VAR Location2@1001 : Record 14) : Boolean;
    BEGIN
      IF NOT GET(LocationCode) THEN
        WITH Location2 DO BEGIN
          INIT;
          WhseSetup.GET;
          InvtSetup.GET;
          Code := LocationCode;
          "Use As In-Transit" := FALSE;
          "Require Put-away" := WhseSetup."Require Put-away";
          "Require Pick" := WhseSetup."Require Pick";
          "Outbound Whse. Handling Time" := InvtSetup."Outbound Whse. Handling Time";
          "Inbound Whse. Handling Time" := InvtSetup."Inbound Whse. Handling Time";
          "Require Receive" := WhseSetup."Require Receive";
          "Require Shipment" := WhseSetup."Require Shipment";
          EXIT(FALSE);
        END;

      Location2 := Rec;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE WMSCheckWarehouse@7300();
    VAR
      Zone@1005 : Record 7300;
      Bin@1006 : Record 7354;
      BinContent@1004 : Record 7302;
      WhseActivLine@1003 : Record 5767;
      WarehouseEntry@1002 : Record 7312;
      WarehouseEntry2@1001 : Record 7312;
      WhseJnlLine@1000 : Record 7311;
      ItemLedgerEntry@1007 : Record 32;
    BEGIN
      ItemLedgerEntry.SETRANGE("Location Code",Code);
      ItemLedgerEntry.SETRANGE(Open,TRUE);
      IF NOT ItemLedgerEntry.ISEMPTY THEN
        ERROR(Text013,Code);

      WarehouseEntry.SETRANGE("Location Code",Code);
      WarehouseEntry.CALCSUMS("Qty. (Base)");
      IF WarehouseEntry."Qty. (Base)" = 0 THEN BEGIN
        IF "Adjustment Bin Code" <> '' THEN BEGIN
          WarehouseEntry2.SETRANGE("Bin Code","Adjustment Bin Code");
          WarehouseEntry2.SETRANGE("Location Code",Code);
          WarehouseEntry2.CALCSUMS("Qty. (Base)");
          IF WarehouseEntry2."Qty. (Base)" < 0 THEN
            IF NOT CONFIRM(Text004 + Text005,FALSE,TABLECAPTION) THEN
              ERROR(Text003)
        END;
      END ELSE
        ERROR(Text000,TABLECAPTION,Code);

      WhseActivLine.SETRANGE("Location Code",Code);
      WhseActivLine.SETRANGE("Activity Type",WhseActivLine."Activity Type"::Movement);
      WhseActivLine.SETFILTER("Qty. Outstanding",'<>0');
      IF NOT WhseActivLine.ISEMPTY THEN
        ERROR(Text001,TABLECAPTION,Code);

      WhseJnlLine.SETRANGE("Location Code",Code);
      WhseJnlLine.SETFILTER(Quantity,'<>0');
      IF NOT WhseJnlLine.ISEMPTY THEN
        ERROR(Text001,TABLECAPTION,Code);

      Zone.SETRANGE("Location Code",Code);
      Zone.DELETEALL;
      Bin.SETRANGE("Location Code",Code);
      Bin.DELETEALL;
      BinContent.SETRANGE("Location Code",Code);
      BinContent.DELETEALL;
    END;

    LOCAL PROCEDURE CheckEmptyBin@7302(BinCode@1001 : Code[20];CaptionOfField@1002 : Text[30]);
    VAR
      WarehouseEntry@1003 : Record 7312;
      WhseEntry2@1000 : Record 7312;
    BEGIN
      WarehouseEntry.SETCURRENTKEY("Bin Code","Location Code","Item No.");
      WarehouseEntry.SETRANGE("Bin Code",BinCode);
      WarehouseEntry.SETRANGE("Location Code",Code);
      IF WarehouseEntry.FINDFIRST THEN
        REPEAT
          WarehouseEntry.SETRANGE("Item No.",WarehouseEntry."Item No.");

          WhseEntry2.SETCURRENTKEY("Item No.","Bin Code","Location Code");
          WhseEntry2.COPYFILTERS(WarehouseEntry);
          WhseEntry2.CALCSUMS("Qty. (Base)");
          IF WhseEntry2."Qty. (Base)" <> 0 THEN BEGIN
            IF (BinCode = "Adjustment Bin Code") AND (xRec."Adjustment Bin Code" = '') THEN
              ERROR(Text011,CaptionOfField,BinCode);

            ERROR(Text006,CaptionOfField,Bin.TABLECAPTION,BinCode);
          END;

          WarehouseEntry.FINDLAST;
          WarehouseEntry.SETRANGE("Item No.");
        UNTIL WarehouseEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE CheckWhseAdjmtJnl@7303();
    VAR
      WhseJnlTemplate@1002 : Record 7309;
      WhseJnlLine@1003 : Record 7311;
    BEGIN
      WhseJnlTemplate.SETRANGE(Type,WhseJnlTemplate.Type::Item);
      IF WhseJnlTemplate.FIND('-') THEN
        REPEAT
          WhseJnlLine.SETRANGE("Journal Template Name",WhseJnlTemplate.Name);
          WhseJnlLine.SETRANGE("Location Code",Code);
          IF NOT WhseJnlLine.ISEMPTY THEN
            ERROR(
              Text007,
              FIELDCAPTION("Adjustment Bin Code"));
        UNTIL WhseJnlTemplate.NEXT = 0;
    END;

    [External]
    PROCEDURE GetRequirementText@6(FieldNumber@1000 : Integer) : Text[50];
    VAR
      Text000@1002 : TextConst 'ENU=Shipment,Receive,Pick,Put-Away';
    BEGIN
      CASE FieldNumber OF
        FIELDNO("Require Shipment"):
          EXIT(SELECTSTR(1,Text000));
        FIELDNO("Require Receive"):
          EXIT(SELECTSTR(2,Text000));
        FIELDNO("Require Pick"):
          EXIT(SELECTSTR(3,Text000));
        FIELDNO("Require Put-away"):
          EXIT(SELECTSTR(4,Text000));
      END;
    END;

    [External]
    PROCEDURE DisplayMap@7();
    VAR
      MapPoint@1001 : Record 800;
      MapMgt@1000 : Codeunit 802;
    BEGIN
      IF MapPoint.FINDFIRST THEN
        MapMgt.MakeSelection(DATABASE::Location,GETPOSITION)
      ELSE
        MESSAGE(Text012);
    END;

    [External]
    PROCEDURE IsBWReceive@8() : Boolean;
    BEGIN
      EXIT("Bin Mandatory" AND (NOT "Directed Put-away and Pick") AND "Require Receive");
    END;

    [External]
    PROCEDURE IsBWShip@12() : Boolean;
    BEGIN
      EXIT("Bin Mandatory" AND (NOT "Directed Put-away and Pick") AND "Require Shipment");
    END;

    [External]
    PROCEDURE IsBinBWReceiveOrShip@11(BinCode@1000 : Code[20]) : Boolean;
    BEGIN
      EXIT(("Receipt Bin Code" <> '') AND (BinCode = "Receipt Bin Code") OR
        ("Shipment Bin Code" <> '') AND (BinCode = "Shipment Bin Code"));
    END;

    [External]
    PROCEDURE IsInTransit@10(LocationCode@1000 : Code[10]) : Boolean;
    BEGIN
      IF Location.GET(LocationCode) THEN
        EXIT(Location."Use As In-Transit");
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE CreateInboundWhseRequest@13();
    VAR
      TransferHeader@1002 : Record 5740;
      TransferLine@1004 : Record 5741;
      WarehouseRequest@1000 : Record 5765;
      WhseTransferRelease@1003 : Codeunit 5773;
    BEGIN
      TransferLine.SETRANGE("Transfer-to Code",Code);
      IF TransferLine.FINDSET THEN
        REPEAT
          IF TransferLine."Quantity Received" <> TransferLine."Quantity Shipped" THEN BEGIN
            TransferHeader.GET(TransferLine."Document No.");
            WhseTransferRelease.InitializeWhseRequest(WarehouseRequest,TransferHeader,TransferHeader.Status);
            WhseTransferRelease.CreateInboundWhseRequest(WarehouseRequest,TransferHeader);

            TransferLine.SETRANGE("Document No.",TransferLine."Document No.");
            TransferLine.FINDLAST;
            TransferLine.SETRANGE("Document No.");
          END;
        UNTIL TransferLine.NEXT = 0;
    END;

    [External]
    PROCEDURE GetLocationsIncludingUnspecifiedLocation@14(IncludeOnlyUnspecifiedLocation@1001 : Boolean;ExcludeInTransitLocations@1000 : Boolean);
    VAR
      Location@1002 : Record 14;
    BEGIN
      INIT;
      VALIDATE(Name,UnspecifiedLocationLbl);
      INSERT;

      IF NOT IncludeOnlyUnspecifiedLocation THEN BEGIN
        IF ExcludeInTransitLocations THEN
          Location.SETRANGE("Use As In-Transit",FALSE);

        IF Location.FINDSET THEN
          REPEAT
            INIT;
            COPY(Location);
            INSERT;
          UNTIL Location.NEXT = 0;
      END;

      FINDFIRST;
    END;

    BEGIN
    END.
  }
}

OBJECT Table 15 G/L Account
{
  OBJECT-PROPERTIES
  {
    Date=02-10-21;
    Time=12:00:00;
    Modified=Yes;
    Version List=NAVW114.30;
  }
  PROPERTIES
  {
    DataCaptionFields=No.,Name;
    OnInsert=BEGIN
               DimMgt.UpdateDefaultDim(DATABASE::"G/L Account","No.",
                 "Global Dimension 1 Code","Global Dimension 2 Code");

               SetLastModifiedDateTime;

               IF CostAccSetup.GET THEN
                 CostAccMgt.UpdateCostTypeFromGLAcc(Rec,xRec,0);

               IF Indentation < 0 THEN
                 Indentation := 0;
             END;

    OnModify=BEGIN
               SetLastModifiedDateTime;

               IF CostAccSetup.GET THEN BEGIN
                 IF CurrFieldNo <> 0 THEN
                   CostAccMgt.UpdateCostTypeFromGLAcc(Rec,xRec,1)
                 ELSE
                   CostAccMgt.UpdateCostTypeFromGLAcc(Rec,xRec,0);
               END;

               IF Indentation < 0 THEN
                 Indentation := 0;
             END;

    OnDelete=VAR
               GLBudgetEntry@1000 : Record 96;
               CommentLine@1001 : Record 97;
               ExtTextHeader@1002 : Record 279;
               AnalysisViewEntry@1003 : Record 365;
               AnalysisViewBudgetEntry@1004 : Record 366;
               MyAccount@1006 : Record 9153;
               MoveEntries@1005 : Codeunit 361;
             BEGIN
               MoveEntries.MoveGLEntries(Rec);

               GLBudgetEntry.SETCURRENTKEY("Budget Name","G/L Account No.");
               GLBudgetEntry.SETRANGE("G/L Account No.","No.");
               GLBudgetEntry.DELETEALL(TRUE);

               CommentLine.SETRANGE("Table Name",CommentLine."Table Name"::"G/L Account");
               CommentLine.SETRANGE("No.","No.");
               CommentLine.DELETEALL;

               ExtTextHeader.SETRANGE("Table Name",ExtTextHeader."Table Name"::"G/L Account");
               ExtTextHeader.SETRANGE("No.","No.");
               ExtTextHeader.DELETEALL(TRUE);

               AnalysisViewEntry.SETRANGE("Account No.","No.");
               AnalysisViewEntry.DELETEALL;

               AnalysisViewBudgetEntry.SETRANGE("G/L Account No.","No.");
               AnalysisViewBudgetEntry.DELETEALL;

               MyAccount.SETRANGE("Account No.","No.");
               MyAccount.DELETEALL;

               DimMgt.DeleteDefaultDim(DATABASE::"G/L Account","No.");
             END;

    OnRename=VAR
               SalesLine@1000 : Record 37;
               PurchaseLine@1001 : Record 39;
             BEGIN
               SalesLine.RenameNo(SalesLine.Type::"G/L Account",xRec."No.","No.");
               PurchaseLine.RenameNo(PurchaseLine.Type::"G/L Account",xRec."No.","No.");
               DimMgt.RenameDefaultDim(DATABASE::"G/L Account",xRec."No.","No.");

               SetLastModifiedDateTime;

               IF CostAccSetup.READPERMISSION THEN
                 CostAccMgt.UpdateCostTypeFromGLAcc(Rec,xRec,3);
             END;

    CaptionML=[ENU=G/L Account;
               ENN=G/L Account];
    LookupPageID=Page18;
    DrillDownPageID=Page16;
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;AltSearchField=Search Name;
                                                   CaptionML=[ENU=No.;
                                                              ENN=No.];
                                                   NotBlank=Yes }
    { 2   ;   ;Name                ;Text100       ;OnValidate=BEGIN
                                                                IF ("Search Name" = UPPERCASE(xRec.Name)) OR ("Search Name" = '') THEN
                                                                  "Search Name" := Name;
                                                              END;

                                                   CaptionML=[ENU=Name;
                                                              ENN=Name];
                                                   Description=AD_SD }
    { 3   ;   ;Search Name         ;Code100       ;CaptionML=[ENU=Search Name;
                                                              ENN=Search Name];
                                                   Description=AD_SD }
    { 4   ;   ;Account Type        ;Option        ;OnValidate=VAR
                                                                GLEntry@1000 : Record 17;
                                                                GLBudgetEntry@1001 : Record 96;
                                                              BEGIN
                                                                IF ("Account Type" <> "Account Type"::Posting) AND
                                                                   (xRec."Account Type" = xRec."Account Type"::Posting)
                                                                THEN BEGIN
                                                                  GLEntry.SETRANGE("G/L Account No.","No.");
                                                                  IF NOT GLEntry.ISEMPTY THEN
                                                                    ERROR(
                                                                      Text000,
                                                                      FIELDCAPTION("Account Type"));
                                                                  GLBudgetEntry.SETRANGE("G/L Account No.","No.");
                                                                  IF NOT GLBudgetEntry.ISEMPTY THEN
                                                                    ERROR(
                                                                      Text001,
                                                                      FIELDCAPTION("Account Type"));
                                                                END;
                                                                Totaling := '';
                                                                IF "Account Type" = "Account Type"::Posting THEN BEGIN
                                                                  IF "Account Type" <> xRec."Account Type" THEN
                                                                    "Direct Posting" := TRUE;
                                                                END ELSE
                                                                  "Direct Posting" := FALSE;
                                                              END;

                                                   CaptionML=[ENU=Account Type;
                                                              ENN=Account Type];
                                                   OptionCaptionML=[ENU=Posting,Heading,Total,Begin-Total,End-Total;
                                                                    ENN=Posting,Heading,Total,Begin-Total,End-Total];
                                                   OptionString=Posting,Heading,Total,Begin-Total,End-Total }
    { 6   ;   ;Global Dimension 1 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Global Dimension 1 Code");
                                                              END;

                                                   CaptionML=[ENU=Global Dimension 1 Code;
                                                              ENN=Global Dimension 1 Code];
                                                   CaptionClass='1,1,1' }
    { 7   ;   ;Global Dimension 2 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Global Dimension 2 Code");
                                                              END;

                                                   CaptionML=[ENU=Global Dimension 2 Code;
                                                              ENN=Global Dimension 2 Code];
                                                   CaptionClass='1,1,2' }
    { 8   ;   ;Account Category    ;Option        ;OnValidate=BEGIN
                                                                IF "Account Category" = "Account Category"::" " THEN
                                                                  EXIT;

                                                                IF "Account Category" IN ["Account Category"::Income,"Account Category"::"Cost of Goods Sold","Account Category"::Expense] THEN
                                                                  "Income/Balance" := "Income/Balance"::"Income Statement"
                                                                ELSE
                                                                  "Income/Balance" := "Income/Balance"::"Balance Sheet";
                                                                IF "Account Category" <> xRec."Account Category" THEN
                                                                  "Account Subcategory Entry No." := 0;

                                                                UpdateAccountCategoryOfSubAccounts;
                                                              END;

                                                   CaptionML=[ENU=Account Category;
                                                              ENN=Account Category];
                                                   OptionCaptionML=[ENU=" ,Assets,Liabilities,Equity,Income,Cost of Goods Sold,Expense";
                                                                    ENN=" ,Assets,Liabilities,Equity,Income,Cost of Goods Sold,Expense"];
                                                   OptionString=[ ,Assets,Liabilities,Equity,Income,Cost of Goods Sold,Expense];
                                                   BlankZero=Yes }
    { 9   ;   ;Income/Balance      ;Option        ;OnValidate=VAR
                                                                CostType@1000 : Record 1103;
                                                              BEGIN
                                                                IF ("Income/Balance" = "Income/Balance"::"Balance Sheet") AND ("Cost Type No." <> '') THEN BEGIN
                                                                  IF CostType.GET("No.") THEN BEGIN
                                                                    CostType."G/L Account Range" := '';
                                                                    CostType.MODIFY;
                                                                  END;
                                                                  "Cost Type No." := '';
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Income/Balance;
                                                              ENN=Income/Balance];
                                                   OptionCaptionML=[ENU=Income Statement,Balance Sheet;
                                                                    ENN=Income Statement,Balance Sheet];
                                                   OptionString=Income Statement,Balance Sheet }
    { 10  ;   ;Debit/Credit        ;Option        ;CaptionML=[ENU=Debit/Credit;
                                                              ENN=Debit/Credit];
                                                   OptionCaptionML=[ENU=Both,Debit,Credit;
                                                                    ENN=Both,Debit,Credit];
                                                   OptionString=Both,Debit,Credit }
    { 11  ;   ;No. 2               ;Code20        ;CaptionML=[ENU=No. 2;
                                                              ENN=No. 2] }
    { 12  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Comment Line" WHERE (Table Name=CONST(G/L Account),
                                                                                           No.=FIELD(No.)));
                                                   CaptionML=[ENU=Comment;
                                                              ENN=Comment];
                                                   Editable=No }
    { 13  ;   ;Blocked             ;Boolean       ;CaptionML=[ENU=Blocked;
                                                              ENN=Blocked] }
    { 14  ;   ;Direct Posting      ;Boolean       ;InitValue=Yes;
                                                   CaptionML=[ENU=Direct Posting;
                                                              ENN=Direct Posting] }
    { 16  ;   ;Reconciliation Account;Boolean     ;AccessByPermission=TableData 270=R;
                                                   CaptionML=[ENU=Reconciliation Account;
                                                              ENN=Reconciliation Account] }
    { 17  ;   ;New Page            ;Boolean       ;CaptionML=[ENU=New Page;
                                                              ENN=New Page] }
    { 18  ;   ;No. of Blank Lines  ;Integer       ;CaptionML=[ENU=No. of Blank Lines;
                                                              ENN=No. of Blank Lines];
                                                   MinValue=0 }
    { 19  ;   ;Indentation         ;Integer       ;OnValidate=BEGIN
                                                                IF Indentation < 0 THEN
                                                                  Indentation := 0;
                                                              END;

                                                   CaptionML=[ENU=Indentation;
                                                              ENN=Indentation];
                                                   MinValue=0 }
    { 25  ;   ;Last Modified Date Time;DateTime   ;CaptionML=[ENU=Last Modified Date Time;
                                                              ENN=Last Modified Date Time];
                                                   Editable=No }
    { 26  ;   ;Last Date Modified  ;Date          ;CaptionML=[ENU=Last Date Modified;
                                                              ENN=Last Date Modified];
                                                   Editable=No }
    { 28  ;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Date Filter;
                                                              ENN=Date Filter] }
    { 29  ;   ;Global Dimension 1 Filter;Code20   ;FieldClass=FlowFilter;
                                                   TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   CaptionML=[ENU=Global Dimension 1 Filter;
                                                              ENN=Global Dimension 1 Filter];
                                                   CaptionClass='1,3,1' }
    { 30  ;   ;Global Dimension 2 Filter;Code20   ;FieldClass=FlowFilter;
                                                   TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   CaptionML=[ENU=Global Dimension 2 Filter;
                                                              ENN=Global Dimension 2 Filter];
                                                   CaptionClass='1,3,2' }
    { 31  ;   ;Balance at Date     ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("G/L Entry".Amount WHERE (G/L Account No.=FIELD(No.),
                                                                                             G/L Account No.=FIELD(FILTER(Totaling)),
                                                                                             Business Unit Code=FIELD(Business Unit Filter),
                                                                                             Global Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                             Global Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                             Posting Date=FIELD(UPPERLIMIT(Date Filter)),
                                                                                             Dimension Set ID=FIELD(Dimension Set ID Filter)));
                                                   CaptionML=[ENU=Balance at Date;
                                                              ENN=Balance at Date];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 32  ;   ;Net Change          ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("G/L Entry".Amount WHERE (G/L Account No.=FIELD(No.),
                                                                                             G/L Account No.=FIELD(FILTER(Totaling)),
                                                                                             Business Unit Code=FIELD(Business Unit Filter),
                                                                                             Global Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                             Global Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                             Posting Date=FIELD(Date Filter),
                                                                                             Dimension Set ID=FIELD(Dimension Set ID Filter)));
                                                   CaptionML=[ENU=Net Change;
                                                              ENN=Net Change];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 33  ;   ;Budgeted Amount     ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("G/L Budget Entry".Amount WHERE (G/L Account No.=FIELD(No.),
                                                                                                    G/L Account No.=FIELD(FILTER(Totaling)),
                                                                                                    Business Unit Code=FIELD(Business Unit Filter),
                                                                                                    Global Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                    Global Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                    Date=FIELD(Date Filter),
                                                                                                    Budget Name=FIELD(Budget Filter),
                                                                                                    Dimension Set ID=FIELD(Dimension Set ID Filter)));
                                                   CaptionML=[ENU=Budgeted Amount;
                                                              ENN=Budgeted Amount];
                                                   AutoFormatType=1 }
    { 34  ;   ;Totaling            ;Text250       ;OnValidate=BEGIN
                                                                IF NOT IsTotaling THEN
                                                                  FIELDERROR("Account Type");
                                                                CALCFIELDS(Balance);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Totaling;
                                                              ENN=Totalling] }
    { 35  ;   ;Budget Filter       ;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation="G/L Budget Name";
                                                   CaptionML=[ENU=Budget Filter;
                                                              ENN=Budget Filter] }
    { 36  ;   ;Balance             ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("G/L Entry".Amount WHERE (G/L Account No.=FIELD(No.),
                                                                                             G/L Account No.=FIELD(FILTER(Totaling)),
                                                                                             Business Unit Code=FIELD(Business Unit Filter),
                                                                                             Global Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                             Global Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                             Dimension Set ID=FIELD(Dimension Set ID Filter)));
                                                   CaptionML=[ENU=Balance;
                                                              ENN=Balance];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 37  ;   ;Budget at Date      ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("G/L Budget Entry".Amount WHERE (G/L Account No.=FIELD(No.),
                                                                                                    G/L Account No.=FIELD(FILTER(Totaling)),
                                                                                                    Business Unit Code=FIELD(Business Unit Filter),
                                                                                                    Global Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                    Global Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                    Date=FIELD(UPPERLIMIT(Date Filter)),
                                                                                                    Budget Name=FIELD(Budget Filter),
                                                                                                    Dimension Set ID=FIELD(Dimension Set ID Filter)));
                                                   CaptionML=[ENU=Budget at Date;
                                                              ENN=Budget at Date];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 39  ;   ;Consol. Translation Method;Option  ;OnValidate=VAR
                                                                ConflictGLAcc@1000 : Record 15;
                                                              BEGIN
                                                                IF TranslationMethodConflict(ConflictGLAcc) THEN
                                                                  IF ConflictGLAcc.GETFILTER("Consol. Debit Acc.") <> '' THEN
                                                                    MESSAGE(
                                                                      Text002,ConflictGLAcc.TABLECAPTION,ConflictGLAcc."No.",ConflictGLAcc.FIELDCAPTION("Consol. Debit Acc."),
                                                                      ConflictGLAcc.FIELDCAPTION("Consol. Translation Method"),ConflictGLAcc."Consol. Translation Method")
                                                                  ELSE
                                                                    MESSAGE(
                                                                      Text002,ConflictGLAcc.TABLECAPTION,ConflictGLAcc."No.",ConflictGLAcc.FIELDCAPTION("Consol. Credit Acc."),
                                                                      ConflictGLAcc.FIELDCAPTION("Consol. Translation Method"),ConflictGLAcc."Consol. Translation Method");
                                                              END;

                                                   AccessByPermission=TableData 220=R;
                                                   CaptionML=[ENU=Consol. Translation Method;
                                                              ENN=Consol. Translation Method];
                                                   OptionCaptionML=[ENU=Average Rate (Manual),Closing Rate,Historical Rate,Composite Rate,Equity Rate;
                                                                    ENN=Average Rate (Manual),Closing Rate,Historical Rate,Composite Rate,Equity Rate];
                                                   OptionString=Average Rate (Manual),Closing Rate,Historical Rate,Composite Rate,Equity Rate }
    { 40  ;   ;Consol. Debit Acc.  ;Code20        ;OnValidate=VAR
                                                                ConflictGLAcc@1000 : Record 15;
                                                              BEGIN
                                                                IF TranslationMethodConflict(ConflictGLAcc) THEN
                                                                  MESSAGE(
                                                                    Text002,ConflictGLAcc.TABLECAPTION,ConflictGLAcc."No.",ConflictGLAcc.FIELDCAPTION("Consol. Debit Acc."),
                                                                    ConflictGLAcc.FIELDCAPTION("Consol. Translation Method"),ConflictGLAcc."Consol. Translation Method");
                                                              END;

                                                   AccessByPermission=TableData 220=R;
                                                   CaptionML=[ENU=Consol. Debit Acc.;
                                                              ENN=Consol. Debit Acc.] }
    { 41  ;   ;Consol. Credit Acc. ;Code20        ;OnValidate=VAR
                                                                ConflictGLAcc@1000 : Record 15;
                                                              BEGIN
                                                                IF TranslationMethodConflict(ConflictGLAcc) THEN
                                                                  MESSAGE(
                                                                    Text002,ConflictGLAcc.TABLECAPTION,ConflictGLAcc."No.",ConflictGLAcc.FIELDCAPTION("Consol. Credit Acc."),
                                                                    ConflictGLAcc.FIELDCAPTION("Consol. Translation Method"),ConflictGLAcc."Consol. Translation Method");
                                                              END;

                                                   AccessByPermission=TableData 220=R;
                                                   CaptionML=[ENU=Consol. Credit Acc.;
                                                              ENN=Consol. Credit Acc.] }
    { 42  ;   ;Business Unit Filter;Code20        ;FieldClass=FlowFilter;
                                                   TableRelation="Business Unit";
                                                   CaptionML=[ENU=Business Unit Filter;
                                                              ENN=Business Unit Filter] }
    { 43  ;   ;Gen. Posting Type   ;Option        ;CaptionML=[ENU=Gen. Posting Type;
                                                              ENN=Gen. Posting Type];
                                                   OptionCaptionML=[ENU=" ,Purchase,Sale";
                                                                    ENN=" ,Purchase,Sale"];
                                                   OptionString=[ ,Purchase,Sale] }
    { 44  ;   ;Gen. Bus. Posting Group;Code20     ;TableRelation="Gen. Business Posting Group";
                                                   OnValidate=VAR
                                                                GenBusPostingGrp@1000 : Record 250;
                                                              BEGIN
                                                                IF xRec."Gen. Bus. Posting Group" <> "Gen. Bus. Posting Group" THEN
                                                                  IF GenBusPostingGrp.ValidateVatBusPostingGroup(GenBusPostingGrp,"Gen. Bus. Posting Group") THEN
                                                                    VALIDATE("VAT Bus. Posting Group",GenBusPostingGrp."Def. VAT Bus. Posting Group");
                                                              END;

                                                   CaptionML=[ENU=Gen. Bus. Posting Group;
                                                              ENN=Gen. Bus. Posting Group] }
    { 45  ;   ;Gen. Prod. Posting Group;Code20    ;TableRelation="Gen. Product Posting Group";
                                                   OnValidate=VAR
                                                                GenProdPostingGrp@1000 : Record 251;
                                                              BEGIN
                                                                IF xRec."Gen. Prod. Posting Group" <> "Gen. Prod. Posting Group" THEN
                                                                  IF GenProdPostingGrp.ValidateVatProdPostingGroup(GenProdPostingGrp,"Gen. Prod. Posting Group") THEN
                                                                    VALIDATE("VAT Prod. Posting Group",GenProdPostingGrp."Def. VAT Prod. Posting Group");
                                                              END;

                                                   CaptionML=[ENU=Gen. Prod. Posting Group;
                                                              ENN=Gen. Prod. Posting Group] }
    { 46  ;   ;Picture             ;BLOB          ;CaptionML=[ENU=Picture;
                                                              ENN=Picture];
                                                   SubType=Bitmap }
    { 47  ;   ;Debit Amount        ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("G/L Entry"."Debit Amount" WHERE (G/L Account No.=FIELD(No.),
                                                                                                     G/L Account No.=FIELD(FILTER(Totaling)),
                                                                                                     Business Unit Code=FIELD(Business Unit Filter),
                                                                                                     Global Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                     Global Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                     Posting Date=FIELD(Date Filter),
                                                                                                     Dimension Set ID=FIELD(Dimension Set ID Filter)));
                                                   CaptionML=[ENU=Debit Amount;
                                                              ENN=Debit Amount];
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 48  ;   ;Credit Amount       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("G/L Entry"."Credit Amount" WHERE (G/L Account No.=FIELD(No.),
                                                                                                      G/L Account No.=FIELD(FILTER(Totaling)),
                                                                                                      Business Unit Code=FIELD(Business Unit Filter),
                                                                                                      Global Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                      Global Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                      Posting Date=FIELD(Date Filter),
                                                                                                      Dimension Set ID=FIELD(Dimension Set ID Filter)));
                                                   CaptionML=[ENU=Credit Amount;
                                                              ENN=Credit Amount];
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 49  ;   ;Automatic Ext. Texts;Boolean       ;CaptionML=[ENU=Automatic Ext. Texts;
                                                              ENN=Automatic Ext. Texts] }
    { 52  ;   ;Budgeted Debit Amount;Decimal      ;FieldClass=FlowField;
                                                   CalcFormula=Sum("G/L Budget Entry".Amount WHERE (G/L Account No.=FIELD(No.),
                                                                                                    G/L Account No.=FIELD(FILTER(Totaling)),
                                                                                                    Business Unit Code=FIELD(Business Unit Filter),
                                                                                                    Global Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                    Global Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                    Date=FIELD(Date Filter),
                                                                                                    Budget Name=FIELD(Budget Filter),
                                                                                                    Dimension Set ID=FIELD(Dimension Set ID Filter)));
                                                   CaptionML=[ENU=Budgeted Debit Amount;
                                                              ENN=Budgeted Debit Amount];
                                                   BlankNumbers=BlankNegAndZero;
                                                   AutoFormatType=1 }
    { 53  ;   ;Budgeted Credit Amount;Decimal     ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("G/L Budget Entry".Amount WHERE (G/L Account No.=FIELD(No.),
                                                                                                     G/L Account No.=FIELD(FILTER(Totaling)),
                                                                                                     Business Unit Code=FIELD(Business Unit Filter),
                                                                                                     Global Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                     Global Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                     Date=FIELD(Date Filter),
                                                                                                     Budget Name=FIELD(Budget Filter),
                                                                                                     Dimension Set ID=FIELD(Dimension Set ID Filter)));
                                                   CaptionML=[ENU=Budgeted Credit Amount;
                                                              ENN=Budgeted Credit Amount];
                                                   BlankNumbers=BlankNegAndZero;
                                                   AutoFormatType=1 }
    { 54  ;   ;Tax Area Code       ;Code20        ;TableRelation="Tax Area";
                                                   CaptionML=[ENU=Tax Area Code;
                                                              ENN=VAT Area Code] }
    { 55  ;   ;Tax Liable          ;Boolean       ;CaptionML=[ENU=Tax Liable;
                                                              ENN=VAT Liable] }
    { 56  ;   ;Tax Group Code      ;Code20        ;TableRelation="Tax Group";
                                                   CaptionML=[ENU=Tax Group Code;
                                                              ENN=VAT Group Code] }
    { 57  ;   ;VAT Bus. Posting Group;Code20      ;TableRelation="VAT Business Posting Group";
                                                   CaptionML=[ENU=VAT Bus. Posting Group;
                                                              ENN=VAT Bus. Posting Group] }
    { 58  ;   ;VAT Prod. Posting Group;Code20     ;TableRelation="VAT Product Posting Group";
                                                   CaptionML=[ENU=VAT Prod. Posting Group;
                                                              ENN=VAT Prod. Posting Group] }
    { 59  ;   ;VAT Amt.            ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("G/L Entry"."VAT Amount" WHERE (G/L Account No.=FIELD(No.),
                                                                                                   G/L Account No.=FIELD(FILTER(Totaling)),
                                                                                                   Business Unit Code=FIELD(Business Unit Filter),
                                                                                                   Global Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                   Global Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                   Posting Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=VAT Amt.;
                                                              ENN=VAT Amt.];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 60  ;   ;Additional-Currency Net Change;Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("G/L Entry"."Additional-Currency Amount" WHERE (G/L Account No.=FIELD(No.),
                                                                                                                   G/L Account No.=FIELD(FILTER(Totaling)),
                                                                                                                   Business Unit Code=FIELD(Business Unit Filter),
                                                                                                                   Global Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                   Global Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                   Posting Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Additional-Currency Net Change;
                                                              ENN=Additional-Currency Net Change];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 61  ;   ;Add.-Currency Balance at Date;Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("G/L Entry"."Additional-Currency Amount" WHERE (G/L Account No.=FIELD(No.),
                                                                                                                   G/L Account No.=FIELD(FILTER(Totaling)),
                                                                                                                   Business Unit Code=FIELD(Business Unit Filter),
                                                                                                                   Global Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                   Global Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                   Posting Date=FIELD(UPPERLIMIT(Date Filter))));
                                                   CaptionML=[ENU=Add.-Currency Balance at Date;
                                                              ENN=Add.-Currency Balance at Date];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 62  ;   ;Additional-Currency Balance;Decimal;FieldClass=FlowField;
                                                   CalcFormula=Sum("G/L Entry"."Additional-Currency Amount" WHERE (G/L Account No.=FIELD(No.),
                                                                                                                   G/L Account No.=FIELD(FILTER(Totaling)),
                                                                                                                   Business Unit Code=FIELD(Business Unit Filter),
                                                                                                                   Global Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                   Global Dimension 2 Code=FIELD(Global Dimension 2 Filter)));
                                                   CaptionML=[ENU=Additional-Currency Balance;
                                                              ENN=Additional-Currency Balance];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 63  ;   ;Exchange Rate Adjustment;Option    ;AccessByPermission=TableData 4=R;
                                                   CaptionML=[ENU=Exchange Rate Adjustment;
                                                              ENN=Exchange Rate Adjustment];
                                                   OptionCaptionML=[ENU=No Adjustment,Adjust Amount,Adjust Additional-Currency Amount;
                                                                    ENN=No Adjustment,Adjust Amount,Adjust Additional-Currency Amount];
                                                   OptionString=No Adjustment,Adjust Amount,Adjust Additional-Currency Amount }
    { 64  ;   ;Add.-Currency Debit Amount;Decimal ;FieldClass=FlowField;
                                                   CalcFormula=Sum("G/L Entry"."Add.-Currency Debit Amount" WHERE (G/L Account No.=FIELD(No.),
                                                                                                                   G/L Account No.=FIELD(FILTER(Totaling)),
                                                                                                                   Business Unit Code=FIELD(Business Unit Filter),
                                                                                                                   Global Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                   Global Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                   Posting Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Add.-Currency Debit Amount;
                                                              ENN=Add.-Currency Debit Amount];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 65  ;   ;Add.-Currency Credit Amount;Decimal;FieldClass=FlowField;
                                                   CalcFormula=Sum("G/L Entry"."Add.-Currency Credit Amount" WHERE (G/L Account No.=FIELD(No.),
                                                                                                                    G/L Account No.=FIELD(FILTER(Totaling)),
                                                                                                                    Business Unit Code=FIELD(Business Unit Filter),
                                                                                                                    Global Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                    Global Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                    Posting Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Add.-Currency Credit Amount;
                                                              ENN=Add.-Currency Credit Amount];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 66  ;   ;Default IC Partner G/L Acc. No;Code20;
                                                   TableRelation="IC G/L Account".No.;
                                                   CaptionML=[ENU=Default IC Partner G/L Acc. No;
                                                              ENN=Default IC Partner G/L Acc. No] }
    { 70  ;   ;Omit Default Descr. in Jnl.;Boolean;CaptionML=[ENU=Omit Default Descr. in Jnl.;
                                                              ENN=Omit Default Descr. in Jnl.] }
    { 80  ;   ;Account Subcategory Entry No.;Integer;
                                                   TableRelation="G/L Account Category";
                                                   OnValidate=VAR
                                                                GLAccountCategory@1000 : Record 570;
                                                              BEGIN
                                                                IF "Account Subcategory Entry No." = 0 THEN
                                                                  EXIT;
                                                                GLAccountCategory.GET("Account Subcategory Entry No.");
                                                                TESTFIELD("Income/Balance",GLAccountCategory."Income/Balance");
                                                                "Account Category" := GLAccountCategory."Account Category";
                                                              END;

                                                   CaptionML=[ENU=Account Subcategory Entry No.;
                                                              ENN=Account Subcategory Entry No.] }
    { 81  ;   ;Account Subcategory Descript.;Text80;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Lookup("G/L Account Category".Description WHERE (Entry No.=FIELD(Account Subcategory Entry No.)));
                                                   CaptionML=[ENU=Account Subcategory Descript.;
                                                              ENN=Account Subcategory Descript.];
                                                   Editable=No }
    { 400 ;   ;Dimension Set ID Filter;Integer    ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Dimension Set ID Filter;
                                                              ENN=Dimension Set ID Filter] }
    { 1100;   ;Cost Type No.       ;Code20        ;TableRelation="Cost Type";
                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Cost Type No.;
                                                              ENN=Cost Type No.];
                                                   Editable=No }
    { 1700;   ;Default Deferral Template Code;Code10;
                                                   TableRelation="Deferral Template"."Deferral Code";
                                                   CaptionML=[ENU=Default Deferral Template Code;
                                                              ENN=Default Deferral Template Code] }
    { 8000;   ;Id                  ;GUID          ;CaptionML=[ENU=Id;
                                                              ENN=Id] }
    { 50000;  ;NetChange           ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("G/L Entry".Amount WHERE (G/L Account No.=FIELD(No.),
                                                                                             G/L Account No.=FIELD(FILTER(Totaling)),
                                                                                             Business Unit Code=FIELD(Business Unit Filter),
                                                                                             Global Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                             Posting Date=FIELD(Date Filter),
                                                                                             Global Dimension 2 Code=FIELD(Global Dimension 2 Code)));
                                                   Description=SDM }
    { 50002;  ;Normal User Hide    ;Boolean       ;Description=SDM }
    { 50003;  ;Super User Hide     ;Boolean       ;Description=SDM }
    { 50004;  ;Opening Control Account;Boolean    ;Description=SDM }
    { 50005;  ;BLR Hide            ;Boolean       ;Description=SDM }
    { 50006;  ;HYD Hide            ;Boolean       ;Description=SDM }
    { 50007;  ;AUDIT Hide          ;Boolean       ;Description=SDM }
    { 50008;  ;DEL Hide            ;Boolean       ;Description=SDM }
    { 50009;  ;MUM Hide            ;Boolean       ;Description=SDM }
    { 50010;  ;CHN FO Hide         ;Boolean       ;Description=SDM }
    { 50011;  ;Invoice Hide        ;Boolean       ;Description=SDM }
    { 50012;  ;RTGS Deb. Amt. Control;Boolean     ;Description=SDM }
    { 50013;  ;RTGS Cre. Amt. Control;Boolean     ;Description=SDM }
    { 50014;  ;Payroll + Normal User Hide;Boolean ;DataClassification=ToBeClassified;
                                                   Description=SDM }
    { 50015;  ;Recievable Hide     ;Boolean       ;DataClassification=ToBeClassified;
                                                   Description=SDM }
    { 50016;  ;Payroll Hide        ;Boolean       ;DataClassification=ToBeClassified;
                                                   Description=SDM }
    { 50017;  ;RSF View            ;Boolean       ;DataClassification=ToBeClassified;
                                                   Description=SDM }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Search Name                              }
    {    ;Reconciliation Account                   }
    {    ;Gen. Bus. Posting Group                  }
    {    ;Gen. Prod. Posting Group                 }
    { No ;Consol. Debit Acc.,Consol. Translation Method }
    { No ;Consol. Credit Acc.,Consol. Translation Method }
    {    ;Name                                     }
    {    ;Account Type                             }
    {    ;Account Category                         }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;No.,Name,Income/Balance,Blocked,Direct Posting }
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=You cannot change %1 because there are one or more ledger entries associated with this account.;ENN=You cannot change %1 because there are one or more ledger entries associated with this account.';
      Text001@1001 : TextConst 'ENU=You cannot change %1 because this account is part of one or more budgets.;ENN=You cannot change %1 because this account is part of one or more budgets.';
      GLSetup@1002 : Record 98;
      CostAccSetup@1006 : Record 1108;
      DimMgt@1003 : Codeunit 408;
      CostAccMgt@1007 : Codeunit 1100;
      GLSetupRead@1004 : Boolean;
      Text002@1005 : TextConst 'ENU="There is another %1: %2; which refers to the same %3, but with a different %4: %5.";ENN="There is another %1: %2; which refers to the same %3, but with a different %4: %5."';
      NoAccountCategoryMatchErr@1008 : TextConst '@@@="%1=account category value, %2=the user input.";ENU=There is no subcategory description for %1 that matches ''%2''.;ENN=There is no subcategory description for %1 that matches ''%2''.';
      GenProdPostingGroupErr@1009 : TextConst '@@@="%1 - caption Gen. Prod. Posting Group; %2 - G/L Account Description; %3 - G/L Account No.";ENU=%1 is not set for the %2 G/L account with no. %3.;ENN=%1 is not set for the %2 G/L account with no. %3.';

    [External]
    PROCEDURE SetupNewGLAcc@1(OldGLAcc@1000 : Record 15;BelowOldGLAcc@1001 : Boolean);
    VAR
      OldGLAcc2@1002 : Record 15;
    BEGIN
      IF NOT BelowOldGLAcc THEN BEGIN
        OldGLAcc2 := OldGLAcc;
        OldGLAcc.COPY(Rec);
        OldGLAcc := OldGLAcc2;
        IF NOT OldGLAcc.FIND('<') THEN
          OldGLAcc.INIT;
      END;
      "Income/Balance" := OldGLAcc."Income/Balance";
    END;

    [External]
    PROCEDURE CheckGLAcc@2();
    BEGIN
      TESTFIELD("Account Type","Account Type"::Posting);
      TESTFIELD(Blocked,FALSE);

      OnAfterCheckGLAcc(Rec);
    END;

    [External]
    PROCEDURE ValidateAccountSubCategory@6(NewValue@1000 : Text[80]);
    VAR
      GLAccountCategory@1001 : Record 570;
    BEGIN
      IF NewValue = "Account Subcategory Descript." THEN
        EXIT;
      IF NewValue = '' THEN
        VALIDATE("Account Subcategory Entry No.",0)
      ELSE BEGIN
        GLAccountCategory.SETRANGE("Account Category","Account Category");
        GLAccountCategory.SETRANGE(Description,NewValue);
        IF NOT GLAccountCategory.FINDFIRST THEN BEGIN
          GLAccountCategory.SETFILTER(Description,'''@*' + NewValue + '*''');
          IF NOT GLAccountCategory.FINDFIRST THEN
            ERROR(NoAccountCategoryMatchErr,"Account Category",NewValue);
        END;
        VALIDATE("Account Subcategory Entry No.",GLAccountCategory."Entry No.");
      END;
    END;

    [External]
    PROCEDURE LookupAccountSubCategory@5();
    VAR
      GLAccountCategory@1001 : Record 570;
      GLAccountCategories@1000 : Page 790;
    BEGIN
      IF "Account Subcategory Entry No." <> 0 THEN
        IF GLAccountCategory.GET("Account Subcategory Entry No.") THEN
          GLAccountCategories.SETRECORD(GLAccountCategory);
      GLAccountCategory.SETRANGE("Income/Balance","Income/Balance");
      IF "Account Category" <> 0 THEN
        GLAccountCategory.SETRANGE("Account Category","Account Category");
      GLAccountCategories.SETTABLEVIEW(GLAccountCategory);
      GLAccountCategories.LOOKUPMODE(TRUE);
      IF GLAccountCategories.RUNMODAL = ACTION::LookupOK THEN BEGIN
        GLAccountCategories.GETRECORD(GLAccountCategory);
        VALIDATE("Account Category",GLAccountCategory."Account Category");
        "Account Subcategory Entry No." := GLAccountCategory."Entry No.";
      END;
      CALCFIELDS("Account Subcategory Descript.");
    END;

    LOCAL PROCEDURE UpdateAccountCategoryOfSubAccounts@7();
    VAR
      GLAccountSubAccount@1001 : Record 15;
    BEGIN
      IF "Account Type" <> "Account Type"::"Begin-Total" THEN
        EXIT;

      GLAccountSubAccount.SETFILTER("No.",'>%1',"No.");
      GLAccountSubAccount.SETRANGE(Indentation,Indentation,Indentation + 1);
      GLAccountSubAccount.SETFILTER("Account Category",'%1|%2',"Account Category"::" ",xRec."Account Category");

      IF NOT GLAccountSubAccount.FINDSET THEN
        EXIT;

      REPEAT
        IF (GLAccountSubAccount.Indentation = Indentation) AND
           (GLAccountSubAccount."Account Type" <> "Account Type"::"End-Total")
        THEN
          EXIT;

        GLAccountSubAccount.VALIDATE("Account Category","Account Category");
        GLAccountSubAccount.MODIFY
      UNTIL GLAccountSubAccount.NEXT = 0;
    END;

    [External]
    PROCEDURE GetCurrencyCode@3() : Code[10];
    BEGIN
      IF NOT GLSetupRead THEN BEGIN
        GLSetup.GET;
        GLSetupRead := TRUE;
      END;
      EXIT(GLSetup."Additional Reporting Currency");
    END;

    [External]
    PROCEDURE ValidateShortcutDimCode@29(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.ValidateDimValueCode(FieldNumber,ShortcutDimCode);
      IF NOT ISTEMPORARY THEN BEGIN
        DimMgt.SaveDefaultDim(DATABASE::"G/L Account","No.",FieldNumber,ShortcutDimCode);
        MODIFY;
      END;
    END;

    [External]
    PROCEDURE TranslationMethodConflict@4(VAR GLAcc@1000 : Record 15) : Boolean;
    BEGIN
      GLAcc.RESET;
      GLAcc.SETFILTER("No.",'<>%1',"No.");
      GLAcc.SETFILTER("Consol. Translation Method",'<>%1',"Consol. Translation Method");
      IF "Consol. Debit Acc." <> '' THEN BEGIN
        IF NOT GLAcc.SETCURRENTKEY("Consol. Debit Acc.","Consol. Translation Method") THEN
          GLAcc.SETCURRENTKEY("No.");
        GLAcc.SETRANGE("Consol. Debit Acc.","Consol. Debit Acc.");
        IF GLAcc.FIND('-') THEN
          EXIT(TRUE);
        GLAcc.SETRANGE("Consol. Debit Acc.");
      END;
      IF "Consol. Credit Acc." <> '' THEN BEGIN
        IF NOT GLAcc.SETCURRENTKEY("Consol. Credit Acc.","Consol. Translation Method") THEN
          GLAcc.SETCURRENTKEY("No.");
        GLAcc.SETRANGE("Consol. Credit Acc.","Consol. Credit Acc.");
        IF GLAcc.FIND('-') THEN
          EXIT(TRUE);
        GLAcc.SETRANGE("Consol. Credit Acc.");
      END;
      EXIT(FALSE);
    END;

    PROCEDURE CheckGenProdPostingGroup@13();
    VAR
      IsHandled@1000 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeCheckGenProdPostingGroup(Rec,IsHandled);
      IF IsHandled THEN
        EXIT;

      IF "Gen. Prod. Posting Group" = '' THEN
        ERROR(GenProdPostingGroupErr,FIELDCAPTION("Gen. Prod. Posting Group"),Name,"No.");
    END;

    LOCAL PROCEDURE SetLastModifiedDateTime@39();
    BEGIN
      "Last Modified Date Time" := CURRENTDATETIME;
      "Last Date Modified" := TODAY;
    END;

    [External]
    PROCEDURE IsTotaling@8() : Boolean;
    BEGIN
      EXIT("Account Type" IN ["Account Type"::Total,"Account Type"::"End-Total"]);
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCheckGenProdPostingGroup@10(VAR GLAccount@1000 : Record 15;VAR IsHandled@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCheckGLAcc@9(VAR GLAccount@1000 : Record 15);
    BEGIN
    END;

    BEGIN
    END.
  }
}

OBJECT Table 17 G/L Entry
{
  OBJECT-PROPERTIES
  {
    Date=29-01-25;
    Time=15:57:41;
    Modified=Yes;
    Version List=NAVW114.30;
  }
  PROPERTIES
  {
    OnInsert=VAR
               GenJnlPostPreview@1000000000 : Codeunit 19;
             BEGIN
               "Last Modified DateTime" := CURRENTDATETIME;
               //GenJnlPostPreview.SaveGLEntry(Rec);
               "Creation Date" := WORKDATE;
             END;

    OnModify=BEGIN
               "Last Modified DateTime" := CURRENTDATETIME;
             END;

    OnRename=BEGIN
               "Last Modified DateTime" := CURRENTDATETIME;
             END;

    CaptionML=[ENU=G/L Entry;
               ENN=G/L Entry];
    LookupPageID=Page20;
    DrillDownPageID=Page20;
  }
  FIELDS
  {
    { 1   ;   ;Entry No.           ;Integer       ;CaptionML=[ENU=Entry No.;
                                                              ENN=Entry No.] }
    { 3   ;   ;G/L Account No.     ;Code20        ;TableRelation="G/L Account";
                                                   OnValidate=BEGIN
                                                                UpdateAccountID;
                                                              END;

                                                   CaptionML=[ENU=G/L Account No.;
                                                              ENN=G/L Account No.] }
    { 4   ;   ;Posting Date        ;Date          ;CaptionML=[ENU=Posting Date;
                                                              ENN=Posting Date];
                                                   ClosingDates=Yes }
    { 5   ;   ;Document Type       ;Option        ;CaptionML=[ENU=Document Type;
                                                              ENN=Document Type];
                                                   OptionCaptionML=[ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund";
                                                                    ENN=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund"];
                                                   OptionString=[ ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund] }
    { 6   ;   ;Document No.        ;Code20        ;OnLookup=VAR
                                                              IncomingDocument@1000 : Record 130;
                                                            BEGIN
                                                              IncomingDocument.HyperlinkToDocument("Document No.","Posting Date");
                                                            END;

                                                   CaptionML=[ENU=Document No.;
                                                              ENN=Document No.] }
    { 7   ;   ;Description         ;Text100       ;CaptionML=[ENU=Description;
                                                              ENN=Description];
                                                   Description=AD_SD }
    { 10  ;   ;Bal. Account No.    ;Code20        ;TableRelation=IF (Bal. Account Type=CONST(G/L Account)) "G/L Account"
                                                                 ELSE IF (Bal. Account Type=CONST(Customer)) Customer
                                                                 ELSE IF (Bal. Account Type=CONST(Vendor)) Vendor
                                                                 ELSE IF (Bal. Account Type=CONST(Bank Account)) "Bank Account"
                                                                 ELSE IF (Bal. Account Type=CONST(Fixed Asset)) "Fixed Asset"
                                                                 ELSE IF (Bal. Account Type=CONST(IC Partner)) "IC Partner"
                                                                 ELSE IF (Bal. Account Type=CONST(Employee)) Employee;
                                                   CaptionML=[ENU=Bal. Account No.;
                                                              ENN=Bal. Account No.] }
    { 17  ;   ;Amount              ;Decimal       ;CaptionML=[ENU=Amount;
                                                              ENN=Amount];
                                                   AutoFormatType=1 }
    { 23  ;   ;Global Dimension 1 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   CaptionML=[ENU=Global Dimension 1 Code;
                                                              ENN=Global Dimension 1 Code];
                                                   CaptionClass='1,1,1' }
    { 24  ;   ;Global Dimension 2 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   CaptionML=[ENU=Global Dimension 2 Code;
                                                              ENN=Global Dimension 2 Code];
                                                   CaptionClass='1,1,2' }
    { 27  ;   ;User ID             ;Code50        ;TableRelation=User."User Name";
                                                   OnLookup=VAR
                                                              UserMgt@1000 : Codeunit 418;
                                                            BEGIN
                                                              UserMgt.LookupUserID("User ID");
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   DataClassification=EndUserIdentifiableInformation;
                                                   CaptionML=[ENU=User ID;
                                                              ENN=User ID] }
    { 28  ;   ;Source Code         ;Code10        ;TableRelation="Source Code";
                                                   CaptionML=[ENU=Source Code;
                                                              ENN=Source Code] }
    { 29  ;   ;System-Created Entry;Boolean       ;CaptionML=[ENU=System-Created Entry;
                                                              ENN=System-Created Entry] }
    { 30  ;   ;Prior-Year Entry    ;Boolean       ;CaptionML=[ENU=Prior-Year Entry;
                                                              ENN=Prior-Year Entry] }
    { 41  ;   ;Job No.             ;Code20        ;TableRelation=Job;
                                                   CaptionML=[ENU=Job No.;
                                                              ENN=Job No.] }
    { 42  ;   ;Quantity            ;Decimal       ;CaptionML=[ENU=Quantity;
                                                              ENN=Quantity];
                                                   DecimalPlaces=0:5 }
    { 43  ;   ;VAT Amount          ;Decimal       ;CaptionML=[ENU=VAT Amount;
                                                              ENN=VAT Amount];
                                                   AutoFormatType=1 }
    { 45  ;   ;Business Unit Code  ;Code20        ;TableRelation="Business Unit";
                                                   CaptionML=[ENU=Business Unit Code;
                                                              ENN=Business Unit Code] }
    { 46  ;   ;Journal Batch Name  ;Code10        ;CaptionML=[ENU=Journal Batch Name;
                                                              ENN=Journal Batch Name] }
    { 47  ;   ;Reason Code         ;Code10        ;TableRelation="Reason Code";
                                                   CaptionML=[ENU=Reason Code;
                                                              ENN=Reason Code] }
    { 48  ;   ;Gen. Posting Type   ;Option        ;CaptionML=[ENU=Gen. Posting Type;
                                                              ENN=Gen. Posting Type];
                                                   OptionCaptionML=[ENU=" ,Purchase,Sale,Settlement";
                                                                    ENN=" ,Purchase,Sale,Settlement"];
                                                   OptionString=[ ,Purchase,Sale,Settlement] }
    { 49  ;   ;Gen. Bus. Posting Group;Code20     ;TableRelation="Gen. Business Posting Group";
                                                   CaptionML=[ENU=Gen. Bus. Posting Group;
                                                              ENN=Gen. Bus. Posting Group] }
    { 50  ;   ;Gen. Prod. Posting Group;Code20    ;TableRelation="Gen. Product Posting Group";
                                                   CaptionML=[ENU=Gen. Prod. Posting Group;
                                                              ENN=Gen. Prod. Posting Group] }
    { 51  ;   ;Bal. Account Type   ;Option        ;CaptionML=[ENU=Bal. Account Type;
                                                              ENN=Bal. Account Type];
                                                   OptionCaptionML=[ENU=G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner,Employee;
                                                                    ENN=G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner,Employee];
                                                   OptionString=G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner,Employee }
    { 52  ;   ;Transaction No.     ;Integer       ;CaptionML=[ENU=Transaction No.;
                                                              ENN=Transaction No.] }
    { 53  ;   ;Debit Amount        ;Decimal       ;CaptionML=[ENU=Debit Amount;
                                                              ENN=Debit Amount];
                                                   BlankZero=Yes;
                                                   AutoFormatType=1 }
    { 54  ;   ;Credit Amount       ;Decimal       ;CaptionML=[ENU=Credit Amount;
                                                              ENN=Credit Amount];
                                                   BlankZero=Yes;
                                                   AutoFormatType=1 }
    { 55  ;   ;Document Date       ;Date          ;CaptionML=[ENU=Document Date;
                                                              ENN=Document Date];
                                                   ClosingDates=Yes }
    { 56  ;   ;External Document No.;Code35       ;CaptionML=[ENU=External Document No.;
                                                              ENN=External Document No.] }
    { 57  ;   ;Source Type         ;Option        ;CaptionML=[ENU=Source Type;
                                                              ENN=Source Type];
                                                   OptionCaptionML=[ENU=" ,Customer,Vendor,Bank Account,Fixed Asset,Employee";
                                                                    ENN=" ,Customer,Vendor,Bank Account,Fixed Asset,Employee"];
                                                   OptionString=[ ,Customer,Vendor,Bank Account,Fixed Asset,Employee] }
    { 58  ;   ;Source No.          ;Code20        ;TableRelation=IF (Source Type=CONST(Customer)) Customer
                                                                 ELSE IF (Source Type=CONST(Vendor)) Vendor
                                                                 ELSE IF (Source Type=CONST(Bank Account)) "Bank Account"
                                                                 ELSE IF (Source Type=CONST(Fixed Asset)) "Fixed Asset"
                                                                 ELSE IF (Source Type=CONST(Employee)) Employee;
                                                   CaptionML=[ENU=Source No.;
                                                              ENN=Source No.] }
    { 59  ;   ;No. Series          ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=[ENU=No. Series;
                                                              ENN=No. Series] }
    { 60  ;   ;Tax Area Code       ;Code20        ;TableRelation="Tax Area";
                                                   CaptionML=[ENU=Tax Area Code;
                                                              ENN=VAT Area Code] }
    { 61  ;   ;Tax Liable          ;Boolean       ;CaptionML=[ENU=Tax Liable;
                                                              ENN=VAT Liable] }
    { 62  ;   ;Tax Group Code      ;Code20        ;TableRelation="Tax Group";
                                                   CaptionML=[ENU=Tax Group Code;
                                                              ENN=VAT Group Code] }
    { 63  ;   ;Use Tax             ;Boolean       ;CaptionML=[ENU=Use Tax;
                                                              ENN=Use Tax] }
    { 64  ;   ;VAT Bus. Posting Group;Code20      ;TableRelation="VAT Business Posting Group";
                                                   CaptionML=[ENU=VAT Bus. Posting Group;
                                                              ENN=VAT Bus. Posting Group] }
    { 65  ;   ;VAT Prod. Posting Group;Code20     ;TableRelation="VAT Product Posting Group";
                                                   CaptionML=[ENU=VAT Prod. Posting Group;
                                                              ENN=VAT Prod. Posting Group] }
    { 68  ;   ;Additional-Currency Amount;Decimal ;AccessByPermission=TableData 4=R;
                                                   CaptionML=[ENU=Additional-Currency Amount;
                                                              ENN=Additional-Currency Amount];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 69  ;   ;Add.-Currency Debit Amount;Decimal ;CaptionML=[ENU=Add.-Currency Debit Amount;
                                                              ENN=Add.-Currency Debit Amount];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 70  ;   ;Add.-Currency Credit Amount;Decimal;CaptionML=[ENU=Add.-Currency Credit Amount;
                                                              ENN=Add.-Currency Credit Amount];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 71  ;   ;Close Income Statement Dim. ID;Integer;
                                                   CaptionML=[ENU=Close Income Statement Dim. ID;
                                                              ENN=Close Income Statement Dim. ID] }
    { 72  ;   ;IC Partner Code     ;Code20        ;TableRelation="IC Partner";
                                                   CaptionML=[ENU=IC Partner Code;
                                                              ENN=IC Partner Code] }
    { 73  ;   ;Reversed            ;Boolean       ;CaptionML=[ENU=Reversed;
                                                              ENN=Reversed] }
    { 74  ;   ;Reversed by Entry No.;Integer      ;TableRelation="G/L Entry";
                                                   CaptionML=[ENU=Reversed by Entry No.;
                                                              ENN=Reversed by Entry No.];
                                                   BlankZero=Yes }
    { 75  ;   ;Reversed Entry No.  ;Integer       ;TableRelation="G/L Entry";
                                                   CaptionML=[ENU=Reversed Entry No.;
                                                              ENN=Reversed Entry No.];
                                                   BlankZero=Yes }
    { 76  ;   ;G/L Account Name    ;Text100       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("G/L Account".Name WHERE (No.=FIELD(G/L Account No.)));
                                                   CaptionML=[ENU=G/L Account Name;
                                                              ENN=G/L Account Name];
                                                   Editable=No }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnLookup=BEGIN
                                                              ShowDimensions;
                                                            END;

                                                   CaptionML=[ENU=Dimension Set ID;
                                                              ENN=Dimension Set ID] }
    { 5400;   ;Prod. Order No.     ;Code20        ;CaptionML=[ENU=Prod. Order No.;
                                                              ENN=Prod. Order No.] }
    { 5600;   ;FA Entry Type       ;Option        ;AccessByPermission=TableData 5600=R;
                                                   CaptionML=[ENU=FA Entry Type;
                                                              ENN=FA Entry Type];
                                                   OptionCaptionML=[ENU=" ,Fixed Asset,Maintenance";
                                                                    ENN=" ,Fixed Asset,Maintenance"];
                                                   OptionString=[ ,Fixed Asset,Maintenance] }
    { 5601;   ;FA Entry No.        ;Integer       ;TableRelation=IF (FA Entry Type=CONST(Fixed Asset)) "FA Ledger Entry"
                                                                 ELSE IF (FA Entry Type=CONST(Maintenance)) "Maintenance Ledger Entry";
                                                   CaptionML=[ENU=FA Entry No.;
                                                              ENN=FA Entry No.];
                                                   BlankZero=Yes }
    { 8001;   ;Account Id          ;GUID          ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("G/L Account".Id WHERE (No.=FIELD(G/L Account No.)));
                                                   TableRelation="G/L Account".Id;
                                                   OnValidate=BEGIN
                                                                UpdateAccountNo;
                                                              END;

                                                   CaptionML=[ENU=Account Id;
                                                              ENN=Account Id] }
    { 8005;   ;Last Modified DateTime;DateTime    ;CaptionML=[ENU=Last Modified DateTime;
                                                              ENN=Last Modified DateTime];
                                                   Editable=No }
    { 50000;  ;TDS NOD             ;Code10        ;Description=Santsoh;
                                                   Editable=No }
    { 50001;  ;TDS Amount          ;Decimal       ;Description=Santsoh;
                                                   Editable=No }
    { 50002;  ;Remarks Sales Invoice;Text250      ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Sales Invoice Header".Remarks WHERE (No.=FIELD(Document No.)));
                                                   Description=AD_SD;
                                                   Editable=No }
    { 50003;  ;Narration           ;Text200       ;Description=AD_SD }
    { 50004;  ;Payee Name          ;Text100       ;Description=AD_SD }
    { 50005;  ;TDS Account Amount  ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("G/L Entry".Amount WHERE (Document No.=FIELD(Document No.),
                                                                                              G/L Account Name=FILTER(*TDS*)));
                                                   Description=Santsoh;
                                                   Editable=No }
    { 50006;  ;Team Leader         ;Code30        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Sales Invoice Header"."Team Leader" WHERE (No.=FIELD(Document No.)));
                                                   TableRelation=Employee WHERE (Type=FILTER(Partner|Others));
                                                   Description=AD_SD;
                                                   Editable=No }
    { 50007;  ;Segment             ;Text100       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Sales Invoice Header".Segment WHERE (No.=FIELD(Document No.)));
                                                   TableRelation="Segment Master" WHERE (LOB=FIELD(LOB));
                                                   Description=AD_SD }
    { 50008;  ;LOB                 ;Text40        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Sales Invoice Header".LOB WHERE (No.=FIELD(Document No.)));
                                                   TableRelation="Segment Master";
                                                   Description=AD_SD;
                                                   Editable=No }
    { 50009;  ;Invoice Types       ;Option        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Sales Invoice Header"."Invoice Types" WHERE (No.=FIELD(Document No.)));
                                                   OptionCaptionML=ENU=" ,Fees,Expenses";
                                                   OptionString=[ ,Fees,Expenses];
                                                   Description=AD_SD;
                                                   Editable=No }
    { 50010;  ;Employee Name       ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Dimension Value".Name WHERE (Code=FIELD(Global Dimension 1 Code)));
                                                   TableRelation="Dimension Value".Name WHERE (Code=FIELD(Global Dimension 1 Code));
                                                   Description=Santosh }
    { 50011;  ;Sales Code          ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Dimension Set Entry"."Dimension Value Code" WHERE (Dimension Set ID=FIELD(Dimension Set ID),
                                                                                                                          Dimension Code=FILTER(SALES)));
                                                   TableRelation="Dimension Value".Code WHERE (Dimension Code=CONST(SALES));
                                                   Description=Santosh;
                                                   Editable=No }
    { 50012;  ;Sales Name          ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Dimension Value".Name WHERE (Dimension Code=CONST(SALES),
                                                                                                    Code=FIELD(Sales Code)));
                                                   TableRelation="Dimension Value".Name WHERE (Dimension Code=CONST(SALES),
                                                                                               Code=FIELD(Sales Code));
                                                   Description=Santosh;
                                                   Editable=No }
    { 50013;  ;Source Vendor Name  ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Vendor.Name WHERE (No.=FIELD(Source No.)));
                                                   TableRelation=IF (Source Type=FILTER(Vendor)) Vendor.Name WHERE (No.=FIELD(Source No.));
                                                   Description=santosh;
                                                   Editable=No }
    { 50014;  ;Remarks Sales Cr. Memo;Text250     ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Sales Cr.Memo Header".Remarks WHERE (No.=FIELD(Document No.)));
                                                   Description=santosh;
                                                   Editable=No }
    { 50015;  ;Remarks Purch. Invoice;Text150     ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Purch. Inv. Header".Remarks WHERE (No.=FIELD(Document No.)));
                                                   Description=santosh;
                                                   Editable=No }
    { 50016;  ;Remarks Purch. Cr. Memo;Text150    ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Purch. Cr. Memo Hdr.".Remarks WHERE (No.=FIELD(Document No.)));
                                                   Description=santosh;
                                                   Editable=No }
    { 50017;  ;PAN No.             ;Code20        ;Description=santosh;
                                                   Editable=No }
    { 50018;  ;Beneficiary Code    ;Code10        ;DataClassification=ToBeClassified;
                                                   Description=santosh;
                                                   Editable=No }
    { 50019;  ;Beneficiary Name    ;Text60        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Beneficiary."Beneficiary Name" WHERE (Beneficiary Code=FIELD(Beneficiary Code)));
                                                   TableRelation=Beneficiary."Beneficiary Name" WHERE (Beneficiary Code=FIELD(Beneficiary Code));
                                                   Description=santosh;
                                                   Editable=No }
    { 50020;  ;Source Customer Name;Text130       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Customer.Name WHERE (No.=FIELD(Source No.)));
                                                   TableRelation=IF (Source Type=FILTER(Customer)) Customer.Name WHERE (No.=FIELD(Source No.));
                                                   Description=santosh;
                                                   Editable=No }
    { 50051;  ;Resp. Name          ;Text80        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Sales Invoice Header"."Resp. Name" WHERE (No.=FIELD(Document No.)));
                                                   Description=AD_SD;
                                                   Editable=No }
    { 50052;  ;Creation Date       ;Date          ;DataClassification=ToBeClassified;
                                                   Description=SDM.DEC }
  }
  KEYS
  {
    {    ;Entry No.                               ;Clustered=Yes }
    {    ;G/L Account No.,Posting Date            ;SumIndexFields=Amount,Debit Amount,Credit Amount,Additional-Currency Amount,Add.-Currency Debit Amount,Add.-Currency Credit Amount,VAT Amount }
    {    ;G/L Account No.,Global Dimension 1 Code,Global Dimension 2 Code,Posting Date;
                                                   SumIndexFields=Amount,Debit Amount,Credit Amount,Additional-Currency Amount,Add.-Currency Debit Amount,Add.-Currency Credit Amount,VAT Amount }
    { No ;G/L Account No.,Business Unit Code,Posting Date;
                                                   SumIndexFields=Amount,Debit Amount,Credit Amount,Additional-Currency Amount,Add.-Currency Debit Amount,Add.-Currency Credit Amount }
    { No ;G/L Account No.,Business Unit Code,Global Dimension 1 Code,Global Dimension 2 Code,Posting Date;
                                                   SumIndexFields=Amount,Debit Amount,Credit Amount,Additional-Currency Amount,Add.-Currency Debit Amount,Add.-Currency Credit Amount }
    {    ;Document No.,Posting Date               ;SumIndexFields=Amount,Debit Amount,Credit Amount,Additional-Currency Amount,Add.-Currency Debit Amount,Add.-Currency Credit Amount,VAT Amount }
    {    ;Transaction No.                          }
    {    ;IC Partner Code                          }
    {    ;G/L Account No.,Job No.,Posting Date    ;SumIndexFields=Amount }
    {    ;Posting Date,G/L Account No.,Dimension Set ID;
                                                   SumIndexFields=Amount }
    {    ;Gen. Bus. Posting Group,Gen. Prod. Posting Group }
    {    ;VAT Bus. Posting Group,VAT Prod. Posting Group }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;Entry No.,Description,G/L Account No.,Posting Date,Document Type,Document No. }
  }
  CODE
  {
    VAR
      GLSetup@1000 : Record 98;
      GLSetupRead@1002 : Boolean;

    [External]
    PROCEDURE GetCurrencyCode@1() : Code[10];
    BEGIN
      IF NOT GLSetupRead THEN BEGIN
        GLSetup.GET;
        GLSetupRead := TRUE;
      END;
      EXIT(GLSetup."Additional Reporting Currency");
    END;

    [External]
    PROCEDURE ShowValueEntries@8();
    VAR
      GLItemLedgRelation@1000 : Record 5823;
      ValueEntry@1002 : Record 5802;
      TempValueEntry@1001 : TEMPORARY Record 5802;
    BEGIN
      GLItemLedgRelation.SETRANGE("G/L Entry No.","Entry No.");
      IF GLItemLedgRelation.FINDSET THEN
        REPEAT
          ValueEntry.GET(GLItemLedgRelation."Value Entry No.");
          TempValueEntry.INIT;
          TempValueEntry := ValueEntry;
          TempValueEntry.INSERT;
        UNTIL GLItemLedgRelation.NEXT = 0;

      PAGE.RUNMODAL(0,TempValueEntry);
    END;

    [External]
    PROCEDURE ShowDimensions@2();
    VAR
      DimMgt@1000 : Codeunit 408;
    BEGIN
      DimMgt.ShowDimensionSet("Dimension Set ID",STRSUBSTNO('%1 %2',TABLECAPTION,"Entry No."));
    END;

    [External]
    PROCEDURE UpdateDebitCredit@3(Correction@1000 : Boolean);
    BEGIN
      IF ((Amount > 0) AND (NOT Correction)) OR
         ((Amount < 0) AND Correction)
      THEN BEGIN
        "Debit Amount" := Amount;
        "Credit Amount" := 0
      END ELSE BEGIN
        "Debit Amount" := 0;
        "Credit Amount" := -Amount;
      END;

      IF (("Additional-Currency Amount" > 0) AND (NOT Correction)) OR
         (("Additional-Currency Amount" < 0) AND Correction)
      THEN BEGIN
        "Add.-Currency Debit Amount" := "Additional-Currency Amount";
        "Add.-Currency Credit Amount" := 0
      END ELSE BEGIN
        "Add.-Currency Debit Amount" := 0;
        "Add.-Currency Credit Amount" := -"Additional-Currency Amount";
      END;
    END;

    [External]
    PROCEDURE CopyFromGenJnlLine@4(GenJnlLine@1000 : Record 81);
    BEGIN
      "Posting Date" := GenJnlLine."Posting Date";
      "Document Date" := GenJnlLine."Document Date";
      "Document Type" := GenJnlLine."Document Type";
      "Document No." := GenJnlLine."Document No.";
      "External Document No." := GenJnlLine."External Document No.";
      Description := GenJnlLine.Description;
      "Business Unit Code" := GenJnlLine."Business Unit Code";
      "Global Dimension 1 Code" := GenJnlLine."Shortcut Dimension 1 Code";
      "Global Dimension 2 Code" := GenJnlLine."Shortcut Dimension 2 Code";
      "Dimension Set ID" := GenJnlLine."Dimension Set ID";
      "Source Code" := GenJnlLine."Source Code";
      IF GenJnlLine."Account Type" = GenJnlLine."Account Type"::"G/L Account" THEN BEGIN
        IF GenJnlLine."Source Type" = GenJnlLine."Source Type"::Employee THEN
          "Source Type" := "Source Type"::Employee
        ELSE
          "Source Type" := GenJnlLine."Source Type";
        "Source No." := GenJnlLine."Source No.";
      END ELSE BEGIN
        IF GenJnlLine."Account Type" = GenJnlLine."Account Type"::Employee THEN
          "Source Type" := "Source Type"::Employee
        ELSE
          "Source Type" := GenJnlLine."Account Type";
        "Source No." := GenJnlLine."Account No.";
      END;
      IF (GenJnlLine."Account Type" = GenJnlLine."Account Type"::"IC Partner") OR
         (GenJnlLine."Bal. Account Type" = GenJnlLine."Bal. Account Type"::"IC Partner")
      THEN
        "Source Type" := "Source Type"::" ";
      "Job No." := GenJnlLine."Job No.";
      Quantity := GenJnlLine.Quantity;
      "Journal Batch Name" := GenJnlLine."Journal Batch Name";
      "Reason Code" := GenJnlLine."Reason Code";
      "User ID" := USERID;
      Narration := GenJnlLine.Narration;//AD_SD
      "Payee Name" := GenJnlLine."Payee Name"; //AD_SD
      "Beneficiary Code" := GenJnlLine."Beneficiary Code"; //SDMBCS
      "No. Series" := GenJnlLine."Posting No. Series";
      "IC Partner Code" := GenJnlLine."IC Partner Code";

      OnAfterCopyGLEntryFromGenJnlLine(Rec,GenJnlLine);
    END;

    [External]
    PROCEDURE CopyPostingGroupsFromGLEntry@5(GLEntry@1000 : Record 17);
    BEGIN
      "Gen. Posting Type" := GLEntry."Gen. Posting Type";
      "Gen. Bus. Posting Group" := GLEntry."Gen. Bus. Posting Group";
      "Gen. Prod. Posting Group" := GLEntry."Gen. Prod. Posting Group";
      "VAT Bus. Posting Group" := GLEntry."VAT Bus. Posting Group";
      "VAT Prod. Posting Group" := GLEntry."VAT Prod. Posting Group";
      "Tax Area Code" := GLEntry."Tax Area Code";
      "Tax Liable" := GLEntry."Tax Liable";
      "Tax Group Code" := GLEntry."Tax Group Code";
      "Use Tax" := GLEntry."Use Tax";
    END;

    [External]
    PROCEDURE CopyPostingGroupsFromVATEntry@96(VATEntry@1001 : Record 254);
    BEGIN
      "Gen. Posting Type" := VATEntry.Type;
      "Gen. Bus. Posting Group" := VATEntry."Gen. Bus. Posting Group";
      "Gen. Prod. Posting Group" := VATEntry."Gen. Prod. Posting Group";
      "VAT Bus. Posting Group" := VATEntry."VAT Bus. Posting Group";
      "VAT Prod. Posting Group" := VATEntry."VAT Prod. Posting Group";
      "Tax Area Code" := VATEntry."Tax Area Code";
      "Tax Liable" := VATEntry."Tax Liable";
      "Tax Group Code" := VATEntry."Tax Group Code";
      "Use Tax" := VATEntry."Use Tax";
    END;

    [External]
    PROCEDURE CopyPostingGroupsFromGenJnlLine@19(GenJnlLine@1000 : Record 81);
    BEGIN
      "Gen. Posting Type" := GenJnlLine."Gen. Posting Type";
      "Gen. Bus. Posting Group" := GenJnlLine."Gen. Bus. Posting Group";
      "Gen. Prod. Posting Group" := GenJnlLine."Gen. Prod. Posting Group";
      "VAT Bus. Posting Group" := GenJnlLine."VAT Bus. Posting Group";
      "VAT Prod. Posting Group" := GenJnlLine."VAT Prod. Posting Group";
      "Tax Area Code" := GenJnlLine."Tax Area Code";
      "Tax Liable" := GenJnlLine."Tax Liable";
      "Tax Group Code" := GenJnlLine."Tax Group Code";
      "Use Tax" := GenJnlLine."Use Tax";
    END;

    [External]
    PROCEDURE CopyPostingGroupsFromDtldCVBuf@94(DtldCVLedgEntryBuf@1001 : Record 383;GenPostingType@1002 : ' ,Purchase,Sale,Settlement');
    BEGIN
      "Gen. Posting Type" := GenPostingType;
      "Gen. Bus. Posting Group" := DtldCVLedgEntryBuf."Gen. Bus. Posting Group";
      "Gen. Prod. Posting Group" := DtldCVLedgEntryBuf."Gen. Prod. Posting Group";
      "VAT Bus. Posting Group" := DtldCVLedgEntryBuf."VAT Bus. Posting Group";
      "VAT Prod. Posting Group" := DtldCVLedgEntryBuf."VAT Prod. Posting Group";
      "Tax Area Code" := DtldCVLedgEntryBuf."Tax Area Code";
      "Tax Liable" := DtldCVLedgEntryBuf."Tax Liable";
      "Tax Group Code" := DtldCVLedgEntryBuf."Tax Group Code";
      "Use Tax" := DtldCVLedgEntryBuf."Use Tax";
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCopyGLEntryFromGenJnlLine@6(VAR GLEntry@1000 : Record 17;VAR GenJournalLine@1001 : Record 81);
    BEGIN
    END;

    [External]
    PROCEDURE CopyFromDeferralPostBuffer@46(DeferralPostBuffer@1001 : Record 1706);
    BEGIN
      "System-Created Entry" := DeferralPostBuffer."System-Created Entry";
      "Gen. Posting Type" := DeferralPostBuffer."Gen. Posting Type";
      "Gen. Bus. Posting Group" := DeferralPostBuffer."Gen. Bus. Posting Group";
      "Gen. Prod. Posting Group" := DeferralPostBuffer."Gen. Prod. Posting Group";
      "VAT Bus. Posting Group" := DeferralPostBuffer."VAT Bus. Posting Group";
      "VAT Prod. Posting Group" := DeferralPostBuffer."VAT Prod. Posting Group";
      "Tax Area Code" := DeferralPostBuffer."Tax Area Code";
      "Tax Liable" := DeferralPostBuffer."Tax Liable";
      "Tax Group Code" := DeferralPostBuffer."Tax Group Code";
      "Use Tax" := DeferralPostBuffer."Use Tax";

      OnAfterCopyFromDeferralPostBuffer(Rec,DeferralPostBuffer);
    END;

    [External]
    PROCEDURE UpdateAccountID@1166();
    VAR
      GLAccount@1000 : Record 15;
    BEGIN
      IF "G/L Account No." = '' THEN BEGIN
        CLEAR("Account Id");
        EXIT;
      END;

      IF NOT GLAccount.GET("G/L Account No.") THEN
        EXIT;

      "Account Id" := GLAccount.Id;
    END;

    LOCAL PROCEDURE UpdateAccountNo@1164();
    VAR
      GLAccount@1001 : Record 15;
    BEGIN
      IF ISNULLGUID("Account Id") THEN
        EXIT;

      GLAccount.SETRANGE(Id,"Account Id");
      IF NOT GLAccount.FINDFIRST THEN
        EXIT;

      "G/L Account No." := GLAccount."No.";
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCopyFromDeferralPostBuffer@7(VAR GLEntry@1000 : Record 17;DeferralPostingBuffer@1001 : Record 1706);
    BEGIN
    END;

    BEGIN
    END.
  }
}

OBJECT Table 18 Customer
{
  OBJECT-PROPERTIES
  {
    Date=02-10-21;
    Time=12:00:00;
    Modified=Yes;
    Version List=NAVW114.30;
  }
  PROPERTIES
  {
    Permissions=TableData 21=r,
                TableData 167=r,
                TableData 249=rd,
                TableData 5900=r,
                TableData 5907=r,
                TableData 5940=rm,
                TableData 5965=rm,
                TableData 7002=rd,
                TableData 7004=rd;
    DataCaptionFields=No.,Name;
    OnInsert=BEGIN
               IF "No." = '' THEN BEGIN
                 SalesSetup.GET;
                 SalesSetup.TESTFIELD("Customer Nos.");
                 NoSeriesMgt.InitSeries(SalesSetup."Customer Nos.",xRec."No. Series",0D,"No.","No. Series");
               END;

               IF "Invoice Disc. Code" = '' THEN
                 "Invoice Disc. Code" := "No.";

               IF (NOT (InsertFromContact OR (InsertFromTemplate AND (Contact <> '')) OR ISTEMPORARY)) OR ForceUpdateContact THEN
                 UpdateContFromCust.OnInsert(Rec);

               IF "Salesperson Code" = '' THEN
                 SetDefaultSalesperson;

               DimMgt.UpdateDefaultDim(
                 DATABASE::Customer,"No.",
                 "Global Dimension 1 Code","Global Dimension 2 Code");

               UpdateReferencedIds;
               SetLastModifiedDateTime;
             END;

    OnModify=BEGIN
               UpdateReferencedIds;
               SetLastModifiedDateTime;
               IF IsContactUpdateNeeded THEN BEGIN
                 MODIFY;
                 UpdateContFromCust.OnModify(Rec);
                 IF NOT FIND THEN BEGIN
                   RESET;
                   IF FIND THEN;
                 END;
               END;
             END;

    OnDelete=VAR
               CampaignTargetGr@1000 : Record 7030;
               ContactBusRel@1001 : Record 5054;
               Job@1004 : Record 167;
               SocialListeningSearchTopic@1007 : Record 871;
               StdCustSalesCode@1003 : Record 172;
               CustomReportSelection@1008 : Record 9657;
               MyCustomer@1005 : Record 9150;
               ServHeader@1009 : Record 5900;
               CampaignTargetGrMgmt@1002 : Codeunit 7030;
               VATRegistrationLogMgt@1006 : Codeunit 249;
               ConfirmManagement@1010 : Codeunit 27;
             BEGIN
               ApprovalsMgmt.OnCancelCustomerApprovalRequest(Rec);

               ServiceItem.SETRANGE("Customer No.","No.");
               IF ServiceItem.FINDFIRST THEN
                 IF ConfirmManagement.ConfirmProcess(
                      STRSUBSTNO(Text008,TABLECAPTION,"No.",ServiceItem.FIELDCAPTION("Customer No.")),TRUE)
                 THEN
                   ServiceItem.MODIFYALL("Customer No.",'')
                 ELSE
                   ERROR(Text009);

               Job.SETRANGE("Bill-to Customer No.","No.");
               IF NOT Job.ISEMPTY THEN
                 ERROR(Text015,TABLECAPTION,"No.",Job.TABLECAPTION);

               MoveEntries.MoveCustEntries(Rec);

               CommentLine.SETRANGE("Table Name",CommentLine."Table Name"::Customer);
               CommentLine.SETRANGE("No.","No.");
               CommentLine.DELETEALL;

               CustBankAcc.SETRANGE("Customer No.","No.");
               CustBankAcc.DELETEALL;

               ShipToAddr.SETRANGE("Customer No.","No.");
               ShipToAddr.DELETEALL;

               SalesPrice.SETRANGE("Sales Type",SalesPrice."Sales Type"::Customer);
               SalesPrice.SETRANGE("Sales Code","No.");
               SalesPrice.DELETEALL;

               SalesLineDisc.SETRANGE("Sales Type",SalesLineDisc."Sales Type"::Customer);
               SalesLineDisc.SETRANGE("Sales Code","No.");
               SalesLineDisc.DELETEALL;

               SalesPrepmtPct.SETCURRENTKEY("Sales Type","Sales Code");
               SalesPrepmtPct.SETRANGE("Sales Type",SalesPrepmtPct."Sales Type"::Customer);
               SalesPrepmtPct.SETRANGE("Sales Code","No.");
               SalesPrepmtPct.DELETEALL;

               StdCustSalesCode.SETRANGE("Customer No.","No.");
               StdCustSalesCode.DELETEALL(TRUE);

               ItemCrossReference.SETCURRENTKEY("Cross-Reference Type","Cross-Reference Type No.");
               ItemCrossReference.SETRANGE("Cross-Reference Type",ItemCrossReference."Cross-Reference Type"::Customer);
               ItemCrossReference.SETRANGE("Cross-Reference Type No.","No.");
               ItemCrossReference.DELETEALL;

               IF NOT SocialListeningSearchTopic.ISEMPTY THEN BEGIN
                 SocialListeningSearchTopic.FindSearchTopic(SocialListeningSearchTopic."Source Type"::Customer,"No.");
                 SocialListeningSearchTopic.DELETEALL;
               END;

               SalesOrderLine.SETCURRENTKEY("Document Type","Bill-to Customer No.");
               SalesOrderLine.SETRANGE("Bill-to Customer No.","No.");
               IF SalesOrderLine.FINDFIRST THEN
                 ERROR(
                   Text000,
                   TABLECAPTION,"No.",SalesOrderLine."Document Type");

               SalesOrderLine.SETRANGE("Bill-to Customer No.");
               SalesOrderLine.SETRANGE("Sell-to Customer No.","No.");
               IF SalesOrderLine.FINDFIRST THEN
                 ERROR(
                   Text000,
                   TABLECAPTION,"No.",SalesOrderLine."Document Type");

               CampaignTargetGr.SETRANGE("No.","No.");
               CampaignTargetGr.SETRANGE(Type,CampaignTargetGr.Type::Customer);
               IF CampaignTargetGr.FIND('-') THEN BEGIN
                 ContactBusRel.SETRANGE("Link to Table",ContactBusRel."Link to Table"::Customer);
                 ContactBusRel.SETRANGE("No.","No.");
                 ContactBusRel.FINDFIRST;
                 REPEAT
                   CampaignTargetGrMgmt.ConverttoContact(Rec,ContactBusRel."Contact No.");
                 UNTIL CampaignTargetGr.NEXT = 0;
               END;

               ServContract.SETFILTER(Status,'<>%1',ServContract.Status::Canceled);
               ServContract.SETRANGE("Customer No.","No.");
               IF NOT ServContract.ISEMPTY THEN
                 ERROR(
                   Text007,
                   TABLECAPTION,"No.");

               ServContract.SETRANGE(Status);
               ServContract.MODIFYALL("Customer No.",'');

               ServContract.SETFILTER(Status,'<>%1',ServContract.Status::Canceled);
               ServContract.SETRANGE("Bill-to Customer No.","No.");
               IF NOT ServContract.ISEMPTY THEN
                 ERROR(
                   Text007,
                   TABLECAPTION,"No.");

               ServContract.SETRANGE(Status);
               ServContract.MODIFYALL("Bill-to Customer No.",'');

               ServHeader.SETCURRENTKEY("Customer No.","Order Date");
               ServHeader.SETRANGE("Customer No.","No.");
               IF ServHeader.FINDFIRST THEN
                 ERROR(
                   Text013,
                   TABLECAPTION,"No.",ServHeader."Document Type");

               ServHeader.SETRANGE("Bill-to Customer No.");
               IF ServHeader.FINDFIRST THEN
                 ERROR(
                   Text013,
                   TABLECAPTION,"No.",ServHeader."Document Type");

               UpdateContFromCust.OnDelete(Rec);

               CustomReportSelection.SETRANGE("Source Type",DATABASE::Customer);
               CustomReportSelection.SETRANGE("Source No.","No.");
               CustomReportSelection.DELETEALL;

               MyCustomer.SETRANGE("Customer No.","No.");
               MyCustomer.DELETEALL;
               VATRegistrationLogMgt.DeleteCustomerLog(Rec);

               DimMgt.DeleteDefaultDim(DATABASE::Customer,"No.");

               CalendarManagement.DeleteCustomizedBaseCalendarData(CustomizedCalendarChange."Source Type"::Customer,"No.");
             END;

    OnRename=VAR
               CustomerTemplate@1000 : Record 5105;
             BEGIN
               ApprovalsMgmt.OnRenameRecordInApprovalRequest(xRec.RECORDID,RECORDID);
               DimMgt.RenameDefaultDim(DATABASE::Customer,xRec."No.","No.");

               SetLastModifiedDateTime;
               IF xRec."Invoice Disc. Code" = xRec."No." THEN
                 "Invoice Disc. Code" := "No.";
               CustomerTemplate.SETRANGE("Invoice Disc. Code",xRec."No.");
               CustomerTemplate.MODIFYALL("Invoice Disc. Code","No.");

               CalendarManagement.RenameCustomizedBaseCalendarData(CustomizedCalendarChange."Source Type"::Customer,"No.",xRec."No.");
             END;

    CaptionML=[ENU=Customer;
               ENN=Customer];
    LookupPageID=Page33;
    DrillDownPageID=Page22;
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;OnValidate=BEGIN
                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  SalesSetup.GET;
                                                                  NoSeriesMgt.TestManual(SalesSetup."Customer Nos.");
                                                                  "No. Series" := '';
                                                                END;
                                                                IF "Invoice Disc. Code" = '' THEN
                                                                  "Invoice Disc. Code" := "No.";
                                                              END;

                                                   AltSearchField=Search Name;
                                                   CaptionML=[ENU=No.;
                                                              ENN=No.] }
    { 2   ;   ;Name                ;Text100       ;OnValidate=BEGIN
                                                                IF ("Search Name" = UPPERCASE(xRec.Name)) OR ("Search Name" = '') THEN
                                                                  "Search Name" := Name;
                                                              END;

                                                   Description=AD_SD }
    { 3   ;   ;Search Name         ;Code100       ;Description=AD_SD }
    { 4   ;   ;Name 2              ;Text50         }
    { 5   ;   ;Address             ;Text100       ;Description=AD_SD }
    { 6   ;   ;Address 2           ;Text60        ;Description=AD_SD }
    { 7   ;   ;City                ;Text30        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);

                                                                OnAfterValidateCity(Rec,xRec);
                                                              END;

                                                   OnLookup=BEGIN
                                                              PostCode.LookupPostCode(City,"Post Code",County,"Country/Region Code");
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=City;
                                                              ENN=City] }
    { 8   ;   ;Contact             ;Text100       ;OnValidate=BEGIN
                                                                IF RMSetup.GET THEN
                                                                  IF RMSetup."Bus. Rel. Code for Customers" <> '' THEN
                                                                    IF (xRec.Contact = '') AND (xRec."Primary Contact No." = '') AND (Contact <> '') THEN BEGIN
                                                                      MODIFY;
                                                                      UpdateContFromCust.OnModify(Rec);
                                                                      UpdateContFromCust.InsertNewContactPerson(Rec,FALSE);
                                                                      MODIFY(TRUE);
                                                                    END
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupContactList;
                                                            END;

                                                   CaptionML=[ENU=Contact;
                                                              ENN=Contact] }
    { 9   ;   ;Phone No.           ;Text30        ;OnValidate=VAR
                                                                Char@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Char";
                                                                i@1001 : Integer;
                                                              BEGIN
                                                                FOR i := 1 TO STRLEN("Phone No.") DO
                                                                  IF Char.IsLetter("Phone No."[i]) THEN
                                                                    FIELDERROR("Phone No.",PhoneNoCannotContainLettersErr);
                                                              END;

                                                   ExtendedDatatype=Phone No.;
                                                   CaptionML=[ENU=Phone No.;
                                                              ENN=Phone No.] }
    { 10  ;   ;Telex No.           ;Text20        ;CaptionML=[ENU=Telex No.;
                                                              ENN=Telex No.] }
    { 11  ;   ;Document Sending Profile;Code20    ;TableRelation="Document Sending Profile".Code;
                                                   CaptionML=[ENU=Document Sending Profile;
                                                              ENN=Document Sending Profile] }
    { 12  ;   ;Ship-to Code        ;Code10        ;TableRelation="Ship-to Address".Code WHERE (Customer No.=FIELD(No.));
                                                   CaptionML=[ENU=Ship-to Code;
                                                              ENN=Ship-to Code] }
    { 14  ;   ;Our Account No.     ;Text20        ;CaptionML=[ENU=Our Account No.;
                                                              ENN=Our Account No.] }
    { 15  ;   ;Territory Code      ;Code10        ;TableRelation=Territory;
                                                   CaptionML=[ENU=Territory Code;
                                                              ENN=Territory Code] }
    { 16  ;   ;Global Dimension 1 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Global Dimension 1 Code");
                                                              END;

                                                   CaptionML=[ENU=Global Dimension 1 Code;
                                                              ENN=Global Dimension 1 Code];
                                                   CaptionClass='1,1,1' }
    { 17  ;   ;Global Dimension 2 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Global Dimension 2 Code");
                                                              END;

                                                   CaptionML=[ENU=Global Dimension 2 Code;
                                                              ENN=Global Dimension 2 Code];
                                                   CaptionClass='1,1,2' }
    { 18  ;   ;Chain Name          ;Code10        ;CaptionML=[ENU=Chain Name;
                                                              ENN=Chain Name] }
    { 19  ;   ;Budgeted Amount     ;Decimal       ;CaptionML=[ENU=Budgeted Amount;
                                                              ENN=Budgeted Amount];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 20  ;   ;Credit Limit (LCY)  ;Decimal       ;CaptionML=[ENU=Credit Limit (LCY);
                                                              ENN=Credit Limit (LCY)];
                                                   AutoFormatType=1 }
    { 21  ;   ;Customer Posting Group;Code20      ;TableRelation="Customer Posting Group";
                                                   CaptionML=[ENU=Customer Posting Group;
                                                              ENN=Customer Posting Group] }
    { 22  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   OnValidate=BEGIN
                                                                UpdateCurrencyId;
                                                              END;

                                                   CaptionML=[ENU=Currency Code;
                                                              ENN=Currency Code] }
    { 23  ;   ;Customer Price Group;Code10        ;TableRelation="Customer Price Group";
                                                   CaptionML=[ENU=Customer Price Group;
                                                              ENN=Customer Price Group] }
    { 24  ;   ;Language Code       ;Code10        ;TableRelation=Language;
                                                   CaptionML=[ENU=Language Code;
                                                              ENN=Language Code] }
    { 26  ;   ;Statistics Group    ;Integer       ;CaptionML=[ENU=Statistics Group;
                                                              ENN=Statistics Group] }
    { 27  ;   ;Payment Terms Code  ;Code10        ;TableRelation="Payment Terms";
                                                   OnValidate=BEGIN
                                                                UpdatePaymentTermsId;
                                                              END;

                                                   CaptionML=[ENU=Payment Terms Code;
                                                              ENN=Payment Terms Code] }
    { 28  ;   ;Fin. Charge Terms Code;Code10      ;TableRelation="Finance Charge Terms";
                                                   CaptionML=[ENU=Fin. Charge Terms Code;
                                                              ENN=Fin. Charge Terms Code] }
    { 29  ;   ;Salesperson Code    ;Code20        ;TableRelation=Salesperson/Purchaser;
                                                   OnValidate=BEGIN
                                                                ValidateSalesPersonCode;
                                                              END;

                                                   CaptionML=[ENU=Salesperson Code;
                                                              ENN=Salesperson Code] }
    { 30  ;   ;Shipment Method Code;Code10        ;TableRelation="Shipment Method";
                                                   OnValidate=BEGIN
                                                                UpdateShipmentMethodId;
                                                              END;

                                                   CaptionML=[ENU=Shipment Method Code;
                                                              ENN=Shipment Method Code] }
    { 31  ;   ;Shipping Agent Code ;Code10        ;TableRelation="Shipping Agent";
                                                   OnValidate=BEGIN
                                                                IF "Shipping Agent Code" <> xRec."Shipping Agent Code" THEN
                                                                  VALIDATE("Shipping Agent Service Code",'');
                                                              END;

                                                   AccessByPermission=TableData 5790=R;
                                                   CaptionML=[ENU=Shipping Agent Code;
                                                              ENN=Shipping Agent Code] }
    { 32  ;   ;Place of Export     ;Code20        ;CaptionML=[ENU=Place of Export;
                                                              ENN=Place of Export] }
    { 33  ;   ;Invoice Disc. Code  ;Code20        ;TableRelation=Customer;
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Invoice Disc. Code;
                                                              ENN=Invoice Disc. Code] }
    { 34  ;   ;Customer Disc. Group;Code20        ;TableRelation="Customer Discount Group";
                                                   CaptionML=[ENU=Customer Disc. Group;
                                                              ENN=Customer Disc. Group] }
    { 35  ;   ;Country/Region Code ;Code10        ;TableRelation=Country/Region;
                                                   OnValidate=BEGIN
                                                                PostCode.CheckClearPostCodeCityCounty(City,"Post Code",County,"Country/Region Code",xRec."Country/Region Code");

                                                                IF "Country/Region Code" <> xRec."Country/Region Code" THEN
                                                                  VATRegistrationValidation;
                                                              END;

                                                   CaptionML=[ENU=Country/Region Code;
                                                              ENN=Country/Region Code] }
    { 36  ;   ;Collection Method   ;Code20        ;CaptionML=[ENU=Collection Method;
                                                              ENN=Collection Method] }
    { 37  ;   ;Amount              ;Decimal       ;CaptionML=[ENU=Amount;
                                                              ENN=Amount];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 38  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Comment Line" WHERE (Table Name=CONST(Customer),
                                                                                           No.=FIELD(No.)));
                                                   CaptionML=[ENU=Comment;
                                                              ENN=Comment];
                                                   Editable=No }
    { 39  ;   ;Blocked             ;Option        ;OnValidate=BEGIN
                                                                IF (Blocked <> Blocked::All) AND "Privacy Blocked" THEN
                                                                  IF GUIALLOWED THEN
                                                                    IF CONFIRM(ConfirmBlockedPrivacyBlockedQst) THEN
                                                                      "Privacy Blocked" := FALSE
                                                                    ELSE
                                                                      ERROR('')
                                                                  ELSE
                                                                    ERROR(CanNotChangeBlockedDueToPrivacyBlockedErr);
                                                              END;

                                                   CaptionML=[ENU=Blocked;
                                                              ENN=Blocked];
                                                   OptionCaptionML=[ENU=" ,Ship,Invoice,All";
                                                                    ENN=" ,Ship,Invoice,All"];
                                                   OptionString=[ ,Ship,Invoice,All] }
    { 40  ;   ;Invoice Copies      ;Integer       ;CaptionML=[ENU=Invoice Copies;
                                                              ENN=Invoice Copies] }
    { 41  ;   ;Last Statement No.  ;Integer       ;CaptionML=[ENU=Last Statement No.;
                                                              ENN=Last Statement No.] }
    { 42  ;   ;Print Statements    ;Boolean       ;CaptionML=[ENU=Print Statements;
                                                              ENN=Print Statements] }
    { 45  ;   ;Bill-to Customer No.;Code20        ;TableRelation=Customer;
                                                   CaptionML=[ENU=Bill-to Customer No.;
                                                              ENN=Bill-to Customer No.] }
    { 46  ;   ;Priority            ;Integer       ;CaptionML=[ENU=Priority;
                                                              ENN=Priority] }
    { 47  ;   ;Payment Method Code ;Code10        ;TableRelation="Payment Method";
                                                   OnValidate=VAR
                                                                PaymentMethod@1000 : Record 289;
                                                              BEGIN
                                                                UpdatePaymentMethodId;

                                                                IF "Payment Method Code" = '' THEN
                                                                  EXIT;

                                                                PaymentMethod.GET("Payment Method Code");
                                                                IF PaymentMethod."Direct Debit" AND ("Payment Terms Code" = '') THEN
                                                                  VALIDATE("Payment Terms Code",PaymentMethod."Direct Debit Pmt. Terms Code");
                                                              END;

                                                   CaptionML=[ENU=Payment Method Code;
                                                              ENN=Payment Method Code] }
    { 53  ;   ;Last Modified Date Time;DateTime   ;CaptionML=[ENU=Last Modified Date Time;
                                                              ENN=Last Modified Date Time];
                                                   Editable=No }
    { 54  ;   ;Last Date Modified  ;Date          ;CaptionML=[ENU=Last Date Modified;
                                                              ENN=Last Date Modified];
                                                   Editable=No }
    { 55  ;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Date Filter;
                                                              ENN=Date Filter] }
    { 56  ;   ;Global Dimension 1 Filter;Code20   ;FieldClass=FlowFilter;
                                                   TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   CaptionML=[ENU=Global Dimension 1 Filter;
                                                              ENN=Global Dimension 1 Filter];
                                                   CaptionClass='1,3,1' }
    { 57  ;   ;Global Dimension 2 Filter;Code20   ;FieldClass=FlowFilter;
                                                   TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   CaptionML=[ENU=Global Dimension 2 Filter;
                                                              ENN=Global Dimension 2 Filter];
                                                   CaptionClass='1,3,2' }
    { 58  ;   ;Balance             ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry".Amount WHERE (Customer No.=FIELD(No.),
                                                                                                              Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                              Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                              Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=[ENU=Balance;
                                                              ENN=Balance];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 59  ;   ;Balance (LCY)       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry"."Amount (LCY)" WHERE (Customer No.=FIELD(No.),
                                                                                                                      Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                      Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                      Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=[ENU=Balance (LCY);
                                                              ENN=Balance (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 60  ;   ;Net Change          ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry".Amount WHERE (Customer No.=FIELD(No.),
                                                                                                              Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                              Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                              Posting Date=FIELD(Date Filter),
                                                                                                              Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=[ENU=Net Change;
                                                              ENN=Net Change];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 61  ;   ;Net Change (LCY)    ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry"."Amount (LCY)" WHERE (Customer No.=FIELD(No.),
                                                                                                                      Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                      Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                      Posting Date=FIELD(Date Filter),
                                                                                                                      Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=[ENU=Net Change (LCY);
                                                              ENN=Net Change (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 62  ;   ;Sales (LCY)         ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Cust. Ledger Entry"."Sales (LCY)" WHERE (Customer No.=FIELD(No.),
                                                                                                             Global Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                             Global Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                             Posting Date=FIELD(Date Filter),
                                                                                                             Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=[ENU=Sales (LCY);
                                                              ENN=Sales (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 63  ;   ;Profit (LCY)        ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Cust. Ledger Entry"."Profit (LCY)" WHERE (Customer No.=FIELD(No.),
                                                                                                              Global Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                              Global Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                              Posting Date=FIELD(Date Filter),
                                                                                                              Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=[ENU=Profit (LCY);
                                                              ENN=Profit (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 64  ;   ;Inv. Discounts (LCY);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Cust. Ledger Entry"."Inv. Discount (LCY)" WHERE (Customer No.=FIELD(No.),
                                                                                                                     Global Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                     Global Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                     Posting Date=FIELD(Date Filter),
                                                                                                                     Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=[ENU=Inv. Discounts (LCY);
                                                              ENN=Inv. Discounts (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 65  ;   ;Pmt. Discounts (LCY);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Detailed Cust. Ledg. Entry"."Amount (LCY)" WHERE (Customer No.=FIELD(No.),
                                                                                                                       Entry Type=FILTER(Payment Discount..'Payment Discount (VAT Adjustment)'),
                                                                                                                       Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                       Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                       Posting Date=FIELD(Date Filter),
                                                                                                                       Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=[ENU=Pmt. Discounts (LCY);
                                                              ENN=Pmt. Discounts (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 66  ;   ;Balance Due         ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry".Amount WHERE (Customer No.=FIELD(No.),
                                                                                                              Initial Entry Due Date=FIELD(UPPERLIMIT(Date Filter)),
                                                                                                              Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                              Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                              Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=[ENU=Balance Due;
                                                              ENN=Balance Due];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 67  ;   ;Balance Due (LCY)   ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry"."Amount (LCY)" WHERE (Customer No.=FIELD(No.),
                                                                                                                      Initial Entry Due Date=FIELD(UPPERLIMIT(Date Filter)),
                                                                                                                      Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                      Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                      Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=[ENU=Balance Due (LCY);
                                                              ENN=Balance Due (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 69  ;   ;Payments            ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Detailed Cust. Ledg. Entry".Amount WHERE (Initial Document Type=CONST(Payment),
                                                                                                               Entry Type=CONST(Initial Entry),
                                                                                                               Customer No.=FIELD(No.),
                                                                                                               Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                               Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                               Posting Date=FIELD(Date Filter),
                                                                                                               Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=[ENU=Payments;
                                                              ENN=Payments];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 70  ;   ;Invoice Amounts     ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry".Amount WHERE (Initial Document Type=CONST(Invoice),
                                                                                                              Entry Type=CONST(Initial Entry),
                                                                                                              Customer No.=FIELD(No.),
                                                                                                              Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                              Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                              Posting Date=FIELD(Date Filter),
                                                                                                              Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=[ENU=Invoice Amounts;
                                                              ENN=Invoice Amounts];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 71  ;   ;Cr. Memo Amounts    ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Detailed Cust. Ledg. Entry".Amount WHERE (Initial Document Type=CONST(Credit Memo),
                                                                                                               Entry Type=CONST(Initial Entry),
                                                                                                               Customer No.=FIELD(No.),
                                                                                                               Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                               Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                               Posting Date=FIELD(Date Filter),
                                                                                                               Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=[ENU=Cr. Memo Amounts;
                                                              ENN=Cr. Memo Amounts];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 72  ;   ;Finance Charge Memo Amounts;Decimal;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry".Amount WHERE (Initial Document Type=CONST(Finance Charge Memo),
                                                                                                              Entry Type=CONST(Initial Entry),
                                                                                                              Customer No.=FIELD(No.),
                                                                                                              Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                              Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                              Posting Date=FIELD(Date Filter),
                                                                                                              Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=[ENU=Finance Charge Memo Amounts;
                                                              ENN=Finance Charge Memo Amounts];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 74  ;   ;Payments (LCY)      ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Detailed Cust. Ledg. Entry"."Amount (LCY)" WHERE (Initial Document Type=CONST(Payment),
                                                                                                                       Entry Type=CONST(Initial Entry),
                                                                                                                       Customer No.=FIELD(No.),
                                                                                                                       Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                       Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                       Posting Date=FIELD(Date Filter),
                                                                                                                       Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=[ENU=Payments (LCY);
                                                              ENN=Payments (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 75  ;   ;Inv. Amounts (LCY)  ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry"."Amount (LCY)" WHERE (Initial Document Type=CONST(Invoice),
                                                                                                                      Entry Type=CONST(Initial Entry),
                                                                                                                      Customer No.=FIELD(No.),
                                                                                                                      Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                      Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                      Posting Date=FIELD(Date Filter),
                                                                                                                      Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=[ENU=Inv. Amounts (LCY);
                                                              ENN=Inv. Amounts (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 76  ;   ;Cr. Memo Amounts (LCY);Decimal     ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Detailed Cust. Ledg. Entry"."Amount (LCY)" WHERE (Initial Document Type=CONST(Credit Memo),
                                                                                                                       Entry Type=CONST(Initial Entry),
                                                                                                                       Customer No.=FIELD(No.),
                                                                                                                       Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                       Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                       Posting Date=FIELD(Date Filter),
                                                                                                                       Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=[ENU=Cr. Memo Amounts (LCY);
                                                              ENN=Cr. Memo Amounts (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 77  ;   ;Fin. Charge Memo Amounts (LCY);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry"."Amount (LCY)" WHERE (Initial Document Type=CONST(Finance Charge Memo),
                                                                                                                      Entry Type=CONST(Initial Entry),
                                                                                                                      Customer No.=FIELD(No.),
                                                                                                                      Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                      Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                      Posting Date=FIELD(Date Filter),
                                                                                                                      Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=[ENU=Fin. Charge Memo Amounts (LCY);
                                                              ENN=Fin. Charge Memo Amounts (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 78  ;   ;Outstanding Orders  ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Line"."Outstanding Amount" WHERE (Document Type=CONST(Order),
                                                                                                            Bill-to Customer No.=FIELD(No.),
                                                                                                            Shortcut Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                            Shortcut Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                            Currency Code=FIELD(Currency Filter)));
                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=[ENU=Outstanding Orders;
                                                              ENN=Outstanding Orders];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 79  ;   ;Shipped Not Invoiced;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Line"."Shipped Not Invoiced" WHERE (Document Type=CONST(Order),
                                                                                                              Bill-to Customer No.=FIELD(No.),
                                                                                                              Shortcut Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                              Shortcut Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                              Currency Code=FIELD(Currency Filter)));
                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=[ENU=Shipped Not Invoiced;
                                                              ENN=Shipped Not Invoiced];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 80  ;   ;Application Method  ;Option        ;CaptionML=[ENU=Application Method;
                                                              ENN=Application Method];
                                                   OptionCaptionML=[ENU=Manual,Apply to Oldest;
                                                                    ENN=Manual,Apply to Oldest];
                                                   OptionString=Manual,Apply to Oldest }
    { 82  ;   ;Prices Including VAT;Boolean       ;CaptionML=[ENU=Prices Including VAT;
                                                              ENN=Prices Including VAT] }
    { 83  ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE (Use As In-Transit=CONST(No));
                                                   CaptionML=[ENU=Location Code;
                                                              ENN=Location Code] }
    { 84  ;   ;Fax No.             ;Text30        ;CaptionML=[ENU=Fax No.;
                                                              ENN=Fax No.] }
    { 85  ;   ;Telex Answer Back   ;Text20        ;CaptionML=[ENU=Telex Answer Back;
                                                              ENN=Telex Answer Back] }
    { 86  ;   ;VAT Registration No.;Text20        ;OnValidate=BEGIN
                                                                "VAT Registration No." := UPPERCASE("VAT Registration No.");
                                                                IF "VAT Registration No." <> xRec."VAT Registration No." THEN
                                                                  VATRegistrationValidation;
                                                              END;

                                                   CaptionML=[ENU=VAT Registration No.;
                                                              ENN=VAT Registration No.] }
    { 87  ;   ;Combine Shipments   ;Boolean       ;AccessByPermission=TableData 110=R;
                                                   CaptionML=[ENU=Combine Shipments;
                                                              ENN=Combine Shipments] }
    { 88  ;   ;Gen. Bus. Posting Group;Code20     ;TableRelation="Gen. Business Posting Group";
                                                   OnValidate=BEGIN
                                                                IF xRec."Gen. Bus. Posting Group" <> "Gen. Bus. Posting Group" THEN
                                                                  IF GenBusPostingGrp.ValidateVatBusPostingGroup(GenBusPostingGrp,"Gen. Bus. Posting Group") THEN
                                                                    VALIDATE("VAT Bus. Posting Group",GenBusPostingGrp."Def. VAT Bus. Posting Group");
                                                              END;

                                                   CaptionML=[ENU=Gen. Bus. Posting Group;
                                                              ENN=Gen. Bus. Posting Group] }
    { 89  ;   ;Picture             ;BLOB          ;ObsoleteState=Pending;
                                                   ObsoleteReason=Replaced by Image field;
                                                   CaptionML=[ENU=Picture;
                                                              ENN=Picture];
                                                   SubType=Bitmap }
    { 90  ;   ;GLN                 ;Code13        ;OnValidate=VAR
                                                                GLNCalculator@1000 : Codeunit 1607;
                                                              BEGIN
                                                                IF GLN <> '' THEN
                                                                  GLNCalculator.AssertValidCheckDigit13(GLN);
                                                              END;

                                                   CaptionML=[ENU=GLN;
                                                              ENN=GLN];
                                                   Numeric=Yes }
    { 91  ;   ;Post Code           ;Code20        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code"
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);

                                                                OnAfterValidatePostCode(Rec,xRec);
                                                              END;

                                                   OnLookup=BEGIN
                                                              PostCode.LookupPostCode(City,"Post Code",County,"Country/Region Code");
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Post Code;
                                                              ENN=Postcode] }
    { 92  ;   ;County              ;Text30        ;CaptionML=[ENU=County;
                                                              ENN=County];
                                                   CaptionClass='5,1,' + "Country/Region Code" }
    { 93  ;   ;EORI Number         ;Text40        ;CaptionML=[ENU=EORI Number;
                                                              ENN=EORI Number] }
    { 95  ;   ;Use GLN in Electronic Document;Boolean;
                                                   CaptionML=[ENU=Use GLN in Electronic Documents;
                                                              ENN=Use GLN in Electronic Documents] }
    { 97  ;   ;Debit Amount        ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry"."Debit Amount" WHERE (Customer No.=FIELD(No.),
                                                                                                                      Entry Type=FILTER(<>Application),
                                                                                                                      Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                      Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                      Posting Date=FIELD(Date Filter),
                                                                                                                      Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=[ENU=Debit Amount;
                                                              ENN=Debit Amount];
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 98  ;   ;Credit Amount       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry"."Credit Amount" WHERE (Customer No.=FIELD(No.),
                                                                                                                       Entry Type=FILTER(<>Application),
                                                                                                                       Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                       Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                       Posting Date=FIELD(Date Filter),
                                                                                                                       Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=[ENU=Credit Amount;
                                                              ENN=Credit Amount];
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 99  ;   ;Debit Amount (LCY)  ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry"."Debit Amount (LCY)" WHERE (Customer No.=FIELD(No.),
                                                                                                                            Entry Type=FILTER(<>Application),
                                                                                                                            Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                            Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                            Posting Date=FIELD(Date Filter),
                                                                                                                            Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=[ENU=Debit Amount (LCY);
                                                              ENN=Debit Amount (LCY)];
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 100 ;   ;Credit Amount (LCY) ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry"."Credit Amount (LCY)" WHERE (Customer No.=FIELD(No.),
                                                                                                                             Entry Type=FILTER(<>Application),
                                                                                                                             Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                             Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                             Posting Date=FIELD(Date Filter),
                                                                                                                             Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=[ENU=Credit Amount (LCY);
                                                              ENN=Credit Amount (LCY)];
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 102 ;   ;E-Mail              ;Text80        ;OnValidate=VAR
                                                                MailManagement@1000 : Codeunit 9520;
                                                              BEGIN
                                                                IF "E-Mail" = '' THEN
                                                                  EXIT;
                                                                MailManagement.CheckValidEmailAddresses("E-Mail");
                                                              END;

                                                   ExtendedDatatype=E-Mail;
                                                   CaptionML=[ENU=Email;
                                                              ENN=Email] }
    { 103 ;   ;Home Page           ;Text80        ;ExtendedDatatype=URL;
                                                   CaptionML=[ENU=Home Page;
                                                              ENN=Home Page] }
    { 104 ;   ;Reminder Terms Code ;Code10        ;TableRelation="Reminder Terms";
                                                   CaptionML=[ENU=Reminder Terms Code;
                                                              ENN=Reminder Terms Code] }
    { 105 ;   ;Reminder Amounts    ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry".Amount WHERE (Initial Document Type=CONST(Reminder),
                                                                                                              Entry Type=CONST(Initial Entry),
                                                                                                              Customer No.=FIELD(No.),
                                                                                                              Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                              Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                              Posting Date=FIELD(Date Filter),
                                                                                                              Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=[ENU=Reminder Amounts;
                                                              ENN=Reminder Amounts];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 106 ;   ;Reminder Amounts (LCY);Decimal     ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry"."Amount (LCY)" WHERE (Initial Document Type=CONST(Reminder),
                                                                                                                      Entry Type=CONST(Initial Entry),
                                                                                                                      Customer No.=FIELD(No.),
                                                                                                                      Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                      Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                      Posting Date=FIELD(Date Filter),
                                                                                                                      Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=[ENU=Reminder Amounts (LCY);
                                                              ENN=Reminder Amounts (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 107 ;   ;No. Series          ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=[ENU=No. Series;
                                                              ENN=No. Series];
                                                   Editable=No }
    { 108 ;   ;Tax Area Code       ;Code20        ;TableRelation="Tax Area";
                                                   OnValidate=BEGIN
                                                                UpdateTaxAreaId;
                                                              END;

                                                   CaptionML=[ENU=Tax Area Code;
                                                              ENN=VAT Area Code] }
    { 109 ;   ;Tax Liable          ;Boolean       ;CaptionML=[ENU=Tax Liable;
                                                              ENN=VAT Liable] }
    { 110 ;   ;VAT Bus. Posting Group;Code20      ;TableRelation="VAT Business Posting Group";
                                                   OnValidate=BEGIN
                                                                UpdateTaxAreaId;
                                                              END;

                                                   CaptionML=[ENU=VAT Bus. Posting Group;
                                                              ENN=VAT Bus. Posting Group] }
    { 111 ;   ;Currency Filter     ;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation=Currency;
                                                   CaptionML=[ENU=Currency Filter;
                                                              ENN=Currency Filter] }
    { 113 ;   ;Outstanding Orders (LCY);Decimal   ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Line"."Outstanding Amount (LCY)" WHERE (Document Type=CONST(Order),
                                                                                                                  Bill-to Customer No.=FIELD(No.),
                                                                                                                  Shortcut Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                  Shortcut Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                  Currency Code=FIELD(Currency Filter)));
                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=[ENU=Outstanding Orders (LCY);
                                                              ENN=Outstanding Orders (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 114 ;   ;Shipped Not Invoiced (LCY);Decimal ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Line"."Shipped Not Invoiced (LCY)" WHERE (Document Type=CONST(Order),
                                                                                                                    Bill-to Customer No.=FIELD(No.),
                                                                                                                    Shortcut Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                    Shortcut Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                    Currency Code=FIELD(Currency Filter)));
                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=[ENU=Shipped Not Invoiced (LCY);
                                                              ENN=Shipped Not Invoiced (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 115 ;   ;Reserve             ;Option        ;InitValue=Optional;
                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=[ENU=Reserve;
                                                              ENN=Reserve];
                                                   OptionCaptionML=[ENU=Never,Optional,Always;
                                                                    ENN=Never,Optional,Always];
                                                   OptionString=Never,Optional,Always }
    { 116 ;   ;Block Payment Tolerance;Boolean    ;OnValidate=BEGIN
                                                                UpdatePaymentTolerance((CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   CaptionML=[ENU=Block Payment Tolerance;
                                                              ENN=Block Payment Tolerance] }
    { 117 ;   ;Pmt. Disc. Tolerance (LCY);Decimal ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Detailed Cust. Ledg. Entry"."Amount (LCY)" WHERE (Customer No.=FIELD(No.),
                                                                                                                       Entry Type=FILTER(Payment Discount Tolerance|'Payment Discount Tolerance (VAT Adjustment)'|'Payment Discount Tolerance (VAT Excl.)'),
                                                                                                                       Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                       Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                       Posting Date=FIELD(Date Filter),
                                                                                                                       Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=[ENU=Pmt. Disc. Tolerance (LCY);
                                                              ENN=Pmt. Disc. Tolerance (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 118 ;   ;Pmt. Tolerance (LCY);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Detailed Cust. Ledg. Entry"."Amount (LCY)" WHERE (Customer No.=FIELD(No.),
                                                                                                                       Entry Type=FILTER(Payment Tolerance|'Payment Tolerance (VAT Adjustment)'|'Payment Tolerance (VAT Excl.)'),
                                                                                                                       Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                       Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                       Posting Date=FIELD(Date Filter),
                                                                                                                       Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=[ENU=Pmt. Tolerance (LCY);
                                                              ENN=Pmt. Tolerance (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 119 ;   ;IC Partner Code     ;Code20        ;TableRelation="IC Partner";
                                                   OnValidate=VAR
                                                                CustLedgEntry@1001 : Record 21;
                                                                AccountingPeriod@1000 : Record 50;
                                                                ICPartner@1002 : Record 413;
                                                                ConfirmManagement@1003 : Codeunit 27;
                                                              BEGIN
                                                                IF xRec."IC Partner Code" <> "IC Partner Code" THEN BEGIN
                                                                  IF NOT CustLedgEntry.SETCURRENTKEY("Customer No.",Open) THEN
                                                                    CustLedgEntry.SETCURRENTKEY("Customer No.");
                                                                  CustLedgEntry.SETRANGE("Customer No.","No.");
                                                                  CustLedgEntry.SETRANGE(Open,TRUE);
                                                                  IF CustLedgEntry.FINDLAST THEN
                                                                    ERROR(Text012,FIELDCAPTION("IC Partner Code"),TABLECAPTION);

                                                                  CustLedgEntry.RESET;
                                                                  CustLedgEntry.SETCURRENTKEY("Customer No.","Posting Date");
                                                                  CustLedgEntry.SETRANGE("Customer No.","No.");
                                                                  AccountingPeriod.SETRANGE(Closed,FALSE);
                                                                  IF AccountingPeriod.FINDFIRST THEN BEGIN
                                                                    CustLedgEntry.SETFILTER("Posting Date",'>=%1',AccountingPeriod."Starting Date");
                                                                    IF CustLedgEntry.FINDFIRST THEN
                                                                      IF NOT ConfirmManagement.ConfirmProcess(STRSUBSTNO(Text011,TABLECAPTION),TRUE) THEN
                                                                        "IC Partner Code" := xRec."IC Partner Code";
                                                                  END;
                                                                END;

                                                                IF "IC Partner Code" <> '' THEN BEGIN
                                                                  ICPartner.GET("IC Partner Code");
                                                                  IF (ICPartner."Customer No." <> '') AND (ICPartner."Customer No." <> "No.") THEN
                                                                    ERROR(Text010,FIELDCAPTION("IC Partner Code"),"IC Partner Code",TABLECAPTION,ICPartner."Customer No.");
                                                                  ICPartner."Customer No." := "No.";
                                                                  ICPartner.MODIFY;
                                                                END;

                                                                IF (xRec."IC Partner Code" <> "IC Partner Code") AND ICPartner.GET(xRec."IC Partner Code") THEN BEGIN
                                                                  ICPartner."Customer No." := '';
                                                                  ICPartner.MODIFY;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=IC Partner Code;
                                                              ENN=IC Partner Code] }
    { 120 ;   ;Refunds             ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry".Amount WHERE (Initial Document Type=CONST(Refund),
                                                                                                              Entry Type=CONST(Initial Entry),
                                                                                                              Customer No.=FIELD(No.),
                                                                                                              Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                              Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                              Posting Date=FIELD(Date Filter),
                                                                                                              Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=[ENU=Refunds;
                                                              ENN=Refunds] }
    { 121 ;   ;Refunds (LCY)       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry"."Amount (LCY)" WHERE (Initial Document Type=CONST(Refund),
                                                                                                                      Entry Type=CONST(Initial Entry),
                                                                                                                      Customer No.=FIELD(No.),
                                                                                                                      Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                      Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                      Posting Date=FIELD(Date Filter),
                                                                                                                      Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=[ENU=Refunds (LCY);
                                                              ENN=Refunds (LCY)] }
    { 122 ;   ;Other Amounts       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry".Amount WHERE (Initial Document Type=CONST(" "),
                                                                                                              Entry Type=CONST(Initial Entry),
                                                                                                              Customer No.=FIELD(No.),
                                                                                                              Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                              Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                              Posting Date=FIELD(Date Filter),
                                                                                                              Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=[ENU=Other Amounts;
                                                              ENN=Other Amounts] }
    { 123 ;   ;Other Amounts (LCY) ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry"."Amount (LCY)" WHERE (Initial Document Type=CONST(" "),
                                                                                                                      Entry Type=CONST(Initial Entry),
                                                                                                                      Customer No.=FIELD(No.),
                                                                                                                      Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                      Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                      Posting Date=FIELD(Date Filter),
                                                                                                                      Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=[ENU=Other Amounts (LCY);
                                                              ENN=Other Amounts (LCY)] }
    { 124 ;   ;Prepayment %        ;Decimal       ;CaptionML=[ENU=Prepayment %;
                                                              ENN=Prepayment %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 125 ;   ;Outstanding Invoices (LCY);Decimal ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Line"."Outstanding Amount (LCY)" WHERE (Document Type=CONST(Invoice),
                                                                                                                  Bill-to Customer No.=FIELD(No.),
                                                                                                                  Shortcut Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                  Shortcut Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                  Currency Code=FIELD(Currency Filter)));
                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=[ENU=Outstanding Invoices (LCY);
                                                              ENN=Outstanding Invoices (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 126 ;   ;Outstanding Invoices;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Line"."Outstanding Amount" WHERE (Document Type=CONST(Invoice),
                                                                                                            Bill-to Customer No.=FIELD(No.),
                                                                                                            Shortcut Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                            Shortcut Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                            Currency Code=FIELD(Currency Filter)));
                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=[ENU=Outstanding Invoices;
                                                              ENN=Outstanding Invoices];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 130 ;   ;Bill-to No. Of Archived Doc.;Integer;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Header Archive" WHERE (Document Type=CONST(Order),
                                                                                                   Bill-to Customer No.=FIELD(No.)));
                                                   CaptionML=[ENU=Bill-to No. Of Archived Doc.;
                                                              ENN=Bill-to No. Of Archived Doc.] }
    { 131 ;   ;Sell-to No. Of Archived Doc.;Integer;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Header Archive" WHERE (Document Type=CONST(Order),
                                                                                                   Sell-to Customer No.=FIELD(No.)));
                                                   CaptionML=[ENU=Sell-to No. Of Archived Doc.;
                                                              ENN=Sell-to No. Of Archived Doc.] }
    { 132 ;   ;Partner Type        ;Option        ;CaptionML=[ENU=Partner Type;
                                                              ENN=Partner Type];
                                                   OptionCaptionML=[ENU=" ,Company,Person";
                                                                    ENN=" ,Company,Person"];
                                                   OptionString=[ ,Company,Person] }
    { 140 ;   ;Image               ;Media         ;ExtendedDatatype=Person;
                                                   CaptionML=[ENU=Image;
                                                              ENN=Image] }
    { 150 ;   ;Privacy Blocked     ;Boolean       ;OnValidate=BEGIN
                                                                IF "Privacy Blocked" THEN
                                                                  Blocked := Blocked::All
                                                                ELSE
                                                                  Blocked := Blocked::" ";
                                                              END;

                                                   CaptionML=[ENU=Privacy Blocked;
                                                              ENN=Privacy Blocked] }
    { 160 ;   ;Disable Search by Name;Boolean     ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Disable Search by Name;
                                                              ENN=Disable Search by Name] }
    { 288 ;   ;Preferred Bank Account Code;Code20 ;TableRelation="Customer Bank Account".Code WHERE (Customer No.=FIELD(No.));
                                                   CaptionML=[ENU=Preferred Bank Account Code;
                                                              ENN=Preferred Bank Account Code] }
    { 840 ;   ;Cash Flow Payment Terms Code;Code10;TableRelation="Payment Terms";
                                                   CaptionML=[ENU=Cash Flow Payment Terms Code;
                                                              ENN=Cash Flow Payment Terms Code] }
    { 5049;   ;Primary Contact No. ;Code20        ;TableRelation=Contact;
                                                   OnValidate=VAR
                                                                Cont@1000 : Record 5050;
                                                                ContBusRel@1001 : Record 5054;
                                                              BEGIN
                                                                Contact := '';
                                                                IF "Primary Contact No." <> '' THEN BEGIN
                                                                  Cont.GET("Primary Contact No.");

                                                                  ContBusRel.FindOrRestoreContactBusinessRelation(Cont,Rec,ContBusRel."Link to Table"::Customer);

                                                                  IF Cont."Company No." <> ContBusRel."Contact No." THEN
                                                                    ERROR(Text003,Cont."No.",Cont.Name,"No.",Name);

                                                                  IF Cont.Type = Cont.Type::Person THEN
                                                                    Contact := Cont.Name;

                                                                  IF Cont.Image.HASVALUE THEN
                                                                    CopyContactPicture(Cont);

                                                                  IF Cont."Phone No." <> '' THEN
                                                                    "Phone No." := Cont."Phone No.";
                                                                  IF Cont."E-Mail" <> '' THEN
                                                                    "E-Mail" := Cont."E-Mail";
                                                                END ELSE
                                                                  IF Image.HASVALUE THEN
                                                                    CLEAR(Image);
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupContactList;
                                                            END;

                                                   CaptionML=[ENU=Primary Contact No.;
                                                              ENN=Primary Contact No.] }
    { 5050;   ;Contact Type        ;Option        ;OnValidate=VAR
                                                                SalesHeader@1000 : Record 36;
                                                              BEGIN
                                                                IF IdentityManagement.IsInvAppId THEN BEGIN
                                                                  VALIDATE("Prices Including VAT","Contact Type" = "Contact Type"::Person);
                                                                  SalesHeader.SETRANGE("Sell-to Customer No.","No.");
                                                                  IF SalesHeader.FINDSET THEN
                                                                    REPEAT
                                                                      SalesHeader.VALIDATE("Prices Including VAT","Prices Including VAT");
                                                                      SalesHeader.MODIFY(TRUE);
                                                                    UNTIL SalesHeader.NEXT = 0;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Contact Type;
                                                              ENN=Contact Type];
                                                   OptionCaptionML=[ENU=Company,Person;
                                                                    ENN=Company,Person];
                                                   OptionString=Company,Person }
    { 5700;   ;Responsibility Center;Code10       ;TableRelation="Responsibility Center";
                                                   CaptionML=[ENU=Responsibility Center;
                                                              ENN=Responsibility Centre] }
    { 5750;   ;Shipping Advice     ;Option        ;AccessByPermission=TableData 110=R;
                                                   CaptionML=[ENU=Shipping Advice;
                                                              ENN=Shipping Advice];
                                                   OptionCaptionML=[ENU=Partial,Complete;
                                                                    ENN=Partial,Complete];
                                                   OptionString=Partial,Complete }
    { 5790;   ;Shipping Time       ;DateFormula   ;AccessByPermission=TableData 5790=R;
                                                   CaptionML=[ENU=Shipping Time;
                                                              ENN=Shipping Time] }
    { 5792;   ;Shipping Agent Service Code;Code10 ;TableRelation="Shipping Agent Services".Code WHERE (Shipping Agent Code=FIELD(Shipping Agent Code));
                                                   OnValidate=BEGIN
                                                                IF ("Shipping Agent Code" <> '') AND
                                                                   ("Shipping Agent Service Code" <> '')
                                                                THEN
                                                                  IF ShippingAgentService.GET("Shipping Agent Code","Shipping Agent Service Code") THEN
                                                                    "Shipping Time" := ShippingAgentService."Shipping Time"
                                                                  ELSE
                                                                    EVALUATE("Shipping Time",'<>');
                                                              END;

                                                   CaptionML=[ENU=Shipping Agent Service Code;
                                                              ENN=Shipping Agent Service Code] }
    { 5900;   ;Service Zone Code   ;Code10        ;TableRelation="Service Zone";
                                                   CaptionML=[ENU=Service Zone Code;
                                                              ENN=Service Zone Code] }
    { 5902;   ;Contract Gain/Loss Amount;Decimal  ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Contract Gain/Loss Entry".Amount WHERE (Customer No.=FIELD(No.),
                                                                                                            Ship-to Code=FIELD(Ship-to Filter),
                                                                                                            Change Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Contract Gain/Loss Amount;
                                                              ENN=Contract Gain/Loss Amount];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 5903;   ;Ship-to Filter      ;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation="Ship-to Address".Code WHERE (Customer No.=FIELD(No.));
                                                   CaptionML=[ENU=Ship-to Filter;
                                                              ENN=Ship-to Filter] }
    { 5910;   ;Outstanding Serv. Orders (LCY);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Service Line"."Outstanding Amount (LCY)" WHERE (Document Type=CONST(Order),
                                                                                                                    Bill-to Customer No.=FIELD(No.),
                                                                                                                    Shortcut Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                    Shortcut Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                    Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=[ENU=Outstanding Serv. Orders (LCY);
                                                              ENN=Outstanding Serv. Orders (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 5911;   ;Serv Shipped Not Invoiced(LCY);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Service Line"."Shipped Not Invoiced (LCY)" WHERE (Document Type=CONST(Order),
                                                                                                                      Bill-to Customer No.=FIELD(No.),
                                                                                                                      Shortcut Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                      Shortcut Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                      Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=[ENU=Serv Shipped Not Invoiced(LCY);
                                                              ENN=Serv Shipped Not Invoiced(LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 5912;   ;Outstanding Serv.Invoices(LCY);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Service Line"."Outstanding Amount (LCY)" WHERE (Document Type=CONST(Invoice),
                                                                                                                    Bill-to Customer No.=FIELD(No.),
                                                                                                                    Shortcut Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                    Shortcut Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                    Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=[ENU=Outstanding Serv.Invoices(LCY);
                                                              ENN=Outstanding Serv.Invoices(LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 7001;   ;Allow Line Disc.    ;Boolean       ;InitValue=Yes;
                                                   CaptionML=[ENU=Allow Line Disc.;
                                                              ENN=Allow Line Disc.] }
    { 7171;   ;No. of Quotes       ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Header" WHERE (Document Type=CONST(Quote),
                                                                                           Sell-to Customer No.=FIELD(No.)));
                                                   CaptionML=[ENU=No. of Quotes;
                                                              ENN=No. of Quotes];
                                                   Editable=No }
    { 7172;   ;No. of Blanket Orders;Integer      ;FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Header" WHERE (Document Type=CONST(Blanket Order),
                                                                                           Sell-to Customer No.=FIELD(No.)));
                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=[ENU=No. of Blanket Orders;
                                                              ENN=No. of Blanket Orders];
                                                   Editable=No }
    { 7173;   ;No. of Orders       ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Header" WHERE (Document Type=CONST(Order),
                                                                                           Sell-to Customer No.=FIELD(No.)));
                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=[ENU=No. of Orders;
                                                              ENN=No. of Orders];
                                                   Editable=No }
    { 7174;   ;No. of Invoices     ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Header" WHERE (Document Type=CONST(Invoice),
                                                                                           Sell-to Customer No.=FIELD(No.)));
                                                   CaptionML=[ENU=No. of Invoices;
                                                              ENN=No. of Invoices];
                                                   Editable=No }
    { 7175;   ;No. of Return Orders;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Header" WHERE (Document Type=CONST(Return Order),
                                                                                           Sell-to Customer No.=FIELD(No.)));
                                                   AccessByPermission=TableData 6660=R;
                                                   CaptionML=[ENU=No. of Return Orders;
                                                              ENN=No. of Return Orders];
                                                   Editable=No }
    { 7176;   ;No. of Credit Memos ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Header" WHERE (Document Type=CONST(Credit Memo),
                                                                                           Sell-to Customer No.=FIELD(No.)));
                                                   CaptionML=[ENU=No. of Credit Memos;
                                                              ENN=No. of Credit Memos];
                                                   Editable=No }
    { 7177;   ;No. of Pstd. Shipments;Integer     ;FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Shipment Header" WHERE (Sell-to Customer No.=FIELD(No.)));
                                                   CaptionML=[ENU=No. of Pstd. Shipments;
                                                              ENN=No. of Pstd. Shipments];
                                                   Editable=No }
    { 7178;   ;No. of Pstd. Invoices;Integer      ;FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Invoice Header" WHERE (Sell-to Customer No.=FIELD(No.)));
                                                   CaptionML=[ENU=No. of Pstd. Invoices;
                                                              ENN=No. of Pstd. Invoices];
                                                   Editable=No }
    { 7179;   ;No. of Pstd. Return Receipts;Integer;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Count("Return Receipt Header" WHERE (Sell-to Customer No.=FIELD(No.)));
                                                   CaptionML=[ENU=No. of Pstd. Return Receipts;
                                                              ENN=No. of Pstd. Return Receipts];
                                                   Editable=No }
    { 7180;   ;No. of Pstd. Credit Memos;Integer  ;FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Cr.Memo Header" WHERE (Sell-to Customer No.=FIELD(No.)));
                                                   CaptionML=[ENU=No. of Pstd. Credit Memos;
                                                              ENN=No. of Pstd. Credit Memos];
                                                   Editable=No }
    { 7181;   ;No. of Ship-to Addresses;Integer   ;FieldClass=FlowField;
                                                   CalcFormula=Count("Ship-to Address" WHERE (Customer No.=FIELD(No.)));
                                                   CaptionML=[ENU=No. of Ship-to Addresses;
                                                              ENN=No. of Ship-to Addresses];
                                                   Editable=No }
    { 7182;   ;Bill-To No. of Quotes;Integer      ;FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Header" WHERE (Document Type=CONST(Quote),
                                                                                           Bill-to Customer No.=FIELD(No.)));
                                                   CaptionML=[ENU=Bill-To No. of Quotes;
                                                              ENN=Bill-To No. of Quotes];
                                                   Editable=No }
    { 7183;   ;Bill-To No. of Blanket Orders;Integer;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Header" WHERE (Document Type=CONST(Blanket Order),
                                                                                           Bill-to Customer No.=FIELD(No.)));
                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=[ENU=Bill-To No. of Blanket Orders;
                                                              ENN=Bill-To No. of Blanket Orders];
                                                   Editable=No }
    { 7184;   ;Bill-To No. of Orders;Integer      ;FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Header" WHERE (Document Type=CONST(Order),
                                                                                           Bill-to Customer No.=FIELD(No.)));
                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=[ENU=Bill-To No. of Orders;
                                                              ENN=Bill-To No. of Orders];
                                                   Editable=No }
    { 7185;   ;Bill-To No. of Invoices;Integer    ;FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Header" WHERE (Document Type=CONST(Invoice),
                                                                                           Bill-to Customer No.=FIELD(No.)));
                                                   CaptionML=[ENU=Bill-To No. of Invoices;
                                                              ENN=Bill-To No. of Invoices];
                                                   Editable=No }
    { 7186;   ;Bill-To No. of Return Orders;Integer;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Header" WHERE (Document Type=CONST(Return Order),
                                                                                           Bill-to Customer No.=FIELD(No.)));
                                                   AccessByPermission=TableData 6660=R;
                                                   CaptionML=[ENU=Bill-To No. of Return Orders;
                                                              ENN=Bill-To No. of Return Orders];
                                                   Editable=No }
    { 7187;   ;Bill-To No. of Credit Memos;Integer;FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Header" WHERE (Document Type=CONST(Credit Memo),
                                                                                           Bill-to Customer No.=FIELD(No.)));
                                                   CaptionML=[ENU=Bill-To No. of Credit Memos;
                                                              ENN=Bill-To No. of Credit Memos];
                                                   Editable=No }
    { 7188;   ;Bill-To No. of Pstd. Shipments;Integer;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Shipment Header" WHERE (Bill-to Customer No.=FIELD(No.)));
                                                   CaptionML=[ENU=Bill-To No. of Pstd. Shipments;
                                                              ENN=Bill-To No. of Pstd. Shipments];
                                                   Editable=No }
    { 7189;   ;Bill-To No. of Pstd. Invoices;Integer;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Invoice Header" WHERE (Bill-to Customer No.=FIELD(No.)));
                                                   CaptionML=[ENU=Bill-To No. of Pstd. Invoices;
                                                              ENN=Bill-To No. of Pstd. Invoices];
                                                   Editable=No }
    { 7190;   ;Bill-To No. of Pstd. Return R.;Integer;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Count("Return Receipt Header" WHERE (Bill-to Customer No.=FIELD(No.)));
                                                   CaptionML=[ENU=Bill-To No. of Pstd. Return R.;
                                                              ENN=Bill-To No. of Pstd. Return R.];
                                                   Editable=No }
    { 7191;   ;Bill-To No. of Pstd. Cr. Memos;Integer;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Cr.Memo Header" WHERE (Bill-to Customer No.=FIELD(No.)));
                                                   CaptionML=[ENU=Bill-To No. of Pstd. Cr. Memos;
                                                              ENN=Bill-To No. of Pstd. Cr. Memos];
                                                   Editable=No }
    { 7600;   ;Base Calendar Code  ;Code10        ;TableRelation="Base Calendar";
                                                   CaptionML=[ENU=Base Calendar Code;
                                                              ENN=Base Calendar Code] }
    { 7601;   ;Copy Sell-to Addr. to Qte From;Option;
                                                   AccessByPermission=TableData 5050=R;
                                                   CaptionML=[ENU=Copy Sell-to Addr. to Qte From;
                                                              ENN=Copy Sell-to Addr. to Qte From];
                                                   OptionCaptionML=[ENU=Company,Person;
                                                                    ENN=Company,Person];
                                                   OptionString=Company,Person }
    { 7602;   ;Validate EU Vat Reg. No.;Boolean   ;CaptionML=[ENU=Validate EU VAT Reg. No.;
                                                              ENN=Validate EU VAT Reg. No.] }
    { 8000;   ;Id                  ;GUID          ;CaptionML=[ENU=Id;
                                                              ENN=Id] }
    { 8001;   ;Currency Id         ;GUID          ;TableRelation=Currency.Id;
                                                   OnValidate=BEGIN
                                                                UpdateCurrencyCode;
                                                              END;

                                                   CaptionML=[ENU=Currency Id;
                                                              ENN=Currency Id] }
    { 8002;   ;Payment Terms Id    ;GUID          ;TableRelation="Payment Terms".Id;
                                                   OnValidate=BEGIN
                                                                UpdatePaymentTermsCode;
                                                              END;

                                                   CaptionML=[ENU=Payment Terms Id;
                                                              ENN=Payment Terms Id] }
    { 8003;   ;Shipment Method Id  ;GUID          ;TableRelation="Shipment Method".Id;
                                                   OnValidate=BEGIN
                                                                UpdateShipmentMethodCode;
                                                              END;

                                                   CaptionML=[ENU=Shipment Method Id;
                                                              ENN=Shipment Method Id] }
    { 8004;   ;Payment Method Id   ;GUID          ;TableRelation="Payment Method".Id;
                                                   OnValidate=BEGIN
                                                                UpdatePaymentMethodCode;
                                                              END;

                                                   CaptionML=[ENU=Payment Method Id;
                                                              ENN=Payment Method Id] }
    { 9003;   ;Tax Area ID         ;GUID          ;OnValidate=BEGIN
                                                                UpdateTaxAreaCode;
                                                              END;

                                                   CaptionML=[ENU=Tax Area ID;
                                                              ENN=Tax Area ID] }
    { 9004;   ;Tax Area Display Name;Text100      ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Tax Area".Description WHERE (Code=FIELD(Tax Area Code)));
                                                   ObsoleteState=Removed;
                                                   ObsoleteReason=This field is not needed and it should not be used.;
                                                   CaptionML=[ENU=Tax Area Display Name;
                                                              ENN=Tax Area Display Name] }
    { 9005;   ;Contact ID          ;GUID          ;CaptionML=[ENU=Contact ID;
                                                              ENN=Contact ID] }
    { 9006;   ;Contact Graph Id    ;Text250       ;CaptionML=[ENU=Contact Graph Id;
                                                              ENN=Contact Graph Id] }
    { 50000;  ;Contact Person Mob. No.;Code20     ;Numeric=Yes;
                                                   Description=AD_SD }
    { 50001;  ;Alternative Mobile No.;Code10      ;Numeric=Yes;
                                                   Description=AD_SD }
    { 50002;  ;Customer Grp.       ;Code10        ;TableRelation="Customer Group";
                                                   Description=AD_SD }
    { 50003;  ;Industry Group      ;Code10        ;TableRelation="Industry Group";
                                                   Description=AD_SD }
    { 50012;  ;Resp. Person Name   ;Text80        ;Description=AD_SD }
    { 50013;  ;Contact No.         ;Code20        ;Numeric=Yes;
                                                   Description=AD_SD }
    { 50014;  ;Group               ;Code20        ;TableRelation="Customer Group Code";
                                                   Description=AD_SD }
    { 50015;  ;Primary Incharge    ;Code30        ;TableRelation="Primary Incharge";
                                                   Description=AD_SD }
    { 50016;  ;Team Leader         ;Code20        ;TableRelation=Employee WHERE (Type=FILTER(Partner|Others));
                                                   Description=AD_SD }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Search Name                              }
    {    ;Customer Posting Group                   }
    {    ;Currency Code                            }
    {    ;Country/Region Code                      }
    {    ;Gen. Bus. Posting Group                  }
    {    ;Name,Address,City                        }
    {    ;VAT Registration No.                     }
    {    ;Name                                     }
    {    ;City                                     }
    {    ;Post Code                                }
    {    ;Phone No.                                }
    {    ;Contact                                  }
    {    ;Blocked                                  }
    {    ;Primary Contact No.                      }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;No.,Name,City,Post Code,Phone No.,Contact }
    { 2   ;Brick               ;No.,Name,Balance (LCY),Contact,Balance Due (LCY),Image }
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=You cannot delete %1 %2 because there is at least one outstanding Sales %3 for this customer.;ENN=You cannot delete %1 %2 because there is at least one outstanding Sales %3 for this customer.';
      Text002@1001 : TextConst 'ENU=Do you wish to create a contact for %1 %2?;ENN=Do you wish to create a contact for %1 %2?';
      SalesSetup@1002 : Record 311;
      CommentLine@1004 : Record 97;
      SalesOrderLine@1005 : Record 37;
      CustBankAcc@1006 : Record 287;
      ShipToAddr@1007 : Record 222;
      PostCode@1008 : Record 225;
      GenBusPostingGrp@1009 : Record 250;
      ShippingAgentService@1010 : Record 5790;
      ItemCrossReference@1016 : Record 5717;
      RMSetup@1018 : Record 5079;
      SalesPrice@1021 : Record 7002;
      SalesLineDisc@1022 : Record 7004;
      SalesPrepmtPct@1003 : Record 459;
      ServContract@1026 : Record 5965;
      ServiceItem@1027 : Record 5940;
      SalespersonPurchaser@1060 : Record 13;
      CustomizedCalendarChange@1048 : Record 7602;
      PaymentToleranceMgt@1038 : Codeunit 426;
      IdentityManagement@1047 : Codeunit 9801;
      NoSeriesMgt@1011 : Codeunit 396;
      MoveEntries@1012 : Codeunit 361;
      UpdateContFromCust@1013 : Codeunit 5056;
      DimMgt@1014 : Codeunit 408;
      ApprovalsMgmt@1039 : Codeunit 1535;
      CalendarManagement@1049 : Codeunit 7600;
      InsertFromContact@1015 : Boolean;
      Text003@1020 : TextConst 'ENU=Contact %1 %2 is not related to customer %3 %4.;ENN=Contact %1 %2 is not related to customer %3 %4.';
      Text004@1023 : TextConst 'ENU=post;ENN=post';
      Text005@1024 : TextConst 'ENU=create;ENN=create';
      Text006@1025 : TextConst 'ENU=You cannot %1 this type of document when Customer %2 is blocked with type %3;ENN=You cannot %1 this type of document when Customer %2 is blocked with type %3';
      Text007@1028 : TextConst 'ENU=You cannot delete %1 %2 because there is at least one not cancelled Service Contract for this customer.;ENN=You cannot delete %1 %2 because there is at least one not cancelled Service Contract for this customer.';
      Text008@1029 : TextConst 'ENU=Deleting the %1 %2 will cause the %3 to be deleted for the associated Service Items. Do you want to continue?;ENN=Deleting the %1 %2 will cause the %3 to be deleted for the associated Service Items. Do you want to continue?';
      Text009@1030 : TextConst 'ENU=Cannot delete customer.;ENN=Cannot delete customer.';
      Text010@1031 : TextConst 'ENU=The %1 %2 has been assigned to %3 %4.\The same %1 cannot be entered on more than one %3. Enter another code.;ENN=The %1 %2 has been assigned to %3 %4.\The same %1 cannot be entered on more than one %3. Enter another code.';
      Text011@1033 : TextConst 'ENU=Reconciling IC transactions may be difficult if you change IC Partner Code because this %1 has ledger entries in a fiscal year that has not yet been closed.\ Do you still want to change the IC Partner Code?;ENN=Reconciling IC transactions may be difficult if you change IC Partner Code because this %1 has ledger entries in a fiscal year that has not yet been closed.\ Do you still want to change the IC Partner Code?';
      Text012@1032 : TextConst 'ENU=You cannot change the contents of the %1 field because this %2 has one or more open ledger entries.;ENN=You cannot change the contents of the %1 field because this %2 has one or more open ledger entries.';
      Text013@1035 : TextConst 'ENU=You cannot delete %1 %2 because there is at least one outstanding Service %3 for this customer.;ENN=You cannot delete %1 %2 because there is at least one outstanding Service %3 for this customer.';
      Text014@1017 : TextConst 'ENU=Before you can use Online Map, you must fill in the Online Map Setup window.\See Setting Up Online Map in Help.;ENN=Before you can use Online Map, you must fill in the Online Map Setup window.\See Setting Up Online Map in Help.';
      Text015@1036 : TextConst 'ENU=You cannot delete %1 %2 because there is at least one %3 associated to this customer.;ENN=You cannot delete %1 %2 because there is at least one %3 associated to this customer.';
      AllowPaymentToleranceQst@1037 : TextConst 'ENU=Do you want to allow payment tolerance for entries that are currently open?;ENN=Do you want to allow payment tolerance for entries that are currently open?';
      RemovePaymentRoleranceQst@1019 : TextConst 'ENU=Do you want to remove payment tolerance from entries that are currently open?;ENN=Do you want to remove payment tolerance from entries that are currently open?';
      CreateNewCustTxt@1041 : TextConst '@@@="%1 is the name to be used to create the customer. ";ENU=Create a new customer card for %1;ENN=Create a new customer card for %1';
      SelectCustErr@1040 : TextConst 'ENU=You must select an existing customer.;ENN=You must select an existing customer.';
      CustNotRegisteredTxt@1042 : TextConst 'ENU=This customer is not registered. To continue, choose one of the following options:;ENN=This customer is not registered. To continue, choose one of the following options:';
      SelectCustTxt@1043 : TextConst 'ENU=Select an existing customer;ENN=Select an existing customer';
      InsertFromTemplate@1044 : Boolean;
      LookupRequested@1034 : Boolean;
      OverrideImageQst@1045 : TextConst 'ENU=Override Image?;ENN=Override Image?';
      PrivacyBlockedActionErr@1061 : TextConst '@@@="%1 = action (create or post), %2 = customer code.";ENU=You cannot %1 this type of document when Customer %2 is blocked for privacy.;ENN=You cannot %1 this type of document when Customer %2 is blocked for privacy.';
      PrivacyBlockedGenericTxt@1062 : TextConst '@@@="%1 = customer code";ENU=Privacy Blocked must not be true for customer %1.;ENN=Privacy Blocked must not be true for customer %1.';
      ConfirmBlockedPrivacyBlockedQst@1071 : TextConst 'ENU=If you change the Blocked field, the Privacy Blocked field is changed to No. Do you want to continue?;ENN=If you change the Blocked field, the Privacy Blocked field is changed to No. Do you want to continue?';
      CanNotChangeBlockedDueToPrivacyBlockedErr@1072 : TextConst 'ENU=The Blocked field cannot be changed because the user is blocked for privacy reasons.;ENN=The Blocked field cannot be changed because the user is blocked for privacy reasons.';
      PhoneNoCannotContainLettersErr@1046 : TextConst 'ENU=must not contain letters;ENN=must not contain letters';
      ForceUpdateContact@1050 : Boolean;

    [External]
    PROCEDURE AssistEdit@2(OldCust@1000 : Record 18) : Boolean;
    VAR
      Cust@1001 : Record 18;
    BEGIN
      WITH Cust DO BEGIN
        Cust := Rec;
        SalesSetup.GET;
        SalesSetup.TESTFIELD("Customer Nos.");
        IF NoSeriesMgt.SelectSeries(SalesSetup."Customer Nos.",OldCust."No. Series","No. Series") THEN BEGIN
          NoSeriesMgt.SetSeries("No.");
          Rec := Cust;
          EXIT(TRUE);
        END;
      END;
    END;

    [External]
    PROCEDURE ValidateShortcutDimCode@29(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    VAR
      IsHandled@1002 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeValidateShortcutDimCode(Rec,FieldNumber,ShortcutDimCode,IsHandled);
      IF IsHandled THEN
        EXIT;

      DimMgt.ValidateDimValueCode(FieldNumber,ShortcutDimCode);
      IF NOT ISTEMPORARY THEN BEGIN
        DimMgt.SaveDefaultDim(DATABASE::Customer,"No.",FieldNumber,ShortcutDimCode);
        MODIFY;
      END;
    END;

    [External]
    PROCEDURE ShowContact@1();
    VAR
      ContBusRel@1000 : Record 5054;
      Cont@1001 : Record 5050;
      OfficeContact@1002 : Record 5050;
      OfficeMgt@1003 : Codeunit 1630;
      ConfirmManagement@1004 : Codeunit 27;
    BEGIN
      IF OfficeMgt.GetContact(OfficeContact,"No.") AND (OfficeContact.COUNT = 1) THEN
        PAGE.RUN(PAGE::"Contact Card",OfficeContact)
      ELSE BEGIN
        IF "No." = '' THEN
          EXIT;

        ContBusRel.SETCURRENTKEY("Link to Table","No.");
        ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Customer);
        ContBusRel.SETRANGE("No.","No.");
        IF NOT ContBusRel.FINDFIRST THEN BEGIN
          IF NOT ConfirmManagement.ConfirmProcess(STRSUBSTNO(Text002,TABLECAPTION,"No."),TRUE) THEN
            EXIT;
          UpdateContFromCust.InsertNewContact(Rec,FALSE);
          ContBusRel.FINDFIRST;
        END;
        COMMIT;

        Cont.FILTERGROUP(2);
        Cont.SETRANGE("Company No.",ContBusRel."Contact No.");
        IF Cont.ISEMPTY THEN BEGIN
          Cont.SETRANGE("Company No.");
          Cont.SETRANGE("No.",ContBusRel."Contact No.");
        END;
        PAGE.RUN(PAGE::"Contact List",Cont);
      END;
    END;

    LOCAL PROCEDURE LookupContactList@78();
    VAR
      ContactBusinessRelation@1002 : Record 5054;
      Cont@1001 : Record 5050;
      TempCust@1000 : TEMPORARY Record 18;
    BEGIN
      Cont.FILTERGROUP(2);
      IF ContactBusinessRelation.FindByRelation(ContactBusinessRelation."Link to Table"::Customer,"No.") THEN
        Cont.SETRANGE("Company No.",ContactBusinessRelation."Contact No.")
      ELSE
        Cont.SETRANGE("Company No.",'');

      IF "Primary Contact No." <> '' THEN
        IF Cont.GET("Primary Contact No.") THEN ;
      IF PAGE.RUNMODAL(0,Cont) = ACTION::LookupOK THEN BEGIN
        TempCust.COPY(Rec);
        FIND;
        TRANSFERFIELDS(TempCust,FALSE);
        VALIDATE("Primary Contact No.",Cont."No.");
      END;
    END;

    [External]
    PROCEDURE SetInsertFromContact@3(FromContact@1000 : Boolean);
    BEGIN
      InsertFromContact := FromContact;
    END;

    [External]
    PROCEDURE CheckBlockedCustOnDocs@5(Cust2@1000 : Record 18;DocType@1001 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order';Shipment@1005 : Boolean;Transaction@1003 : Boolean);
    VAR
      Source@1002 : 'Journal,Document';
    BEGIN
      IF IsOnBeforeCheckBlockedCustHandled(Cust2,Source::Document,DocType,Shipment,Transaction) THEN
        EXIT;

      WITH Cust2 DO BEGIN
        IF "Privacy Blocked" THEN
          CustPrivacyBlockedErrorMessage(Cust2,Transaction);

        IF ((Blocked = Blocked::All) OR
            ((Blocked = Blocked::Invoice) AND
             (DocType IN [DocType::Quote,DocType::Order,DocType::Invoice,DocType::"Blanket Order"])) OR
            ((Blocked = Blocked::Ship) AND (DocType IN [DocType::Quote,DocType::Order,DocType::"Blanket Order"]) AND
             (NOT Transaction)) OR
            ((Blocked = Blocked::Ship) AND (DocType IN [DocType::Quote,DocType::Order,DocType::Invoice,DocType::"Blanket Order"]) AND
             Shipment AND Transaction))
        THEN
          CustBlockedErrorMessage(Cust2,Transaction);
      END;
    END;

    [External]
    PROCEDURE CheckBlockedCustOnJnls@7(Cust2@1003 : Record 18;DocType@1002 : ' ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund';Transaction@1000 : Boolean);
    VAR
      Source@1001 : 'Journal,Document';
    BEGIN
      IF IsOnBeforeCheckBlockedCustHandled(Cust2,Source::Journal,DocType,FALSE,Transaction) THEN
        EXIT;

      WITH Cust2 DO BEGIN
        IF "Privacy Blocked" THEN
          CustPrivacyBlockedErrorMessage(Cust2,Transaction);

        IF (Blocked = Blocked::All) OR
           ((Blocked = Blocked::Invoice) AND (DocType IN [DocType::Invoice,DocType::" "]))
        THEN
          CustBlockedErrorMessage(Cust2,Transaction)
      END;
    END;

    [External]
    PROCEDURE CustBlockedErrorMessage@4(Cust2@1001 : Record 18;Transaction@1000 : Boolean);
    VAR
      Action@1002 : Text[30];
    BEGIN
      IF Transaction THEN
        Action := Text004
      ELSE
        Action := Text005;
      ERROR(Text006,Action,Cust2."No.",Cust2.Blocked);
    END;

    [External]
    PROCEDURE CustPrivacyBlockedErrorMessage@72(Cust2@1001 : Record 18;Transaction@1000 : Boolean);
    VAR
      Action@1002 : Text[30];
    BEGIN
      IF Transaction THEN
        Action := Text004
      ELSE
        Action := Text005;

      ERROR(PrivacyBlockedActionErr,Action,Cust2."No.");
    END;

    [External]
    PROCEDURE GetPrivacyBlockedGenericErrorText@73(Cust2@1001 : Record 18) : Text[250];
    BEGIN
      EXIT(STRSUBSTNO(PrivacyBlockedGenericTxt,Cust2."No."));
    END;

    [External]
    PROCEDURE DisplayMap@8();
    VAR
      MapPoint@1001 : Record 800;
      MapMgt@1000 : Codeunit 802;
    BEGIN
      IF MapPoint.FINDFIRST THEN
        MapMgt.MakeSelection(DATABASE::Customer,GETPOSITION)
      ELSE
        MESSAGE(Text014);
    END;

    [External]
    PROCEDURE GetTotalAmountLCY@10() : Decimal;
    BEGIN
      OnBeforeGetTotalAmountLCY(Rec);

      CALCFIELDS("Balance (LCY)","Outstanding Orders (LCY)","Shipped Not Invoiced (LCY)","Outstanding Invoices (LCY)",
        "Outstanding Serv. Orders (LCY)","Serv Shipped Not Invoiced(LCY)","Outstanding Serv.Invoices(LCY)");

      EXIT(GetTotalAmountLCYCommon);
    END;

    [External]
    PROCEDURE GetTotalAmountLCYUI@16() : Decimal;
    BEGIN
      OnBeforeGetTotalAmountLCYUI(Rec);

      SETAUTOCALCFIELDS("Balance (LCY)","Outstanding Orders (LCY)","Shipped Not Invoiced (LCY)","Outstanding Invoices (LCY)",
        "Outstanding Serv. Orders (LCY)","Serv Shipped Not Invoiced(LCY)","Outstanding Serv.Invoices(LCY)");

      EXIT(GetTotalAmountLCYCommon);
    END;

    LOCAL PROCEDURE GetTotalAmountLCYCommon@17() : Decimal;
    VAR
      SalesLine@1000 : Record 37;
      ServiceLine@1002 : Record 5902;
      SalesOutstandingAmountFromShipment@1001 : Decimal;
      ServOutstandingAmountFromShipment@1003 : Decimal;
      InvoicedPrepmtAmountLCY@1004 : Decimal;
      RetRcdNotInvAmountLCY@1006 : Decimal;
      AdditionalAmountLCY@1005 : Decimal;
    BEGIN
      OnBeforeGetTotalAmountLCYCommon(Rec,AdditionalAmountLCY);

      SalesOutstandingAmountFromShipment := SalesLine.OutstandingInvoiceAmountFromShipment("No.");
      ServOutstandingAmountFromShipment := ServiceLine.OutstandingInvoiceAmountFromShipment("No.");
      InvoicedPrepmtAmountLCY := GetInvoicedPrepmtAmountLCY;
      RetRcdNotInvAmountLCY := GetReturnRcdNotInvAmountLCY;

      EXIT("Balance (LCY)" + "Outstanding Orders (LCY)" + "Shipped Not Invoiced (LCY)" + "Outstanding Invoices (LCY)" +
        "Outstanding Serv. Orders (LCY)" + "Serv Shipped Not Invoiced(LCY)" + "Outstanding Serv.Invoices(LCY)" -
        SalesOutstandingAmountFromShipment - ServOutstandingAmountFromShipment - InvoicedPrepmtAmountLCY - RetRcdNotInvAmountLCY +
        AdditionalAmountLCY);
    END;

    [External]
    PROCEDURE GetSalesLCY@13() : Decimal;
    VAR
      CustomerSalesYTD@1005 : Record 18;
      AccountingPeriod@1004 : Record 50;
      StartDate@1001 : Date;
      EndDate@1000 : Date;
    BEGIN
      StartDate := AccountingPeriod.GetFiscalYearStartDate(WORKDATE);
      EndDate := AccountingPeriod.GetFiscalYearEndDate(WORKDATE);
      CustomerSalesYTD := Rec;
      CustomerSalesYTD."SECURITYFILTERING"("SECURITYFILTERING");
      CustomerSalesYTD.SETRANGE("Date Filter",StartDate,EndDate);
      CustomerSalesYTD.CALCFIELDS("Sales (LCY)");
      EXIT(CustomerSalesYTD."Sales (LCY)");
    END;

    [External]
    PROCEDURE CalcAvailableCredit@9() : Decimal;
    BEGIN
      EXIT(CalcAvailableCreditCommon(FALSE));
    END;

    [External]
    PROCEDURE CalcAvailableCreditUI@15() : Decimal;
    BEGIN
      EXIT(CalcAvailableCreditCommon(TRUE));
    END;

    LOCAL PROCEDURE CalcAvailableCreditCommon@14(CalledFromUI@1000 : Boolean) : Decimal;
    BEGIN
      IF "Credit Limit (LCY)" = 0 THEN
        EXIT(0);
      IF CalledFromUI THEN
        EXIT("Credit Limit (LCY)" - GetTotalAmountLCYUI);
      EXIT("Credit Limit (LCY)" - GetTotalAmountLCY);
    END;

    [External]
    PROCEDURE CalcOverdueBalance@11() OverDueBalance : Decimal;
    VAR
      CustLedgEntryRemainAmtQuery@1000 : Query 21 SECURITYFILTERING(Filtered);
    BEGIN
      CustLedgEntryRemainAmtQuery.SETRANGE(Customer_No,"No.");
      CustLedgEntryRemainAmtQuery.SETFILTER(Due_Date,'<%1',TODAY);
      CustLedgEntryRemainAmtQuery.SETFILTER(Date_Filter,'<%1',TODAY);
      CustLedgEntryRemainAmtQuery.OPEN;

      IF CustLedgEntryRemainAmtQuery.READ THEN
        OverDueBalance := CustLedgEntryRemainAmtQuery.Sum_Remaining_Amt_LCY;
    END;

    [External]
    PROCEDURE GetLegalEntityType@6() : Text;
    BEGIN
      EXIT(FORMAT("Partner Type"));
    END;

    [External]
    PROCEDURE GetLegalEntityTypeLbl@26() : Text;
    BEGIN
      EXIT(FIELDCAPTION("Partner Type"));
    END;

    [External]
    PROCEDURE SetStyle@12() : Text;
    BEGIN
      IF CalcAvailableCredit < 0 THEN
        EXIT('Unfavorable');
      EXIT('');
    END;

    [External]
    PROCEDURE HasValidDDMandate@23(Date@1000 : Date) : Boolean;
    VAR
      SEPADirectDebitMandate@1001 : Record 1230;
    BEGIN
      EXIT(SEPADirectDebitMandate.GetDefaultMandate("No.",Date) <> '');
    END;

    [External]
    PROCEDURE GetReturnRcdNotInvAmountLCY@53() : Decimal;
    VAR
      SalesLine@1000 : Record 37;
    BEGIN
      SalesLine.SETCURRENTKEY("Document Type","Bill-to Customer No.");
      SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::"Return Order");
      SalesLine.SETRANGE("Bill-to Customer No.","No.");
      SalesLine.CALCSUMS("Return Rcd. Not Invd. (LCY)");
      EXIT(SalesLine."Return Rcd. Not Invd. (LCY)");
    END;

    [External]
    PROCEDURE GetInvoicedPrepmtAmountLCY@18() : Decimal;
    VAR
      SalesLine@1000 : Record 37;
    BEGIN
      SalesLine.SETCURRENTKEY("Document Type","Bill-to Customer No.");
      SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Order);
      SalesLine.SETRANGE("Bill-to Customer No.","No.");
      SalesLine.CALCSUMS("Prepmt. Amount Inv. (LCY)","Prepmt. VAT Amount Inv. (LCY)");
      EXIT(SalesLine."Prepmt. Amount Inv. (LCY)" + SalesLine."Prepmt. VAT Amount Inv. (LCY)");
    END;

    [External]
    PROCEDURE CalcCreditLimitLCYExpendedPct@19() : Decimal;
    BEGIN
      IF "Credit Limit (LCY)" = 0 THEN
        EXIT(0);

      IF "Balance (LCY)" / "Credit Limit (LCY)" < 0 THEN
        EXIT(0);

      IF "Balance (LCY)" / "Credit Limit (LCY)" > 1 THEN
        EXIT(10000);

      EXIT(ROUND("Balance (LCY)" / "Credit Limit (LCY)" * 10000,1));
    END;

    [External]
    PROCEDURE CreateAndShowNewInvoice@21();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      SalesHeader."Document Type" := SalesHeader."Document Type"::Invoice;
      SalesHeader.SETRANGE("Sell-to Customer No.","No.");
      SalesHeader.SetDefaultPaymentServices;
      SalesHeader.INSERT(TRUE);
      COMMIT;
      PAGE.RUN(PAGE::"Sales Invoice",SalesHeader)
    END;

    [External]
    PROCEDURE CreateAndShowNewOrder@30();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      SalesHeader."Document Type" := SalesHeader."Document Type"::Order;
      SalesHeader.SETRANGE("Sell-to Customer No.","No.");
      SalesHeader.SetDefaultPaymentServices;
      SalesHeader.INSERT(TRUE);
      COMMIT;
      PAGE.RUN(PAGE::"Sales Order",SalesHeader)
    END;

    [External]
    PROCEDURE CreateAndShowNewCreditMemo@22();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      SalesHeader."Document Type" := SalesHeader."Document Type"::"Credit Memo";
      SalesHeader.SETRANGE("Sell-to Customer No.","No.");
      SalesHeader.INSERT(TRUE);
      COMMIT;
      PAGE.RUN(PAGE::"Sales Credit Memo",SalesHeader)
    END;

    [External]
    PROCEDURE CreateAndShowNewQuote@24();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      SalesHeader."Document Type" := SalesHeader."Document Type"::Quote;
      SalesHeader.SETRANGE("Sell-to Customer No.","No.");
      SalesHeader.INSERT(TRUE);
      COMMIT;
      PAGE.RUN(PAGE::"Sales Quote",SalesHeader)
    END;

    LOCAL PROCEDURE UpdatePaymentTolerance@20(UseDialog@1000 : Boolean);
    BEGIN
      IF "Block Payment Tolerance" THEN BEGIN
        IF UseDialog THEN
          IF NOT CONFIRM(RemovePaymentRoleranceQst,FALSE) THEN
            EXIT;
        PaymentToleranceMgt.DelTolCustLedgEntry(Rec);
      END ELSE BEGIN
        IF UseDialog THEN
          IF NOT CONFIRM(AllowPaymentToleranceQst,FALSE) THEN
            EXIT;
        PaymentToleranceMgt.CalcTolCustLedgEntry(Rec);
      END;
    END;

    [External]
    PROCEDURE GetBillToCustomerNo@27() : Code[20];
    BEGIN
      IF "Bill-to Customer No." <> '' THEN
        EXIT("Bill-to Customer No.");
      EXIT("No.");
    END;

    [External]
    PROCEDURE HasAddressIgnoreCountryCode@37() : Boolean;
    BEGIN
      CASE TRUE OF
        Address <> '':
          EXIT(TRUE);
        "Address 2" <> '':
          EXIT(TRUE);
        City <> '':
          EXIT(TRUE);
        County <> '':
          EXIT(TRUE);
        "Post Code" <> '':
          EXIT(TRUE);
        Contact <> '':
          EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    [External]
    PROCEDURE HasAddress@25() : Boolean;
    BEGIN
      EXIT(HasAddressIgnoreCountryCode OR ("Country/Region Code" <> ''));
    END;

    [External]
    PROCEDURE HasDifferentAddress@49(OtherCustomer@1000 : Record 18) : Boolean;
    BEGIN
      CASE TRUE OF
        Address <> OtherCustomer.Address:
          EXIT(TRUE);
        "Address 2" <> OtherCustomer."Address 2":
          EXIT(TRUE);
        City <> OtherCustomer.City:
          EXIT(TRUE);
        County <> OtherCustomer.County:
          EXIT(TRUE);
        "Post Code" <> OtherCustomer."Post Code":
          EXIT(TRUE);
        "Country/Region Code" <> OtherCustomer."Country/Region Code":
          EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    [External]
    PROCEDURE GetCustNo@44(CustomerText@1000 : Text) : Text;
    BEGIN
      EXIT(GetCustNoOpenCard(CustomerText,TRUE,TRUE));
    END;

    [External]
    PROCEDURE GetCustNoOpenCard@36(CustomerText@1000 : Text;ShowCustomerCard@1006 : Boolean;ShowCreateCustomerOption@1007 : Boolean) : Code[20];
    VAR
      Customer@1001 : Record 18;
      CustomerNo@1002 : Code[20];
      NoFiltersApplied@1008 : Boolean;
      CustomerWithoutQuote@1005 : Text;
      CustomerFilterFromStart@1004 : Text;
      CustomerFilterContains@1003 : Text;
    BEGIN
      IF CustomerText = '' THEN
        EXIT('');

      IF STRLEN(CustomerText) <= MAXSTRLEN(Customer."No.") THEN
        IF Customer.GET(COPYSTR(CustomerText,1,MAXSTRLEN(Customer."No."))) THEN
          EXIT(Customer."No.");

      Customer.SETRANGE(Blocked,Customer.Blocked::" ");
      Customer.SETRANGE(Name,CustomerText);
      IF Customer.FINDFIRST THEN
        EXIT(Customer."No.");

      Customer.SETCURRENTKEY(Name);

      CustomerWithoutQuote := CONVERTSTR(CustomerText,'''','?');
      Customer.SETFILTER(Name,'''@' + CustomerWithoutQuote + '''');
      IF Customer.FINDFIRST THEN
        EXIT(Customer."No.");
      Customer.SETRANGE(Name);

      CustomerFilterFromStart := '''@' + CustomerWithoutQuote + '*''';

      Customer.FILTERGROUP := -1;
      Customer.SETFILTER("No.",CustomerFilterFromStart);

      Customer.SETFILTER(Name,CustomerFilterFromStart);

      IF Customer.FINDFIRST THEN
        EXIT(Customer."No.");

      CustomerFilterContains := '''@*' + CustomerWithoutQuote + '*''';

      Customer.SETFILTER("No.",CustomerFilterContains);
      Customer.SETFILTER(Name,CustomerFilterContains);
      Customer.SETFILTER(City,CustomerFilterContains);
      Customer.SETFILTER(Contact,CustomerFilterContains);
      Customer.SETFILTER("Phone No.",CustomerFilterContains);
      Customer.SETFILTER("Post Code",CustomerFilterContains);

      IF Customer.COUNT = 0 THEN
        MarkCustomersWithSimilarName(Customer,CustomerText);

      IF Customer.COUNT = 1 THEN BEGIN
        Customer.FINDFIRST;
        EXIT(Customer."No.");
      END;

      IF NOT GUIALLOWED THEN
        ERROR(SelectCustErr);

      IF Customer.COUNT = 0 THEN BEGIN
        IF Customer.WRITEPERMISSION THEN
          IF ShowCreateCustomerOption THEN
            CASE STRMENU(
                   STRSUBSTNO(
                     '%1,%2',STRSUBSTNO(CreateNewCustTxt,CONVERTSTR(CustomerText,',','.')),SelectCustTxt),1,CustNotRegisteredTxt) OF
              0:
                ERROR(SelectCustErr);
              1:
                EXIT(CreateNewCustomer(COPYSTR(CustomerText,1,MAXSTRLEN(Customer.Name)),ShowCustomerCard));
            END
          ELSE
            EXIT('');
        Customer.RESET;
        NoFiltersApplied := TRUE;
      END;

      IF ShowCustomerCard THEN
        CustomerNo := PickCustomer(Customer,NoFiltersApplied)
      ELSE BEGIN
        LookupRequested := TRUE;
        EXIT('');
      END;

      IF CustomerNo <> '' THEN
        EXIT(CustomerNo);

      ERROR(SelectCustErr);
    END;

    LOCAL PROCEDURE MarkCustomersWithSimilarName@33(VAR Customer@1001 : Record 18;CustomerText@1000 : Text);
    VAR
      TypeHelper@1002 : Codeunit 10;
      CustomerCount@1003 : Integer;
      CustomerTextLength@1004 : Integer;
      Treshold@1005 : Integer;
    BEGIN
      IF CustomerText = '' THEN
        EXIT;
      IF STRLEN(CustomerText) > MAXSTRLEN(Customer.Name) THEN
        EXIT;
      CustomerTextLength := STRLEN(CustomerText);
      Treshold := CustomerTextLength DIV 5;
      IF Treshold = 0 THEN
        EXIT;

      Customer.RESET;
      Customer.ASCENDING(FALSE); // most likely to search for newest customers
      Customer.SETRANGE(Blocked,Customer.Blocked::" ");
      IF Customer.FINDSET THEN
        REPEAT
          CustomerCount += 1;
          IF ABS(CustomerTextLength - STRLEN(Customer.Name)) <= Treshold THEN
            IF TypeHelper.TextDistance(UPPERCASE(CustomerText),UPPERCASE(Customer.Name)) <= Treshold THEN
              Customer.MARK(TRUE);
        UNTIL Customer.MARK OR (Customer.NEXT = 0) OR (CustomerCount > 1000);
      Customer.MARKEDONLY(TRUE);
    END;

    [External]
    PROCEDURE CreateNewCustomer@28(CustomerName@1000 : Text[100];ShowCustomerCard@1001 : Boolean) : Code[20];
    VAR
      Customer@1005 : Record 18;
      MiniCustomerTemplate@1006 : Record 1300;
      CustomerCard@1002 : Page 21;
    BEGIN
      Customer.Name := CustomerName;
      IF NOT MiniCustomerTemplate.NewCustomerFromTemplate(Customer) THEN
        Customer.INSERT(TRUE)
      ELSE
        IF CustomerName <> Customer.Name THEN BEGIN
          Customer.Name := CustomerName;
          Customer.MODIFY(TRUE);
        END;

      COMMIT;
      IF NOT ShowCustomerCard THEN
        EXIT(Customer."No.");
      Customer.SETRANGE("No.",Customer."No.");
      CustomerCard.SETTABLEVIEW(Customer);
      IF NOT (CustomerCard.RUNMODAL = ACTION::OK) THEN
        ERROR(SelectCustErr);

      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE PickCustomer@51(VAR Customer@1000 : Record 18;NoFiltersApplied@1002 : Boolean) : Code[20];
    VAR
      CustomerList@1001 : Page 22;
    BEGIN
      IF NOT NoFiltersApplied THEN
        MarkCustomersByFilters(Customer);

      CustomerList.SETTABLEVIEW(Customer);
      CustomerList.SETRECORD(Customer);
      CustomerList.LOOKUPMODE := TRUE;
      IF CustomerList.RUNMODAL = ACTION::LookupOK THEN
        CustomerList.GETRECORD(Customer)
      ELSE
        CLEAR(Customer);

      EXIT(Customer."No.");
    END;

    PROCEDURE LookupCustomer@77(VAR Customer@1000 : Record 18) : Boolean;
    VAR
      CustomerLookup@1001 : Page 33;
      Result@1002 : Boolean;
    BEGIN
      CustomerLookup.SETTABLEVIEW(Customer);
      CustomerLookup.SETRECORD(Customer);
      CustomerLookup.LOOKUPMODE := TRUE;
      Result := CustomerLookup.RUNMODAL = ACTION::LookupOK;
      IF Result THEN
        CustomerLookup.GETRECORD(Customer)
      ELSE
        CLEAR(Customer);

      EXIT(Result);
    END;

    LOCAL PROCEDURE MarkCustomersByFilters@42(VAR Customer@1000 : Record 18);
    BEGIN
      IF Customer.FINDSET THEN
        REPEAT
          Customer.MARK(TRUE);
        UNTIL Customer.NEXT = 0;
      IF Customer.FINDFIRST THEN;
      Customer.MARKEDONLY := TRUE;
    END;

    [External]
    PROCEDURE OpenCustomerLedgerEntries@31(FilterOnDueEntries@1002 : Boolean);
    VAR
      DetailedCustLedgEntry@1001 : Record 379;
      CustLedgerEntry@1000 : Record 21;
    BEGIN
      DetailedCustLedgEntry.SETRANGE("Customer No.","No.");
      COPYFILTER("Global Dimension 1 Filter",DetailedCustLedgEntry."Initial Entry Global Dim. 1");
      COPYFILTER("Global Dimension 2 Filter",DetailedCustLedgEntry."Initial Entry Global Dim. 2");
      IF FilterOnDueEntries AND (GETFILTER("Date Filter") <> '') THEN BEGIN
        COPYFILTER("Date Filter",DetailedCustLedgEntry."Initial Entry Due Date");
        DetailedCustLedgEntry.SETFILTER("Posting Date",'<=%1',GETRANGEMAX("Date Filter"));
      END;
      COPYFILTER("Currency Filter",DetailedCustLedgEntry."Currency Code");
      CustLedgerEntry.DrillDownOnEntries(DetailedCustLedgEntry);
    END;

    [External]
    PROCEDURE SetInsertFromTemplate@32(FromTemplate@1000 : Boolean);
    BEGIN
      InsertFromTemplate := FromTemplate;
    END;

    [External]
    PROCEDURE IsLookupRequested@34() Result : Boolean;
    BEGIN
      Result := LookupRequested;
      LookupRequested := FALSE;
    END;

    LOCAL PROCEDURE IsContactUpdateNeeded@48() : Boolean;
    VAR
      CustContUpdate@1001 : Codeunit 5056;
      UpdateNeeded@1000 : Boolean;
    BEGIN
      UpdateNeeded :=
        (Name <> xRec.Name) OR
        ("Search Name" <> xRec."Search Name") OR
        ("Name 2" <> xRec."Name 2") OR
        (Address <> xRec.Address) OR
        ("Address 2" <> xRec."Address 2") OR
        (City <> xRec.City) OR
        ("Phone No." <> xRec."Phone No.") OR
        ("Telex No." <> xRec."Telex No.") OR
        ("Territory Code" <> xRec."Territory Code") OR
        ("Currency Code" <> xRec."Currency Code") OR
        ("Language Code" <> xRec."Language Code") OR
        ("Salesperson Code" <> xRec."Salesperson Code") OR
        ("Country/Region Code" <> xRec."Country/Region Code") OR
        ("Fax No." <> xRec."Fax No.") OR
        ("Telex Answer Back" <> xRec."Telex Answer Back") OR
        ("VAT Registration No." <> xRec."VAT Registration No.") OR
        ("Post Code" <> xRec."Post Code") OR
        (County <> xRec.County) OR
        ("E-Mail" <> xRec."E-Mail") OR
        ("Home Page" <> xRec."Home Page") OR
        (Contact <> xRec.Contact);

      IF NOT UpdateNeeded AND NOT ISTEMPORARY THEN
        UpdateNeeded := CustContUpdate.ContactNameIsBlank("No.");

      IF ForceUpdateContact THEN
        UpdateNeeded := TRUE;

      OnBeforeIsContactUpdateNeeded(Rec,xRec,UpdateNeeded);
      EXIT(UpdateNeeded);
    END;

    [External]
    PROCEDURE IsBlocked@52() : Boolean;
    BEGIN
      IF Blocked <> Blocked::" " THEN
        EXIT(TRUE);

      IF "Privacy Blocked" THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    [External]
    PROCEDURE HasAnyOpenOrPostedDocuments@60() : Boolean;
    VAR
      SalesHeader@1001 : Record 36;
      SalesLine@1000 : Record 37;
      CustLedgerEntry@1002 : Record 21;
      HasAnyDocs@1003 : Boolean;
    BEGIN
      SalesHeader.SETRANGE("Sell-to Customer No.","No.");
      IF SalesHeader.FINDFIRST THEN
        EXIT(TRUE);

      SalesLine.SETCURRENTKEY("Document Type","Bill-to Customer No.");
      SalesLine.SETRANGE("Bill-to Customer No.","No.");
      IF SalesLine.FINDFIRST THEN
        EXIT(TRUE);

      SalesLine.SETRANGE("Bill-to Customer No.");
      SalesLine.SETRANGE("Sell-to Customer No.","No.");
      IF SalesLine.FINDFIRST THEN
        EXIT(TRUE);

      CustLedgerEntry.SETRANGE("Customer No.","No.");
      IF NOT CustLedgerEntry.ISEMPTY THEN
        EXIT(TRUE);

      HasAnyDocs := FALSE;
      OnAfterHasAnyOpenOrPostedDocuments(Rec,HasAnyDocs);
      EXIT(HasAnyDocs);
    END;

    [External]
    PROCEDURE CopyFromCustomerTemplate@63(CustomerTemplate@1000 : Record 5105);
    BEGIN
      "Territory Code" := CustomerTemplate."Territory Code";
      "Global Dimension 1 Code" := CustomerTemplate."Global Dimension 1 Code";
      "Global Dimension 2 Code" := CustomerTemplate."Global Dimension 2 Code";
      "Customer Posting Group" := CustomerTemplate."Customer Posting Group";
      "Currency Code" := CustomerTemplate."Currency Code";
      "Invoice Disc. Code" := CustomerTemplate."Invoice Disc. Code";
      "Customer Price Group" := CustomerTemplate."Customer Price Group";
      "Customer Disc. Group" := CustomerTemplate."Customer Disc. Group";
      "Country/Region Code" := CustomerTemplate."Country/Region Code";
      "Allow Line Disc." := CustomerTemplate."Allow Line Disc.";
      "Gen. Bus. Posting Group" := CustomerTemplate."Gen. Bus. Posting Group";
      "VAT Bus. Posting Group" := CustomerTemplate."VAT Bus. Posting Group";
      VALIDATE("Payment Terms Code",CustomerTemplate."Payment Terms Code");
      VALIDATE("Payment Method Code",CustomerTemplate."Payment Method Code");
      "Prices Including VAT" := CustomerTemplate."Prices Including VAT";
      "Shipment Method Code" := CustomerTemplate."Shipment Method Code";

      OnAfterCopyFromCustomerTemplate(Rec,CustomerTemplate);
    END;

    LOCAL PROCEDURE CopyContactPicture@38(VAR Cont@1000 : Record 5050);
    VAR
      TempNameValueBuffer@1005 : TEMPORARY Record 823;
      FileManagement@1001 : Codeunit 419;
      ConfirmManagement@1002 : Codeunit 27;
      ExportPath@1006 : Text;
    BEGIN
      IF Image.HASVALUE THEN
        IF NOT ConfirmManagement.ConfirmProcess(OverrideImageQst,TRUE) THEN
          EXIT;

      ExportPath := TEMPORARYPATH + Cont."No." + FORMAT(Cont.Image.MEDIAID);
      Cont.Image.EXPORTFILE(ExportPath);
      FileManagement.GetServerDirectoryFilesList(TempNameValueBuffer,TEMPORARYPATH);
      TempNameValueBuffer.SETFILTER(Name,STRSUBSTNO('%1*',ExportPath));
      TempNameValueBuffer.FINDFIRST;

      CLEAR(Image);
      Image.IMPORTFILE(TempNameValueBuffer.Name,'');
      MODIFY;
      IF FileManagement.DeleteServerFile(TempNameValueBuffer.Name) THEN;
    END;

    [External]
    PROCEDURE GetInsertFromContact@69() : Boolean;
    BEGIN
      EXIT(InsertFromContact);
    END;

    [External]
    PROCEDURE GetInsertFromTemplate@68() : Boolean;
    BEGIN
      EXIT(InsertFromTemplate);
    END;

    LOCAL PROCEDURE SetDefaultSalesperson@35();
    VAR
      UserSetup@1000 : Record 91;
    BEGIN
      IF NOT UserSetup.GET(USERID) THEN
        EXIT;

      IF UserSetup."Salespers./Purch. Code" <> '' THEN
        VALIDATE("Salesperson Code",UserSetup."Salespers./Purch. Code");
    END;

    LOCAL PROCEDURE SetLastModifiedDateTime@39();
    BEGIN
      "Last Modified Date Time" := CURRENTDATETIME;
      "Last Date Modified" := TODAY;
    END;

    LOCAL PROCEDURE VATRegistrationValidation@47();
    VAR
      VATRegistrationNoFormat@1005 : Record 381;
      VATRegistrationLog@1004 : Record 249;
      VATRegNoSrvConfig@1003 : Record 248;
      VATRegistrationLogMgt@1002 : Codeunit 249;
      ResultRecordRef@1001 : RecordRef;
      ApplicableCountryCode@1000 : Code[10];
      IsHandled@1006 : Boolean;
      LogNotVerified@1007 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeVATRegistrationValidation(Rec,IsHandled);
      IF IsHandled THEN
        EXIT;

      IF NOT VATRegistrationNoFormat.Test("VAT Registration No.","Country/Region Code","No.",DATABASE::Customer) THEN
        EXIT;

      LogNotVerified := TRUE;
      IF ("Country/Region Code" <> '') OR (VATRegistrationNoFormat."Country/Region Code" <> '') THEN BEGIN
        ApplicableCountryCode := "Country/Region Code";
        IF ApplicableCountryCode = '' THEN
          ApplicableCountryCode := VATRegistrationNoFormat."Country/Region Code";
        IF VATRegNoSrvConfig.VATRegNoSrvIsEnabled THEN BEGIN
          LogNotVerified := FALSE;
          VATRegistrationLogMgt.ValidateVATRegNoWithVIES(
            ResultRecordRef,Rec,"No.",VATRegistrationLog."Account Type"::Customer,ApplicableCountryCode);
          ResultRecordRef.SETTABLE(Rec);
        END;
      END;

      IF LogNotVerified THEN
        VATRegistrationLogMgt.LogCustomer(Rec);
    END;

    [External]
    PROCEDURE SetAddress@40(CustomerAddress@1001 : Text[100];CustomerAddress2@1002 : Text[50];CustomerPostCode@1003 : Code[20];CustomerCity@1000 : Text[30];CustomerCounty@1004 : Text[30];CustomerCountryCode@1005 : Code[10];CustomerContact@1006 : Text[100]);
    BEGIN
      Address := CustomerAddress;
      "Address 2" := CustomerAddress2;
      "Post Code" := CustomerPostCode;
      City := CustomerCity;
      County := CustomerCounty;
      "Country/Region Code" := CustomerCountryCode;
      UpdateContFromCust.OnModify(Rec);
      Contact := CustomerContact;
    END;

    [External]
    PROCEDURE FindByEmail@41(VAR Customer@1001 : Record 18;Email@1000 : Text) : Boolean;
    VAR
      LocalContact@1002 : Record 5050;
      ContactBusinessRelation@1003 : Record 5054;
      MarketingSetup@1004 : Record 5079;
    BEGIN
      Customer.SETRANGE("E-Mail",Email);
      IF Customer.FINDFIRST THEN
        EXIT(TRUE);

      Customer.SETRANGE("E-Mail");
      LocalContact.SETRANGE("E-Mail",Email);
      IF LocalContact.FINDSET THEN BEGIN
        MarketingSetup.GET;
        REPEAT
          IF ContactBusinessRelation.GET(LocalContact."No.",MarketingSetup."Bus. Rel. Code for Customers") THEN BEGIN
            Customer.GET(ContactBusinessRelation."No.");
            EXIT(TRUE);
          END;
        UNTIL LocalContact.NEXT = 0
      END;
    END;

    [External]
    PROCEDURE UpdateReferencedIds@61();
    VAR
      GraphMgtGeneralTools@1000 : Codeunit 5465;
    BEGIN
      IF ISTEMPORARY THEN
        EXIT;

      IF NOT GraphMgtGeneralTools.IsApiEnabled THEN
        EXIT;

      UpdateCurrencyId;
      UpdatePaymentTermsId;
      UpdateShipmentMethodId;
      UpdatePaymentMethodId;
      UpdateTaxAreaId;
    END;

    [External]
    PROCEDURE GetReferencedIds@46(VAR TempField@1000 : TEMPORARY Record 2000000041);
    VAR
      DataTypeManagement@1001 : Codeunit 701;
    BEGIN
      DataTypeManagement.InsertFieldToBuffer(TempField,DATABASE::Customer,FIELDNO("Currency Id"));
      DataTypeManagement.InsertFieldToBuffer(TempField,DATABASE::Customer,FIELDNO("Payment Terms Id"));
      DataTypeManagement.InsertFieldToBuffer(TempField,DATABASE::Customer,FIELDNO("Payment Method Id"));
      DataTypeManagement.InsertFieldToBuffer(TempField,DATABASE::Customer,FIELDNO("Shipment Method Id"));
      DataTypeManagement.InsertFieldToBuffer(TempField,DATABASE::Customer,FIELDNO("Tax Area ID"));
    END;

    [External]
    PROCEDURE SetForceUpdateContact@65(NewForceUpdateContact@1000 : Boolean);
    BEGIN
      ForceUpdateContact := NewForceUpdateContact;
    END;

    LOCAL PROCEDURE UpdateCurrencyCode@54();
    VAR
      Currency@1001 : Record 4;
    BEGIN
      IF NOT ISNULLGUID("Currency Id") THEN BEGIN
        Currency.SETRANGE(Id,"Currency Id");
        Currency.FINDFIRST;
      END;

      VALIDATE("Currency Code",Currency.Code);
    END;

    LOCAL PROCEDURE UpdatePaymentTermsCode@56();
    VAR
      PaymentTerms@1001 : Record 3;
    BEGIN
      IF NOT ISNULLGUID("Payment Terms Id") THEN BEGIN
        PaymentTerms.SETRANGE(Id,"Payment Terms Id");
        PaymentTerms.FINDFIRST;
      END;

      VALIDATE("Payment Terms Code",PaymentTerms.Code);
    END;

    LOCAL PROCEDURE UpdateShipmentMethodCode@58();
    VAR
      ShipmentMethod@1001 : Record 10;
    BEGIN
      IF NOT ISNULLGUID("Shipment Method Id") THEN BEGIN
        ShipmentMethod.SETRANGE(Id,"Shipment Method Id");
        ShipmentMethod.FINDFIRST;
      END;

      VALIDATE("Shipment Method Code",ShipmentMethod.Code);
    END;

    LOCAL PROCEDURE UpdatePaymentMethodCode@43();
    VAR
      PaymentMethod@1001 : Record 289;
    BEGIN
      IF NOT ISNULLGUID("Payment Method Id") THEN BEGIN
        PaymentMethod.SETRANGE(Id,"Payment Method Id");
        PaymentMethod.FINDFIRST;
      END;

      VALIDATE("Payment Method Code",PaymentMethod.Code);
    END;

    [External]
    PROCEDURE UpdateCurrencyId@55();
    VAR
      Currency@1000 : Record 4;
    BEGIN
      IF "Currency Code" = '' THEN BEGIN
        CLEAR("Currency Id");
        EXIT;
      END;

      IF NOT Currency.GET("Currency Code") THEN
        EXIT;

      "Currency Id" := Currency.Id;
    END;

    [External]
    PROCEDURE UpdatePaymentTermsId@57();
    VAR
      PaymentTerms@1000 : Record 3;
    BEGIN
      IF "Payment Terms Code" = '' THEN BEGIN
        CLEAR("Payment Terms Id");
        EXIT;
      END;

      IF NOT PaymentTerms.GET("Payment Terms Code") THEN
        EXIT;

      "Payment Terms Id" := PaymentTerms.Id;
    END;

    [External]
    PROCEDURE UpdateShipmentMethodId@59();
    VAR
      ShipmentMethod@1000 : Record 10;
    BEGIN
      IF "Shipment Method Code" = '' THEN BEGIN
        CLEAR("Shipment Method Id");
        EXIT;
      END;

      IF NOT ShipmentMethod.GET("Shipment Method Code") THEN
        EXIT;

      "Shipment Method Id" := ShipmentMethod.Id;
    END;

    [External]
    PROCEDURE UpdatePaymentMethodId@45();
    VAR
      PaymentMethod@1000 : Record 289;
    BEGIN
      IF "Payment Method Code" = '' THEN BEGIN
        CLEAR("Payment Method Id");
        EXIT;
      END;

      IF NOT PaymentMethod.GET("Payment Method Code") THEN
        EXIT;

      "Payment Method Id" := PaymentMethod.Id;
    END;

    [External]
    PROCEDURE UpdateTaxAreaId@1166();
    VAR
      VATBusinessPostingGroup@1002 : Record 323;
      TaxArea@1000 : Record 318;
      GeneralLedgerSetup@1001 : Record 98;
    BEGIN
      IF GeneralLedgerSetup.UseVat THEN BEGIN
        IF "VAT Bus. Posting Group" = '' THEN BEGIN
          CLEAR("Tax Area ID");
          EXIT;
        END;

        IF NOT VATBusinessPostingGroup.GET("VAT Bus. Posting Group") THEN
          EXIT;

        "Tax Area ID" := VATBusinessPostingGroup.Id;
      END ELSE BEGIN
        IF "Tax Area Code" = '' THEN BEGIN
          CLEAR("Tax Area ID");
          EXIT;
        END;

        IF NOT TaxArea.GET("Tax Area Code") THEN
          EXIT;

        "Tax Area ID" := TaxArea.Id;
      END;
    END;

    LOCAL PROCEDURE UpdateTaxAreaCode@1164();
    VAR
      TaxArea@1001 : Record 318;
      VATBusinessPostingGroup@1000 : Record 323;
      GeneralLedgerSetup@1002 : Record 98;
    BEGIN
      IF ISNULLGUID("Tax Area ID") THEN
        EXIT;

      IF GeneralLedgerSetup.UseVat THEN BEGIN
        VATBusinessPostingGroup.SETRANGE(Id,"Tax Area ID");
        VATBusinessPostingGroup.FINDFIRST;
        "VAT Bus. Posting Group" := VATBusinessPostingGroup.Code;
      END ELSE BEGIN
        TaxArea.SETRANGE(Id,"Tax Area ID");
        TaxArea.FINDFIRST;
        "Tax Area Code" := TaxArea.Code;
      END;
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeIsContactUpdateNeeded@50(Customer@1000 : Record 18;xCustomer@1001 : Record 18;VAR UpdateNeeded@1002 : Boolean);
    BEGIN
    END;

    LOCAL PROCEDURE ValidateSalesPersonCode@1900();
    BEGIN
      IF "Salesperson Code" <> '' THEN
        IF SalespersonPurchaser.GET("Salesperson Code") THEN
          IF SalespersonPurchaser.VerifySalesPersonPurchaserPrivacyBlocked(SalespersonPurchaser) THEN
            ERROR(SalespersonPurchaser.GetPrivacyBlockedGenericText(SalespersonPurchaser,TRUE))
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCopyFromCustomerTemplate@64(VAR Customer@1000 : Record 18;CustomerTemplate@1001 : Record 5105);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterHasAnyOpenOrPostedDocuments@62(VAR Customer@1000 : Record 18;VAR HasAnyDocs@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterValidateCity@75(VAR Customer@1000 : Record 18;xCustomer@1001 : Record 18);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterValidatePostCode@71(VAR Customer@1001 : Record 18;xCustomer@1000 : Record 18);
    BEGIN
    END;

    LOCAL PROCEDURE IsOnBeforeCheckBlockedCustHandled@67(Customer@1003 : Record 18;Source@1004 : 'Journal,Document';DocType@1002 : Option;Shipment@1001 : Boolean;Transaction@1000 : Boolean) IsHandled : Boolean;
    BEGIN
      OnBeforeCheckBlockedCust(Customer,Source,DocType,Shipment,Transaction,IsHandled)
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCheckBlockedCust@66(Customer@1003 : Record 18;Source@1005 : 'Journal,Document';DocType@1002 : Option;Shipment@1001 : Boolean;Transaction@1000 : Boolean;VAR IsHandled@1004 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeGetTotalAmountLCY@76(VAR Customer@1000 : Record 18);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeGetTotalAmountLCYUI@79(VAR Customer@1000 : Record 18);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeGetTotalAmountLCYCommon@80(VAR Customer@1000 : Record 18;VAR AdditionalAmountLCY@1001 : Decimal);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeValidateShortcutDimCode@70(VAR Customer@1000 : Record 18;FieldNumber@1002 : Integer;VAR ShortcutDimCode@1001 : Code[20];VAR IsHandled@1003 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeVATRegistrationValidation@74(VAR Customer@1000 : Record 18;VAR IsHandled@1001 : Boolean);
    BEGIN
    END;

    BEGIN
    END.
  }
}

OBJECT Table 21 Cust. Ledger Entry
{
  OBJECT-PROPERTIES
  {
    Date=29-01-25;
    Time=16:00:15;
    Modified=Yes;
    Version List=NAVW114.30;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Cust. Ledger Entry;
               ENN=Cust. Ledger Entry];
    LookupPageID=Page25;
    DrillDownPageID=Page25;
  }
  FIELDS
  {
    { 1   ;   ;Entry No.           ;Integer       ;CaptionML=[ENU=Entry No.;
                                                              ENN=Entry No.] }
    { 3   ;   ;Customer No.        ;Code20        ;TableRelation=Customer;
                                                   CaptionML=[ENU=Customer No.;
                                                              ENN=Customer No.] }
    { 4   ;   ;Posting Date        ;Date          ;CaptionML=[ENU=Posting Date;
                                                              ENN=Posting Date] }
    { 5   ;   ;Document Type       ;Option        ;CaptionML=[ENU=Document Type;
                                                              ENN=Document Type];
                                                   OptionCaptionML=[ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund";
                                                                    ENN=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund"];
                                                   OptionString=[ ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund] }
    { 6   ;   ;Document No.        ;Code20        ;OnLookup=VAR
                                                              IncomingDocument@1000 : Record 130;
                                                            BEGIN
                                                              IncomingDocument.HyperlinkToDocument("Document No.","Posting Date");
                                                            END;

                                                   CaptionML=[ENU=Document No.;
                                                              ENN=Document No.] }
    { 7   ;   ;Description         ;Text100       ;CaptionML=[ENU=Description;
                                                              ENN=Description] }
    { 8   ;   ;Customer Name       ;Text100       ;CaptionML=[ENU=Customer Name;
                                                              ENN=Customer Name] }
    { 11  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   CaptionML=[ENU=Currency Code;
                                                              ENN=Currency Code] }
    { 13  ;   ;Amount              ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry".Amount WHERE (Ledger Entry Amount=CONST(Yes),
                                                                                                              Cust. Ledger Entry No.=FIELD(Entry No.),
                                                                                                              Posting Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Amount;
                                                              ENN=Amount];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 14  ;   ;Remaining Amount    ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry".Amount WHERE (Cust. Ledger Entry No.=FIELD(Entry No.),
                                                                                                              Posting Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Remaining Amount;
                                                              ENN=Remaining Amount];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 15  ;   ;Original Amt. (LCY) ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry"."Amount (LCY)" WHERE (Cust. Ledger Entry No.=FIELD(Entry No.),
                                                                                                                      Entry Type=FILTER(Initial Entry),
                                                                                                                      Posting Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Original Amt. (LCY);
                                                              ENN=Original Amt. (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 16  ;   ;Remaining Amt. (LCY);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry"."Amount (LCY)" WHERE (Cust. Ledger Entry No.=FIELD(Entry No.),
                                                                                                                      Posting Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Remaining Amt. (LCY);
                                                              ENN=Remaining Amt. (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 17  ;   ;Amount (LCY)        ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry"."Amount (LCY)" WHERE (Ledger Entry Amount=CONST(Yes),
                                                                                                                      Cust. Ledger Entry No.=FIELD(Entry No.),
                                                                                                                      Posting Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Amount (LCY);
                                                              ENN=Amount (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 18  ;   ;Sales (LCY)         ;Decimal       ;CaptionML=[ENU=Sales (LCY);
                                                              ENN=Sales (LCY)];
                                                   AutoFormatType=1 }
    { 19  ;   ;Profit (LCY)        ;Decimal       ;CaptionML=[ENU=Profit (LCY);
                                                              ENN=Profit (LCY)];
                                                   AutoFormatType=1 }
    { 20  ;   ;Inv. Discount (LCY) ;Decimal       ;CaptionML=[ENU=Inv. Discount (LCY);
                                                              ENN=Inv. Discount (LCY)];
                                                   AutoFormatType=1 }
    { 21  ;   ;Sell-to Customer No.;Code20        ;TableRelation=Customer;
                                                   CaptionML=[ENU=Sell-to Customer No.;
                                                              ENN=Sell-to Customer No.] }
    { 22  ;   ;Customer Posting Group;Code20      ;TableRelation="Customer Posting Group";
                                                   CaptionML=[ENU=Customer Posting Group;
                                                              ENN=Customer Posting Group] }
    { 23  ;   ;Global Dimension 1 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   CaptionML=[ENU=Global Dimension 1 Code;
                                                              ENN=Global Dimension 1 Code];
                                                   CaptionClass='1,1,1' }
    { 24  ;   ;Global Dimension 2 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   CaptionML=[ENU=Global Dimension 2 Code;
                                                              ENN=Global Dimension 2 Code];
                                                   CaptionClass='1,1,2' }
    { 25  ;   ;Salesperson Code    ;Code20        ;TableRelation=Salesperson/Purchaser;
                                                   CaptionML=[ENU=Salesperson Code;
                                                              ENN=Salesperson Code] }
    { 27  ;   ;User ID             ;Code50        ;TableRelation=User."User Name";
                                                   OnLookup=VAR
                                                              UserMgt@1000 : Codeunit 418;
                                                            BEGIN
                                                              UserMgt.LookupUserID("User ID");
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   DataClassification=EndUserIdentifiableInformation;
                                                   CaptionML=[ENU=User ID;
                                                              ENN=User ID] }
    { 28  ;   ;Source Code         ;Code10        ;TableRelation="Source Code";
                                                   CaptionML=[ENU=Source Code;
                                                              ENN=Source Code] }
    { 33  ;   ;On Hold             ;Code3         ;CaptionML=[ENU=On Hold;
                                                              ENN=On Hold] }
    { 34  ;   ;Applies-to Doc. Type;Option        ;CaptionML=[ENU=Applies-to Doc. Type;
                                                              ENN=Applies-to Doc. Type];
                                                   OptionCaptionML=[ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund";
                                                                    ENN=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund"];
                                                   OptionString=[ ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund] }
    { 35  ;   ;Applies-to Doc. No. ;Code20        ;CaptionML=[ENU=Applies-to Doc. No.;
                                                              ENN=Applies-to Doc. No.] }
    { 36  ;   ;Open                ;Boolean       ;CaptionML=[ENU=Open;
                                                              ENN=Open] }
    { 37  ;   ;Due Date            ;Date          ;OnValidate=VAR
                                                                ReminderEntry@1000 : Record 300;
                                                                ReminderIssue@1565 : Codeunit 393;
                                                              BEGIN
                                                                TESTFIELD(Open,TRUE);
                                                                IF "Due Date" <> xRec."Due Date" THEN BEGIN
                                                                  ReminderEntry.SETCURRENTKEY("Customer Entry No.",Type);
                                                                  ReminderEntry.SETRANGE("Customer Entry No.","Entry No.");
                                                                  ReminderEntry.SETRANGE(Type,ReminderEntry.Type::Reminder);
                                                                  ReminderEntry.SETRANGE("Reminder Level","Last Issued Reminder Level");
                                                                  IF ReminderEntry.FINDLAST THEN
                                                                    ReminderIssue.ChangeDueDate(ReminderEntry,"Due Date",xRec."Due Date");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Due Date;
                                                              ENN=Due Date] }
    { 38  ;   ;Pmt. Discount Date  ;Date          ;OnValidate=BEGIN
                                                                TESTFIELD(Open,TRUE);
                                                              END;

                                                   CaptionML=[ENU=Pmt. Discount Date;
                                                              ENN=Pmt. Discount Date] }
    { 39  ;   ;Original Pmt. Disc. Possible;Decimal;
                                                   CaptionML=[ENU=Original Pmt. Disc. Possible;
                                                              ENN=Original Pmt. Disc. Possible];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 40  ;   ;Pmt. Disc. Given (LCY);Decimal     ;CaptionML=[ENU=Pmt. Disc. Given (LCY);
                                                              ENN=Pmt. Disc. Given (LCY)];
                                                   AutoFormatType=1 }
    { 43  ;   ;Positive            ;Boolean       ;CaptionML=[ENU=Positive;
                                                              ENN=Positive] }
    { 44  ;   ;Closed by Entry No. ;Integer       ;TableRelation="Cust. Ledger Entry";
                                                   CaptionML=[ENU=Closed by Entry No.;
                                                              ENN=Closed by Entry No.] }
    { 45  ;   ;Closed at Date      ;Date          ;CaptionML=[ENU=Closed at Date;
                                                              ENN=Closed at Date] }
    { 46  ;   ;Closed by Amount    ;Decimal       ;CaptionML=[ENU=Closed by Amount;
                                                              ENN=Closed by Amount];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 47  ;   ;Applies-to ID       ;Code50        ;OnValidate=BEGIN
                                                                TESTFIELD(Open,TRUE);
                                                              END;

                                                   CaptionML=[ENU=Applies-to ID;
                                                              ENN=Applies-to ID] }
    { 49  ;   ;Journal Batch Name  ;Code10        ;CaptionML=[ENU=Journal Batch Name;
                                                              ENN=Journal Batch Name] }
    { 50  ;   ;Reason Code         ;Code10        ;TableRelation="Reason Code";
                                                   CaptionML=[ENU=Reason Code;
                                                              ENN=Reason Code] }
    { 51  ;   ;Bal. Account Type   ;Option        ;CaptionML=[ENU=Bal. Account Type;
                                                              ENN=Bal. Account Type];
                                                   OptionCaptionML=[ENU=G/L Account,Customer,Vendor,Bank Account,Fixed Asset;
                                                                    ENN=G/L Account,Customer,Vendor,Bank Account,Fixed Asset];
                                                   OptionString=G/L Account,Customer,Vendor,Bank Account,Fixed Asset }
    { 52  ;   ;Bal. Account No.    ;Code20        ;TableRelation=IF (Bal. Account Type=CONST(G/L Account)) "G/L Account"
                                                                 ELSE IF (Bal. Account Type=CONST(Customer)) Customer
                                                                 ELSE IF (Bal. Account Type=CONST(Vendor)) Vendor
                                                                 ELSE IF (Bal. Account Type=CONST(Bank Account)) "Bank Account"
                                                                 ELSE IF (Bal. Account Type=CONST(Fixed Asset)) "Fixed Asset";
                                                   CaptionML=[ENU=Bal. Account No.;
                                                              ENN=Bal. Account No.] }
    { 53  ;   ;Transaction No.     ;Integer       ;CaptionML=[ENU=Transaction No.;
                                                              ENN=Transaction No.] }
    { 54  ;   ;Closed by Amount (LCY);Decimal     ;CaptionML=[ENU=Closed by Amount (LCY);
                                                              ENN=Closed by Amount (LCY)];
                                                   AutoFormatType=1 }
    { 58  ;   ;Debit Amount        ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry"."Debit Amount" WHERE (Ledger Entry Amount=CONST(Yes),
                                                                                                                      Cust. Ledger Entry No.=FIELD(Entry No.),
                                                                                                                      Posting Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Debit Amount;
                                                              ENN=Debit Amount];
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 59  ;   ;Credit Amount       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry"."Credit Amount" WHERE (Ledger Entry Amount=CONST(Yes),
                                                                                                                       Cust. Ledger Entry No.=FIELD(Entry No.),
                                                                                                                       Posting Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Credit Amount;
                                                              ENN=Credit Amount];
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 60  ;   ;Debit Amount (LCY)  ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry"."Debit Amount (LCY)" WHERE (Ledger Entry Amount=CONST(Yes),
                                                                                                                            Cust. Ledger Entry No.=FIELD(Entry No.),
                                                                                                                            Posting Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Debit Amount (LCY);
                                                              ENN=Debit Amount (LCY)];
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 61  ;   ;Credit Amount (LCY) ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry"."Credit Amount (LCY)" WHERE (Ledger Entry Amount=CONST(Yes),
                                                                                                                             Cust. Ledger Entry No.=FIELD(Entry No.),
                                                                                                                             Posting Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Credit Amount (LCY);
                                                              ENN=Credit Amount (LCY)];
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 62  ;   ;Document Date       ;Date          ;CaptionML=[ENU=Document Date;
                                                              ENN=Document Date] }
    { 63  ;   ;External Document No.;Code35       ;CaptionML=[ENU=External Document No.;
                                                              ENN=External Document No.] }
    { 64  ;   ;Calculate Interest  ;Boolean       ;CaptionML=[ENU=Calculate Interest;
                                                              ENN=Calculate Interest] }
    { 65  ;   ;Closing Interest Calculated;Boolean;CaptionML=[ENU=Closing Interest Calculated;
                                                              ENN=Closing Interest Calculated] }
    { 66  ;   ;No. Series          ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=[ENU=No. Series;
                                                              ENN=No. Series] }
    { 67  ;   ;Closed by Currency Code;Code10     ;TableRelation=Currency;
                                                   CaptionML=[ENU=Closed by Currency Code;
                                                              ENN=Closed by Currency Code] }
    { 68  ;   ;Closed by Currency Amount;Decimal  ;AccessByPermission=TableData 4=R;
                                                   CaptionML=[ENU=Closed by Currency Amount;
                                                              ENN=Closed by Currency Amount];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Closed by Currency Code" }
    { 73  ;   ;Adjusted Currency Factor;Decimal   ;CaptionML=[ENU=Adjusted Currency Factor;
                                                              ENN=Adjusted Currency Factor];
                                                   DecimalPlaces=0:15 }
    { 74  ;   ;Original Currency Factor;Decimal   ;CaptionML=[ENU=Original Currency Factor;
                                                              ENN=Original Currency Factor];
                                                   DecimalPlaces=0:15 }
    { 75  ;   ;Original Amount     ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry".Amount WHERE (Cust. Ledger Entry No.=FIELD(Entry No.),
                                                                                                              Entry Type=FILTER(Initial Entry),
                                                                                                              Posting Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Original Amount;
                                                              ENN=Original Amount];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 76  ;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Date Filter;
                                                              ENN=Date Filter] }
    { 77  ;   ;Remaining Pmt. Disc. Possible;Decimal;
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Open,TRUE);
                                                                CALCFIELDS(Amount,"Original Amount");

                                                                IF "Remaining Pmt. Disc. Possible" * Amount < 0 THEN
                                                                  FIELDERROR("Remaining Pmt. Disc. Possible",STRSUBSTNO(Text000,FIELDCAPTION(Amount)));

                                                                IF ABS("Remaining Pmt. Disc. Possible") > ABS("Original Amount") THEN
                                                                  FIELDERROR("Remaining Pmt. Disc. Possible",STRSUBSTNO(Text001,FIELDCAPTION("Original Amount")));
                                                              END;

                                                   CaptionML=[ENU=Remaining Pmt. Disc. Possible;
                                                              ENN=Remaining Pmt. Disc. Possible];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 78  ;   ;Pmt. Disc. Tolerance Date;Date     ;OnValidate=BEGIN
                                                                TESTFIELD(Open,TRUE);
                                                              END;

                                                   CaptionML=[ENU=Pmt. Disc. Tolerance Date;
                                                              ENN=Pmt. Disc. Tolerance Date] }
    { 79  ;   ;Max. Payment Tolerance;Decimal     ;OnValidate=BEGIN
                                                                TESTFIELD(Open,TRUE);
                                                                CALCFIELDS(Amount,"Remaining Amount");

                                                                IF "Max. Payment Tolerance" * Amount < 0 THEN
                                                                  FIELDERROR("Max. Payment Tolerance",STRSUBSTNO(Text000,FIELDCAPTION(Amount)));

                                                                IF ABS("Max. Payment Tolerance") > ABS("Remaining Amount") THEN
                                                                  FIELDERROR("Max. Payment Tolerance",STRSUBSTNO(Text001,FIELDCAPTION("Remaining Amount")));
                                                              END;

                                                   CaptionML=[ENU=Max. Payment Tolerance;
                                                              ENN=Max. Payment Tolerance];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 80  ;   ;Last Issued Reminder Level;Integer ;CaptionML=[ENU=Last Issued Reminder Level;
                                                              ENN=Last Issued Reminder Level] }
    { 81  ;   ;Accepted Payment Tolerance;Decimal ;CaptionML=[ENU=Accepted Payment Tolerance;
                                                              ENN=Accepted Payment Tolerance];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 82  ;   ;Accepted Pmt. Disc. Tolerance;Boolean;
                                                   CaptionML=[ENU=Accepted Pmt. Disc. Tolerance;
                                                              ENN=Accepted Pmt. Disc. Tolerance] }
    { 83  ;   ;Pmt. Tolerance (LCY);Decimal       ;CaptionML=[ENU=Pmt. Tolerance (LCY);
                                                              ENN=Pmt. Tolerance (LCY)];
                                                   AutoFormatType=1 }
    { 84  ;   ;Amount to Apply     ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD(Open,TRUE);
                                                                CALCFIELDS("Remaining Amount");

                                                                IF "Amount to Apply" * "Remaining Amount" < 0 THEN
                                                                  FIELDERROR("Amount to Apply",STRSUBSTNO(Text000,FIELDCAPTION("Remaining Amount")));

                                                                IF ABS("Amount to Apply") > ABS("Remaining Amount") THEN
                                                                  FIELDERROR("Amount to Apply",STRSUBSTNO(Text001,FIELDCAPTION("Remaining Amount")));
                                                              END;

                                                   CaptionML=[ENU=Amount to Apply;
                                                              ENN=Amount to Apply];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 85  ;   ;IC Partner Code     ;Code20        ;TableRelation="IC Partner";
                                                   CaptionML=[ENU=IC Partner Code;
                                                              ENN=IC Partner Code] }
    { 86  ;   ;Applying Entry      ;Boolean       ;CaptionML=[ENU=Applying Entry;
                                                              ENN=Applying Entry] }
    { 87  ;   ;Reversed            ;Boolean       ;CaptionML=[ENU=Reversed;
                                                              ENN=Reversed];
                                                   BlankZero=Yes }
    { 88  ;   ;Reversed by Entry No.;Integer      ;TableRelation="Cust. Ledger Entry";
                                                   CaptionML=[ENU=Reversed by Entry No.;
                                                              ENN=Reversed by Entry No.];
                                                   BlankZero=Yes }
    { 89  ;   ;Reversed Entry No.  ;Integer       ;TableRelation="Cust. Ledger Entry";
                                                   CaptionML=[ENU=Reversed Entry No.;
                                                              ENN=Reversed Entry No.];
                                                   BlankZero=Yes }
    { 90  ;   ;Prepayment          ;Boolean       ;CaptionML=[ENU=Prepayment;
                                                              ENN=Prepayment] }
    { 171 ;   ;Payment Reference   ;Code50        ;CaptionML=[ENU=Payment Reference;
                                                              ENN=Payment Reference] }
    { 172 ;   ;Payment Method Code ;Code10        ;TableRelation="Payment Method";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Open,TRUE);
                                                              END;

                                                   CaptionML=[ENU=Payment Method Code;
                                                              ENN=Payment Method Code] }
    { 173 ;   ;Applies-to Ext. Doc. No.;Code35    ;CaptionML=[ENU=Applies-to Ext. Doc. No.;
                                                              ENN=Applies-to Ext. Doc. No.] }
    { 288 ;   ;Recipient Bank Account;Code20      ;TableRelation="Customer Bank Account".Code WHERE (Customer No.=FIELD(Customer No.));
                                                   CaptionML=[ENU=Recipient Bank Account;
                                                              ENN=Recipient Bank Account] }
    { 289 ;   ;Message to Recipient;Text140       ;OnValidate=BEGIN
                                                                TESTFIELD(Open,TRUE);
                                                              END;

                                                   CaptionML=[ENU=Message to Recipient;
                                                              ENN=Message to Recipient] }
    { 290 ;   ;Exported to Payment File;Boolean   ;CaptionML=[ENU=Exported to Payment File;
                                                              ENN=Exported to Payment File];
                                                   Editable=No }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnLookup=BEGIN
                                                              ShowDimensions;
                                                            END;

                                                   CaptionML=[ENU=Dimension Set ID;
                                                              ENN=Dimension Set ID];
                                                   Editable=No }
    { 1200;   ;Direct Debit Mandate ID;Code35     ;TableRelation="SEPA Direct Debit Mandate" WHERE (Customer No.=FIELD(Customer No.));
                                                   CaptionML=[ENU=Direct Debit Mandate ID;
                                                              ENN=Direct Debit Mandate ID] }
    { 50002;  ;Remarks             ;Text250       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Sales Invoice Header".Remarks WHERE (No.=FIELD(Document No.)));
                                                   Description=AD_SD;
                                                   Editable=No }
    { 50003;  ;Narration           ;Text150       ;Description=AD_SD }
    { 50006;  ;Team Leader         ;Code30        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Sales Invoice Header"."Team Leader" WHERE (No.=FIELD(Document No.)));
                                                   TableRelation=Employee WHERE (Type=FILTER(Partner|Others));
                                                   Description=AD_SD;
                                                   Editable=No }
    { 50007;  ;Segment             ;Text100       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Sales Invoice Header".Segment WHERE (No.=FIELD(Document No.)));
                                                   TableRelation="Segment Master" WHERE (LOB=FIELD(LOB));
                                                   Description=AD_SD }
    { 50008;  ;LOB                 ;Text40        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Sales Invoice Header".LOB WHERE (No.=FIELD(Document No.)));
                                                   TableRelation="Segment Master";
                                                   Description=AD_SD;
                                                   Editable=No }
    { 50009;  ;Invoice Types       ;Option        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Sales Invoice Header"."Invoice Types" WHERE (No.=FIELD(Document No.)));
                                                   OptionCaptionML=ENU=" ,Fees,Expenses";
                                                   OptionString=[ ,Fees,Expenses];
                                                   Description=AD_SD;
                                                   Editable=No }
    { 50010;  ;Remarks Cr. Memo    ;Text250       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Sales Cr.Memo Header".Remarks WHERE (No.=FIELD(Document No.)));
                                                   Description=Santosh }
    { 50051;  ;Resp. Name          ;Text80        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Sales Invoice Header"."Resp. Name" WHERE (No.=FIELD(Document No.)));
                                                   Description=AD_SD;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Entry No.                               ;Clustered=Yes }
    {    ;Customer No.,Posting Date,Currency Code ;SumIndexFields=Sales (LCY),Profit (LCY),Inv. Discount (LCY) }
    { No ;Customer No.,Currency Code,Posting Date  }
    {    ;Document No.                             }
    {    ;External Document No.                    }
    {    ;Customer No.,Open,Positive,Due Date,Currency Code }
    {    ;Open,Due Date                            }
    {    ;Document Type,Customer No.,Posting Date,Currency Code;
                                                   SumIndexFields=Sales (LCY),Profit (LCY),Inv. Discount (LCY) }
    {    ;Salesperson Code,Posting Date            }
    {    ;Closed by Entry No.                      }
    {    ;Transaction No.                          }
    { No ;Customer No.,Open,Positive,Calculate Interest,Due Date }
    { No ;Customer No.,Global Dimension 1 Code,Global Dimension 2 Code,Posting Date,Currency Code;
                                                   SumIndexFields=Sales (LCY),Profit (LCY),Inv. Discount (LCY) }
    { No ;Customer No.,Open,Global Dimension 1 Code,Global Dimension 2 Code,Positive,Due Date,Currency Code }
    { No ;Open,Global Dimension 1 Code,Global Dimension 2 Code,Due Date }
    { No ;Document Type,Customer No.,Global Dimension 1 Code,Global Dimension 2 Code,Posting Date,Currency Code }
    {    ;Customer No.,Applies-to ID,Open,Positive,Due Date }
    {    ;Document Type,Posting Date              ;SumIndexFields=Sales (LCY) }
    {    ;Document Type,Customer No.,Open,Due Date }
    {    ;Customer Posting Group                   }
    {    ;Document Type,Open,Posting Date,Closed at Date }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;Entry No.,Description,Customer No.,Posting Date,Document Type,Document No. }
    { 2   ;Brick               ;Document No.,Description,Remaining Amt. (LCY),Due Date }
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=must have the same sign as %1;ENN=must have the same sign as %1';
      Text001@1001 : TextConst 'ENU=must not be larger than %1;ENN=must not be larger than %1';

    [External]
    PROCEDURE ShowDoc@7() : Boolean;
    VAR
      SalesInvoiceHdr@1003 : Record 112;
      SalesCrMemoHdr@1002 : Record 114;
      ServiceInvoiceHeader@1000 : Record 5992;
      ServiceCrMemoHeader@1001 : Record 5994;
      IssuedFinChargeMemoHeader@1004 : Record 304;
      IssuedReminderHeader@1005 : Record 297;
    BEGIN
      CASE "Document Type" OF
        "Document Type"::Invoice:
          BEGIN
            IF SalesInvoiceHdr.GET("Document No.") THEN BEGIN
              PAGE.RUN(PAGE::"Posted Sales Invoice",SalesInvoiceHdr);
              EXIT(TRUE);
            END;
            IF ServiceInvoiceHeader.GET("Document No.") THEN BEGIN
              PAGE.RUN(PAGE::"Posted Service Invoice",ServiceInvoiceHeader);
              EXIT(TRUE);
            END;
          END;
        "Document Type"::"Credit Memo":
          BEGIN
            IF SalesCrMemoHdr.GET("Document No.") THEN BEGIN
              PAGE.RUN(PAGE::"Posted Sales Credit Memo",SalesCrMemoHdr);
              EXIT(TRUE);
            END;
            IF ServiceCrMemoHeader.GET("Document No.") THEN BEGIN
              PAGE.RUN(PAGE::"Posted Service Credit Memo",ServiceCrMemoHeader);
              EXIT(TRUE);
            END;
          END;
        "Document Type"::"Finance Charge Memo":
          IF IssuedFinChargeMemoHeader.GET("Document No.") THEN BEGIN
            PAGE.RUN(PAGE::"Issued Finance Charge Memo",IssuedFinChargeMemoHeader);
            EXIT(TRUE);
          END;
        "Document Type"::Reminder:
          IF IssuedReminderHeader.GET("Document No.") THEN BEGIN
            PAGE.RUN(PAGE::"Issued Reminder",IssuedReminderHeader);
            EXIT(TRUE);
          END;
      END;

      OnAfterShowDoc(Rec);
    END;

    [External]
    PROCEDURE ShowPostedDocAttachment@15();
    VAR
      SalesInvoiceHdr@1003 : Record 112;
      SalesCrMemoHdr@1002 : Record 114;
    BEGIN
      CASE "Document Type" OF
        "Document Type"::Invoice:
          IF SalesInvoiceHdr.GET("Document No.") THEN
            OpenDocumentAttachmentDetails(SalesInvoiceHdr);
        "Document Type"::"Credit Memo":
          IF SalesCrMemoHdr.GET("Document No.") THEN
            OpenDocumentAttachmentDetails(SalesCrMemoHdr);
      END;
    END;

    LOCAL PROCEDURE OpenDocumentAttachmentDetails@17(Record@1000 : Variant);
    VAR
      DocumentAttachmentDetails@1002 : Page 1173;
      RecRef@1001 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Record);
      DocumentAttachmentDetails.OpenForRecRef(RecRef);
      DocumentAttachmentDetails.RUNMODAL;
    END;

    [External]
    PROCEDURE HasPostedDocAttachment@16() : Boolean;
    VAR
      SalesInvoiceHdr@1003 : Record 112;
      SalesCrMemoHdr@1002 : Record 114;
      DocumentAttachment@1005 : Record 1173;
    BEGIN
      CASE "Document Type" OF
        "Document Type"::Invoice:
          IF SalesInvoiceHdr.GET("Document No.") THEN
            EXIT(DocumentAttachment.HasPostedDocumentAttachment(SalesInvoiceHdr));
        "Document Type"::"Credit Memo":
          IF SalesCrMemoHdr.GET("Document No.") THEN
            EXIT(DocumentAttachment.HasPostedDocumentAttachment(SalesCrMemoHdr));
      END;
    END;

    [External]
    PROCEDURE DrillDownOnEntries@1(VAR DtldCustLedgEntry@1000 : Record 379);
    VAR
      CustLedgEntry@1001 : Record 21;
    BEGIN
      CustLedgEntry.RESET;
      DtldCustLedgEntry.COPYFILTER("Customer No.",CustLedgEntry."Customer No.");
      DtldCustLedgEntry.COPYFILTER("Currency Code",CustLedgEntry."Currency Code");
      DtldCustLedgEntry.COPYFILTER("Initial Entry Global Dim. 1",CustLedgEntry."Global Dimension 1 Code");
      DtldCustLedgEntry.COPYFILTER("Initial Entry Global Dim. 2",CustLedgEntry."Global Dimension 2 Code");
      DtldCustLedgEntry.COPYFILTER("Initial Entry Due Date",CustLedgEntry."Due Date");
      CustLedgEntry.SETCURRENTKEY("Customer No.","Posting Date");
      CustLedgEntry.SETRANGE(Open,TRUE);
      OnBeforeDrillDownEntries(CustLedgEntry,DtldCustLedgEntry);
      PAGE.RUN(0,CustLedgEntry);
    END;

    [External]
    PROCEDURE DrillDownOnOverdueEntries@4(VAR DtldCustLedgEntry@1000 : Record 379);
    VAR
      CustLedgEntry@1001 : Record 21;
    BEGIN
      CustLedgEntry.RESET;
      DtldCustLedgEntry.COPYFILTER("Customer No.",CustLedgEntry."Customer No.");
      DtldCustLedgEntry.COPYFILTER("Currency Code",CustLedgEntry."Currency Code");
      DtldCustLedgEntry.COPYFILTER("Initial Entry Global Dim. 1",CustLedgEntry."Global Dimension 1 Code");
      DtldCustLedgEntry.COPYFILTER("Initial Entry Global Dim. 2",CustLedgEntry."Global Dimension 2 Code");
      CustLedgEntry.SETCURRENTKEY("Customer No.","Posting Date");
      CustLedgEntry.SETFILTER("Date Filter",'<%1',TODAY);
      CustLedgEntry.SETFILTER("Due Date",'<%1',TODAY);
      CustLedgEntry.SETFILTER("Remaining Amount",'<>%1',0);
      OnBeforeDrillDownOnOverdueEntries(CustLedgEntry,DtldCustLedgEntry);
      PAGE.RUN(0,CustLedgEntry);
    END;

    [External]
    PROCEDURE GetOriginalCurrencyFactor@2() : Decimal;
    BEGIN
      IF "Original Currency Factor" = 0 THEN
        EXIT(1);
      EXIT("Original Currency Factor");
    END;

    [External]
    PROCEDURE GetAdjustedCurrencyFactor@14() : Decimal;
    BEGIN
      IF "Adjusted Currency Factor" = 0 THEN
        EXIT(1);
      EXIT("Adjusted Currency Factor");
    END;

    [External]
    PROCEDURE ShowDimensions@3();
    VAR
      DimMgt@1000 : Codeunit 408;
    BEGIN
      DimMgt.ShowDimensionSet("Dimension Set ID",STRSUBSTNO('%1 %2',TABLECAPTION,"Entry No."));
    END;

    [External]
    PROCEDURE SetStyle@5() : Text;
    BEGIN
      IF Open THEN BEGIN
        IF WORKDATE > "Due Date" THEN
          EXIT('Unfavorable')
      END ELSE
        IF "Closed at Date" > "Due Date" THEN
          EXIT('Attention');
      EXIT('');
    END;

    [External]
    PROCEDURE SetApplyToFilters@9(CustomerNo@1000 : Code[20];ApplyDocType@1001 : Option;ApplyDocNo@1002 : Code[20];ApplyAmount@1003 : Decimal);
    BEGIN
      SETCURRENTKEY("Customer No.",Open,Positive,"Due Date");
      SETRANGE("Customer No.",CustomerNo);
      SETRANGE(Open,TRUE);
      IF ApplyDocNo <> '' THEN BEGIN
        SETRANGE("Document Type",ApplyDocType);
        SETRANGE("Document No.",ApplyDocNo);
        IF FINDFIRST THEN;
        SETRANGE("Document Type");
        SETRANGE("Document No.");
      END ELSE
        IF ApplyDocType <> 0 THEN BEGIN
          SETRANGE("Document Type",ApplyDocType);
          IF FINDFIRST THEN;
          SETRANGE("Document Type");
        END ELSE
          IF ApplyAmount <> 0 THEN BEGIN
            SETRANGE(Positive,ApplyAmount < 0);
            IF FINDFIRST THEN;
            SETRANGE(Positive);
          END;
    END;

    [External]
    PROCEDURE SetAmountToApply@35(AppliesToDocNo@1000 : Code[20];CustomerNo@1001 : Code[20]);
    BEGIN
      SETCURRENTKEY("Document No.");
      SETRANGE("Document No.",AppliesToDocNo);
      SETRANGE("Customer No.",CustomerNo);
      SETRANGE(Open,TRUE);
      IF FINDFIRST THEN BEGIN
        IF "Amount to Apply" = 0 THEN BEGIN
          CALCFIELDS("Remaining Amount");
          "Amount to Apply" := "Remaining Amount";
        END ELSE
          "Amount to Apply" := 0;
        "Accepted Payment Tolerance" := 0;
        "Accepted Pmt. Disc. Tolerance" := FALSE;
        CODEUNIT.RUN(CODEUNIT::"Cust. Entry-Edit",Rec);
      END;
    END;

    [External]
    PROCEDURE CopyFromGenJnlLine@6(GenJnlLine@1000 : Record 81);
    BEGIN
      "Customer No." := GenJnlLine."Account No.";
      "Posting Date" := GenJnlLine."Posting Date";
      "Document Date" := GenJnlLine."Document Date";
      "Document Type" := GenJnlLine."Document Type";
      "Document No." := GenJnlLine."Document No.";
      "External Document No." := GenJnlLine."External Document No.";
      Description := GenJnlLine.Description;
      "Currency Code" := GenJnlLine."Currency Code";
      "Sales (LCY)" := GenJnlLine."Sales/Purch. (LCY)";
      "Profit (LCY)" := GenJnlLine."Profit (LCY)";
      "Inv. Discount (LCY)" := GenJnlLine."Inv. Discount (LCY)";
      "Sell-to Customer No." := GenJnlLine."Sell-to/Buy-from No.";
      "Customer Posting Group" := GenJnlLine."Posting Group";
      "Global Dimension 1 Code" := GenJnlLine."Shortcut Dimension 1 Code";
      "Global Dimension 2 Code" := GenJnlLine."Shortcut Dimension 2 Code";
      "Dimension Set ID" := GenJnlLine."Dimension Set ID";
      "Salesperson Code" := GenJnlLine."Salespers./Purch. Code";
      "Source Code" := GenJnlLine."Source Code";
      "On Hold" := GenJnlLine."On Hold";
      "Applies-to Doc. Type" := GenJnlLine."Applies-to Doc. Type";
      "Applies-to Doc. No." := GenJnlLine."Applies-to Doc. No.";
      "Due Date" := GenJnlLine."Due Date";
      "Pmt. Discount Date" := GenJnlLine."Pmt. Discount Date";
      "Applies-to ID" := GenJnlLine."Applies-to ID";
      "Journal Batch Name" := GenJnlLine."Journal Batch Name";
      "Reason Code" := GenJnlLine."Reason Code";
      "Direct Debit Mandate ID" := GenJnlLine."Direct Debit Mandate ID";
      "User ID" := USERID;
      "Bal. Account Type" := GenJnlLine."Bal. Account Type";
      "Bal. Account No." := GenJnlLine."Bal. Account No.";
      "No. Series" := GenJnlLine."Posting No. Series";
      "IC Partner Code" := GenJnlLine."IC Partner Code";
      Prepayment := GenJnlLine.Prepayment;
      "Recipient Bank Account" := GenJnlLine."Recipient Bank Account";
      "Message to Recipient" := GenJnlLine."Message to Recipient";
      "Applies-to Ext. Doc. No." := GenJnlLine."Applies-to Ext. Doc. No.";
      "Payment Method Code" := GenJnlLine."Payment Method Code";
      "Exported to Payment File" := GenJnlLine."Exported to Payment File";
      //"TDS Group" := GenJnlLine."TDS Group";
      //"TDS Nature of Deduction" := GenJnlLine."TDS Nature of Deduction";
      //"Adv. Pmt. Adjustment" := GenJnlLine."Adv. Pmt. Adjustment";
      //"GST Jurisdiction Type" := GenJnlLine."GST Jurisdiction Type";
      //"GST Without Payment of Duty" := GenJnlLine."GST Without Payment of Duty";
    END;

    [External]
    PROCEDURE CopyFromCVLedgEntryBuffer@10(VAR CVLedgerEntryBuffer@1000 : Record 382);
    BEGIN
      TRANSFERFIELDS(CVLedgerEntryBuffer);
      Amount := CVLedgerEntryBuffer.Amount;
      "Amount (LCY)" := CVLedgerEntryBuffer."Amount (LCY)";
      "Remaining Amount" := CVLedgerEntryBuffer."Remaining Amount";
      "Remaining Amt. (LCY)" := CVLedgerEntryBuffer."Remaining Amt. (LCY)";
      "Original Amount" := CVLedgerEntryBuffer."Original Amount";
      "Original Amt. (LCY)" := CVLedgerEntryBuffer."Original Amt. (LCY)";

      OnAfterCopyCustLedgerEntryFromCVLedgEntryBuffer(Rec,CVLedgerEntryBuffer);
    END;

    [External]
    PROCEDURE RecalculateAmounts@26(FromCurrencyCode@1001 : Code[10];ToCurrencyCode@1002 : Code[10];PostingDate@1003 : Date);
    VAR
      CurrExchRate@1004 : Record 330;
    BEGIN
      IF ToCurrencyCode = FromCurrencyCode THEN
        EXIT;

      "Remaining Amount" :=
        CurrExchRate.ExchangeAmount("Remaining Amount",FromCurrencyCode,ToCurrencyCode,PostingDate);
      "Remaining Pmt. Disc. Possible" :=
        CurrExchRate.ExchangeAmount("Remaining Pmt. Disc. Possible",FromCurrencyCode,ToCurrencyCode,PostingDate);
      "Accepted Payment Tolerance" :=
        CurrExchRate.ExchangeAmount("Accepted Payment Tolerance",FromCurrencyCode,ToCurrencyCode,PostingDate);
      "Amount to Apply" :=
        CurrExchRate.ExchangeAmount("Amount to Apply",FromCurrencyCode,ToCurrencyCode,PostingDate);
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCopyCustLedgerEntryFromGenJnlLine@8(VAR CustLedgerEntry@1000 : Record 21;GenJournalLine@1001 : Record 81);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCopyCustLedgerEntryFromCVLedgEntryBuffer@11(VAR CustLedgerEntry@1001 : Record 21;CVLedgerEntryBuffer@1000 : Record 382);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterShowDoc@18(CustLedgerEntry@1000 : Record 21);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeDrillDownEntries@12(VAR CustLedgerEntry@1000 : Record 21;VAR DetailedCustLedgEntry@1001 : Record 379);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeDrillDownOnOverdueEntries@13(VAR CustLedgerEntry@1000 : Record 21;VAR DetailedCustLedgEntry@1001 : Record 379);
    BEGIN
    END;

    BEGIN
    END.
  }
}

OBJECT Table 25 Vendor Ledger Entry
{
  OBJECT-PROPERTIES
  {
    Date=29-01-25;
    Time=15:48:06;
    Modified=Yes;
    Version List=NAVW114.30;
  }
  PROPERTIES
  {
    LookupPageID=Page29;
    DrillDownPageID=Page29;
  }
  FIELDS
  {
    { 1   ;   ;Entry No.           ;Integer        }
    { 3   ;   ;Vendor No.          ;Code20        ;TableRelation=Vendor }
    { 4   ;   ;Posting Date        ;Date           }
    { 5   ;   ;Document Type       ;Option        ;OptionString=[ ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund] }
    { 6   ;   ;Document No.        ;Code20        ;OnLookup=VAR
                                                              IncomingDocument@1000 : Record 130;
                                                            BEGIN
                                                              IncomingDocument.HyperlinkToDocument("Document No.","Posting Date");
                                                            END;
                                                             }
    { 7   ;   ;Description         ;Text100        }
    { 8   ;   ;Vendor Name         ;Text100       ;CaptionML=[ENU=Vendor Name;
                                                              ENN=Vendor Name] }
    { 11  ;   ;Currency Code       ;Code10        ;TableRelation=Currency }
    { 13  ;   ;Amount              ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Vendor Ledg. Entry".Amount WHERE (Ledger Entry Amount=CONST(Yes),
                                                                                                               Vendor Ledger Entry No.=FIELD(Entry No.),
                                                                                                               Posting Date=FIELD(Date Filter)));
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 14  ;   ;Remaining Amount    ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Vendor Ledg. Entry".Amount WHERE (Vendor Ledger Entry No.=FIELD(Entry No.),
                                                                                                               Posting Date=FIELD(Date Filter)));
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 15  ;   ;Original Amt. (LCY) ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Vendor Ledg. Entry"."Amount (LCY)" WHERE (Vendor Ledger Entry No.=FIELD(Entry No.),
                                                                                                                       Entry Type=FILTER(Initial Entry),
                                                                                                                       Posting Date=FIELD(Date Filter)));
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 16  ;   ;Remaining Amt. (LCY);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Vendor Ledg. Entry"."Amount (LCY)" WHERE (Vendor Ledger Entry No.=FIELD(Entry No.),
                                                                                                                       Posting Date=FIELD(Date Filter)));
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 17  ;   ;Amount (LCY)        ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Vendor Ledg. Entry"."Amount (LCY)" WHERE (Ledger Entry Amount=CONST(Yes),
                                                                                                                       Vendor Ledger Entry No.=FIELD(Entry No.),
                                                                                                                       Posting Date=FIELD(Date Filter)));
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 18  ;   ;Purchase (LCY)      ;Decimal       ;AutoFormatType=1 }
    { 20  ;   ;Inv. Discount (LCY) ;Decimal       ;AutoFormatType=1 }
    { 21  ;   ;Buy-from Vendor No. ;Code20        ;TableRelation=Vendor }
    { 22  ;   ;Vendor Posting Group;Code20        ;TableRelation="Vendor Posting Group" }
    { 23  ;   ;Global Dimension 1 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   CaptionClass='1,1,1' }
    { 24  ;   ;Global Dimension 2 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   CaptionClass='1,1,2' }
    { 25  ;   ;Purchaser Code      ;Code20        ;TableRelation=Salesperson/Purchaser }
    { 27  ;   ;User ID             ;Code50        ;TableRelation=User."User Name";
                                                   OnLookup=VAR
                                                              UserMgt@1000 : Codeunit 418;
                                                            BEGIN
                                                              UserMgt.LookupUserID("User ID");
                                                            END;

                                                   TestTableRelation=No;
                                                   DataClassification=EndUserIdentifiableInformation }
    { 28  ;   ;Source Code         ;Code10        ;TableRelation="Source Code" }
    { 33  ;   ;On Hold             ;Code3          }
    { 34  ;   ;Applies-to Doc. Type;Option        ;OptionString=[ ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund] }
    { 35  ;   ;Applies-to Doc. No. ;Code20         }
    { 36  ;   ;Open                ;Boolean        }
    { 37  ;   ;Due Date            ;Date          ;OnValidate=BEGIN
                                                                TESTFIELD(Open,TRUE);
                                                              END;
                                                               }
    { 38  ;   ;Pmt. Discount Date  ;Date          ;OnValidate=BEGIN
                                                                TESTFIELD(Open,TRUE);
                                                              END;
                                                               }
    { 39  ;   ;Original Pmt. Disc. Possible;Decimal;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 40  ;   ;Pmt. Disc. Rcd.(LCY);Decimal       ;AutoFormatType=1 }
    { 43  ;   ;Positive            ;Boolean        }
    { 44  ;   ;Closed by Entry No. ;Integer       ;TableRelation="Vendor Ledger Entry" }
    { 45  ;   ;Closed at Date      ;Date           }
    { 46  ;   ;Closed by Amount    ;Decimal       ;AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 47  ;   ;Applies-to ID       ;Code50        ;OnValidate=BEGIN
                                                                TESTFIELD(Open,TRUE);
                                                              END;
                                                               }
    { 49  ;   ;Journal Batch Name  ;Code10        ;TestTableRelation=No }
    { 50  ;   ;Reason Code         ;Code10        ;TableRelation="Reason Code" }
    { 51  ;   ;Bal. Account Type   ;Option        ;OptionString=G/L Account,Customer,Vendor,Bank Account,Fixed Asset }
    { 52  ;   ;Bal. Account No.    ;Code20        ;TableRelation=IF (Bal. Account Type=CONST(G/L Account)) "G/L Account"
                                                                 ELSE IF (Bal. Account Type=CONST(Customer)) Customer
                                                                 ELSE IF (Bal. Account Type=CONST(Vendor)) Vendor
                                                                 ELSE IF (Bal. Account Type=CONST(Bank Account)) "Bank Account"
                                                                 ELSE IF (Bal. Account Type=CONST(Fixed Asset)) "Fixed Asset" }
    { 53  ;   ;Transaction No.     ;Integer        }
    { 54  ;   ;Closed by Amount (LCY);Decimal     ;AutoFormatType=1 }
    { 58  ;   ;Debit Amount        ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Vendor Ledg. Entry"."Debit Amount" WHERE (Ledger Entry Amount=CONST(Yes),
                                                                                                                       Vendor Ledger Entry No.=FIELD(Entry No.),
                                                                                                                       Posting Date=FIELD(Date Filter)));
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 59  ;   ;Credit Amount       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Vendor Ledg. Entry"."Credit Amount" WHERE (Ledger Entry Amount=CONST(Yes),
                                                                                                                        Vendor Ledger Entry No.=FIELD(Entry No.),
                                                                                                                        Posting Date=FIELD(Date Filter)));
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 60  ;   ;Debit Amount (LCY)  ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Vendor Ledg. Entry"."Debit Amount (LCY)" WHERE (Ledger Entry Amount=CONST(Yes),
                                                                                                                             Vendor Ledger Entry No.=FIELD(Entry No.),
                                                                                                                             Posting Date=FIELD(Date Filter)));
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 61  ;   ;Credit Amount (LCY) ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Vendor Ledg. Entry"."Credit Amount (LCY)" WHERE (Ledger Entry Amount=CONST(Yes),
                                                                                                                              Vendor Ledger Entry No.=FIELD(Entry No.),
                                                                                                                              Posting Date=FIELD(Date Filter)));
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 62  ;   ;Document Date       ;Date           }
    { 63  ;   ;External Document No.;Code35        }
    { 64  ;   ;No. Series          ;Code20        ;TableRelation="No. Series" }
    { 65  ;   ;Closed by Currency Code;Code10     ;TableRelation=Currency }
    { 66  ;   ;Closed by Currency Amount;Decimal  ;AccessByPermission=TableData 4=R;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Closed by Currency Code" }
    { 73  ;   ;Adjusted Currency Factor;Decimal   ;DecimalPlaces=0:15 }
    { 74  ;   ;Original Currency Factor;Decimal   ;DecimalPlaces=0:15 }
    { 75  ;   ;Original Amount     ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Vendor Ledg. Entry".Amount WHERE (Vendor Ledger Entry No.=FIELD(Entry No.),
                                                                                                               Entry Type=FILTER(Initial Entry),
                                                                                                               Posting Date=FIELD(Date Filter)));
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 76  ;   ;Date Filter         ;Date          ;FieldClass=FlowFilter }
    { 77  ;   ;Remaining Pmt. Disc. Possible;Decimal;
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Open,TRUE);
                                                                CALCFIELDS(Amount,"Original Amount");

                                                                IF "Remaining Pmt. Disc. Possible" * Amount < 0 THEN
                                                                  FIELDERROR("Remaining Pmt. Disc. Possible",STRSUBSTNO(MustHaveSameSignErr,FIELDCAPTION(Amount)));

                                                                IF ABS("Remaining Pmt. Disc. Possible") > ABS("Original Amount") THEN
                                                                  FIELDERROR("Remaining Pmt. Disc. Possible",STRSUBSTNO(MustNotBeLargerErr,FIELDCAPTION("Original Amount")));
                                                              END;

                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 78  ;   ;Pmt. Disc. Tolerance Date;Date     ;OnValidate=BEGIN
                                                                TESTFIELD(Open,TRUE);
                                                              END;
                                                               }
    { 79  ;   ;Max. Payment Tolerance;Decimal     ;OnValidate=BEGIN
                                                                TESTFIELD(Open,TRUE);
                                                                CALCFIELDS(Amount,"Remaining Amount");

                                                                IF "Max. Payment Tolerance" * Amount < 0 THEN
                                                                  FIELDERROR("Max. Payment Tolerance",STRSUBSTNO(MustHaveSameSignErr,FIELDCAPTION(Amount)));

                                                                IF ABS("Max. Payment Tolerance") > ABS("Remaining Amount") THEN
                                                                  FIELDERROR("Max. Payment Tolerance",STRSUBSTNO(MustNotBeLargerErr,FIELDCAPTION("Remaining Amount")));
                                                              END;

                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 81  ;   ;Accepted Payment Tolerance;Decimal ;AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 82  ;   ;Accepted Pmt. Disc. Tolerance;Boolean }
    { 83  ;   ;Pmt. Tolerance (LCY);Decimal       ;AutoFormatType=1 }
    { 84  ;   ;Amount to Apply     ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD(Open,TRUE);
                                                                CALCFIELDS("Remaining Amount");

                                                                IF "Amount to Apply" * "Remaining Amount" < 0 THEN
                                                                  FIELDERROR("Amount to Apply",STRSUBSTNO(MustHaveSameSignErr,FIELDCAPTION("Remaining Amount")));

                                                                IF ABS("Amount to Apply") > ABS("Remaining Amount") THEN
                                                                  FIELDERROR("Amount to Apply",STRSUBSTNO(MustNotBeLargerErr,FIELDCAPTION("Remaining Amount")));
                                                              END;

                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 85  ;   ;IC Partner Code     ;Code20        ;TableRelation="IC Partner" }
    { 86  ;   ;Applying Entry      ;Boolean        }
    { 87  ;   ;Reversed            ;Boolean        }
    { 88  ;   ;Reversed by Entry No.;Integer      ;TableRelation="Vendor Ledger Entry";
                                                   BlankZero=Yes }
    { 89  ;   ;Reversed Entry No.  ;Integer       ;TableRelation="Vendor Ledger Entry";
                                                   BlankZero=Yes }
    { 90  ;   ;Prepayment          ;Boolean        }
    { 170 ;   ;Creditor No.        ;Code20        ;OnValidate=BEGIN
                                                                IF ("Creditor No." <> '') AND ("Recipient Bank Account" <> '') THEN
                                                                  FIELDERROR("Recipient Bank Account",
                                                                    STRSUBSTNO(FieldIsNotEmptyErr,FIELDCAPTION("Creditor No."),FIELDCAPTION("Recipient Bank Account")));
                                                              END;
                                                               }
    { 171 ;   ;Payment Reference   ;Code50        ;Numeric=Yes }
    { 172 ;   ;Payment Method Code ;Code10        ;TableRelation="Payment Method";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Open,TRUE);
                                                              END;
                                                               }
    { 173 ;   ;Applies-to Ext. Doc. No.;Code35     }
    { 288 ;   ;Recipient Bank Account;Code20      ;TableRelation="Vendor Bank Account".Code WHERE (Vendor No.=FIELD(Vendor No.));
                                                   OnValidate=BEGIN
                                                                IF ("Recipient Bank Account" <> '') AND ("Creditor No." <> '') THEN
                                                                  FIELDERROR("Creditor No.",
                                                                    STRSUBSTNO(FieldIsNotEmptyErr,FIELDCAPTION("Recipient Bank Account"),FIELDCAPTION("Creditor No.")));
                                                              END;
                                                               }
    { 289 ;   ;Message to Recipient;Text140       ;OnValidate=BEGIN
                                                                TESTFIELD(Open,TRUE);
                                                              END;
                                                               }
    { 290 ;   ;Exported to Payment File;Boolean   ;Editable=No }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnLookup=BEGIN
                                                              ShowDimensions;
                                                            END;

                                                   Editable=No }
    { 50000;  ;Remarks             ;Text150       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Purch. Inv. Header".Remarks WHERE (No.=FIELD(Document No.)));
                                                   Description=Santosh;
                                                   Editable=No }
    { 50001;  ;Remarks Cr. Memo    ;Text150       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Purch. Cr. Memo Hdr.".Remarks WHERE (No.=FIELD(Document No.)));
                                                   Description=Santosh;
                                                   Editable=No }
    { 50002;  ;TDS NOD             ;Code10        ;Description=Santosh;
                                                   Editable=No }
    { 50003;  ;TDS Amount          ;Decimal       ;Description=Santosh;
                                                   Editable=No }
    { 50004;  ;TDS Account Amount  ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("G/L Entry".Amount WHERE (Document No.=FIELD(Document No.),
                                                                                              G/L Account Name=FILTER(*TDS*)));
                                                   Description=Santosh;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Entry No.                               ;Clustered=Yes }
    {    ;Vendor No.,Posting Date,Currency Code   ;SumIndexFields=Purchase (LCY),Inv. Discount (LCY) }
    { No ;Vendor No.,Currency Code,Posting Date    }
    {    ;Document No.                             }
    {    ;External Document No.                    }
    {    ;Vendor No.,Open,Positive,Due Date,Currency Code }
    {    ;Open,Due Date                            }
    {    ;Document Type,Vendor No.,Posting Date,Currency Code;
                                                   SumIndexFields=Purchase (LCY),Inv. Discount (LCY);
                                                   MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;Closed by Entry No.                      }
    {    ;Transaction No.                          }
    { No ;Vendor No.,Global Dimension 1 Code,Global Dimension 2 Code,Posting Date,Currency Code;
                                                   SumIndexFields=Purchase (LCY),Inv. Discount (LCY) }
    { No ;Vendor No.,Open,Global Dimension 1 Code,Global Dimension 2 Code,Positive,Due Date,Currency Code }
    { No ;Open,Global Dimension 1 Code,Global Dimension 2 Code,Due Date }
    { No ;Document Type,Vendor No.,Global Dimension 1 Code,Global Dimension 2 Code,Posting Date,Currency Code;
                                                   MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;Vendor No.,Applies-to ID,Open,Positive,Due Date }
    {    ;Vendor Posting Group                     }
    {    ;Pmt. Discount Date                       }
    {    ;Document Type,Due Date,Open              }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;Entry No.,Description,Vendor No.,Posting Date,Document Type,Document No. }
    { 2   ;Brick               ;Document No.,Description,Remaining Amt. (LCY),Due Date }
  }
  CODE
  {
    VAR
      FieldIsNotEmptyErr@1002 : TextConst '@@@="%1=Field;%2=Field";ENU=%1 cannot be used while %2 has a value.';
      MustHaveSameSignErr@1000 : TextConst 'ENU=must have the same sign as %1';
      MustNotBeLargerErr@1001 : TextConst 'ENU=must not be larger than %1';

    [External]
    PROCEDURE ShowDoc@7() : Boolean;
    VAR
      PurchInvHeader@1003 : Record 122;
      PurchCrMemoHdr@1002 : Record 124;
    BEGIN
      CASE "Document Type" OF
        "Document Type"::Invoice:
          IF PurchInvHeader.GET("Document No.") THEN BEGIN
            PAGE.RUN(PAGE::"Posted Purchase Invoice",PurchInvHeader);
            EXIT(TRUE);
          END;
        "Document Type"::"Credit Memo":
          IF PurchCrMemoHdr.GET("Document No.") THEN BEGIN
            PAGE.RUN(PAGE::"Posted Purchase Credit Memo",PurchCrMemoHdr);
            EXIT(TRUE);
          END
      END;

      OnAfterShowDoc(Rec);
    END;

    [External]
    PROCEDURE ShowPostedDocAttachment@15();
    VAR
      PurchInvHeader@1003 : Record 122;
      PurchCrMemoHdr@1002 : Record 124;
    BEGIN
      CASE "Document Type" OF
        "Document Type"::Invoice:
          IF PurchInvHeader.GET("Document No.") THEN
            OpenDocumentAttachmentDetails(PurchInvHeader);
        "Document Type"::"Credit Memo":
          IF PurchCrMemoHdr.GET("Document No.") THEN
            OpenDocumentAttachmentDetails(PurchCrMemoHdr);
      END;
    END;

    LOCAL PROCEDURE OpenDocumentAttachmentDetails@17(Record@1000 : Variant);
    VAR
      DocumentAttachmentDetails@1002 : Page 1173;
      RecRef@1001 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Record);
      DocumentAttachmentDetails.OpenForRecRef(RecRef);
      DocumentAttachmentDetails.RUNMODAL;
    END;

    [External]
    PROCEDURE HasPostedDocAttachment@16() : Boolean;
    VAR
      PurchInvHeader@1007 : Record 122;
      PurchCrMemoHdr@1006 : Record 124;
      DocumentAttachment@1005 : Record 1173;
    BEGIN
      CASE "Document Type" OF
        "Document Type"::Invoice:
          IF PurchInvHeader.GET("Document No.") THEN
            EXIT(DocumentAttachment.HasPostedDocumentAttachment(PurchInvHeader));
        "Document Type"::"Credit Memo":
          IF PurchCrMemoHdr.GET("Document No.") THEN
            EXIT(DocumentAttachment.HasPostedDocumentAttachment(PurchCrMemoHdr));
      END;
    END;

    [External]
    PROCEDURE DrillDownOnEntries@1(VAR DtldVendLedgEntry@1000 : Record 380);
    VAR
      VendLedgEntry@1001 : Record 25;
    BEGIN
      VendLedgEntry.RESET;
      DtldVendLedgEntry.COPYFILTER("Vendor No.",VendLedgEntry."Vendor No.");
      DtldVendLedgEntry.COPYFILTER("Currency Code",VendLedgEntry."Currency Code");
      DtldVendLedgEntry.COPYFILTER("Initial Entry Global Dim. 1",VendLedgEntry."Global Dimension 1 Code");
      DtldVendLedgEntry.COPYFILTER("Initial Entry Global Dim. 2",VendLedgEntry."Global Dimension 2 Code");
      DtldVendLedgEntry.COPYFILTER("Initial Entry Due Date",VendLedgEntry."Due Date");
      VendLedgEntry.SETCURRENTKEY("Vendor No.","Posting Date");
      VendLedgEntry.SETRANGE(Open,TRUE);
      OnBeforeDrillDownEntries(VendLedgEntry,DtldVendLedgEntry);
      PAGE.RUN(0,VendLedgEntry);
    END;

    [External]
    PROCEDURE DrillDownOnOverdueEntries@4(VAR DtldVendLedgEntry@1000 : Record 380);
    VAR
      VendLedgEntry@1001 : Record 25;
    BEGIN
      VendLedgEntry.RESET;
      DtldVendLedgEntry.COPYFILTER("Vendor No.",VendLedgEntry."Vendor No.");
      DtldVendLedgEntry.COPYFILTER("Currency Code",VendLedgEntry."Currency Code");
      DtldVendLedgEntry.COPYFILTER("Initial Entry Global Dim. 1",VendLedgEntry."Global Dimension 1 Code");
      DtldVendLedgEntry.COPYFILTER("Initial Entry Global Dim. 2",VendLedgEntry."Global Dimension 2 Code");
      VendLedgEntry.SETCURRENTKEY("Vendor No.","Posting Date");
      VendLedgEntry.SETFILTER("Date Filter",'..%1',WORKDATE);
      VendLedgEntry.SETFILTER("Due Date",'<%1',WORKDATE);
      VendLedgEntry.SETFILTER("Remaining Amount",'<>%1',0);
      OnBeforeDrillDownOnOverdueEntries(VendLedgEntry,DtldVendLedgEntry);
      PAGE.RUN(0,VendLedgEntry);
    END;

    [External]
    PROCEDURE GetOriginalCurrencyFactor@2() : Decimal;
    BEGIN
      IF "Original Currency Factor" = 0 THEN
        EXIT(1);
      EXIT("Original Currency Factor");
    END;

    [External]
    PROCEDURE GetAdjustedCurrencyFactor@11() : Decimal;
    BEGIN
      IF "Adjusted Currency Factor" = 0 THEN
        EXIT(1);
      EXIT("Adjusted Currency Factor");
    END;

    [External]
    PROCEDURE ShowDimensions@3();
    VAR
      DimMgt@1000 : Codeunit 408;
    BEGIN
      DimMgt.ShowDimensionSet("Dimension Set ID",STRSUBSTNO('%1 %2',TABLECAPTION,"Entry No."));
    END;

    [External]
    PROCEDURE SetStyle@5() : Text;
    BEGIN
      IF Open THEN BEGIN
        IF WORKDATE > "Due Date" THEN
          EXIT('Unfavorable')
      END ELSE
        IF "Closed at Date" > "Due Date" THEN
          EXIT('Attention');
      EXIT('');
    END;

    [External]
    PROCEDURE CopyFromGenJnlLine@6(GenJnlLine@1000 : Record 81);
    BEGIN
      "Vendor No." := GenJnlLine."Account No.";
      "Posting Date" := GenJnlLine."Posting Date";
      "Document Date" := GenJnlLine."Document Date";
      "Document Type" := GenJnlLine."Document Type";
      "Document No." := GenJnlLine."Document No.";
      "External Document No." := GenJnlLine."External Document No.";
      Description := GenJnlLine.Description;
      "Currency Code" := GenJnlLine."Currency Code";
      "Purchase (LCY)" := GenJnlLine."Sales/Purch. (LCY)";
      "Inv. Discount (LCY)" := GenJnlLine."Inv. Discount (LCY)";
      "Buy-from Vendor No." := GenJnlLine."Sell-to/Buy-from No.";
      "Vendor Posting Group" := GenJnlLine."Posting Group";
      "Global Dimension 1 Code" := GenJnlLine."Shortcut Dimension 1 Code";
      "Global Dimension 2 Code" := GenJnlLine."Shortcut Dimension 2 Code";
      "Dimension Set ID" := GenJnlLine."Dimension Set ID";
      "Purchaser Code" := GenJnlLine."Salespers./Purch. Code";
      "Source Code" := GenJnlLine."Source Code";
      "On Hold" := GenJnlLine."On Hold";
      "Applies-to Doc. Type" := GenJnlLine."Applies-to Doc. Type";
      "Applies-to Doc. No." := GenJnlLine."Applies-to Doc. No.";
      "Due Date" := GenJnlLine."Due Date";
      "Pmt. Discount Date" := GenJnlLine."Pmt. Discount Date";
      "Applies-to ID" := GenJnlLine."Applies-to ID";
      "Journal Batch Name" := GenJnlLine."Journal Batch Name";
      "Reason Code" := GenJnlLine."Reason Code";
      "User ID" := USERID;
      "Bal. Account Type" := GenJnlLine."Bal. Account Type";
      "Bal. Account No." := GenJnlLine."Bal. Account No.";
      "No. Series" := GenJnlLine."Posting No. Series";
      "IC Partner Code" := GenJnlLine."IC Partner Code";
      Prepayment := GenJnlLine.Prepayment;
      "Recipient Bank Account" := GenJnlLine."Recipient Bank Account";
      "Message to Recipient" := GenJnlLine."Message to Recipient";
      "Applies-to Ext. Doc. No." := GenJnlLine."Applies-to Ext. Doc. No.";
      "Creditor No." := GenJnlLine."Creditor No.";
      "Payment Reference" := GenJnlLine."Payment Reference";
      "Payment Method Code" := GenJnlLine."Payment Method Code";
      "Exported to Payment File" := GenJnlLine."Exported to Payment File";

      OnAfterCopyVendLedgerEntryFromGenJnlLine(Rec,GenJnlLine);
    END;

    [External]
    PROCEDURE CopyFromCVLedgEntryBuffer@9(VAR CVLedgerEntryBuffer@1000 : Record 382);
    BEGIN
      "Entry No." := CVLedgerEntryBuffer."Entry No.";
      "Vendor No." := CVLedgerEntryBuffer."CV No.";
      "Posting Date" := CVLedgerEntryBuffer."Posting Date";
      "Document Type" := CVLedgerEntryBuffer."Document Type";
      "Document No." := CVLedgerEntryBuffer."Document No.";
      Description := CVLedgerEntryBuffer.Description;
      "Currency Code" := CVLedgerEntryBuffer."Currency Code";
      Amount := CVLedgerEntryBuffer.Amount;
      "Remaining Amount" := CVLedgerEntryBuffer."Remaining Amount";
      "Original Amount" := CVLedgerEntryBuffer."Original Amount";
      "Original Amt. (LCY)" := CVLedgerEntryBuffer."Original Amt. (LCY)";
      "Remaining Amt. (LCY)" := CVLedgerEntryBuffer."Remaining Amt. (LCY)";
      "Amount (LCY)" := CVLedgerEntryBuffer."Amount (LCY)";
      "Purchase (LCY)" := CVLedgerEntryBuffer."Sales/Purchase (LCY)";
      "Inv. Discount (LCY)" := CVLedgerEntryBuffer."Inv. Discount (LCY)";
      "Buy-from Vendor No." := CVLedgerEntryBuffer."Bill-to/Pay-to CV No.";
      "Vendor Posting Group" := CVLedgerEntryBuffer."CV Posting Group";
      "Global Dimension 1 Code" := CVLedgerEntryBuffer."Global Dimension 1 Code";
      "Global Dimension 2 Code" := CVLedgerEntryBuffer."Global Dimension 2 Code";
      "Dimension Set ID" := CVLedgerEntryBuffer."Dimension Set ID";
      "Purchaser Code" := CVLedgerEntryBuffer."Salesperson Code";
      "User ID" := CVLedgerEntryBuffer."User ID";
      "Source Code" := CVLedgerEntryBuffer."Source Code";
      "On Hold" := CVLedgerEntryBuffer."On Hold";
      "Applies-to Doc. Type" := CVLedgerEntryBuffer."Applies-to Doc. Type";
      "Applies-to Doc. No." := CVLedgerEntryBuffer."Applies-to Doc. No.";
      Open := CVLedgerEntryBuffer.Open;
      "Due Date" := CVLedgerEntryBuffer."Due Date" ;
      "Pmt. Discount Date" := CVLedgerEntryBuffer."Pmt. Discount Date";
      "Original Pmt. Disc. Possible" := CVLedgerEntryBuffer."Original Pmt. Disc. Possible";
      "Remaining Pmt. Disc. Possible" := CVLedgerEntryBuffer."Remaining Pmt. Disc. Possible";
      "Pmt. Disc. Rcd.(LCY)" := CVLedgerEntryBuffer."Pmt. Disc. Given (LCY)";
      Positive := CVLedgerEntryBuffer.Positive;
      "Closed by Entry No." := CVLedgerEntryBuffer."Closed by Entry No.";
      "Closed at Date" := CVLedgerEntryBuffer."Closed at Date";
      "Closed by Amount" := CVLedgerEntryBuffer."Closed by Amount";
      "Applies-to ID" := CVLedgerEntryBuffer."Applies-to ID";
      "Journal Batch Name" := CVLedgerEntryBuffer."Journal Batch Name";
      "Reason Code" := CVLedgerEntryBuffer."Reason Code";
      "Bal. Account Type" := CVLedgerEntryBuffer."Bal. Account Type";
      "Bal. Account No." := CVLedgerEntryBuffer."Bal. Account No.";
      "Transaction No." := CVLedgerEntryBuffer."Transaction No.";
      "Closed by Amount (LCY)" := CVLedgerEntryBuffer."Closed by Amount (LCY)";
      "Debit Amount" := CVLedgerEntryBuffer."Debit Amount";
      "Credit Amount" := CVLedgerEntryBuffer."Credit Amount";
      "Debit Amount (LCY)" := CVLedgerEntryBuffer."Debit Amount (LCY)";
      "Credit Amount (LCY)" := CVLedgerEntryBuffer."Credit Amount (LCY)";
      "Document Date" := CVLedgerEntryBuffer."Document Date";
      "External Document No." := CVLedgerEntryBuffer."External Document No.";
      "No. Series" := CVLedgerEntryBuffer."No. Series";
      "Closed by Currency Code" := CVLedgerEntryBuffer."Closed by Currency Code";
      "Closed by Currency Amount" := CVLedgerEntryBuffer."Closed by Currency Amount";
      "Adjusted Currency Factor" := CVLedgerEntryBuffer."Adjusted Currency Factor";
      "Original Currency Factor" := CVLedgerEntryBuffer."Original Currency Factor";
      "Pmt. Disc. Tolerance Date" := CVLedgerEntryBuffer."Pmt. Disc. Tolerance Date";
      "Max. Payment Tolerance" := CVLedgerEntryBuffer."Max. Payment Tolerance";
      "Accepted Payment Tolerance" := CVLedgerEntryBuffer."Accepted Payment Tolerance";
      "Accepted Pmt. Disc. Tolerance" := CVLedgerEntryBuffer."Accepted Pmt. Disc. Tolerance";
      "Pmt. Tolerance (LCY)" := CVLedgerEntryBuffer."Pmt. Tolerance (LCY)";
      "Amount to Apply" := CVLedgerEntryBuffer."Amount to Apply";
      Prepayment := CVLedgerEntryBuffer.Prepayment;

      OnAfterCopyVendLedgerEntryFromCVLedgEntryBuffer(Rec,CVLedgerEntryBuffer);
    END;

    [External]
    PROCEDURE RecalculateAmounts@36(FromCurrencyCode@1001 : Code[10];ToCurrencyCode@1002 : Code[10];PostingDate@1003 : Date);
    VAR
      CurrExchRate@1004 : Record 330;
    BEGIN
      IF ToCurrencyCode = FromCurrencyCode THEN
        EXIT;

      "Remaining Amount" :=
        CurrExchRate.ExchangeAmount("Remaining Amount",FromCurrencyCode,ToCurrencyCode,PostingDate);
      "Remaining Pmt. Disc. Possible" :=
        CurrExchRate.ExchangeAmount("Remaining Pmt. Disc. Possible",FromCurrencyCode,ToCurrencyCode,PostingDate);
      "Accepted Payment Tolerance" :=
        CurrExchRate.ExchangeAmount("Accepted Payment Tolerance",FromCurrencyCode,ToCurrencyCode,PostingDate);
      "Amount to Apply" :=
        CurrExchRate.ExchangeAmount("Amount to Apply",FromCurrencyCode,ToCurrencyCode,PostingDate);
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCopyVendLedgerEntryFromGenJnlLine@8(VAR VendorLedgerEntry@1000 : Record 25;GenJournalLine@1001 : Record 81);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCopyVendLedgerEntryFromCVLedgEntryBuffer@18(VAR VendorLedgerEntry@1000 : Record 25;CVLedgerEntryBuffer@1001 : Record 382);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterShowDoc@13(VAR VendorLedgerEntry@1000 : Record 25);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeDrillDownEntries@10(VAR VendorLedgerEntry@1000 : Record 25;VAR DetailedVendorLedgEntry@1001 : Record 380);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeDrillDownOnOverdueEntries@12(VAR VendorLedgerEntry@1000 : Record 25;VAR DetailedVendorLedgEntry@1001 : Record 380);
    BEGIN
    END;

    BEGIN
    END.
  }
}

OBJECT Table 27 Item
{
  OBJECT-PROPERTIES
  {
    Date=02-10-21;
    Time=12:00:00;
    Modified=Yes;
    Version List=NAVW114.30;
  }
  PROPERTIES
  {
    Permissions=TableData 5940=rm,
                TableData 5941=rm;
    DataCaptionFields=No.,Description;
    OnInsert=BEGIN
               IF "No." = '' THEN BEGIN
                 GetInvtSetup;
                 InvtSetup.TESTFIELD("Item Nos.");
                 NoSeriesMgt.InitSeries(InvtSetup."Item Nos.",xRec."No. Series",0D,"No.","No. Series");
                 "Costing Method" := InvtSetup."Default Costing Method";
               END;

               DimMgt.UpdateDefaultDim(
                 DATABASE::Item,"No.",
                 "Global Dimension 1 Code","Global Dimension 2 Code");

               UpdateReferencedIds;
               SetLastDateTimeModified;
             END;

    OnModify=BEGIN
               UpdateReferencedIds;
               SetLastDateTimeModified;
               PlanningAssignment.ItemChange(Rec,xRec);
             END;

    OnDelete=BEGIN
               ApprovalsMgmt.OnCancelItemApprovalRequest(Rec);

               CheckJournalsAndWorksheets(0);
               CheckDocuments(0);

               MoveEntries.MoveItemEntries(Rec);

               ServiceItem.RESET;
               ServiceItem.SETRANGE("Item No.","No.");
               IF ServiceItem.FIND('-') THEN
                 REPEAT
                   ServiceItem.VALIDATE("Item No.",'');
                   ServiceItem.MODIFY(TRUE);
                 UNTIL ServiceItem.NEXT = 0;

               DeleteRelatedData;
             END;

    OnRename=VAR
               SalesLine@1000 : Record 37;
               PurchaseLine@1001 : Record 39;
               TransferLine@1003 : Record 5741;
               ItemAttributeValueMapping@1002 : Record 7505;
             BEGIN
               SalesLine.RenameNo(SalesLine.Type::Item,xRec."No.","No.");
               PurchaseLine.RenameNo(PurchaseLine.Type::Item,xRec."No.","No.");
               TransferLine.RenameNo(xRec."No.","No.");
               DimMgt.RenameDefaultDim(DATABASE::Item,xRec."No.","No.");

               ApprovalsMgmt.OnRenameRecordInApprovalRequest(xRec.RECORDID,RECORDID);
               ItemAttributeValueMapping.RenameItemAttributeValueMapping(xRec."No.","No.");
               SetLastDateTimeModified;
             END;

    CaptionML=[ENU=Item;
               ENN=Item];
    LookupPageID=Page32;
    DrillDownPageID=Page31;
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;OnValidate=BEGIN
                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  GetInvtSetup;
                                                                  NoSeriesMgt.TestManual(InvtSetup."Item Nos.");
                                                                  "No. Series" := '';
                                                                  IF xRec."No." = '' THEN
                                                                    "Costing Method" := InvtSetup."Default Costing Method";
                                                                END;
                                                              END;

                                                   AltSearchField=Search Description;
                                                   CaptionML=[ENU=No.;
                                                              ENN=No.] }
    { 2   ;   ;No. 2               ;Code20        ;CaptionML=[ENU=No. 2;
                                                              ENN=No. 2] }
    { 3   ;   ;Description         ;Text100       ;OnValidate=BEGIN
                                                                IF ("Search Description" = UPPERCASE(xRec.Description)) OR ("Search Description" = '') THEN
                                                                  "Search Description" := COPYSTR(Description,1,MAXSTRLEN("Search Description"));

                                                                IF "Created From Nonstock Item" THEN BEGIN
                                                                  NonstockItem.SETCURRENTKEY("Item No.");
                                                                  NonstockItem.SETRANGE("Item No.","No.");
                                                                  IF NonstockItem.FINDFIRST THEN
                                                                    IF NonstockItem.Description = '' THEN BEGIN
                                                                      NonstockItem.Description := Description;
                                                                      NonstockItem.MODIFY;
                                                                    END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Description;
                                                              ENN=Description] }
    { 4   ;   ;Search Description  ;Code100       ;CaptionML=[ENU=Search Description;
                                                              ENN=Search Description] }
    { 5   ;   ;Description 2       ;Text50        ;CaptionML=[ENU=Description 2;
                                                              ENN=Description 2] }
    { 6   ;   ;Assembly BOM        ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("BOM Component" WHERE (Parent Item No.=FIELD(No.)));
                                                   CaptionML=[ENU=Assembly BOM;
                                                              ENN=Assembly BOM];
                                                   Editable=No }
    { 8   ;   ;Base Unit of Measure;Code10        ;TableRelation="Unit of Measure";
                                                   OnValidate=VAR
                                                                UnitOfMeasure@1000 : Record 204;
                                                              BEGIN
                                                                UpdateUnitOfMeasureId;

                                                                IF "Base Unit of Measure" <> xRec."Base Unit of Measure" THEN BEGIN
                                                                  TestNoOpenEntriesExist(FIELDCAPTION("Base Unit of Measure"));

                                                                  "Sales Unit of Measure" := "Base Unit of Measure";
                                                                  "Purch. Unit of Measure" := "Base Unit of Measure";
                                                                  IF "Base Unit of Measure" <> '' THEN BEGIN
                                                                    // If we can't find a Unit of Measure with a GET,
                                                                    // then try with International Standard Code, as some times it's used as Code
                                                                    IF NOT UnitOfMeasure.GET("Base Unit of Measure") THEN BEGIN
                                                                      UnitOfMeasure.SETRANGE("International Standard Code","Base Unit of Measure");
                                                                      IF NOT UnitOfMeasure.FINDFIRST THEN
                                                                        ERROR(UnitOfMeasureNotExistErr,"Base Unit of Measure");
                                                                      "Base Unit of Measure" := UnitOfMeasure.Code;
                                                                    END;

                                                                    IF NOT ItemUnitOfMeasure.GET("No.","Base Unit of Measure") THEN BEGIN
                                                                      ItemUnitOfMeasure.INIT;
                                                                      IF ISTEMPORARY THEN
                                                                        ItemUnitOfMeasure."Item No." := "No."
                                                                      ELSE
                                                                        ItemUnitOfMeasure.VALIDATE("Item No.","No.");
                                                                      ItemUnitOfMeasure.VALIDATE(Code,"Base Unit of Measure");
                                                                      ItemUnitOfMeasure."Qty. per Unit of Measure" := 1;
                                                                      ItemUnitOfMeasure.INSERT;
                                                                    END ELSE BEGIN
                                                                      IF ItemUnitOfMeasure."Qty. per Unit of Measure" <> 1 THEN
                                                                        ERROR(BaseUnitOfMeasureQtyMustBeOneErr,"Base Unit of Measure",ItemUnitOfMeasure."Qty. per Unit of Measure");
                                                                    END;
                                                                  END;
                                                                END;
                                                              END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Base Unit of Measure;
                                                              ENN=Base Unit of Measure] }
    { 9   ;   ;Price Unit Conversion;Integer      ;CaptionML=[ENU=Price Unit Conversion;
                                                              ENN=Price Unit Conversion] }
    { 10  ;   ;Type                ;Option        ;OnValidate=BEGIN
                                                                IF ExistsItemLedgerEntry THEN
                                                                  ERROR(CannotChangeFieldErr,FIELDCAPTION(Type),TABLECAPTION,"No.",ItemLedgEntryTableCaptionTxt);
                                                                CheckJournalsAndWorksheets(FIELDNO(Type));
                                                                CheckDocuments(FIELDNO(Type));
                                                                IF IsNonInventoriableType THEN BEGIN
                                                                  CALCFIELDS("Assembly BOM");
                                                                  TESTFIELD("Assembly BOM",FALSE);

                                                                  CALCFIELDS("Stockkeeping Unit Exists");
                                                                  TESTFIELD("Stockkeeping Unit Exists",FALSE);

                                                                  VALIDATE("Assembly Policy","Assembly Policy"::"Assemble-to-Stock");
                                                                  VALIDATE("Replenishment System","Replenishment System"::Purchase);
                                                                  VALIDATE(Reserve,Reserve::Never);
                                                                  VALIDATE("Inventory Posting Group",'');
                                                                  VALIDATE("Item Tracking Code",'');
                                                                  VALIDATE("Costing Method","Costing Method"::FIFO);
                                                                  VALIDATE("Production BOM No.",'');
                                                                  VALIDATE("Routing No.",'');
                                                                  VALIDATE("Reordering Policy","Reordering Policy"::" ");
                                                                  VALIDATE("Order Tracking Policy","Order Tracking Policy"::None);
                                                                  VALIDATE("Overhead Rate",0);
                                                                  VALIDATE("Indirect Cost %",0);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Type;
                                                              ENN=Type];
                                                   OptionCaptionML=[ENU=Inventory,Service,Non-Inventory;
                                                                    ENN=Inventory,Service,Non-Inventory];
                                                   OptionString=Inventory,Service,Non-Inventory }
    { 11  ;   ;Inventory Posting Group;Code20     ;TableRelation="Inventory Posting Group";
                                                   OnValidate=BEGIN
                                                                IF "Inventory Posting Group" <> '' THEN
                                                                  TESTFIELD(Type,Type::Inventory);
                                                              END;

                                                   CaptionML=[ENU=Inventory Posting Group;
                                                              ENN=Inventory Posting Group] }
    { 12  ;   ;Shelf No.           ;Code10        ;CaptionML=[ENU=Shelf No.;
                                                              ENN=Shelf No.] }
    { 14  ;   ;Item Disc. Group    ;Code20        ;TableRelation="Item Discount Group";
                                                   CaptionML=[ENU=Item Disc. Group;
                                                              ENN=Item Disc. Group] }
    { 15  ;   ;Allow Invoice Disc. ;Boolean       ;InitValue=Yes;
                                                   CaptionML=[ENU=Allow Invoice Disc.;
                                                              ENN=Allow Invoice Disc.] }
    { 16  ;   ;Statistics Group    ;Integer       ;CaptionML=[ENU=Statistics Group;
                                                              ENN=Statistics Group] }
    { 17  ;   ;Commission Group    ;Integer       ;CaptionML=[ENU=Commission Group;
                                                              ENN=Commission Group] }
    { 18  ;   ;Unit Price          ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Price/Profit Calculation");
                                                              END;

                                                   CaptionML=[ENU=Unit Price;
                                                              ENN=Unit Price];
                                                   MinValue=0;
                                                   AutoFormatType=2 }
    { 19  ;   ;Price/Profit Calculation;Option    ;OnValidate=BEGIN
                                                                CASE "Price/Profit Calculation" OF
                                                                  "Price/Profit Calculation"::"Profit=Price-Cost":
                                                                    IF "Unit Price" <> 0 THEN
                                                                      IF "Unit Cost" = 0 THEN
                                                                        "Profit %" := 0
                                                                      ELSE
                                                                        "Profit %" :=
                                                                          ROUND(
                                                                            100 * (1 - "Unit Cost" /
                                                                                   ("Unit Price" / (1 + CalcVAT))),0.00001)
                                                                    ELSE
                                                                      "Profit %" := 0;
                                                                  "Price/Profit Calculation"::"Price=Cost+Profit":
                                                                    IF "Profit %" < 100 THEN BEGIN
                                                                      GetGLSetup;
                                                                      "Unit Price" :=
                                                                        ROUND(
                                                                          ("Unit Cost" / (1 - "Profit %" / 100)) *
                                                                          (1 + CalcVAT),
                                                                          GLSetup."Unit-Amount Rounding Precision");
                                                                    END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Price/Profit Calculation;
                                                              ENN=Price/Profit Calculation];
                                                   OptionCaptionML=[ENU="Profit=Price-Cost,Price=Cost+Profit,No Relationship";
                                                                    ENN="Profit=Price-Cost,Price=Cost+Profit,No Relationship"];
                                                   OptionString=Profit=Price-Cost,Price=Cost+Profit,No Relationship }
    { 20  ;   ;Profit %            ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Price/Profit Calculation");
                                                              END;

                                                   CaptionML=[ENU=Profit %;
                                                              ENN=Profit %];
                                                   DecimalPlaces=0:5 }
    { 21  ;   ;Costing Method      ;Option        ;OnValidate=BEGIN
                                                                IF "Costing Method" = xRec."Costing Method" THEN
                                                                  EXIT;

                                                                IF "Costing Method" <> "Costing Method"::FIFO THEN
                                                                  TESTFIELD(Type,Type::Inventory);

                                                                IF "Costing Method" = "Costing Method"::Specific THEN BEGIN
                                                                  TESTFIELD("Item Tracking Code");

                                                                  ItemTrackingCode.GET("Item Tracking Code");
                                                                  IF NOT ItemTrackingCode."SN Specific Tracking" THEN
                                                                    ERROR(
                                                                      Text018,
                                                                      ItemTrackingCode.FIELDCAPTION("SN Specific Tracking"),
                                                                      FORMAT(TRUE),ItemTrackingCode.TABLECAPTION,ItemTrackingCode.Code,
                                                                      FIELDCAPTION("Costing Method"),"Costing Method");
                                                                END;

                                                                TestNoEntriesExist(FIELDCAPTION("Costing Method"));

                                                                ItemCostMgt.UpdateUnitCost(Rec,'','',0,0,FALSE,FALSE,TRUE,FIELDNO("Costing Method"));
                                                              END;

                                                   CaptionML=[ENU=Costing Method;
                                                              ENN=Costing Method];
                                                   OptionCaptionML=[ENU=FIFO,LIFO,Specific,Average,Standard;
                                                                    ENN=FIFO,LIFO,Specific,Average,Standard];
                                                   OptionString=FIFO,LIFO,Specific,Average,Standard }
    { 22  ;   ;Unit Cost           ;Decimal       ;OnValidate=BEGIN
                                                                IF "Costing Method" = "Costing Method"::Standard THEN
                                                                  VALIDATE("Standard Cost","Unit Cost")
                                                                ELSE
                                                                  TestNoEntriesExist(FIELDCAPTION("Unit Cost"));
                                                                VALIDATE("Price/Profit Calculation");
                                                              END;

                                                   CaptionML=[ENU=Unit Cost;
                                                              ENN=Unit Cost];
                                                   MinValue=0;
                                                   AutoFormatType=2 }
    { 24  ;   ;Standard Cost       ;Decimal       ;OnValidate=VAR
                                                                IsHandled@1000 : Boolean;
                                                              BEGIN
                                                                IsHandled := FALSE;
                                                                OnBeforeValidateStandardCost(Rec,xRec,CurrFieldNo,IsHandled);
                                                                IF IsHandled THEN
                                                                  EXIT;

                                                                IF ("Costing Method" = "Costing Method"::Standard) AND (CurrFieldNo <> 0) THEN
                                                                  IF NOT GUIALLOWED THEN BEGIN
                                                                    "Standard Cost" := xRec."Standard Cost";
                                                                    EXIT;
                                                                  END ELSE
                                                                    IF NOT
                                                                       CONFIRM(
                                                                         Text020 +
                                                                         Text021 +
                                                                         Text022,FALSE,
                                                                         FIELDCAPTION("Standard Cost"))
                                                                    THEN BEGIN
                                                                      "Standard Cost" := xRec."Standard Cost";
                                                                      EXIT;
                                                                    END;

                                                                ItemCostMgt.UpdateUnitCost(Rec,'','',0,0,FALSE,FALSE,TRUE,FIELDNO("Standard Cost"));
                                                              END;

                                                   CaptionML=[ENU=Standard Cost;
                                                              ENN=Standard Cost];
                                                   MinValue=0;
                                                   AutoFormatType=2 }
    { 25  ;   ;Last Direct Cost    ;Decimal       ;CaptionML=[ENU=Last Direct Cost;
                                                              ENN=Last Direct Cost];
                                                   MinValue=0;
                                                   AutoFormatType=2 }
    { 28  ;   ;Indirect Cost %     ;Decimal       ;OnValidate=BEGIN
                                                                IF "Indirect Cost %" > 0 THEN
                                                                  TESTFIELD(Type,Type::Inventory);
                                                                ItemCostMgt.UpdateUnitCost(Rec,'','',0,0,FALSE,FALSE,TRUE,FIELDNO("Indirect Cost %"));
                                                              END;

                                                   CaptionML=[ENU=Indirect Cost %;
                                                              ENN=Indirect Cost %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 29  ;   ;Cost is Adjusted    ;Boolean       ;InitValue=Yes;
                                                   CaptionML=[ENU=Cost is Adjusted;
                                                              ENN=Cost is Adjusted];
                                                   Editable=No }
    { 30  ;   ;Allow Online Adjustment;Boolean    ;InitValue=Yes;
                                                   CaptionML=[ENU=Allow Online Adjustment;
                                                              ENN=Allow Online Adjustment];
                                                   Editable=No }
    { 31  ;   ;Vendor No.          ;Code20        ;TableRelation=Vendor;
                                                   OnValidate=BEGIN
                                                                IF (xRec."Vendor No." <> "Vendor No.") AND
                                                                   ("Vendor No." <> '')
                                                                THEN
                                                                  IF Vend.GET("Vendor No.") THEN
                                                                    "Lead Time Calculation" := Vend."Lead Time Calculation";
                                                              END;

                                                   ValidateTableRelation=Yes;
                                                   TestTableRelation=Yes;
                                                   CaptionML=[ENU=Vendor No.;
                                                              ENN=Vendor No.] }
    { 32  ;   ;Vendor Item No.     ;Text20        ;CaptionML=[ENU=Vendor Item No.;
                                                              ENN=Vendor Item No.] }
    { 33  ;   ;Lead Time Calculation;DateFormula  ;OnValidate=BEGIN
                                                                LeadTimeMgt.CheckLeadTimeIsNotNegative("Lead Time Calculation");
                                                              END;

                                                   AccessByPermission=TableData 120=R;
                                                   CaptionML=[ENU=Lead Time Calculation;
                                                              ENN=Lead Time Calculation] }
    { 34  ;   ;Reorder Point       ;Decimal       ;AccessByPermission=TableData 244=R;
                                                   CaptionML=[ENU=Reorder Point;
                                                              ENN=Reorder Point];
                                                   DecimalPlaces=0:5 }
    { 35  ;   ;Maximum Inventory   ;Decimal       ;AccessByPermission=TableData 244=R;
                                                   CaptionML=[ENU=Maximum Inventory;
                                                              ENN=Maximum Inventory];
                                                   DecimalPlaces=0:5 }
    { 36  ;   ;Reorder Quantity    ;Decimal       ;AccessByPermission=TableData 244=R;
                                                   CaptionML=[ENU=Reorder Quantity;
                                                              ENN=Reorder Quantity];
                                                   DecimalPlaces=0:5 }
    { 37  ;   ;Alternative Item No.;Code20        ;TableRelation=Item;
                                                   CaptionML=[ENU=Alternative Item No.;
                                                              ENN=Alternative Item No.] }
    { 38  ;   ;Unit List Price     ;Decimal       ;CaptionML=[ENU=Unit List Price;
                                                              ENN=Unit List Price];
                                                   MinValue=0;
                                                   AutoFormatType=2 }
    { 39  ;   ;Duty Due %          ;Decimal       ;CaptionML=[ENU=Duty Due %;
                                                              ENN=Duty Due %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 40  ;   ;Duty Code           ;Code10        ;CaptionML=[ENU=Duty Code;
                                                              ENN=Duty Code] }
    { 41  ;   ;Gross Weight        ;Decimal       ;CaptionML=[ENU=Gross Weight;
                                                              ENN=Gross Weight];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 42  ;   ;Net Weight          ;Decimal       ;CaptionML=[ENU=Net Weight;
                                                              ENN=Net Weight];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 43  ;   ;Units per Parcel    ;Decimal       ;CaptionML=[ENU=Units per Parcel;
                                                              ENN=Units per Parcel];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 44  ;   ;Unit Volume         ;Decimal       ;CaptionML=[ENU=Unit Volume;
                                                              ENN=Unit Volume];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 45  ;   ;Durability          ;Code10        ;CaptionML=[ENU=Durability;
                                                              ENN=Durability] }
    { 46  ;   ;Freight Type        ;Code10        ;CaptionML=[ENU=Freight Type;
                                                              ENN=Freight Type] }
    { 47  ;   ;Tariff No.          ;Code20        ;TableRelation="Tariff Number";
                                                   OnValidate=VAR
                                                                TariffNumber@1000 : Record 260;
                                                              BEGIN
                                                                IF "Tariff No." = '' THEN
                                                                  EXIT;

                                                                IF (NOT TariffNumber.WRITEPERMISSION) OR
                                                                   (NOT TariffNumber.READPERMISSION)
                                                                THEN
                                                                  EXIT;

                                                                IF TariffNumber.GET("Tariff No.") THEN
                                                                  EXIT;

                                                                TariffNumber.INIT;
                                                                TariffNumber."No." := "Tariff No.";
                                                                TariffNumber.INSERT;
                                                              END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Tariff No.;
                                                              ENN=Commodity Code] }
    { 48  ;   ;Duty Unit Conversion;Decimal       ;CaptionML=[ENU=Duty Unit Conversion;
                                                              ENN=Duty Unit Conversion];
                                                   DecimalPlaces=0:5 }
    { 49  ;   ;Country/Region Purchased Code;Code10;
                                                   TableRelation=Country/Region;
                                                   CaptionML=[ENU=Country/Region Purchased Code;
                                                              ENN=Country/Region Purchased Code] }
    { 50  ;   ;Budget Quantity     ;Decimal       ;CaptionML=[ENU=Budget Quantity;
                                                              ENN=Budget Quantity];
                                                   DecimalPlaces=0:5 }
    { 51  ;   ;Budgeted Amount     ;Decimal       ;CaptionML=[ENU=Budgeted Amount;
                                                              ENN=Budgeted Amount];
                                                   AutoFormatType=1 }
    { 52  ;   ;Budget Profit       ;Decimal       ;CaptionML=[ENU=Budget Profit;
                                                              ENN=Budget Profit];
                                                   AutoFormatType=1 }
    { 53  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Comment Line" WHERE (Table Name=CONST(Item),
                                                                                           No.=FIELD(No.)));
                                                   CaptionML=[ENU=Comment;
                                                              ENN=Comment];
                                                   Editable=No }
    { 54  ;   ;Blocked             ;Boolean       ;OnValidate=BEGIN
                                                                IF NOT Blocked THEN
                                                                  "Block Reason" := '';
                                                              END;

                                                   CaptionML=[ENU=Blocked;
                                                              ENN=Blocked] }
    { 55  ;   ;Cost is Posted to G/L;Boolean      ;FieldClass=FlowField;
                                                   CalcFormula=-Exist("Post Value Entry to G/L" WHERE (Item No.=FIELD(No.)));
                                                   CaptionML=[ENU=Cost is Posted to G/L;
                                                              ENN=Cost is Posted to G/L];
                                                   Editable=No }
    { 56  ;   ;Block Reason        ;Text250       ;OnValidate=BEGIN
                                                                TESTFIELD(Blocked,TRUE);
                                                              END;

                                                   CaptionML=[ENU=Block Reason;
                                                              ENN=Block Reason] }
    { 61  ;   ;Last DateTime Modified;DateTime    ;CaptionML=[ENU=Last DateTime Modified;
                                                              ENN=Last DateTime Modified];
                                                   Editable=No }
    { 62  ;   ;Last Date Modified  ;Date          ;CaptionML=[ENU=Last Date Modified;
                                                              ENN=Last Date Modified];
                                                   Editable=No }
    { 63  ;   ;Last Time Modified  ;Time          ;CaptionML=[ENU=Last Time Modified;
                                                              ENN=Last Time Modified];
                                                   Editable=No }
    { 64  ;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Date Filter;
                                                              ENN=Date Filter] }
    { 65  ;   ;Global Dimension 1 Filter;Code20   ;FieldClass=FlowFilter;
                                                   TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   CaptionML=[ENU=Global Dimension 1 Filter;
                                                              ENN=Global Dimension 1 Filter];
                                                   CaptionClass='1,3,1' }
    { 66  ;   ;Global Dimension 2 Filter;Code20   ;FieldClass=FlowFilter;
                                                   TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   CaptionML=[ENU=Global Dimension 2 Filter;
                                                              ENN=Global Dimension 2 Filter];
                                                   CaptionClass='1,3,2' }
    { 67  ;   ;Location Filter     ;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation=Location;
                                                   CaptionML=[ENU=Location Filter;
                                                              ENN=Location Filter] }
    { 68  ;   ;Inventory           ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Item Ledger Entry".Quantity WHERE (Item No.=FIELD(No.),
                                                                                                       Global Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                       Global Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                       Location Code=FIELD(Location Filter),
                                                                                                       Drop Shipment=FIELD(Drop Shipment Filter),
                                                                                                       Variant Code=FIELD(Variant Filter),
                                                                                                       Lot No.=FIELD(Lot No. Filter),
                                                                                                       Serial No.=FIELD(Serial No. Filter)));
                                                   CaptionML=[ENU=Inventory;
                                                              ENN=Inventory];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 69  ;   ;Net Invoiced Qty.   ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Item Ledger Entry"."Invoiced Quantity" WHERE (Item No.=FIELD(No.),
                                                                                                                  Global Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                  Global Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                  Location Code=FIELD(Location Filter),
                                                                                                                  Drop Shipment=FIELD(Drop Shipment Filter),
                                                                                                                  Variant Code=FIELD(Variant Filter),
                                                                                                                  Lot No.=FIELD(Lot No. Filter),
                                                                                                                  Serial No.=FIELD(Serial No. Filter)));
                                                   CaptionML=[ENU=Net Invoiced Qty.;
                                                              ENN=Net Invoiced Qty.];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 70  ;   ;Net Change          ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Item Ledger Entry".Quantity WHERE (Item No.=FIELD(No.),
                                                                                                       Global Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                       Global Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                       Location Code=FIELD(Location Filter),
                                                                                                       Drop Shipment=FIELD(Drop Shipment Filter),
                                                                                                       Posting Date=FIELD(Date Filter),
                                                                                                       Variant Code=FIELD(Variant Filter),
                                                                                                       Lot No.=FIELD(Lot No. Filter),
                                                                                                       Serial No.=FIELD(Serial No. Filter)));
                                                   CaptionML=[ENU=Net Change;
                                                              ENN=Net Change];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 71  ;   ;Purchases (Qty.)    ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Item Ledger Entry"."Invoiced Quantity" WHERE (Entry Type=CONST(Purchase),
                                                                                                                  Item No.=FIELD(No.),
                                                                                                                  Global Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                  Global Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                  Location Code=FIELD(Location Filter),
                                                                                                                  Drop Shipment=FIELD(Drop Shipment Filter),
                                                                                                                  Variant Code=FIELD(Variant Filter),
                                                                                                                  Posting Date=FIELD(Date Filter),
                                                                                                                  Lot No.=FIELD(Lot No. Filter),
                                                                                                                  Serial No.=FIELD(Serial No. Filter)));
                                                   CaptionML=[ENU=Purchases (Qty.);
                                                              ENN=Purchases (Qty.)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 72  ;   ;Sales (Qty.)        ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Value Entry"."Invoiced Quantity" WHERE (Item Ledger Entry Type=CONST(Sale),
                                                                                                             Item No.=FIELD(No.),
                                                                                                             Global Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                             Global Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                             Location Code=FIELD(Location Filter),
                                                                                                             Drop Shipment=FIELD(Drop Shipment Filter),
                                                                                                             Variant Code=FIELD(Variant Filter),
                                                                                                             Posting Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Sales (Qty.);
                                                              ENN=Sales (Qty.)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 73  ;   ;Positive Adjmt. (Qty.);Decimal     ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Item Ledger Entry"."Invoiced Quantity" WHERE (Entry Type=CONST(Positive Adjmt.),
                                                                                                                  Item No.=FIELD(No.),
                                                                                                                  Global Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                  Global Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                  Location Code=FIELD(Location Filter),
                                                                                                                  Drop Shipment=FIELD(Drop Shipment Filter),
                                                                                                                  Variant Code=FIELD(Variant Filter),
                                                                                                                  Posting Date=FIELD(Date Filter),
                                                                                                                  Lot No.=FIELD(Lot No. Filter),
                                                                                                                  Serial No.=FIELD(Serial No. Filter)));
                                                   CaptionML=[ENU=Positive Adjmt. (Qty.);
                                                              ENN=Positive Adjmt. (Qty.)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 74  ;   ;Negative Adjmt. (Qty.);Decimal     ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Item Ledger Entry"."Invoiced Quantity" WHERE (Entry Type=CONST(Negative Adjmt.),
                                                                                                                   Item No.=FIELD(No.),
                                                                                                                   Global Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                   Global Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                   Location Code=FIELD(Location Filter),
                                                                                                                   Drop Shipment=FIELD(Drop Shipment Filter),
                                                                                                                   Variant Code=FIELD(Variant Filter),
                                                                                                                   Posting Date=FIELD(Date Filter),
                                                                                                                   Lot No.=FIELD(Lot No. Filter),
                                                                                                                   Serial No.=FIELD(Serial No. Filter)));
                                                   CaptionML=[ENU=Negative Adjmt. (Qty.);
                                                              ENN=Negative Adjmt. (Qty.)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 77  ;   ;Purchases (LCY)     ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Value Entry"."Purchase Amount (Actual)" WHERE (Item Ledger Entry Type=CONST(Purchase),
                                                                                                                   Item No.=FIELD(No.),
                                                                                                                   Global Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                   Global Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                   Location Code=FIELD(Location Filter),
                                                                                                                   Drop Shipment=FIELD(Drop Shipment Filter),
                                                                                                                   Variant Code=FIELD(Variant Filter),
                                                                                                                   Posting Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Purchases (LCY);
                                                              ENN=Purchases (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 78  ;   ;Sales (LCY)         ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Value Entry"."Sales Amount (Actual)" WHERE (Item Ledger Entry Type=CONST(Sale),
                                                                                                                Item No.=FIELD(No.),
                                                                                                                Global Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                Global Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                Location Code=FIELD(Location Filter),
                                                                                                                Drop Shipment=FIELD(Drop Shipment Filter),
                                                                                                                Variant Code=FIELD(Variant Filter),
                                                                                                                Posting Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Sales (LCY);
                                                              ENN=Sales (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 79  ;   ;Positive Adjmt. (LCY);Decimal      ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Value Entry"."Cost Amount (Actual)" WHERE (Item Ledger Entry Type=CONST(Positive Adjmt.),
                                                                                                               Item No.=FIELD(No.),
                                                                                                               Global Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                               Global Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                               Location Code=FIELD(Location Filter),
                                                                                                               Drop Shipment=FIELD(Drop Shipment Filter),
                                                                                                               Variant Code=FIELD(Variant Filter),
                                                                                                               Posting Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Positive Adjmt. (LCY);
                                                              ENN=Positive Adjmt. (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 80  ;   ;Negative Adjmt. (LCY);Decimal      ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Value Entry"."Cost Amount (Actual)" WHERE (Item Ledger Entry Type=CONST(Negative Adjmt.),
                                                                                                               Item No.=FIELD(No.),
                                                                                                               Global Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                               Global Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                               Location Code=FIELD(Location Filter),
                                                                                                               Drop Shipment=FIELD(Drop Shipment Filter),
                                                                                                               Variant Code=FIELD(Variant Filter),
                                                                                                               Posting Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Negative Adjmt. (LCY);
                                                              ENN=Negative Adjmt. (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 83  ;   ;COGS (LCY)          ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Value Entry"."Cost Amount (Actual)" WHERE (Item Ledger Entry Type=CONST(Sale),
                                                                                                                Item No.=FIELD(No.),
                                                                                                                Global Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                Global Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                Location Code=FIELD(Location Filter),
                                                                                                                Drop Shipment=FIELD(Drop Shipment Filter),
                                                                                                                Variant Code=FIELD(Variant Filter),
                                                                                                                Posting Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=COGS (LCY);
                                                              ENN=COGS (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 84  ;   ;Qty. on Purch. Order;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Purchase Line"."Outstanding Qty. (Base)" WHERE (Document Type=CONST(Order),
                                                                                                                    Type=CONST(Item),
                                                                                                                    No.=FIELD(No.),
                                                                                                                    Shortcut Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                    Shortcut Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                    Location Code=FIELD(Location Filter),
                                                                                                                    Drop Shipment=FIELD(Drop Shipment Filter),
                                                                                                                    Variant Code=FIELD(Variant Filter),
                                                                                                                    Expected Receipt Date=FIELD(Date Filter)));
                                                   AccessByPermission=TableData 120=R;
                                                   CaptionML=[ENU=Qty. on Purch. Order;
                                                              ENN=Qty. on Purch. Order];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 85  ;   ;Qty. on Sales Order ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Line"."Outstanding Qty. (Base)" WHERE (Document Type=CONST(Order),
                                                                                                                 Type=CONST(Item),
                                                                                                                 No.=FIELD(No.),
                                                                                                                 Shortcut Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                 Shortcut Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                 Location Code=FIELD(Location Filter),
                                                                                                                 Drop Shipment=FIELD(Drop Shipment Filter),
                                                                                                                 Variant Code=FIELD(Variant Filter),
                                                                                                                 Shipment Date=FIELD(Date Filter)));
                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=[ENU=Qty. on Sales Order;
                                                              ENN=Qty. on Sales Order];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 87  ;   ;Price Includes VAT  ;Boolean       ;OnValidate=VAR
                                                                VATPostingSetup@1000 : Record 325;
                                                                SalesSetup@1001 : Record 311;
                                                              BEGIN
                                                                IF "Price Includes VAT" THEN BEGIN
                                                                  SalesSetup.GET;
                                                                  SalesSetup.TESTFIELD("VAT Bus. Posting Gr. (Price)");
                                                                  "VAT Bus. Posting Gr. (Price)" := SalesSetup."VAT Bus. Posting Gr. (Price)";
                                                                  VATPostingSetup.GET("VAT Bus. Posting Gr. (Price)","VAT Prod. Posting Group");
                                                                END;
                                                                VALIDATE("Price/Profit Calculation");
                                                              END;

                                                   CaptionML=[ENU=Price Includes VAT;
                                                              ENN=Price Includes VAT] }
    { 89  ;   ;Drop Shipment Filter;Boolean       ;FieldClass=FlowFilter;
                                                   AccessByPermission=TableData 223=R;
                                                   CaptionML=[ENU=Drop Shipment Filter;
                                                              ENN=Drop Shipment Filter] }
    { 90  ;   ;VAT Bus. Posting Gr. (Price);Code20;TableRelation="VAT Business Posting Group";
                                                   OnValidate=BEGIN
                                                                VALIDATE("Price/Profit Calculation");
                                                              END;

                                                   CaptionML=[ENU=VAT Bus. Posting Gr. (Price);
                                                              ENN=VAT Bus. Posting Gr. (Price)] }
    { 91  ;   ;Gen. Prod. Posting Group;Code20    ;TableRelation="Gen. Product Posting Group";
                                                   OnValidate=BEGIN
                                                                IF xRec."Gen. Prod. Posting Group" <> "Gen. Prod. Posting Group" THEN BEGIN
                                                                  IF CurrFieldNo <> 0 THEN
                                                                    IF ProdOrderExist THEN
                                                                      IF NOT CONFIRM(
                                                                           Text024 +
                                                                           Text022,FALSE,
                                                                           FIELDCAPTION("Gen. Prod. Posting Group"))
                                                                      THEN BEGIN
                                                                        "Gen. Prod. Posting Group" := xRec."Gen. Prod. Posting Group";
                                                                        EXIT;
                                                                      END;

                                                                  IF GenProdPostingGrp.ValidateVatProdPostingGroup(GenProdPostingGrp,"Gen. Prod. Posting Group") THEN
                                                                    VALIDATE("VAT Prod. Posting Group",GenProdPostingGrp."Def. VAT Prod. Posting Group");
                                                                END;

                                                                VALIDATE("Price/Profit Calculation");
                                                              END;

                                                   CaptionML=[ENU=Gen. Prod. Posting Group;
                                                              ENN=Gen. Prod. Posting Group] }
    { 92  ;   ;Picture             ;MediaSet      ;CaptionML=[ENU=Picture;
                                                              ENN=Picture] }
    { 93  ;   ;Transferred (Qty.)  ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Item Ledger Entry"."Invoiced Quantity" WHERE (Entry Type=CONST(Transfer),
                                                                                                                  Item No.=FIELD(No.),
                                                                                                                  Global Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                  Global Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                  Location Code=FIELD(Location Filter),
                                                                                                                  Drop Shipment=FIELD(Drop Shipment Filter),
                                                                                                                  Variant Code=FIELD(Variant Filter),
                                                                                                                  Posting Date=FIELD(Date Filter),
                                                                                                                  Lot No.=FIELD(Lot No. Filter),
                                                                                                                  Serial No.=FIELD(Serial No. Filter)));
                                                   CaptionML=[ENU=Transferred (Qty.);
                                                              ENN=Transferred (Qty.)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 94  ;   ;Transferred (LCY)   ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Value Entry"."Sales Amount (Actual)" WHERE (Item Ledger Entry Type=CONST(Transfer),
                                                                                                                Item No.=FIELD(No.),
                                                                                                                Global Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                Global Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                Location Code=FIELD(Location Filter),
                                                                                                                Drop Shipment=FIELD(Drop Shipment Filter),
                                                                                                                Variant Code=FIELD(Variant Filter),
                                                                                                                Posting Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Transferred (LCY);
                                                              ENN=Transferred (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 95  ;   ;Country/Region of Origin Code;Code10;
                                                   TableRelation=Country/Region;
                                                   CaptionML=[ENU=Country/Region of Origin Code;
                                                              ENN=Country/Region of Origin Code] }
    { 96  ;   ;Automatic Ext. Texts;Boolean       ;CaptionML=[ENU=Automatic Ext. Texts;
                                                              ENN=Automatic Ext. Texts] }
    { 97  ;   ;No. Series          ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=[ENU=No. Series;
                                                              ENN=No. Series];
                                                   Editable=No }
    { 98  ;   ;Tax Group Code      ;Code20        ;TableRelation="Tax Group";
                                                   OnValidate=BEGIN
                                                                UpdateTaxGroupId;
                                                              END;

                                                   CaptionML=[ENU=Tax Group Code;
                                                              ENN=VAT Group Code] }
    { 99  ;   ;VAT Prod. Posting Group;Code20     ;TableRelation="VAT Product Posting Group";
                                                   OnValidate=BEGIN
                                                                VALIDATE("Price/Profit Calculation");
                                                              END;

                                                   CaptionML=[ENU=VAT Prod. Posting Group;
                                                              ENN=VAT Prod. Posting Group] }
    { 100 ;   ;Reserve             ;Option        ;InitValue=Optional;
                                                   OnValidate=BEGIN
                                                                IF Reserve <> Reserve::Never THEN
                                                                  TESTFIELD(Type,Type::Inventory);
                                                              END;

                                                   AccessByPermission=TableData 120=R;
                                                   CaptionML=[ENU=Reserve;
                                                              ENN=Reserve];
                                                   OptionCaptionML=[ENU=Never,Optional,Always;
                                                                    ENN=Never,Optional,Always];
                                                   OptionString=Never,Optional,Always }
    { 101 ;   ;Reserved Qty. on Inventory;Decimal ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Reservation Entry"."Quantity (Base)" WHERE (Item No.=FIELD(No.),
                                                                                                                Source Type=CONST(32),
                                                                                                                Source Subtype=CONST(0),
                                                                                                                Reservation Status=CONST(Reservation),
                                                                                                                Serial No.=FIELD(Serial No. Filter),
                                                                                                                Lot No.=FIELD(Lot No. Filter),
                                                                                                                Location Code=FIELD(Location Filter),
                                                                                                                Variant Code=FIELD(Variant Filter)));
                                                   AccessByPermission=TableData 120=R;
                                                   CaptionML=[ENU=Reserved Qty. on Inventory;
                                                              ENN=Reserved Qty. on Inventory];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 102 ;   ;Reserved Qty. on Purch. Orders;Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Reservation Entry"."Quantity (Base)" WHERE (Item No.=FIELD(No.),
                                                                                                                Source Type=CONST(39),
                                                                                                                Source Subtype=CONST(1),
                                                                                                                Reservation Status=CONST(Reservation),
                                                                                                                Location Code=FIELD(Location Filter),
                                                                                                                Variant Code=FIELD(Variant Filter),
                                                                                                                Expected Receipt Date=FIELD(Date Filter)));
                                                   AccessByPermission=TableData 120=R;
                                                   CaptionML=[ENU=Reserved Qty. on Purch. Orders;
                                                              ENN=Reserved Qty. on Purch. Orders];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 103 ;   ;Reserved Qty. on Sales Orders;Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=-Sum("Reservation Entry"."Quantity (Base)" WHERE (Item No.=FIELD(No.),
                                                                                                                 Source Type=CONST(37),
                                                                                                                 Source Subtype=CONST(1),
                                                                                                                 Reservation Status=CONST(Reservation),
                                                                                                                 Location Code=FIELD(Location Filter),
                                                                                                                 Variant Code=FIELD(Variant Filter),
                                                                                                                 Shipment Date=FIELD(Date Filter)));
                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=[ENU=Reserved Qty. on Sales Orders;
                                                              ENN=Reserved Qty. on Sales Orders];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 105 ;   ;Global Dimension 1 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Global Dimension 1 Code");
                                                              END;

                                                   CaptionML=[ENU=Global Dimension 1 Code;
                                                              ENN=Global Dimension 1 Code];
                                                   CaptionClass='1,1,1' }
    { 106 ;   ;Global Dimension 2 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Global Dimension 2 Code");
                                                              END;

                                                   CaptionML=[ENU=Global Dimension 2 Code;
                                                              ENN=Global Dimension 2 Code];
                                                   CaptionClass='1,1,2' }
    { 107 ;   ;Res. Qty. on Outbound Transfer;Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=-Sum("Reservation Entry"."Quantity (Base)" WHERE (Item No.=FIELD(No.),
                                                                                                                 Source Type=CONST(5741),
                                                                                                                 Source Subtype=CONST(0),
                                                                                                                 Reservation Status=CONST(Reservation),
                                                                                                                 Location Code=FIELD(Location Filter),
                                                                                                                 Variant Code=FIELD(Variant Filter),
                                                                                                                 Shipment Date=FIELD(Date Filter)));
                                                   AccessByPermission=TableData 5740=R;
                                                   CaptionML=[ENU=Res. Qty. on Outbound Transfer;
                                                              ENN=Res. Qty. on Outbound Transfer];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 108 ;   ;Res. Qty. on Inbound Transfer;Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Reservation Entry"."Quantity (Base)" WHERE (Item No.=FIELD(No.),
                                                                                                                Source Type=CONST(5741),
                                                                                                                Source Subtype=CONST(1),
                                                                                                                Reservation Status=CONST(Reservation),
                                                                                                                Location Code=FIELD(Location Filter),
                                                                                                                Variant Code=FIELD(Variant Filter),
                                                                                                                Expected Receipt Date=FIELD(Date Filter)));
                                                   AccessByPermission=TableData 5740=R;
                                                   CaptionML=[ENU=Res. Qty. on Inbound Transfer;
                                                              ENN=Res. Qty. on Inbound Transfer];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 109 ;   ;Res. Qty. on Sales Returns;Decimal ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Reservation Entry"."Quantity (Base)" WHERE (Item No.=FIELD(No.),
                                                                                                                Source Type=CONST(37),
                                                                                                                Source Subtype=CONST(5),
                                                                                                                Reservation Status=CONST(Reservation),
                                                                                                                Location Code=FIELD(Location Filter),
                                                                                                                Variant Code=FIELD(Variant Filter),
                                                                                                                Shipment Date=FIELD(Date Filter)));
                                                   AccessByPermission=TableData 6660=R;
                                                   CaptionML=[ENU=Res. Qty. on Sales Returns;
                                                              ENN=Res. Qty. on Sales Returns];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 110 ;   ;Res. Qty. on Purch. Returns;Decimal;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Reservation Entry"."Quantity (Base)" WHERE (Item No.=FIELD(No.),
                                                                                                                 Source Type=CONST(39),
                                                                                                                 Source Subtype=CONST(5),
                                                                                                                 Reservation Status=CONST(Reservation),
                                                                                                                 Location Code=FIELD(Location Filter),
                                                                                                                 Variant Code=FIELD(Variant Filter),
                                                                                                                 Expected Receipt Date=FIELD(Date Filter)));
                                                   AccessByPermission=TableData 6650=R;
                                                   CaptionML=[ENU=Res. Qty. on Purch. Returns;
                                                              ENN=Res. Qty. on Purch. Returns];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 120 ;   ;Stockout Warning    ;Option        ;CaptionML=[ENU=Stockout Warning;
                                                              ENN=Stockout Warning];
                                                   OptionCaptionML=[ENU=Default,No,Yes;
                                                                    ENN=Default,No,Yes];
                                                   OptionString=Default,No,Yes }
    { 121 ;   ;Prevent Negative Inventory;Option  ;CaptionML=[ENU=Prevent Negative Inventory;
                                                              ENN=Prevent Negative Inventory];
                                                   OptionCaptionML=[ENU=Default,No,Yes;
                                                                    ENN=Default,No,Yes];
                                                   OptionString=Default,No,Yes }
    { 200 ;   ;Cost of Open Production Orders;Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Prod. Order Line"."Cost Amount" WHERE (Status=FILTER(Planned|Firm Planned|Released),
                                                                                                           Item No.=FIELD(No.)));
                                                   CaptionML=[ENU=Cost of Open Production Orders;
                                                              ENN=Cost of Open Production Orders] }
    { 521 ;   ;Application Wksh. User ID;Code128  ;DataClassification=EndUserIdentifiableInformation;
                                                   CaptionML=[ENU=Application Wksh. User ID;
                                                              ENN=Application Wksh. User ID] }
    { 910 ;   ;Assembly Policy     ;Option        ;OnValidate=BEGIN
                                                                IF "Assembly Policy" = "Assembly Policy"::"Assemble-to-Order" THEN
                                                                  TESTFIELD("Replenishment System","Replenishment System"::Assembly);
                                                                IF IsNonInventoriableType THEN
                                                                  TESTFIELD("Assembly Policy","Assembly Policy"::"Assemble-to-Stock");
                                                              END;

                                                   AccessByPermission=TableData 90=R;
                                                   CaptionML=[ENU=Assembly Policy;
                                                              ENN=Assembly Policy];
                                                   OptionCaptionML=[ENU=Assemble-to-Stock,Assemble-to-Order;
                                                                    ENN=Assemble-to-Stock,Assemble-to-Order];
                                                   OptionString=Assemble-to-Stock,Assemble-to-Order }
    { 929 ;   ;Res. Qty. on Assembly Order;Decimal;FieldClass=FlowField;
                                                   CalcFormula=Sum("Reservation Entry"."Quantity (Base)" WHERE (Item No.=FIELD(No.),
                                                                                                                Source Type=CONST(900),
                                                                                                                Source Subtype=CONST(1),
                                                                                                                Reservation Status=CONST(Reservation),
                                                                                                                Location Code=FIELD(Location Filter),
                                                                                                                Variant Code=FIELD(Variant Filter),
                                                                                                                Expected Receipt Date=FIELD(Date Filter)));
                                                   AccessByPermission=TableData 90=R;
                                                   CaptionML=[ENU=Res. Qty. on Assembly Order;
                                                              ENN=Res. Qty. on Assembly Order];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 930 ;   ;Res. Qty. on  Asm. Comp.;Decimal   ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Reservation Entry"."Quantity (Base)" WHERE (Item No.=FIELD(No.),
                                                                                                                 Source Type=CONST(901),
                                                                                                                 Source Subtype=CONST(1),
                                                                                                                 Reservation Status=CONST(Reservation),
                                                                                                                 Location Code=FIELD(Location Filter),
                                                                                                                 Variant Code=FIELD(Variant Filter),
                                                                                                                 Shipment Date=FIELD(Date Filter)));
                                                   AccessByPermission=TableData 90=R;
                                                   CaptionML=[ENU=Res. Qty. on  Asm. Comp.;
                                                              ENN=Res. Qty. on  Asm. Comp.];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 977 ;   ;Qty. on Assembly Order;Decimal     ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Assembly Header"."Remaining Quantity (Base)" WHERE (Document Type=CONST(Order),
                                                                                                                        Item No.=FIELD(No.),
                                                                                                                        Shortcut Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                        Shortcut Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                        Location Code=FIELD(Location Filter),
                                                                                                                        Variant Code=FIELD(Variant Filter),
                                                                                                                        Due Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Qty. on Assembly Order;
                                                              ENN=Qty. on Assembly Order];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 978 ;   ;Qty. on Asm. Component;Decimal     ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Assembly Line"."Remaining Quantity (Base)" WHERE (Document Type=CONST(Order),
                                                                                                                      Type=CONST(Item),
                                                                                                                      No.=FIELD(No.),
                                                                                                                      Shortcut Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                      Shortcut Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                      Location Code=FIELD(Location Filter),
                                                                                                                      Variant Code=FIELD(Variant Filter),
                                                                                                                      Due Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Qty. on Asm. Component;
                                                              ENN=Qty. on Asm. Component];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 1001;   ;Qty. on Job Order   ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Job Planning Line"."Remaining Qty. (Base)" WHERE (Status=CONST(Order),
                                                                                                                      Type=CONST(Item),
                                                                                                                      No.=FIELD(No.),
                                                                                                                      Location Code=FIELD(Location Filter),
                                                                                                                      Variant Code=FIELD(Variant Filter),
                                                                                                                      Planning Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Qty. on Job Order;
                                                              ENN=Qty. on Job Order];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 1002;   ;Res. Qty. on Job Order;Decimal     ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Reservation Entry"."Quantity (Base)" WHERE (Item No.=FIELD(No.),
                                                                                                                 Source Type=CONST(1003),
                                                                                                                 Source Subtype=CONST(2),
                                                                                                                 Reservation Status=CONST(Reservation),
                                                                                                                 Location Code=FIELD(Location Filter),
                                                                                                                 Variant Code=FIELD(Variant Filter),
                                                                                                                 Shipment Date=FIELD(Date Filter)));
                                                   AccessByPermission=TableData 167=R;
                                                   CaptionML=[ENU=Res. Qty. on Job Order;
                                                              ENN=Res. Qty. on Job Order];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 1217;   ;GTIN                ;Code14        ;CaptionML=[ENU=GTIN;
                                                              ENN=GTIN];
                                                   Numeric=Yes }
    { 1700;   ;Default Deferral Template Code;Code10;
                                                   TableRelation="Deferral Template"."Deferral Code";
                                                   CaptionML=[ENU=Default Deferral Template Code;
                                                              ENN=Default Deferral Template Code] }
    { 5400;   ;Low-Level Code      ;Integer       ;CaptionML=[ENU=Low-Level Code;
                                                              ENN=Low-Level Code];
                                                   Editable=No }
    { 5401;   ;Lot Size            ;Decimal       ;AccessByPermission=TableData 5405=R;
                                                   CaptionML=[ENU=Lot Size;
                                                              ENN=Lot Size];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 5402;   ;Serial Nos.         ;Code20        ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                IF "Serial Nos." <> '' THEN
                                                                  TESTFIELD("Item Tracking Code");
                                                              END;

                                                   CaptionML=[ENU=Serial Nos.;
                                                              ENN=Serial Nos.] }
    { 5403;   ;Last Unit Cost Calc. Date;Date     ;CaptionML=[ENU=Last Unit Cost Calc. Date;
                                                              ENN=Last Unit Cost Calc. Date];
                                                   Editable=No }
    { 5404;   ;Rolled-up Material Cost;Decimal    ;CaptionML=[ENU=Rolled-up Material Cost;
                                                              ENN=Rolled-up Material Cost];
                                                   DecimalPlaces=2:5;
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 5405;   ;Rolled-up Capacity Cost;Decimal    ;CaptionML=[ENU=Rolled-up Capacity Cost;
                                                              ENN=Rolled-up Capacity Cost];
                                                   DecimalPlaces=2:5;
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 5407;   ;Scrap %             ;Decimal       ;AccessByPermission=TableData 5405=R;
                                                   CaptionML=[ENU=Scrap %;
                                                              ENN=Scrap %];
                                                   DecimalPlaces=0:2;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 5409;   ;Inventory Value Zero;Boolean       ;OnValidate=BEGIN
                                                                CheckForProductionOutput("No.");
                                                              END;

                                                   CaptionML=[ENU=Inventory Value Zero;
                                                              ENN=Inventory Value Zero] }
    { 5410;   ;Discrete Order Quantity;Integer    ;CaptionML=[ENU=Discrete Order Quantity;
                                                              ENN=Discrete Order Quantity];
                                                   MinValue=0 }
    { 5411;   ;Minimum Order Quantity;Decimal     ;AccessByPermission=TableData 244=R;
                                                   CaptionML=[ENU=Minimum Order Quantity;
                                                              ENN=Minimum Order Quantity];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 5412;   ;Maximum Order Quantity;Decimal     ;AccessByPermission=TableData 244=R;
                                                   CaptionML=[ENU=Maximum Order Quantity;
                                                              ENN=Maximum Order Quantity];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 5413;   ;Safety Stock Quantity;Decimal      ;AccessByPermission=TableData 244=R;
                                                   CaptionML=[ENU=Safety Stock Quantity;
                                                              ENN=Safety Stock Quantity];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 5414;   ;Order Multiple      ;Decimal       ;AccessByPermission=TableData 244=R;
                                                   CaptionML=[ENU=Order Multiple;
                                                              ENN=Order Multiple];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 5415;   ;Safety Lead Time    ;DateFormula   ;AccessByPermission=TableData 244=R;
                                                   CaptionML=[ENU=Safety Lead Time;
                                                              ENN=Safety Lead Time] }
    { 5417;   ;Flushing Method     ;Option        ;AccessByPermission=TableData 5405=R;
                                                   CaptionML=[ENU=Flushing Method;
                                                              ENN=Flushing Method];
                                                   OptionCaptionML=[ENU=Manual,Forward,Backward,Pick + Forward,Pick + Backward;
                                                                    ENN=Manual,Forward,Backward,Pick + Forward,Pick + Backward];
                                                   OptionString=Manual,Forward,Backward,Pick + Forward,Pick + Backward }
    { 5419;   ;Replenishment System;Option        ;OnValidate=BEGIN
                                                                IF "Replenishment System" <> "Replenishment System"::Assembly THEN
                                                                  TESTFIELD("Assembly Policy","Assembly Policy"::"Assemble-to-Stock");
                                                                IF "Replenishment System" <> "Replenishment System"::Purchase THEN
                                                                  TESTFIELD(Type,Type::Inventory);
                                                              END;

                                                   AccessByPermission=TableData 244=R;
                                                   CaptionML=[ENU=Replenishment System;
                                                              ENN=Replenishment System];
                                                   OptionCaptionML=[ENU=Purchase,Prod. Order,,Assembly;
                                                                    ENN=Purchase,Prod. Order,,Assembly];
                                                   OptionString=Purchase,Prod. Order,,Assembly }
    { 5420;   ;Scheduled Receipt (Qty.);Decimal   ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Prod. Order Line"."Remaining Qty. (Base)" WHERE (Status=FILTER(Firm Planned|Released),
                                                                                                                     Item No.=FIELD(No.),
                                                                                                                     Variant Code=FIELD(Variant Filter),
                                                                                                                     Shortcut Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                     Shortcut Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                     Location Code=FIELD(Location Filter),
                                                                                                                     Due Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Scheduled Receipt (Qty.);
                                                              ENN=Scheduled Receipt (Qty.)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5421;   ;Scheduled Need (Qty.);Decimal      ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Prod. Order Component"."Remaining Qty. (Base)" WHERE (Status=FILTER(Planned..Released),
                                                                                                                          Item No.=FIELD(No.),
                                                                                                                          Variant Code=FIELD(Variant Filter),
                                                                                                                          Shortcut Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                          Shortcut Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                          Location Code=FIELD(Location Filter),
                                                                                                                          Due Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Scheduled Need (Qty.);
                                                              ENN=Scheduled Need (Qty.)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5422;   ;Rounding Precision  ;Decimal       ;InitValue=1;
                                                   OnValidate=BEGIN
                                                                IF "Rounding Precision" <= 0 THEN
                                                                  FIELDERROR("Rounding Precision",Text027);
                                                              END;

                                                   AccessByPermission=TableData 5405=R;
                                                   CaptionML=[ENU=Rounding Precision;
                                                              ENN=Rounding Precision];
                                                   DecimalPlaces=0:5 }
    { 5423;   ;Bin Filter          ;Code20        ;FieldClass=FlowFilter;
                                                   TableRelation=Bin.Code WHERE (Location Code=FIELD(Location Filter));
                                                   CaptionML=[ENU=Bin Filter;
                                                              ENN=Bin Filter] }
    { 5424;   ;Variant Filter      ;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation="Item Variant".Code WHERE (Item No.=FIELD(No.));
                                                   CaptionML=[ENU=Variant Filter;
                                                              ENN=Variant Filter] }
    { 5425;   ;Sales Unit of Measure;Code10       ;TableRelation=IF (No.=FILTER(<>'')) "Item Unit of Measure".Code WHERE (Item No.=FIELD(No.))
                                                                 ELSE "Unit of Measure";
                                                   CaptionML=[ENU=Sales Unit of Measure;
                                                              ENN=Sales Unit of Measure] }
    { 5426;   ;Purch. Unit of Measure;Code10      ;TableRelation=IF (No.=FILTER(<>'')) "Item Unit of Measure".Code WHERE (Item No.=FIELD(No.))
                                                                 ELSE "Unit of Measure";
                                                   CaptionML=[ENU=Purch. Unit of Measure;
                                                              ENN=Purch. Unit of Measure] }
    { 5428;   ;Time Bucket         ;DateFormula   ;OnValidate=BEGIN
                                                                CalendarMgt.CheckDateFormulaPositive("Time Bucket");
                                                              END;

                                                   AccessByPermission=TableData 244=R;
                                                   CaptionML=[ENU=Time Bucket;
                                                              ENN=Time Bucket] }
    { 5429;   ;Reserved Qty. on Prod. Order;Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Reservation Entry"."Quantity (Base)" WHERE (Item No.=FIELD(No.),
                                                                                                                Source Type=CONST(5406),
                                                                                                                Source Subtype=FILTER(1..3),
                                                                                                                Reservation Status=CONST(Reservation),
                                                                                                                Location Code=FIELD(Location Filter),
                                                                                                                Variant Code=FIELD(Variant Filter),
                                                                                                                Expected Receipt Date=FIELD(Date Filter)));
                                                   AccessByPermission=TableData 5405=R;
                                                   CaptionML=[ENU=Reserved Qty. on Prod. Order;
                                                              ENN=Reserved Qty. on Prod. Order];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5430;   ;Res. Qty. on Prod. Order Comp.;Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=-Sum("Reservation Entry"."Quantity (Base)" WHERE (Item No.=FIELD(No.),
                                                                                                                 Source Type=CONST(5407),
                                                                                                                 Source Subtype=FILTER(1..3),
                                                                                                                 Reservation Status=CONST(Reservation),
                                                                                                                 Location Code=FIELD(Location Filter),
                                                                                                                 Variant Code=FIELD(Variant Filter),
                                                                                                                 Shipment Date=FIELD(Date Filter)));
                                                   AccessByPermission=TableData 5405=R;
                                                   CaptionML=[ENU=Res. Qty. on Prod. Order Comp.;
                                                              ENN=Res. Qty. on Prod. Order Comp.];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5431;   ;Res. Qty. on Req. Line;Decimal     ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Reservation Entry"."Quantity (Base)" WHERE (Item No.=FIELD(No.),
                                                                                                                Source Type=CONST(246),
                                                                                                                Source Subtype=FILTER(0),
                                                                                                                Reservation Status=CONST(Reservation),
                                                                                                                Location Code=FIELD(Location Filter),
                                                                                                                Variant Code=FIELD(Variant Filter),
                                                                                                                Expected Receipt Date=FIELD(Date Filter)));
                                                   AccessByPermission=TableData 244=R;
                                                   CaptionML=[ENU=Res. Qty. on Req. Line;
                                                              ENN=Res. Qty. on Req. Line];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5440;   ;Reordering Policy   ;Option        ;OnValidate=BEGIN
                                                                "Include Inventory" :=
                                                                  "Reordering Policy" IN ["Reordering Policy"::"Lot-for-Lot",
                                                                                          "Reordering Policy"::"Maximum Qty.",
                                                                                          "Reordering Policy"::"Fixed Reorder Qty."];

                                                                IF "Reordering Policy" <> "Reordering Policy"::" " THEN
                                                                  TESTFIELD(Type,Type::Inventory);
                                                              END;

                                                   AccessByPermission=TableData 244=R;
                                                   CaptionML=[ENU=Reordering Policy;
                                                              ENN=Reordering Policy];
                                                   OptionCaptionML=[ENU=" ,Fixed Reorder Qty.,Maximum Qty.,Order,Lot-for-Lot";
                                                                    ENN=" ,Fixed Reorder Qty.,Maximum Qty.,Order,Lot-for-Lot"];
                                                   OptionString=[ ,Fixed Reorder Qty.,Maximum Qty.,Order,Lot-for-Lot] }
    { 5441;   ;Include Inventory   ;Boolean       ;AccessByPermission=TableData 244=R;
                                                   CaptionML=[ENU=Include Inventory;
                                                              ENN=Include Inventory] }
    { 5442;   ;Manufacturing Policy;Option        ;AccessByPermission=TableData 244=R;
                                                   CaptionML=[ENU=Manufacturing Policy;
                                                              ENN=Manufacturing Policy];
                                                   OptionCaptionML=[ENU=Make-to-Stock,Make-to-Order;
                                                                    ENN=Make-to-Stock,Make-to-Order];
                                                   OptionString=Make-to-Stock,Make-to-Order }
    { 5443;   ;Rescheduling Period ;DateFormula   ;OnValidate=BEGIN
                                                                CalendarMgt.CheckDateFormulaPositive("Rescheduling Period");
                                                              END;

                                                   AccessByPermission=TableData 244=R;
                                                   CaptionML=[ENU=Rescheduling Period;
                                                              ENN=Rescheduling Period] }
    { 5444;   ;Lot Accumulation Period;DateFormula;OnValidate=BEGIN
                                                                CalendarMgt.CheckDateFormulaPositive("Lot Accumulation Period");
                                                              END;

                                                   AccessByPermission=TableData 244=R;
                                                   CaptionML=[ENU=Lot Accumulation Period;
                                                              ENN=Lot Accumulation Period] }
    { 5445;   ;Dampener Period     ;DateFormula   ;OnValidate=BEGIN
                                                                CalendarMgt.CheckDateFormulaPositive("Dampener Period");
                                                              END;

                                                   AccessByPermission=TableData 244=R;
                                                   CaptionML=[ENU=Dampener Period;
                                                              ENN=Dampener Period] }
    { 5446;   ;Dampener Quantity   ;Decimal       ;AccessByPermission=TableData 244=R;
                                                   CaptionML=[ENU=Dampener Quantity;
                                                              ENN=Dampener Quantity];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 5447;   ;Overflow Level      ;Decimal       ;AccessByPermission=TableData 244=R;
                                                   CaptionML=[ENU=Overflow Level;
                                                              ENN=Overflow Level];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 5449;   ;Planning Transfer Ship. (Qty).;Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Requisition Line"."Quantity (Base)" WHERE (Worksheet Template Name=FILTER(<>''),
                                                                                                               Journal Batch Name=FILTER(<>''),
                                                                                                               Replenishment System=CONST(Transfer),
                                                                                                               Type=CONST(Item),
                                                                                                               No.=FIELD(No.),
                                                                                                               Variant Code=FIELD(Variant Filter),
                                                                                                               Transfer-from Code=FIELD(Location Filter),
                                                                                                               Transfer Shipment Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Planning Transfer Ship. (Qty).;
                                                              ENN=Planning Transfer Ship. (Qty).];
                                                   Editable=No }
    { 5450;   ;Planning Worksheet (Qty.);Decimal  ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Requisition Line"."Quantity (Base)" WHERE (Planning Line Origin=CONST(Planning),
                                                                                                               Type=CONST(Item),
                                                                                                               No.=FIELD(No.),
                                                                                                               Location Code=FIELD(Location Filter),
                                                                                                               Variant Code=FIELD(Variant Filter),
                                                                                                               Due Date=FIELD(Date Filter),
                                                                                                               Shortcut Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                               Shortcut Dimension 2 Code=FIELD(Global Dimension 2 Filter)));
                                                   CaptionML=[ENU=Planning Worksheet (Qty.);
                                                              ENN=Planning Worksheet (Qty.)];
                                                   Editable=No }
    { 5700;   ;Stockkeeping Unit Exists;Boolean   ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Stockkeeping Unit" WHERE (Item No.=FIELD(No.)));
                                                   CaptionML=[ENU=Stockkeeping Unit Exists;
                                                              ENN=Stockkeeping Unit Exists];
                                                   Editable=No }
    { 5701;   ;Manufacturer Code   ;Code10        ;TableRelation=Manufacturer;
                                                   CaptionML=[ENU=Manufacturer Code;
                                                              ENN=Manufacturer Code] }
    { 5702;   ;Item Category Code  ;Code20        ;TableRelation="Item Category";
                                                   OnValidate=VAR
                                                                ItemAttributeManagement@1000 : Codeunit 7500;
                                                              BEGIN
                                                                IF NOT ISTEMPORARY THEN
                                                                  ItemAttributeManagement.InheritAttributesFromItemCategory(Rec,"Item Category Code",xRec."Item Category Code");
                                                                UpdateItemCategoryId;
                                                              END;

                                                   CaptionML=[ENU=Item Category Code;
                                                              ENN=Item Category Code] }
    { 5703;   ;Created From Nonstock Item;Boolean ;AccessByPermission=TableData 5718=R;
                                                   CaptionML=[ENU=Created From Catalog Item;
                                                              ENN=Created From Catalogue Item];
                                                   Editable=No }
    { 5704;   ;Product Group Code  ;Code10        ;ObsoleteState=Removed;
                                                   ObsoleteReason=Product Groups became first level children of Item Categories.;
                                                   CaptionML=[ENU=Product Group Code;
                                                              ENN=Product Group Code] }
    { 5706;   ;Substitutes Exist   ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Item Substitution" WHERE (Type=CONST(Item),
                                                                                                No.=FIELD(No.)));
                                                   CaptionML=[ENU=Substitutes Exist;
                                                              ENN=Substitutes Exist];
                                                   Editable=No }
    { 5707;   ;Qty. in Transit     ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Transfer Line"."Qty. in Transit (Base)" WHERE (Derived From Line No.=CONST(0),
                                                                                                                   Item No.=FIELD(No.),
                                                                                                                   Transfer-to Code=FIELD(Location Filter),
                                                                                                                   Variant Code=FIELD(Variant Filter),
                                                                                                                   Shortcut Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                   Shortcut Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                   Receipt Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Qty. in Transit;
                                                              ENN=Qty. in Transit];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5708;   ;Trans. Ord. Receipt (Qty.);Decimal ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Transfer Line"."Outstanding Qty. (Base)" WHERE (Derived From Line No.=CONST(0),
                                                                                                                    Item No.=FIELD(No.),
                                                                                                                    Transfer-to Code=FIELD(Location Filter),
                                                                                                                    Variant Code=FIELD(Variant Filter),
                                                                                                                    Shortcut Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                    Shortcut Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                    Receipt Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Trans. Ord. Receipt (Qty.);
                                                              ENN=Trans. Ord. Receipt (Qty.)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5709;   ;Trans. Ord. Shipment (Qty.);Decimal;FieldClass=FlowField;
                                                   CalcFormula=Sum("Transfer Line"."Outstanding Qty. (Base)" WHERE (Derived From Line No.=CONST(0),
                                                                                                                    Item No.=FIELD(No.),
                                                                                                                    Transfer-from Code=FIELD(Location Filter),
                                                                                                                    Variant Code=FIELD(Variant Filter),
                                                                                                                    Shortcut Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                    Shortcut Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                    Shipment Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Trans. Ord. Shipment (Qty.);
                                                              ENN=Trans. Ord. Shipment (Qty.)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5776;   ;Qty. Assigned to ship;Decimal      ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Warehouse Shipment Line"."Qty. Outstanding (Base)" WHERE (Item No.=FIELD(No.),
                                                                                                                              Location Code=FIELD(Location Filter),
                                                                                                                              Variant Code=FIELD(Variant Filter),
                                                                                                                              Due Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Qty. Assigned to ship;
                                                              ENN=Qty. Assigned to ship];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5777;   ;Qty. Picked         ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Warehouse Shipment Line"."Qty. Picked (Base)" WHERE (Item No.=FIELD(No.),
                                                                                                                         Location Code=FIELD(Location Filter),
                                                                                                                         Variant Code=FIELD(Variant Filter),
                                                                                                                         Due Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Qty. Picked;
                                                              ENN=Qty. Picked];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5900;   ;Service Item Group  ;Code10        ;TableRelation="Service Item Group".Code;
                                                   OnValidate=VAR
                                                                ResSkill@1000 : Record 5956;
                                                              BEGIN
                                                                IF xRec."Service Item Group" <> "Service Item Group" THEN BEGIN
                                                                  IF NOT ResSkillMgt.ChangeRelationWithGroup(
                                                                       ResSkill.Type::Item,
                                                                       "No.",
                                                                       ResSkill.Type::"Service Item Group",
                                                                       "Service Item Group",
                                                                       xRec."Service Item Group")
                                                                  THEN
                                                                    "Service Item Group" := xRec."Service Item Group";
                                                                END ELSE
                                                                  ResSkillMgt.RevalidateRelation(
                                                                    ResSkill.Type::Item,
                                                                    "No.",
                                                                    ResSkill.Type::"Service Item Group",
                                                                    "Service Item Group")
                                                              END;

                                                   CaptionML=[ENU=Service Item Group;
                                                              ENN=Service Item Group] }
    { 5901;   ;Qty. on Service Order;Decimal      ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Service Line"."Outstanding Qty. (Base)" WHERE (Document Type=CONST(Order),
                                                                                                                   Type=CONST(Item),
                                                                                                                   No.=FIELD(No.),
                                                                                                                   Shortcut Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                   Shortcut Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                   Location Code=FIELD(Location Filter),
                                                                                                                   Variant Code=FIELD(Variant Filter),
                                                                                                                   Needed by Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Qty. on Service Order;
                                                              ENN=Qty. on Service Order];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5902;   ;Res. Qty. on Service Orders;Decimal;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Reservation Entry"."Quantity (Base)" WHERE (Item No.=FIELD(No.),
                                                                                                                 Source Type=CONST(5902),
                                                                                                                 Source Subtype=CONST(1),
                                                                                                                 Reservation Status=CONST(Reservation),
                                                                                                                 Location Code=FIELD(Location Filter),
                                                                                                                 Variant Code=FIELD(Variant Filter),
                                                                                                                 Shipment Date=FIELD(Date Filter)));
                                                   AccessByPermission=TableData 5900=R;
                                                   CaptionML=[ENU=Res. Qty. on Service Orders;
                                                              ENN=Res. Qty. on Service Orders];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 6500;   ;Item Tracking Code  ;Code10        ;TableRelation="Item Tracking Code";
                                                   OnValidate=BEGIN
                                                                IF "Item Tracking Code" <> '' THEN
                                                                  TESTFIELD(Type,Type::Inventory);
                                                                IF "Item Tracking Code" = xRec."Item Tracking Code" THEN
                                                                  EXIT;

                                                                IF NOT ItemTrackingCode.GET("Item Tracking Code") THEN
                                                                  CLEAR(ItemTrackingCode);

                                                                IF NOT ItemTrackingCode2.GET(xRec."Item Tracking Code") THEN
                                                                  CLEAR(ItemTrackingCode2);

                                                                IF (ItemTrackingCode."SN Specific Tracking" <> ItemTrackingCode2."SN Specific Tracking") OR
                                                                   (ItemTrackingCode."Lot Specific Tracking" <> ItemTrackingCode2."Lot Specific Tracking")
                                                                THEN
                                                                  TestNoEntriesExist(FIELDCAPTION("Item Tracking Code"));

                                                                IF "Costing Method" = "Costing Method"::Specific THEN BEGIN
                                                                  TestNoEntriesExist(FIELDCAPTION("Item Tracking Code"));

                                                                  TESTFIELD("Item Tracking Code");

                                                                  ItemTrackingCode.GET("Item Tracking Code");
                                                                  IF NOT ItemTrackingCode."SN Specific Tracking" THEN
                                                                    ERROR(
                                                                      Text018,
                                                                      ItemTrackingCode.FIELDCAPTION("SN Specific Tracking"),
                                                                      FORMAT(TRUE),ItemTrackingCode.TABLECAPTION,ItemTrackingCode.Code,
                                                                      FIELDCAPTION("Costing Method"),"Costing Method");
                                                                END;

                                                                TestNoOpenDocumentsWithTrackingExist;
                                                              END;

                                                   CaptionML=[ENU=Item Tracking Code;
                                                              ENN=Item Tracking Code] }
    { 6501;   ;Lot Nos.            ;Code20        ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                IF "Lot Nos." <> '' THEN
                                                                  TESTFIELD("Item Tracking Code");
                                                              END;

                                                   CaptionML=[ENU=Lot Nos.;
                                                              ENN=Lot Nos.] }
    { 6502;   ;Expiration Calculation;DateFormula ;CaptionML=[ENU=Expiration Calculation;
                                                              ENN=Expiration Calculation] }
    { 6503;   ;Lot No. Filter      ;Code50        ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Lot No. Filter;
                                                              ENN=Lot No. Filter] }
    { 6504;   ;Serial No. Filter   ;Code50        ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Serial No. Filter;
                                                              ENN=Serial No. Filter] }
    { 6650;   ;Qty. on Purch. Return;Decimal      ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Purchase Line"."Outstanding Qty. (Base)" WHERE (Document Type=CONST(Return Order),
                                                                                                                    Type=CONST(Item),
                                                                                                                    No.=FIELD(No.),
                                                                                                                    Shortcut Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                    Shortcut Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                    Location Code=FIELD(Location Filter),
                                                                                                                    Drop Shipment=FIELD(Drop Shipment Filter),
                                                                                                                    Variant Code=FIELD(Variant Filter),
                                                                                                                    Expected Receipt Date=FIELD(Date Filter)));
                                                   AccessByPermission=TableData 6660=R;
                                                   CaptionML=[ENU=Qty. on Purch. Return;
                                                              ENN=Qty. on Purch. Return];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 6660;   ;Qty. on Sales Return;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Line"."Outstanding Qty. (Base)" WHERE (Document Type=CONST(Return Order),
                                                                                                                 Type=CONST(Item),
                                                                                                                 No.=FIELD(No.),
                                                                                                                 Shortcut Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                 Shortcut Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                 Location Code=FIELD(Location Filter),
                                                                                                                 Drop Shipment=FIELD(Drop Shipment Filter),
                                                                                                                 Variant Code=FIELD(Variant Filter),
                                                                                                                 Shipment Date=FIELD(Date Filter)));
                                                   AccessByPermission=TableData 6650=R;
                                                   CaptionML=[ENU=Qty. on Sales Return;
                                                              ENN=Qty. on Sales Return];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 7171;   ;No. of Substitutes  ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Item Substitution" WHERE (Type=CONST(Item),
                                                                                                No.=FIELD(No.)));
                                                   CaptionML=[ENU=No. of Substitutes;
                                                              ENN=No. of Substitutes];
                                                   Editable=No }
    { 7300;   ;Warehouse Class Code;Code10        ;TableRelation="Warehouse Class";
                                                   CaptionML=[ENU=Warehouse Class Code;
                                                              ENN=Warehouse Class Code] }
    { 7301;   ;Special Equipment Code;Code10      ;TableRelation="Special Equipment";
                                                   CaptionML=[ENU=Special Equipment Code;
                                                              ENN=Special Equipment Code] }
    { 7302;   ;Put-away Template Code;Code10      ;TableRelation="Put-away Template Header";
                                                   CaptionML=[ENU=Put-away Template Code;
                                                              ENN=Put-away Template Code] }
    { 7307;   ;Put-away Unit of Measure Code;Code10;
                                                   TableRelation=IF (No.=FILTER(<>'')) "Item Unit of Measure".Code WHERE (Item No.=FIELD(No.))
                                                                 ELSE "Unit of Measure";
                                                   AccessByPermission=TableData 7340=R;
                                                   CaptionML=[ENU=Put-away Unit of Measure Code;
                                                              ENN=Put-away Unit of Measure Code] }
    { 7380;   ;Phys Invt Counting Period Code;Code10;
                                                   TableRelation="Phys. Invt. Counting Period";
                                                   OnValidate=VAR
                                                                PhysInvtCountPeriod@1000 : Record 7381;
                                                                PhysInvtCountPeriodMgt@1001 : Codeunit 7380;
                                                              BEGIN
                                                                IF ("Phys Invt Counting Period Code" <> '') AND
                                                                   ("Phys Invt Counting Period Code" <> xRec."Phys Invt Counting Period Code")
                                                                THEN BEGIN
                                                                  PhysInvtCountPeriod.GET("Phys Invt Counting Period Code");
                                                                  PhysInvtCountPeriod.TESTFIELD("Count Frequency per Year");
                                                                  IF xRec."Phys Invt Counting Period Code" <> '' THEN
                                                                    IF CurrFieldNo <> 0 THEN
                                                                      IF NOT CONFIRM(
                                                                           Text7380,
                                                                           FALSE,
                                                                           FIELDCAPTION("Phys Invt Counting Period Code"),
                                                                           FIELDCAPTION("Next Counting Start Date"),
                                                                           FIELDCAPTION("Next Counting End Date"))
                                                                      THEN
                                                                        ERROR(Text7381);

                                                                  IF "Last Counting Period Update" = 0D THEN
                                                                    PhysInvtCountPeriodMgt.CalcPeriod(
                                                                      "Last Counting Period Update","Next Counting Start Date","Next Counting End Date",
                                                                      PhysInvtCountPeriod."Count Frequency per Year");
                                                                END ELSE BEGIN
                                                                  IF CurrFieldNo <> 0 THEN
                                                                    IF NOT CONFIRM(Text003,FALSE,FIELDCAPTION("Phys Invt Counting Period Code")) THEN
                                                                      ERROR(Text7381);
                                                                  "Next Counting Start Date" := 0D;
                                                                  "Next Counting End Date" := 0D;
                                                                  "Last Counting Period Update" := 0D;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Phys Invt Counting Period Code;
                                                              ENN=Phys Invt Counting Period Code] }
    { 7381;   ;Last Counting Period Update;Date   ;AccessByPermission=TableData 7380=R;
                                                   CaptionML=[ENU=Last Counting Period Update;
                                                              ENN=Last Counting Period Update];
                                                   Editable=No }
    { 7383;   ;Last Phys. Invt. Date;Date         ;FieldClass=FlowField;
                                                   CalcFormula=Max("Phys. Inventory Ledger Entry"."Posting Date" WHERE (Item No.=FIELD(No.),
                                                                                                                        Phys Invt Counting Period Type=FILTER(' '|Item)));
                                                   CaptionML=[ENU=Last Phys. Invt. Date;
                                                              ENN=Last Phys. Invt. Date];
                                                   Editable=No }
    { 7384;   ;Use Cross-Docking   ;Boolean       ;InitValue=Yes;
                                                   AccessByPermission=TableData 7302=R;
                                                   CaptionML=[ENU=Use Cross-Docking;
                                                              ENN=Use Cross-Docking] }
    { 7385;   ;Next Counting Start Date;Date      ;CaptionML=[ENU=Next Counting Start Date;
                                                              ENN=Next Counting Start Date];
                                                   Editable=No }
    { 7386;   ;Next Counting End Date;Date        ;CaptionML=[ENU=Next Counting End Date;
                                                              ENN=Next Counting End Date];
                                                   Editable=No }
    { 7700;   ;Identifier Code     ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Item Identifier".Code WHERE (Item No.=FIELD(No.)));
                                                   CaptionML=[ENU=Identifier Code;
                                                              ENN=Identifier Code];
                                                   Editable=No }
    { 8000;   ;Id                  ;GUID          ;CaptionML=[ENU=Id;
                                                              ENN=Id] }
    { 8001;   ;Unit of Measure Id  ;GUID          ;TableRelation="Unit of Measure".Id;
                                                   OnValidate=BEGIN
                                                                UpdateUnitOfMeasureCode;
                                                              END;

                                                   CaptionML=[ENU=Unit of Measure Id;
                                                              ENN=Unit of Measure Id] }
    { 8002;   ;Tax Group Id        ;GUID          ;TableRelation="Tax Group".Id;
                                                   OnValidate=BEGIN
                                                                UpdateTaxGroupCode;
                                                              END;

                                                   CaptionML=[ENU=Tax Group Id;
                                                              ENN=Tax Group Id] }
    { 8003;   ;Sales Blocked       ;Boolean       ;DataClassification=CustomerContent;
                                                   CaptionML=[ENU=Sales Blocked;
                                                              ENN=Sales Blocked] }
    { 8004;   ;Purchasing Blocked  ;Boolean       ;DataClassification=CustomerContent;
                                                   CaptionML=[ENU=Purchasing Blocked;
                                                              ENN=Purchasing Blocked] }
    { 8005;   ;Item Category Id    ;GUID          ;TableRelation="Item Category".Id;
                                                   OnValidate=BEGIN
                                                                UpdateItemCategoryCode;
                                                              END;

                                                   DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Item Category Id;
                                                              ENN=Item Category Id] }
    { 99000750;;Routing No.        ;Code20        ;TableRelation="Routing Header";
                                                   OnValidate=BEGIN
                                                                IF "Routing No." <> '' THEN
                                                                  TESTFIELD(Type,Type::Inventory);

                                                                PlanningAssignment.RoutingReplace(Rec,xRec."Routing No.");

                                                                IF "Routing No." <> xRec."Routing No." THEN
                                                                  ItemCostMgt.UpdateUnitCost(Rec,'','',0,0,FALSE,FALSE,TRUE,FIELDNO("Routing No."));
                                                              END;

                                                   CaptionML=[ENU=Routing No.;
                                                              ENN=Routing No.] }
    { 99000751;;Production BOM No. ;Code20        ;TableRelation="Production BOM Header";
                                                   OnValidate=VAR
                                                                MfgSetup@1000 : Record 99000765;
                                                                ProdBOMHeader@1001 : Record 99000771;
                                                                ItemUnitOfMeasure@1003 : Record 5404;
                                                              BEGIN
                                                                IF "Production BOM No." <> '' THEN
                                                                  TESTFIELD(Type,Type::Inventory);

                                                                PlanningAssignment.BomReplace(Rec,xRec."Production BOM No.");

                                                                IF "Production BOM No." <> xRec."Production BOM No." THEN
                                                                  ItemCostMgt.UpdateUnitCost(Rec,'','',0,0,FALSE,FALSE,TRUE,FIELDNO("Production BOM No."));

                                                                IF ("Production BOM No." <> '') AND ("Production BOM No." <> xRec."Production BOM No.") THEN BEGIN
                                                                  ProdBOMHeader.GET("Production BOM No.");
                                                                  ItemUnitOfMeasure.GET("No.",ProdBOMHeader."Unit of Measure Code");
                                                                  IF ProdBOMHeader.Status = ProdBOMHeader.Status::Certified THEN BEGIN
                                                                    MfgSetup.GET;
                                                                    IF MfgSetup."Dynamic Low-Level Code" THEN
                                                                      CODEUNIT.RUN(CODEUNIT::"Calculate Low-Level Code",Rec);
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Production BOM No.;
                                                              ENN=Production BOM No.] }
    { 99000752;;Single-Level Material Cost;Decimal;CaptionML=[ENU=Single-Level Material Cost;
                                                              ENN=Single-Level Material Cost];
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 99000753;;Single-Level Capacity Cost;Decimal;CaptionML=[ENU=Single-Level Capacity Cost;
                                                              ENN=Single-Level Capacity Cost];
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 99000754;;Single-Level Subcontrd. Cost;Decimal;
                                                   CaptionML=[ENU=Single-Level Subcontrd. Cost;
                                                              ENN=Single-Level Subcontrd. Cost];
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 99000755;;Single-Level Cap. Ovhd Cost;Decimal;
                                                   CaptionML=[ENU=Single-Level Cap. Ovhd Cost;
                                                              ENN=Single-Level Cap. Ovhd Cost];
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 99000756;;Single-Level Mfg. Ovhd Cost;Decimal;
                                                   CaptionML=[ENU=Single-Level Mfg. Ovhd Cost;
                                                              ENN=Single-Level Mfg. Ovhd Cost];
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 99000757;;Overhead Rate      ;Decimal       ;OnValidate=BEGIN
                                                                IF "Overhead Rate" <> 0 THEN
                                                                  TESTFIELD(Type,Type::Inventory);
                                                              END;

                                                   AccessByPermission=TableData 5405=R;
                                                   CaptionML=[ENU=Overhead Rate;
                                                              ENN=Overhead Rate];
                                                   AutoFormatType=2 }
    { 99000758;;Rolled-up Subcontracted Cost;Decimal;
                                                   AccessByPermission=TableData 5405=R;
                                                   CaptionML=[ENU=Rolled-up Subcontracted Cost;
                                                              ENN=Rolled-up Subcontracted Cost];
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 99000759;;Rolled-up Mfg. Ovhd Cost;Decimal  ;CaptionML=[ENU=Rolled-up Mfg. Ovhd Cost;
                                                              ENN=Rolled-up Mfg. Ovhd Cost];
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 99000760;;Rolled-up Cap. Overhead Cost;Decimal;
                                                   CaptionML=[ENU=Rolled-up Cap. Overhead Cost;
                                                              ENN=Rolled-up Cap. Overhead Cost];
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 99000761;;Planning Issues (Qty.);Decimal    ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Planning Component"."Expected Quantity (Base)" WHERE (Item No.=FIELD(No.),
                                                                                                                          Due Date=FIELD(Date Filter),
                                                                                                                          Location Code=FIELD(Location Filter),
                                                                                                                          Variant Code=FIELD(Variant Filter),
                                                                                                                          Shortcut Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                          Shortcut Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                          Planning Line Origin=CONST(" ")));
                                                   CaptionML=[ENU=Planning Issues (Qty.);
                                                              ENN=Planning Issues (Qty.)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 99000762;;Planning Receipt (Qty.);Decimal   ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Requisition Line"."Quantity (Base)" WHERE (Type=CONST(Item),
                                                                                                               No.=FIELD(No.),
                                                                                                               Due Date=FIELD(Date Filter),
                                                                                                               Location Code=FIELD(Location Filter),
                                                                                                               Variant Code=FIELD(Variant Filter),
                                                                                                               Shortcut Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                               Shortcut Dimension 2 Code=FIELD(Global Dimension 2 Filter)));
                                                   CaptionML=[ENU=Planning Receipt (Qty.);
                                                              ENN=Planning Receipt (Qty.)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 99000765;;Planned Order Receipt (Qty.);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Prod. Order Line"."Remaining Qty. (Base)" WHERE (Status=CONST(Planned),
                                                                                                                     Item No.=FIELD(No.),
                                                                                                                     Variant Code=FIELD(Variant Filter),
                                                                                                                     Shortcut Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                     Shortcut Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                     Location Code=FIELD(Location Filter),
                                                                                                                     Due Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Planned Order Receipt (Qty.);
                                                              ENN=Planned Order Receipt (Qty.)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 99000766;;FP Order Receipt (Qty.);Decimal   ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Prod. Order Line"."Remaining Qty. (Base)" WHERE (Status=CONST(Firm Planned),
                                                                                                                     Item No.=FIELD(No.),
                                                                                                                     Variant Code=FIELD(Variant Filter),
                                                                                                                     Shortcut Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                     Shortcut Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                     Location Code=FIELD(Location Filter),
                                                                                                                     Due Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=FP Order Receipt (Qty.);
                                                              ENN=FP Order Receipt (Qty.)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 99000767;;Rel. Order Receipt (Qty.);Decimal ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Prod. Order Line"."Remaining Qty. (Base)" WHERE (Status=CONST(Released),
                                                                                                                     Item No.=FIELD(No.),
                                                                                                                     Variant Code=FIELD(Variant Filter),
                                                                                                                     Shortcut Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                     Shortcut Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                     Location Code=FIELD(Location Filter),
                                                                                                                     Due Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Rel. Order Receipt (Qty.);
                                                              ENN=Rel. Order Receipt (Qty.)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 99000768;;Planning Release (Qty.);Decimal   ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Requisition Line"."Quantity (Base)" WHERE (Type=CONST(Item),
                                                                                                               No.=FIELD(No.),
                                                                                                               Starting Date=FIELD(Date Filter),
                                                                                                               Location Code=FIELD(Location Filter),
                                                                                                               Variant Code=FIELD(Variant Filter),
                                                                                                               Shortcut Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                               Shortcut Dimension 2 Code=FIELD(Global Dimension 2 Filter)));
                                                   CaptionML=[ENU=Planning Release (Qty.);
                                                              ENN=Planning Release (Qty.)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 99000769;;Planned Order Release (Qty.);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Prod. Order Line"."Remaining Qty. (Base)" WHERE (Status=CONST(Planned),
                                                                                                                     Item No.=FIELD(No.),
                                                                                                                     Variant Code=FIELD(Variant Filter),
                                                                                                                     Shortcut Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                     Shortcut Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                     Location Code=FIELD(Location Filter),
                                                                                                                     Starting Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Planned Order Release (Qty.);
                                                              ENN=Planned Order Release (Qty.)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 99000770;;Purch. Req. Receipt (Qty.);Decimal;FieldClass=FlowField;
                                                   CalcFormula=Sum("Requisition Line"."Quantity (Base)" WHERE (Type=CONST(Item),
                                                                                                               No.=FIELD(No.),
                                                                                                               Variant Code=FIELD(Variant Filter),
                                                                                                               Location Code=FIELD(Location Filter),
                                                                                                               Shortcut Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                               Shortcut Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                               Due Date=FIELD(Date Filter),
                                                                                                               Planning Line Origin=CONST(" ")));
                                                   CaptionML=[ENU=Purch. Req. Receipt (Qty.);
                                                              ENN=Purch. Req. Receipt (Qty.)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 99000771;;Purch. Req. Release (Qty.);Decimal;FieldClass=FlowField;
                                                   CalcFormula=Sum("Requisition Line"."Quantity (Base)" WHERE (Type=CONST(Item),
                                                                                                               No.=FIELD(No.),
                                                                                                               Location Code=FIELD(Location Filter),
                                                                                                               Variant Code=FIELD(Variant Filter),
                                                                                                               Shortcut Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                               Shortcut Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                               Order Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Purch. Req. Release (Qty.);
                                                              ENN=Purch. Req. Release (Qty.)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 99000773;;Order Tracking Policy;Option      ;OnValidate=VAR
                                                                ReservEntry@1000 : Record 337;
                                                                ActionMessageEntry@1001 : Record 99000849;
                                                                TempReservationEntry@1002 : TEMPORARY Record 337;
                                                              BEGIN
                                                                IF "Order Tracking Policy" <> "Order Tracking Policy"::None THEN
                                                                  TESTFIELD(Type,Type::Inventory);
                                                                IF xRec."Order Tracking Policy" = "Order Tracking Policy" THEN
                                                                  EXIT;
                                                                IF "Order Tracking Policy" > xRec."Order Tracking Policy" THEN BEGIN
                                                                  MESSAGE(Text99000000 +
                                                                    Text99000001,
                                                                    SELECTSTR("Order Tracking Policy",Text99000002));
                                                                END ELSE BEGIN
                                                                  ActionMessageEntry.SETCURRENTKEY("Reservation Entry");
                                                                  ReservEntry.SETCURRENTKEY("Item No.","Variant Code","Location Code","Reservation Status");
                                                                  ReservEntry.SETRANGE("Item No.","No.");
                                                                  ReservEntry.SETRANGE("Reservation Status",ReservEntry."Reservation Status"::Tracking,ReservEntry."Reservation Status"::Surplus);
                                                                  IF ReservEntry.FIND('-') THEN
                                                                    REPEAT
                                                                      ActionMessageEntry.SETRANGE("Reservation Entry",ReservEntry."Entry No.");
                                                                      ActionMessageEntry.DELETEALL;
                                                                      IF "Order Tracking Policy" = "Order Tracking Policy"::None THEN
                                                                        IF ReservEntry.TrackingExists THEN BEGIN
                                                                          TempReservationEntry := ReservEntry;
                                                                          TempReservationEntry."Reservation Status" := TempReservationEntry."Reservation Status"::Surplus;
                                                                          TempReservationEntry.INSERT;
                                                                        END ELSE
                                                                          ReservEntry.DELETE;
                                                                    UNTIL ReservEntry.NEXT = 0;

                                                                  IF TempReservationEntry.FIND('-') THEN
                                                                    REPEAT
                                                                      ReservEntry := TempReservationEntry;
                                                                      ReservEntry.MODIFY;
                                                                    UNTIL TempReservationEntry.NEXT = 0;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Order Tracking Policy;
                                                              ENN=Order Tracking Policy];
                                                   OptionCaptionML=[ENU=None,Tracking Only,Tracking & Action Msg.;
                                                                    ENN=None,Tracking Only,Tracking & Action Msg.];
                                                   OptionString=None,Tracking Only,Tracking & Action Msg. }
    { 99000774;;Prod. Forecast Quantity (Base);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Production Forecast Entry"."Forecast Quantity (Base)" WHERE (Item No.=FIELD(No.),
                                                                                                                                 Production Forecast Name=FIELD(Production Forecast Name),
                                                                                                                                 Forecast Date=FIELD(Date Filter),
                                                                                                                                 Location Code=FIELD(Location Filter),
                                                                                                                                 Component Forecast=FIELD(Component Forecast)));
                                                   CaptionML=[ENU=Prod. Forecast Quantity (Base);
                                                              ENN=Prod. Forecast Quantity (Base)];
                                                   DecimalPlaces=0:5 }
    { 99000775;;Production Forecast Name;Code10   ;FieldClass=FlowFilter;
                                                   TableRelation="Production Forecast Name";
                                                   CaptionML=[ENU=Production Forecast Name;
                                                              ENN=Production Forecast Name] }
    { 99000776;;Component Forecast ;Boolean       ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Component Forecast;
                                                              ENN=Component Forecast] }
    { 99000777;;Qty. on Prod. Order;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Prod. Order Line"."Remaining Qty. (Base)" WHERE (Status=FILTER(Planned..Released),
                                                                                                                     Item No.=FIELD(No.),
                                                                                                                     Shortcut Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                     Shortcut Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                     Location Code=FIELD(Location Filter),
                                                                                                                     Variant Code=FIELD(Variant Filter),
                                                                                                                     Due Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Qty. on Prod. Order;
                                                              ENN=Qty. on Prod. Order];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 99000778;;Qty. on Component Lines;Decimal   ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Prod. Order Component"."Remaining Qty. (Base)" WHERE (Status=FILTER(Planned..Released),
                                                                                                                          Item No.=FIELD(No.),
                                                                                                                          Shortcut Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                          Shortcut Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                          Location Code=FIELD(Location Filter),
                                                                                                                          Variant Code=FIELD(Variant Filter),
                                                                                                                          Due Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Qty. on Component Lines;
                                                              ENN=Qty. on Component Lines];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 99000875;;Critical           ;Boolean       ;CaptionML=[ENU=Critical;
                                                              ENN=Critical] }
    { 99008500;;Common Item No.    ;Code20        ;CaptionML=[ENU=Common Item No.;
                                                              ENN=Common Item No.] }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Search Description                       }
    {    ;Inventory Posting Group                  }
    {    ;Shelf No.                                }
    {    ;Vendor No.                               }
    {    ;Gen. Prod. Posting Group                 }
    {    ;Low-Level Code                           }
    {    ;Production BOM No.                       }
    {    ;Routing No.                              }
    {    ;Vendor Item No.,Vendor No.               }
    {    ;Common Item No.                          }
    {    ;Service Item Group                       }
    {    ;Cost is Adjusted,Allow Online Adjustment }
    {    ;Description                              }
    {    ;Base Unit of Measure                     }
    {    ;Type                                     }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;No.,Description,Base Unit of Measure,Unit Price }
    { 2   ;Brick               ;No.,Description,Inventory,Unit Price,Base Unit of Measure,Description 2,Picture }
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=You cannot delete %1 %2 because there is at least one outstanding Purchase %3 that includes this item.;ENN=You cannot delete %1 %2 because there is at least one outstanding Purchase %3 that includes this item.';
      CannotDeleteItemIfSalesDocExistErr@1001 : TextConst '@@@=1: Type, 2 Item No. and 3 : Type of document Order,Invoice;ENU=You cannot delete %1 %2 because there is at least one outstanding Sales %3 that includes this item.;ENN=You cannot delete %1 %2 because there is at least one outstanding Sales %3 that includes this item.';
      CannotDeleteItemIfSalesDocExistInvoicingErr@1041 : TextConst '@@@=1: Type, 2: Item No., 3: Description of document, 4: Document number;ENU=You cannot delete %1 %2 because at least one sales document (%3 %4) includes the item.;ENN=You cannot delete %1 %2 because at least one sales document (%3 %4) includes the item.';
      Text002@1002 : TextConst 'ENU=You cannot delete %1 %2 because there are one or more outstanding production orders that include this item.;ENN=You cannot delete %1 %2 because there are one or more outstanding production orders that include this item.';
      Text003@1057 : TextConst 'ENU=Do you want to change %1?;ENN=Do you want to change %1?';
      Text004@1064 : TextConst 'ENU=You cannot delete %1 %2 because there are one or more certified Production BOM that include this item.;ENN=You cannot delete %1 %2 because there are one or more certified Production BOM that include this item.';
      CannotDeleteItemIfProdBOMVersionExistsErr@1084 : TextConst '@@@=%1 - Tablecaption, %2 - No.;ENU=You cannot delete %1 %2 because there are one or more certified production BOM version that include this item.;ENN=You cannot delete %1 %2 because there are one or more certified production BOM version that include this item.';
      Text006@1003 : TextConst 'ENU=Prices including VAT cannot be calculated when %1 is %2.;ENN=Prices including VAT cannot be calculated when %1 is %2.';
      Text007@1004 : TextConst 'ENU=You cannot change %1 because there are one or more ledger entries for this item.;ENN=You cannot change %1 because there are one or more ledger entries for this item.';
      Text008@1005 : TextConst 'ENU=You cannot change %1 because there is at least one outstanding Purchase %2 that include this item.;ENN=You cannot change %1 because there is at least one outstanding Purchase %2 that include this item.';
      Text014@1006 : TextConst 'ENU=You cannot delete %1 %2 because there are one or more production order component lines that include this item with a remaining quantity that is not 0.;ENN=You cannot delete %1 %2 because there are one or more production order component lines that include this item with a remaining quantity that is not 0.';
      Text016@1008 : TextConst 'ENU=You cannot delete %1 %2 because there are one or more outstanding transfer orders that include this item.;ENN=You cannot delete %1 %2 because there are one or more outstanding transfer orders that include this item.';
      Text017@1009 : TextConst 'ENU=You cannot delete %1 %2 because there is at least one outstanding Service %3 that includes this item.;ENN=You cannot delete %1 %2 because there is at least one outstanding Service %3 that includes this item.';
      Text018@1010 : TextConst 'ENU=%1 must be %2 in %3 %4 when %5 is %6.;ENN=%1 must be %2 in %3 %4 when %5 is %6.';
      Text019@1011 : TextConst 'ENU=You cannot change %1 because there are one or more open ledger entries for this item.;ENN=You cannot change %1 because there are one or more open ledger entries for this item.';
      Text020@1012 : TextConst 'ENU="There may be orders and open ledger entries for the item. ";ENN="There may be orders and open ledger entries for the item. "';
      Text021@1013 : TextConst 'ENU=If you change %1 it may affect new orders and entries.\\;ENN=If you change %1 it may affect new orders and entries.\\';
      Text022@1014 : TextConst 'ENU=Do you want to change %1?;ENN=Do you want to change %1?';
      GLSetup@1053 : Record 98;
      InvtSetup@1015 : Record 313;
      Text023@1066 : TextConst 'ENU=You cannot delete %1 %2 because there is at least one %3 that includes this item.;ENN=You cannot delete %1 %2 because there is at least one %3 that includes this item.';
      Text024@1072 : TextConst 'ENU=If you change %1 it may affect existing production orders.\;ENN=If you change %1 it may affect existing production orders.\';
      Text025@1055 : TextConst 'ENU=%1 must be an integer because %2 %3 is set up to use %4.;ENN=%1 must be an integer because %2 %3 is set up to use %4.';
      Text026@1077 : TextConst 'ENU=%1 cannot be changed because the %2 has work in process (WIP). Changing the value may offset the WIP account.;ENN=%1 cannot be changed because the %2 has work in process (WIP). Changing the value may offset the WIP account.';
      Text7380@1058 : TextConst '@@@=If you change the Phys Invt Counting Period Code, the Next Counting Start Date and Next Counting End Date are calculated.\Do you still want to change the Phys Invt Counting Period Code?;ENU=If you change the %1, the %2 and %3 are calculated.\Do you still want to change the %1?;ENN=If you change the %1, the %2 and %3 are calculated.\Do you still want to change the %1?';
      Text7381@1056 : TextConst 'ENU=Cancelled.;ENN=Cancelled.';
      Text99000000@1017 : TextConst 'ENU=The change will not affect existing entries.\;ENN=The change will not affect existing entries.\';
      CommentLine@1018 : Record 97;
      Text99000001@1019 : TextConst 'ENU=If you want to generate %1 for existing entries, you must run a regenerative planning.;ENN=If you want to generate %1 for existing entries, you must run a regenerative planning.';
      ItemVend@1020 : Record 99;
      Text99000002@1021 : TextConst 'ENU=tracking,tracking and action messages;ENN=tracking,tracking and action messages';
      SalesPrice@1022 : Record 7002;
      SalesLineDisc@1059 : Record 7004;
      SalesPrepmtPct@1051 : Record 459;
      PurchPrice@1060 : Record 7012;
      PurchLineDisc@1061 : Record 7014;
      PurchPrepmtPct@1076 : Record 460;
      ItemTranslation@1023 : Record 30;
      BOMComp@1024 : Record 90;
      VATPostingSetup@1027 : Record 325;
      ExtTextHeader@1028 : Record 279;
      GenProdPostingGrp@1029 : Record 251;
      ItemUnitOfMeasure@1030 : Record 5404;
      ItemVariant@1031 : Record 5401;
      ItemJnlLine@1007 : Record 83;
      ProdOrderLine@1032 : Record 5406;
      ProdOrderComp@1033 : Record 5407;
      PlanningAssignment@1035 : Record 99000850;
      SKU@1036 : Record 5700;
      ItemTrackingCode@1037 : Record 6502;
      ItemTrackingCode2@1038 : Record 6502;
      ServInvLine@1039 : Record 5902;
      ItemSub@1040 : Record 5715;
      TransLine@1042 : Record 5741;
      Vend@1016 : Record 23;
      NonstockItem@1034 : Record 5718;
      ProdBOMHeader@1062 : Record 99000771;
      ProdBOMLine@1063 : Record 99000772;
      ItemIdent@1065 : Record 7704;
      RequisitionLine@1067 : Record 246;
      ItemBudgetEntry@1075 : Record 7134;
      ItemAnalysisViewEntry@1074 : Record 7154;
      ItemAnalysisBudgViewEntry@1073 : Record 7156;
      TroubleshSetup@1050 : Record 5945;
      ServiceItem@1068 : Record 5940;
      ServiceContractLine@1069 : Record 5964;
      ServiceItemComponent@1070 : Record 5941;
      NoSeriesMgt@1043 : Codeunit 396;
      MoveEntries@1044 : Codeunit 361;
      DimMgt@1045 : Codeunit 408;
      CatalogItemMgt@1046 : Codeunit 5703;
      ItemCostMgt@1047 : Codeunit 5804;
      ResSkillMgt@1071 : Codeunit 5931;
      CalendarMgt@1054 : Codeunit 7600;
      LeadTimeMgt@1025 : Codeunit 5404;
      ApprovalsMgmt@1085 : Codeunit 1535;
      HasInvtSetup@1049 : Boolean;
      GLSetupRead@1052 : Boolean;
      Text027@1078 : TextConst '@@@=starts with "Rounding Precision";ENU=must be greater than 0.;ENN=must be greater than 0.';
      Text028@1080 : TextConst 'ENU=You cannot perform this action because entries for item %1 are unapplied in %2 by user %3.;ENN=You cannot perform this action because entries for item %1 are unapplied in %2 by user %3.';
      CannotChangeFieldErr@1079 : TextConst '@@@="%1 = Field Caption, %2 = Item Table Name, %3 = Item No., %4 = Table Name";ENU=You cannot change the %1 field on %2 %3 because at least one %4 exists for this item.;ENN=You cannot change the %1 field on %2 %3 because at least one %4 exists for this item.';
      BaseUnitOfMeasureQtyMustBeOneErr@1081 : TextConst '@@@="%1 Name of Unit of measure (e.g. BOX, PCS, KG...), %2 Qty. of %1 per base unit of measure ";ENU=The quantity per base unit of measure must be 1. %1 is set up with %2 per unit of measure.\\You can change this setup in the Item Units of Measure window.;ENN=The quantity per base unit of measure must be 1. %1 is set up with %2 per unit of measure.\\You can change this setup in the Item Units of Measure window.';
      OpenDocumentTrackingErr@1082 : TextConst 'ENU="You cannot change ""Item Tracking Code"" because there is at least one open document that includes this item with specified tracking: Source Type = %1, Document No. = %2.";ENN="You cannot change ""Item Tracking Code"" because there is at least one open document that includes this item with specified tracking: Source Type = %1, Document No. = %2."';
      SelectItemErr@1083 : TextConst 'ENU=You must select an existing item.;ENN=You must select an existing item.';
      CreateNewItemTxt@1187 : TextConst '@@@="%1 is the name to be used to create the customer. ";ENU=Create a new item card for %1.;ENN=Create a new item card for %1.';
      ItemNotRegisteredTxt@1186 : TextConst 'ENU=This item is not registered. To continue, choose one of the following options:;ENN=This item is not registered. To continue, choose one of the following options:';
      SelectItemTxt@1185 : TextConst 'ENU=Select an existing item.;ENN=Select an existing item.';
      UnitOfMeasureNotExistErr@1026 : TextConst '@@@="%1 = Code of Unit of measure";ENU=The Unit of Measure with Code %1 does not exist.;ENN=The Unit of Measure with Code %1 does not exist.';
      ItemLedgEntryTableCaptionTxt@1048 : TextConst 'ENU=Item Ledger Entry;ENN=Item Ledger Entry';

    LOCAL PROCEDURE DeleteRelatedData@12();
    VAR
      BinContent@1002 : Record 7302;
      ItemCrossReference@1001 : Record 5717;
      SocialListeningSearchTopic@1000 : Record 871;
      MyItem@1003 : Record 9152;
      ItemAttributeValueMapping@1004 : Record 7505;
    BEGIN
      ItemBudgetEntry.SETCURRENTKEY("Analysis Area","Budget Name","Item No.");
      ItemBudgetEntry.SETRANGE("Item No.","No.");
      ItemBudgetEntry.DELETEALL(TRUE);

      ItemSub.RESET;
      ItemSub.SETRANGE(Type,ItemSub.Type::Item);
      ItemSub.SETRANGE("No.","No.");
      ItemSub.DELETEALL;

      ItemSub.RESET;
      ItemSub.SETRANGE("Substitute Type",ItemSub."Substitute Type"::Item);
      ItemSub.SETRANGE("Substitute No.","No.");
      ItemSub.DELETEALL;

      SKU.RESET;
      SKU.SETCURRENTKEY("Item No.");
      SKU.SETRANGE("Item No.","No.");
      SKU.DELETEALL;

      CatalogItemMgt.NonstockItemDel(Rec);
      CommentLine.SETRANGE("Table Name",CommentLine."Table Name"::Item);
      CommentLine.SETRANGE("No.","No.");
      CommentLine.DELETEALL;

      ItemVend.SETCURRENTKEY("Item No.");
      ItemVend.SETRANGE("Item No.","No.");
      ItemVend.DELETEALL;

      SalesPrice.SETRANGE("Item No.","No.");
      SalesPrice.DELETEALL;

      SalesLineDisc.SETRANGE(Type,SalesLineDisc.Type::Item);
      SalesLineDisc.SETRANGE(Code,"No.");
      SalesLineDisc.DELETEALL;

      SalesPrepmtPct.SETRANGE("Item No.","No.");
      SalesPrepmtPct.DELETEALL;

      PurchPrice.SETRANGE("Item No.","No.");
      PurchPrice.DELETEALL;

      PurchLineDisc.SETRANGE("Item No.","No.");
      PurchLineDisc.DELETEALL;

      PurchPrepmtPct.SETRANGE("Item No.","No.");
      PurchPrepmtPct.DELETEALL;

      ItemTranslation.SETRANGE("Item No.","No.");
      ItemTranslation.DELETEALL;

      ItemUnitOfMeasure.SETRANGE("Item No.","No.");
      ItemUnitOfMeasure.DELETEALL;

      ItemVariant.SETRANGE("Item No.","No.");
      ItemVariant.DELETEALL;

      ExtTextHeader.SETRANGE("Table Name",ExtTextHeader."Table Name"::Item);
      ExtTextHeader.SETRANGE("No.","No.");
      ExtTextHeader.DELETEALL(TRUE);

      ItemAnalysisViewEntry.SETRANGE("Item No.","No.");
      ItemAnalysisViewEntry.DELETEALL;

      ItemAnalysisBudgViewEntry.SETRANGE("Item No.","No.");
      ItemAnalysisBudgViewEntry.DELETEALL;

      PlanningAssignment.SETRANGE("Item No.","No.");
      PlanningAssignment.DELETEALL;

      BOMComp.RESET;
      BOMComp.SETRANGE("Parent Item No.","No.");
      BOMComp.DELETEALL;

      TroubleshSetup.RESET;
      TroubleshSetup.SETRANGE(Type,TroubleshSetup.Type::Item);
      TroubleshSetup.SETRANGE("No.","No.");
      TroubleshSetup.DELETEALL;

      ResSkillMgt.DeleteItemResSkills("No.");
      DimMgt.DeleteDefaultDim(DATABASE::Item,"No.");

      ItemIdent.RESET;
      ItemIdent.SETCURRENTKEY("Item No.");
      ItemIdent.SETRANGE("Item No.","No.");
      ItemIdent.DELETEALL;

      ServiceItemComponent.RESET;
      ServiceItemComponent.SETRANGE(Type,ServiceItemComponent.Type::Item);
      ServiceItemComponent.SETRANGE("No.","No.");
      ServiceItemComponent.MODIFYALL("No.",'');

      BinContent.SETCURRENTKEY("Item No.");
      BinContent.SETRANGE("Item No.","No.");
      BinContent.DELETEALL;

      ItemCrossReference.SETRANGE("Item No.","No.");
      ItemCrossReference.DELETEALL;

      MyItem.SETRANGE("Item No.","No.");
      MyItem.DELETEALL;

      IF NOT SocialListeningSearchTopic.ISEMPTY THEN BEGIN
        SocialListeningSearchTopic.FindSearchTopic(SocialListeningSearchTopic."Source Type"::Item,"No.");
        SocialListeningSearchTopic.DELETEALL;
      END;

      ItemAttributeValueMapping.RESET;
      ItemAttributeValueMapping.SETRANGE("Table ID",DATABASE::Item);
      ItemAttributeValueMapping.SETRANGE("No.","No.");
      ItemAttributeValueMapping.DELETEALL;

      OnAfterDeleteRelatedData(Rec);
    END;

    [External]
    PROCEDURE AssistEdit@2() : Boolean;
    BEGIN
      GetInvtSetup;
      InvtSetup.TESTFIELD("Item Nos.");
      IF NoSeriesMgt.SelectSeries(InvtSetup."Item Nos.",xRec."No. Series","No. Series") THEN BEGIN
        NoSeriesMgt.SetSeries("No.");
        EXIT(TRUE);
      END;
    END;

    [External]
    PROCEDURE FindItemVend@5(VAR ItemVend@1000 : Record 99;LocationCode@1002 : Code[10]);
    VAR
      GetPlanningParameters@1004 : Codeunit 99000855;
    BEGIN
      TESTFIELD("No.");
      ItemVend.RESET;
      ItemVend.SETRANGE("Item No.","No.");
      ItemVend.SETRANGE("Vendor No.",ItemVend."Vendor No.");
      ItemVend.SETRANGE("Variant Code",ItemVend."Variant Code");

      IF NOT ItemVend.FIND('+') THEN BEGIN
        ItemVend."Item No." := "No.";
        ItemVend."Vendor Item No." := '';
        GetPlanningParameters.AtSKU(SKU,"No.",ItemVend."Variant Code",LocationCode);
        IF ItemVend."Vendor No." = '' THEN
          ItemVend."Vendor No." := SKU."Vendor No.";
        IF ItemVend."Vendor Item No." = '' THEN
          ItemVend."Vendor Item No." := SKU."Vendor Item No.";
        ItemVend."Lead Time Calculation" := SKU."Lead Time Calculation";
      END;
      IF FORMAT(ItemVend."Lead Time Calculation") = '' THEN BEGIN
        GetPlanningParameters.AtSKU(SKU,"No.",ItemVend."Variant Code",LocationCode);
        ItemVend."Lead Time Calculation" := SKU."Lead Time Calculation";
        IF FORMAT(ItemVend."Lead Time Calculation") = '' THEN
          IF Vend.GET(ItemVend."Vendor No.") THEN
            ItemVend."Lead Time Calculation" := Vend."Lead Time Calculation";
      END;
      ItemVend.RESET;
    END;

    [External]
    PROCEDURE ValidateShortcutDimCode@8(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.ValidateDimValueCode(FieldNumber,ShortcutDimCode);
      IF NOT ISTEMPORARY THEN BEGIN
        DimMgt.SaveDefaultDim(DATABASE::Item,"No.",FieldNumber,ShortcutDimCode);
        MODIFY;
      END;
    END;

    [External]
    PROCEDURE TestNoEntriesExist@1006(CurrentFieldName@1000 : Text[100]);
    VAR
      ItemLedgEntry@1001 : Record 32;
      PurchaseLine@1002 : Record 39;
      IsHandled@1003 : Boolean;
    BEGIN
      IF "No." = '' THEN
        EXIT;

      IsHandled := FALSE;
      OnBeforeTestNoItemLedgEntiesExist(Rec,CurrentFieldName,IsHandled);
      IF NOT IsHandled THEN BEGIN
        ItemLedgEntry.SETCURRENTKEY("Item No.");
        ItemLedgEntry.SETRANGE("Item No.","No.");
        IF NOT ItemLedgEntry.ISEMPTY THEN
          ERROR(Text007,CurrentFieldName);
      END;

      IsHandled := FALSE;
      OnBeforeTestNoPurchLinesExist(Rec,CurrentFieldName,IsHandled);
      IF NOT IsHandled THEN BEGIN
        PurchaseLine.SETCURRENTKEY("Document Type",Type,"No.");
        PurchaseLine.SETFILTER(
          "Document Type",'%1|%2',
          PurchaseLine."Document Type"::Order,
          PurchaseLine."Document Type"::"Return Order");
        PurchaseLine.SETRANGE(Type,PurchaseLine.Type::Item);
        PurchaseLine.SETRANGE("No.","No.");
        IF PurchaseLine.FINDFIRST THEN
          ERROR(Text008,CurrentFieldName,PurchaseLine."Document Type");
      END;
    END;

    [External]
    PROCEDURE TestNoOpenEntriesExist@4(CurrentFieldName@1000 : Text[100]);
    VAR
      ItemLedgEntry@1001 : Record 32;
    BEGIN
      ItemLedgEntry.SETCURRENTKEY("Item No.",Open);
      ItemLedgEntry.SETRANGE("Item No.","No.");
      ItemLedgEntry.SETRANGE(Open,TRUE);
      IF NOT ItemLedgEntry.ISEMPTY THEN
        ERROR(
          Text019,
          CurrentFieldName);
    END;

    LOCAL PROCEDURE TestNoOpenDocumentsWithTrackingExist@42();
    VAR
      TrackingSpecification@1000 : Record 336;
      ReservationEntry@1001 : Record 337;
      RecRef@1004 : RecordRef;
      SourceType@1002 : Integer;
      SourceID@1003 : Code[20];
    BEGIN
      IF ItemTrackingCode2.Code = '' THEN
        EXIT;

      TrackingSpecification.SETRANGE("Item No.","No.");
      IF TrackingSpecification.FINDFIRST THEN BEGIN
        SourceType := TrackingSpecification."Source Type";
        SourceID := TrackingSpecification."Source ID";
      END ELSE BEGIN
        ReservationEntry.SETRANGE("Item No.","No.");
        ReservationEntry.SETFILTER("Item Tracking",'<>%1',ReservationEntry."Item Tracking"::None);
        IF ReservationEntry.FINDFIRST THEN BEGIN
          SourceType := ReservationEntry."Source Type";
          SourceID := ReservationEntry."Source ID";
        END;
      END;

      IF SourceType = 0 THEN
        EXIT;

      RecRef.OPEN(SourceType);
      ERROR(OpenDocumentTrackingErr,RecRef.CAPTION,SourceID);
    END;

    [External]
    PROCEDURE ItemSKUGet@11(VAR Item@1000 : Record 27;LocationCode@1001 : Code[10];VariantCode@1002 : Code[10]);
    VAR
      SKU@1003 : Record 5700;
    BEGIN
      IF Item.GET("No.") THEN BEGIN
        IF SKU.GET(LocationCode,Item."No.",VariantCode) THEN
          Item."Shelf No." := SKU."Shelf No.";
      END;
    END;

    LOCAL PROCEDURE GetInvtSetup@14();
    BEGIN
      IF NOT HasInvtSetup THEN BEGIN
        InvtSetup.GET;
        HasInvtSetup := TRUE;
      END;
    END;

    [External]
    PROCEDURE IsMfgItem@1() : Boolean;
    BEGIN
      EXIT("Replenishment System" = "Replenishment System"::"Prod. Order");
    END;

    [External]
    PROCEDURE IsAssemblyItem@24() : Boolean;
    BEGIN
      EXIT("Replenishment System" = "Replenishment System"::Assembly);
    END;

    [External]
    PROCEDURE HasBOM@18() : Boolean;
    BEGIN
      CALCFIELDS("Assembly BOM");
      EXIT("Assembly BOM" OR ("Production BOM No." <> ''));
    END;

    LOCAL PROCEDURE GetGLSetup@6();
    BEGIN
      IF NOT GLSetupRead THEN
        GLSetup.GET;
      GLSetupRead := TRUE;
    END;

    LOCAL PROCEDURE ProdOrderExist@7() : Boolean;
    BEGIN
      ProdOrderLine.SETCURRENTKEY(Status,"Item No.");
      ProdOrderLine.SETFILTER(Status,'..%1',ProdOrderLine.Status::Released);
      ProdOrderLine.SETRANGE("Item No.","No.");
      IF NOT ProdOrderLine.ISEMPTY THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    [External]
    PROCEDURE CheckSerialNoQty@15(ItemNo@1000 : Code[20];FieldName@1001 : Text[30];Quantity@1002 : Decimal);
    VAR
      ItemRec@1003 : Record 27;
      ItemTrackingCode3@1004 : Record 6502;
    BEGIN
      IF Quantity = ROUND(Quantity,1) THEN
        EXIT;
      IF NOT ItemRec.GET(ItemNo) THEN
        EXIT;
      IF ItemRec."Item Tracking Code" = '' THEN
        EXIT;
      IF NOT ItemTrackingCode3.GET(ItemRec."Item Tracking Code") THEN
        EXIT;
      IF ItemTrackingCode3."SN Specific Tracking" THEN
        ERROR(Text025,
          FieldName,
          TABLECAPTION,
          ItemNo,
          ItemTrackingCode3.FIELDCAPTION("SN Specific Tracking"));
    END;

    LOCAL PROCEDURE CheckForProductionOutput@17(ItemNo@1000 : Code[20]);
    VAR
      ItemLedgEntry@1001 : Record 32;
    BEGIN
      CLEAR(ItemLedgEntry);
      ItemLedgEntry.SETCURRENTKEY("Item No.","Entry Type","Variant Code","Drop Shipment","Location Code","Posting Date");
      ItemLedgEntry.SETRANGE("Item No.",ItemNo);
      ItemLedgEntry.SETRANGE("Entry Type",ItemLedgEntry."Entry Type"::Output);
      IF NOT ItemLedgEntry.ISEMPTY THEN
        ERROR(Text026,FIELDCAPTION("Inventory Value Zero"),TABLECAPTION);
    END;

    [External]
    PROCEDURE CheckBlockedByApplWorksheet@19();
    VAR
      ApplicationWorksheet@1000 : Page 521;
    BEGIN
      IF "Application Wksh. User ID" <> '' THEN
        ERROR(Text028,"No.",ApplicationWorksheet.CAPTION,"Application Wksh. User ID");
    END;

    [External]
    PROCEDURE ShowTimelineFromItem@20(VAR Item@1000 : Record 27);
    VAR
      ItemAvailByTimeline@1001 : Page 5540;
    BEGIN
      ItemAvailByTimeline.SetItem(Item);
      ItemAvailByTimeline.RUN;
    END;

    [External]
    PROCEDURE ShowTimelineFromSKU@21(ItemNo@1000 : Code[20];LocationCode@1001 : Code[10];VariantCode@1002 : Code[10]);
    VAR
      Item@1003 : Record 27;
    BEGIN
      Item.GET(ItemNo);
      Item.SETRANGE("No.",Item."No.");
      Item.SETRANGE("Variant Filter",VariantCode);
      Item.SETRANGE("Location Filter",LocationCode);
      ShowTimelineFromItem(Item);
    END;

    [External]
    PROCEDURE CheckJournalsAndWorksheets@22(CurrFieldNo@1001 : Integer);
    BEGIN
      CheckItemJnlLine(CurrFieldNo);
      CheckStdCostWksh(CurrFieldNo);
      CheckReqLine(CurrFieldNo);
    END;

    LOCAL PROCEDURE CheckItemJnlLine@44(CurrFieldNo@1000 : Integer);
    BEGIN
      ItemJnlLine.SETRANGE("Item No.","No.");
      IF NOT ItemJnlLine.ISEMPTY THEN BEGIN
        IF CurrFieldNo = 0 THEN
          ERROR(Text023,TABLECAPTION,"No.",ItemJnlLine.TABLECAPTION);
        IF CurrFieldNo = FIELDNO(Type) THEN
          ERROR(CannotChangeFieldErr,FIELDCAPTION(Type),TABLECAPTION,"No.",ItemJnlLine.TABLECAPTION);
      END;
    END;

    LOCAL PROCEDURE CheckStdCostWksh@45(CurrFieldNo@1000 : Integer);
    VAR
      StdCostWksh@1001 : Record 5841;
    BEGIN
      StdCostWksh.RESET;
      StdCostWksh.SETRANGE(Type,StdCostWksh.Type::Item);
      StdCostWksh.SETRANGE("No.","No.");
      IF NOT StdCostWksh.ISEMPTY THEN
        IF CurrFieldNo = 0 THEN
          ERROR(Text023,TABLECAPTION,"No.",StdCostWksh.TABLECAPTION);
    END;

    LOCAL PROCEDURE CheckReqLine@46(CurrFieldNo@1000 : Integer);
    BEGIN
      RequisitionLine.SETCURRENTKEY(Type,"No.");
      RequisitionLine.SETRANGE(Type,RequisitionLine.Type::Item);
      RequisitionLine.SETRANGE("No.","No.");
      IF NOT RequisitionLine.ISEMPTY THEN BEGIN
        IF CurrFieldNo = 0 THEN
          ERROR(Text023,TABLECAPTION,"No.",RequisitionLine.TABLECAPTION);
        IF CurrFieldNo = FIELDNO(Type) THEN
          ERROR(CannotChangeFieldErr,FIELDCAPTION(Type),TABLECAPTION,"No.",RequisitionLine.TABLECAPTION);
      END;
    END;

    [External]
    PROCEDURE CheckDocuments@23(CurrFieldNo@1002 : Integer);
    BEGIN
      IF "No." = '' THEN
        EXIT;

      CheckBOM(CurrFieldNo);
      CheckPurchLine(CurrFieldNo);
      CheckSalesLine(CurrFieldNo);
      CheckProdOrderLine(CurrFieldNo);
      CheckProdOrderCompLine(CurrFieldNo);
      CheckPlanningCompLine(CurrFieldNo);
      CheckTransLine(CurrFieldNo);
      CheckServLine(CurrFieldNo);
      CheckProdBOMLine(CurrFieldNo);
      CheckServContractLine(CurrFieldNo);
      CheckAsmHeader(CurrFieldNo);
      CheckAsmLine(CurrFieldNo);
      CheckJobPlanningLine(CurrFieldNo);

      OnAfterCheckDocuments(Rec,xRec,CurrFieldNo);
    END;

    LOCAL PROCEDURE CheckBOM@25(CurrFieldNo@1000 : Integer);
    BEGIN
      BOMComp.RESET;
      BOMComp.SETCURRENTKEY(Type,"No.");
      BOMComp.SETRANGE(Type,BOMComp.Type::Item);
      BOMComp.SETRANGE("No.","No.");
      IF NOT BOMComp.ISEMPTY THEN BEGIN
        IF CurrFieldNo = 0 THEN
          ERROR(Text023,TABLECAPTION,"No.",BOMComp.TABLECAPTION);
        IF CurrFieldNo = FIELDNO(Type) THEN
          ERROR(CannotChangeFieldErr,FIELDCAPTION(Type),TABLECAPTION,"No.",BOMComp.TABLECAPTION);
      END;
    END;

    LOCAL PROCEDURE CheckPurchLine@26(CurrFieldNo@1000 : Integer);
    VAR
      PurchaseLine@1001 : Record 39;
    BEGIN
      PurchaseLine.SETCURRENTKEY(Type,"No.");
      PurchaseLine.SETRANGE(Type,PurchaseLine.Type::Item);
      PurchaseLine.SETRANGE("No.","No.");
      IF PurchaseLine.FINDFIRST THEN BEGIN
        IF CurrFieldNo = 0 THEN
          ERROR(Text000,TABLECAPTION,"No.",PurchaseLine."Document Type");
        IF CurrFieldNo = FIELDNO(Type) THEN
          ERROR(CannotChangeFieldErr,FIELDCAPTION(Type),TABLECAPTION,"No.",PurchaseLine.TABLECAPTION);
      END;
    END;

    LOCAL PROCEDURE CheckSalesLine@28(CurrFieldNo@1000 : Integer);
    VAR
      SalesLine@1001 : Record 37;
      IdentityManagement@1002 : Codeunit 9801;
    BEGIN
      SalesLine.SETCURRENTKEY(Type,"No.");
      SalesLine.SETRANGE(Type,SalesLine.Type::Item);
      SalesLine.SETRANGE("No.","No.");
      IF SalesLine.FINDFIRST THEN BEGIN
        IF CurrFieldNo = 0 THEN BEGIN
          IF IdentityManagement.IsInvAppId THEN
            ERROR(CannotDeleteItemIfSalesDocExistInvoicingErr,TABLECAPTION,Description,
              SalesLine.GetDocumentTypeDescription,SalesLine."Document No.");
          ERROR(CannotDeleteItemIfSalesDocExistErr,TABLECAPTION,"No.",SalesLine."Document Type");
        END;
        IF CurrFieldNo = FIELDNO(Type) THEN
          ERROR(CannotChangeFieldErr,FIELDCAPTION(Type),TABLECAPTION,"No.",SalesLine.TABLECAPTION);
      END;
    END;

    LOCAL PROCEDURE CheckProdOrderLine@39(CurrFieldNo@1000 : Integer);
    BEGIN
      IF ProdOrderExist THEN BEGIN
        IF CurrFieldNo = 0 THEN
          ERROR(Text002,TABLECAPTION,"No.");
        IF CurrFieldNo = FIELDNO(Type) THEN
          ERROR(CannotChangeFieldErr,FIELDCAPTION(Type),TABLECAPTION,"No.",ProdOrderLine.TABLECAPTION);
      END;
    END;

    LOCAL PROCEDURE CheckProdOrderCompLine@31(CurrFieldNo@1000 : Integer);
    BEGIN
      ProdOrderComp.SETCURRENTKEY(Status,"Item No.");
      ProdOrderComp.SETFILTER(Status,'..%1',ProdOrderComp.Status::Released);
      ProdOrderComp.SETRANGE("Item No.","No.");
      IF NOT ProdOrderComp.ISEMPTY THEN BEGIN
        IF CurrFieldNo = 0 THEN
          ERROR(Text014,TABLECAPTION,"No.");
        IF CurrFieldNo = FIELDNO(Type) THEN
          ERROR(CannotChangeFieldErr,FIELDCAPTION(Type),TABLECAPTION,"No.",ProdOrderComp.TABLECAPTION);
      END;
    END;

    LOCAL PROCEDURE CheckPlanningCompLine@38(CurrFieldNo@1000 : Integer);
    VAR
      PlanningComponent@1005 : Record 99000829;
    BEGIN
      PlanningComponent.SETCURRENTKEY("Item No.","Variant Code","Location Code","Due Date","Planning Line Origin");
      PlanningComponent.SETRANGE("Item No.","No.");
      IF NOT PlanningComponent.ISEMPTY THEN BEGIN
        IF CurrFieldNo = 0 THEN
          ERROR(Text023,TABLECAPTION,"No.",PlanningComponent.TABLECAPTION);
        IF CurrFieldNo = FIELDNO(Type) THEN
          ERROR(CannotChangeFieldErr,FIELDCAPTION(Type),TABLECAPTION,"No.",PlanningComponent.TABLECAPTION);
      END;
    END;

    LOCAL PROCEDURE CheckTransLine@37(CurrFieldNo@1000 : Integer);
    BEGIN
      TransLine.SETCURRENTKEY("Item No.");
      TransLine.SETRANGE("Item No.","No.");
      IF NOT TransLine.ISEMPTY THEN BEGIN
        IF CurrFieldNo = 0 THEN
          ERROR(Text016,TABLECAPTION,"No.");
        IF CurrFieldNo = FIELDNO(Type) THEN
          ERROR(CannotChangeFieldErr,FIELDCAPTION(Type),TABLECAPTION,"No.",TransLine.TABLECAPTION);
      END;
    END;

    LOCAL PROCEDURE CheckServLine@36(CurrFieldNo@1000 : Integer);
    BEGIN
      ServInvLine.RESET;
      ServInvLine.SETCURRENTKEY(Type,"No.");
      ServInvLine.SETRANGE(Type,ServInvLine.Type::Item);
      ServInvLine.SETRANGE("No.","No.");
      IF NOT ServInvLine.ISEMPTY THEN BEGIN
        IF CurrFieldNo = 0 THEN
          ERROR(Text017,TABLECAPTION,"No.",ServInvLine."Document Type");
        IF CurrFieldNo = FIELDNO(Type) THEN
          ERROR(CannotChangeFieldErr,FIELDCAPTION(Type),TABLECAPTION,"No.",ServInvLine.TABLECAPTION);
      END;
    END;

    LOCAL PROCEDURE CheckProdBOMLine@30(CurrFieldNo@1000 : Integer);
    VAR
      ProductionBOMVersion@1001 : Record 99000779;
    BEGIN
      ProdBOMLine.RESET;
      ProdBOMLine.SETCURRENTKEY(Type,"No.");
      ProdBOMLine.SETRANGE(Type,ProdBOMLine.Type::Item);
      ProdBOMLine.SETRANGE("No.","No.");
      IF ProdBOMLine.FIND('-') THEN BEGIN
        IF CurrFieldNo = FIELDNO(Type) THEN
          ERROR(CannotChangeFieldErr,FIELDCAPTION(Type),TABLECAPTION,"No.",ProdBOMLine.TABLECAPTION);
        IF CurrFieldNo = 0 THEN
          REPEAT
            IF ProdBOMHeader.GET(ProdBOMLine."Production BOM No.") AND
               (ProdBOMHeader.Status = ProdBOMHeader.Status::Certified)
            THEN
              ERROR(Text004,TABLECAPTION,"No.");
            IF ProductionBOMVersion.GET(ProdBOMLine."Production BOM No.",ProdBOMLine."Version Code") AND
               (ProductionBOMVersion.Status = ProductionBOMVersion.Status::Certified)
            THEN
              ERROR(CannotDeleteItemIfProdBOMVersionExistsErr,TABLECAPTION,"No.");
          UNTIL ProdBOMLine.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CheckServContractLine@35(CurrFieldNo@1000 : Integer);
    BEGIN
      ServiceContractLine.RESET;
      ServiceContractLine.SETRANGE("Item No.","No.");
      IF NOT ServiceContractLine.ISEMPTY THEN BEGIN
        IF CurrFieldNo = 0 THEN
          ERROR(Text023,TABLECAPTION,"No.",ServiceContractLine.TABLECAPTION);
        IF CurrFieldNo = FIELDNO(Type) THEN
          ERROR(CannotChangeFieldErr,FIELDCAPTION(Type),TABLECAPTION,"No.",ServiceContractLine.TABLECAPTION);
      END;
    END;

    LOCAL PROCEDURE CheckAsmHeader@32(CurrFieldNo@1000 : Integer);
    VAR
      AsmHeader@1004 : Record 900;
    BEGIN
      AsmHeader.SETCURRENTKEY("Document Type","Item No.");
      AsmHeader.SETRANGE("Item No.","No.");
      IF NOT AsmHeader.ISEMPTY THEN BEGIN
        IF CurrFieldNo = 0 THEN
          ERROR(Text023,TABLECAPTION,"No.",AsmHeader.TABLECAPTION);
        IF CurrFieldNo = FIELDNO(Type) THEN
          ERROR(CannotChangeFieldErr,FIELDCAPTION(Type),TABLECAPTION,"No.",AsmHeader.TABLECAPTION);
      END;
    END;

    LOCAL PROCEDURE CheckAsmLine@27(CurrFieldNo@1000 : Integer);
    VAR
      AsmLine@1003 : Record 901;
    BEGIN
      AsmLine.SETCURRENTKEY(Type,"No.");
      AsmLine.SETRANGE(Type,AsmLine.Type::Item);
      AsmLine.SETRANGE("No.","No.");
      IF NOT AsmLine.ISEMPTY THEN BEGIN
        IF CurrFieldNo = 0 THEN
          ERROR(Text023,TABLECAPTION,"No.",AsmLine.TABLECAPTION);
        IF CurrFieldNo = FIELDNO(Type) THEN
          ERROR(CannotChangeFieldErr,FIELDCAPTION(Type),TABLECAPTION,"No.",AsmLine.TABLECAPTION);
      END;
    END;

    [External]
    PROCEDURE PreventNegativeInventory@33() : Boolean;
    VAR
      InventorySetup@1000 : Record 313;
    BEGIN
      CASE "Prevent Negative Inventory" OF
        "Prevent Negative Inventory"::Yes:
          EXIT(TRUE);
        "Prevent Negative Inventory"::No:
          EXIT(FALSE);
        "Prevent Negative Inventory"::Default:
          BEGIN
            InventorySetup.GET;
            EXIT(InventorySetup."Prevent Negative Inventory");
          END;
      END;
    END;

    LOCAL PROCEDURE CheckJobPlanningLine@34(CurrFieldNo@1000 : Integer);
    VAR
      JobPlanningLine@1001 : Record 1003;
    BEGIN
      JobPlanningLine.SETCURRENTKEY(Type,"No.");
      JobPlanningLine.SETRANGE(Type,JobPlanningLine.Type::Item);
      JobPlanningLine.SETRANGE("No.","No.");
      IF NOT JobPlanningLine.ISEMPTY THEN BEGIN
        IF CurrFieldNo = 0 THEN
          ERROR(Text023,TABLECAPTION,"No.",JobPlanningLine.TABLECAPTION);
        IF CurrFieldNo = FIELDNO(Type) THEN
          ERROR(CannotChangeFieldErr,FIELDCAPTION(Type),TABLECAPTION,"No.",JobPlanningLine.TABLECAPTION);
      END;
    END;

    LOCAL PROCEDURE CalcVAT@40() : Decimal;
    BEGIN
      IF "Price Includes VAT" THEN BEGIN
        VATPostingSetup.GET("VAT Bus. Posting Gr. (Price)","VAT Prod. Posting Group");
        CASE VATPostingSetup."VAT Calculation Type" OF
          VATPostingSetup."VAT Calculation Type"::"Reverse Charge VAT":
            VATPostingSetup."VAT %" := 0;
          VATPostingSetup."VAT Calculation Type"::"Sales Tax":
            ERROR(
              Text006,
              VATPostingSetup.FIELDCAPTION("VAT Calculation Type"),
              VATPostingSetup."VAT Calculation Type");
        END;
      END ELSE
        CLEAR(VATPostingSetup);

      EXIT(VATPostingSetup."VAT %" / 100);
    END;

    [External]
    PROCEDURE CalcUnitPriceExclVAT@41() : Decimal;
    BEGIN
      GetGLSetup;
      IF 1 + CalcVAT = 0 THEN
        EXIT(0);
      EXIT(ROUND("Unit Price" / (1 + CalcVAT),GLSetup."Unit-Amount Rounding Precision"));
    END;

    [External]
    PROCEDURE GetItemNo@10(ItemText@1000 : Text) : Code[20];
    VAR
      ItemNo@1001 : Text[50];
    BEGIN
      TryGetItemNo(ItemNo,ItemText,TRUE);
      EXIT(COPYSTR(ItemNo,1,MAXSTRLEN("No.")));
    END;

    [External]
    PROCEDURE TryGetItemNo@9(VAR ReturnValue@1007 : Text[50];ItemText@1000 : Text;DefaultCreate@1006 : Boolean) : Boolean;
    BEGIN
      InvtSetup.GET;
      EXIT(TryGetItemNoOpenCard(ReturnValue,ItemText,DefaultCreate,TRUE,NOT InvtSetup."Skip Prompt to Create Item"));
    END;

    [External]
    PROCEDURE TryGetItemNoOpenCard@43(VAR ReturnValue@1007 : Text;ItemText@1000 : Text;DefaultCreate@1006 : Boolean;ShowItemCard@1008 : Boolean;ShowCreateItemOption@1011 : Boolean) : Boolean;
    VAR
      ItemView@1012 : Record 27;
    BEGIN
      ItemView.SETRANGE(Blocked,FALSE);
      EXIT(TryGetItemNoOpenCardWithView(ReturnValue,ItemText,DefaultCreate,ShowItemCard,ShowCreateItemOption,ItemView.GETVIEW));
    END;

    PROCEDURE TryGetItemNoOpenCardWithView@64(VAR ReturnValue@1007 : Text;ItemText@1000 : Text;DefaultCreate@1006 : Boolean;ShowItemCard@1008 : Boolean;ShowCreateItemOption@1011 : Boolean;View@1013 : Text) : Boolean;
    VAR
      Item@1001 : Record 27;
      SalesLine@1004 : Record 37;
      FindRecordMgt@1009 : Codeunit 703;
      ItemNo@1002 : Code[20];
      ItemWithoutQuote@1005 : Text;
      ItemFilterContains@1003 : Text;
      FoundRecordCount@1010 : Integer;
    BEGIN
      ReturnValue := COPYSTR(ItemText,1,MAXSTRLEN(ReturnValue));
      IF ItemText = '' THEN
        EXIT(DefaultCreate);

      FoundRecordCount := FindRecordMgt.FindRecordByDescriptionAndView(ReturnValue,SalesLine.Type::Item,ItemText,View);

      IF FoundRecordCount = 1 THEN
        EXIT(TRUE);

      ReturnValue := COPYSTR(ItemText,1,MAXSTRLEN(ReturnValue));
      IF FoundRecordCount = 0 THEN BEGIN
        IF NOT DefaultCreate THEN
          EXIT(FALSE);

        IF NOT GUIALLOWED THEN
          ERROR(SelectItemErr);

        IF Item.WRITEPERMISSION THEN
          IF ShowCreateItemOption THEN
            CASE STRMENU(
                   STRSUBSTNO('%1,%2',STRSUBSTNO(CreateNewItemTxt,CONVERTSTR(ItemText,',','.')),SelectItemTxt),1,ItemNotRegisteredTxt)
            OF
              0:
                ERROR('');
              1:
                BEGIN
                  ReturnValue := CreateNewItem(COPYSTR(ItemText,1,MAXSTRLEN(Item.Description)),ShowItemCard);
                  EXIT(TRUE);
                END;
            END
          ELSE
            EXIT(FALSE);
      END;

      IF NOT GUIALLOWED THEN
        ERROR(SelectItemErr);

      IF FoundRecordCount > 0 THEN BEGIN
        ItemWithoutQuote := CONVERTSTR(ItemText,'''','?');
        ItemFilterContains := '''@*' + ItemWithoutQuote + '*''';
        Item.FILTERGROUP(-1);
        Item.SETFILTER("No.",ItemFilterContains);
        Item.SETFILTER(Description,ItemFilterContains);
        Item.SETFILTER("Base Unit of Measure",ItemFilterContains);
      END;

      IF ShowItemCard THEN
        ItemNo := PickItem(Item)
      ELSE BEGIN
        ReturnValue := '';
        EXIT(TRUE);
      END;

      IF ItemNo <> '' THEN BEGIN
        ReturnValue := ItemNo;
        EXIT(TRUE);
      END;

      IF NOT DefaultCreate THEN
        EXIT(FALSE);
      ERROR('');
    END;

    LOCAL PROCEDURE CreateNewItem@3(ItemName@1000 : Text[50];ShowItemCard@1001 : Boolean) : Code[20];
    VAR
      Item@1005 : Record 27;
      ItemTemplate@1006 : Record 1301;
      ItemCard@1002 : Page 30;
    BEGIN
      IF NOT ItemTemplate.NewItemFromTemplate(Item) THEN
        ERROR(SelectItemErr);

      Item.Description := ItemName;
      Item.MODIFY(TRUE);
      COMMIT;
      IF NOT ShowItemCard THEN
        EXIT(Item."No.");
      Item.SETRANGE("No.",Item."No.");
      ItemCard.SETTABLEVIEW(Item);
      IF NOT (ItemCard.RUNMODAL = ACTION::OK) THEN
        ERROR(SelectItemErr);

      EXIT(Item."No.");
    END;

    [External]
    PROCEDURE PickItem@51(VAR Item@1000 : Record 27) : Code[20];
    VAR
      ItemList@1001 : Page 31;
    BEGIN
      IF Item.FILTERGROUP = -1 THEN
        ItemList.SetTempFilteredItemRec(Item);

      IF Item.FINDFIRST THEN;
      ItemList.SETTABLEVIEW(Item);
      ItemList.SETRECORD(Item);
      ItemList.LOOKUPMODE := TRUE;
      IF ItemList.RUNMODAL = ACTION::LookupOK THEN
        ItemList.GETRECORD(Item)
      ELSE
        CLEAR(Item);

      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE SetLastDateTimeModified@16();
    BEGIN
      "Last DateTime Modified" := CURRENTDATETIME;
      "Last Date Modified" := DT2DATE("Last DateTime Modified");
      "Last Time Modified" := DT2TIME("Last DateTime Modified");
    END;

    [External]
    PROCEDURE SetLastDateTimeFilter@29(DateFilter@1001 : DateTime);
    VAR
      DotNet_DateTimeOffset@1004 : Codeunit 3006;
      SyncDateTimeUtc@1002 : DateTime;
      CurrentFilterGroup@1003 : Integer;
    BEGIN
      SyncDateTimeUtc := DotNet_DateTimeOffset.ConvertToUtcDateTime(DateFilter);
      CurrentFilterGroup := FILTERGROUP;
      SETFILTER("Last Date Modified",'>=%1',DT2DATE(SyncDateTimeUtc));
      FILTERGROUP(-1);
      SETFILTER("Last Date Modified",'>%1',DT2DATE(SyncDateTimeUtc));
      SETFILTER("Last Time Modified",'>%1',DT2TIME(SyncDateTimeUtc));
      FILTERGROUP(CurrentFilterGroup);
    END;

    [External]
    PROCEDURE UpdateReplenishmentSystem@54() : Boolean;
    BEGIN
      CALCFIELDS("Assembly BOM");

      IF "Assembly BOM" THEN BEGIN
        IF NOT ("Replenishment System" IN ["Replenishment System"::Assembly,"Replenishment System"::"Prod. Order"])
        THEN BEGIN
          VALIDATE("Replenishment System","Replenishment System"::Assembly);
          EXIT(TRUE);
        END
      END ELSE
        IF  "Replenishment System" = "Replenishment System"::Assembly THEN BEGIN
          IF "Assembly Policy" <> "Assembly Policy"::"Assemble-to-Order" THEN BEGIN
            VALIDATE("Replenishment System","Replenishment System"::Purchase);
            EXIT(TRUE);
          END
        END
    END;

    [External]
    PROCEDURE UpdateUnitOfMeasureId@55();
    VAR
      UnitOfMeasure@1000 : Record 204;
    BEGIN
      IF "Base Unit of Measure" = '' THEN BEGIN
        CLEAR("Unit of Measure Id");
        EXIT;
      END;

      IF NOT UnitOfMeasure.GET("Base Unit of Measure") THEN
        EXIT;

      "Unit of Measure Id" := UnitOfMeasure.Id;
    END;

    [External]
    PROCEDURE UpdateItemCategoryId@63();
    VAR
      ItemCategory@1000 : Record 5722;
      GraphMgtGeneralTools@1001 : Codeunit 5465;
    BEGIN
      IF ISTEMPORARY THEN
        EXIT;

      IF NOT GraphMgtGeneralTools.IsApiEnabled THEN
        EXIT;

      IF "Item Category Code" = '' THEN BEGIN
        CLEAR("Item Category Id");
        EXIT;
      END;

      IF NOT ItemCategory.GET("Item Category Code") THEN
        EXIT;

      "Item Category Id" := ItemCategory.Id;
    END;

    [External]
    PROCEDURE UpdateTaxGroupId@47();
    VAR
      TaxGroup@1000 : Record 321;
    BEGIN
      IF "Tax Group Code" = '' THEN BEGIN
        CLEAR("Tax Group Id");
        EXIT;
      END;

      IF NOT TaxGroup.GET("Tax Group Code") THEN
        EXIT;

      "Tax Group Id" := TaxGroup.Id;
    END;

    LOCAL PROCEDURE UpdateUnitOfMeasureCode@48();
    VAR
      UnitOfMeasure@1001 : Record 204;
    BEGIN
      IF NOT ISNULLGUID("Unit of Measure Id") THEN BEGIN
        UnitOfMeasure.SETRANGE(Id,"Unit of Measure Id");
        UnitOfMeasure.FINDFIRST;
      END;

      "Base Unit of Measure" := UnitOfMeasure.Code;
    END;

    LOCAL PROCEDURE UpdateTaxGroupCode@13();
    VAR
      TaxGroup@1001 : Record 321;
    BEGIN
      IF NOT ISNULLGUID("Tax Group Id") THEN BEGIN
        TaxGroup.SETRANGE(Id,"Tax Group Id");
        TaxGroup.FINDFIRST;
      END;

      VALIDATE("Tax Group Code",TaxGroup.Code);
    END;

    LOCAL PROCEDURE UpdateItemCategoryCode@62();
    VAR
      ItemCategory@1000 : Record 5722;
    BEGIN
      IF ISNULLGUID("Item Category Id") THEN BEGIN
        ItemCategory.SETRANGE(Id,"Item Category Id");
        ItemCategory.FINDFIRST;
      END;

      "Item Category Code" := ItemCategory.Code;
    END;

    [External]
    PROCEDURE UpdateReferencedIds@61();
    VAR
      GraphMgtGeneralTools@1000 : Codeunit 5465;
    BEGIN
      IF ISTEMPORARY THEN
        EXIT;

      IF NOT GraphMgtGeneralTools.IsApiEnabled THEN
        EXIT;

      UpdateUnitOfMeasureId;
      UpdateTaxGroupId;
      UpdateItemCategoryId;
    END;

    [External]
    PROCEDURE GetReferencedIds@49(VAR TempField@1000 : TEMPORARY Record 2000000041);
    VAR
      DataTypeManagement@1001 : Codeunit 701;
    BEGIN
      DataTypeManagement.InsertFieldToBuffer(TempField,DATABASE::Item,FIELDNO("Unit of Measure Id"));
      DataTypeManagement.InsertFieldToBuffer(TempField,DATABASE::Item,FIELDNO("Tax Group Id"));
      DataTypeManagement.InsertFieldToBuffer(TempField,DATABASE::Item,FIELDNO("Item Category Id"));
    END;

    [External]
    PROCEDURE IsServiceType@53() : Boolean;
    BEGIN
      EXIT(Type = Type::Service);
    END;

    [External]
    PROCEDURE IsNonInventoriableType@50() : Boolean;
    BEGIN
      EXIT(Type IN [Type::"Non-Inventory",Type::Service]);
    END;

    [External]
    PROCEDURE IsInventoriableType@52() : Boolean;
    BEGIN
      EXIT(NOT IsNonInventoriableType);
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCheckDocuments@74(VAR Item@1000 : Record 27;VAR xItem@1001 : Record 27;VAR CurrentFieldNo@1002 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterDeleteRelatedData@57(Item@1000 : Record 27);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeTestNoItemLedgEntiesExist@59(Item@1002 : Record 27;CurrentFieldName@1001 : Text[100];VAR IsHandled@1000 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeTestNoPurchLinesExist@60(Item@1000 : Record 27;CurrentFieldName@1001 : Text[100];VAR IsHandled@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeValidateStandardCost@56(VAR Item@1000 : Record 27;xItem@1001 : Record 27;CallingFieldNo@1002 : Integer;VAR IsHandled@1003 : Boolean);
    BEGIN
    END;

    [External]
    PROCEDURE ExistsItemLedgerEntry@58() : Boolean;
    VAR
      ItemLedgEntry@1000 : Record 32;
    BEGIN
      ItemLedgEntry.RESET;
      ItemLedgEntry.SETCURRENTKEY("Item No.");
      ItemLedgEntry.SETRANGE("Item No.","No.");
      EXIT(NOT ItemLedgEntry.ISEMPTY);
    END;

    BEGIN
    END.
  }
}

OBJECT Table 37 Sales Line
{
  OBJECT-PROPERTIES
  {
    Date=02-10-21;
    Time=12:00:00;
    Modified=Yes;
    Version List=NAVW114.30;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               TestStatusOpen;
               IF Quantity <> 0 THEN BEGIN
                 OnBeforeVerifyReservedQty(Rec,xRec,0);
                 ReserveSalesLine.VerifyQuantity(Rec,xRec);
               END;
               LOCKTABLE;
               SalesHeader."No." := '';
               IF Type = Type::Item THEN
                 IF SalesHeader.InventoryPickConflict("Document Type","Document No.",SalesHeader."Shipping Advice") THEN
                   ERROR(Text056,SalesHeader."Shipping Advice");
               IF ("Deferral Code" <> '') AND (GetDeferralAmount <> 0) THEN
                 UpdateDeferralAmounts;
             END;

    OnModify=BEGIN
               IF ("Document Type" = "Document Type"::"Blanket Order") AND
                  ((Type <> xRec.Type) OR ("No." <> xRec."No."))
               THEN BEGIN
                 SalesLine2.RESET;
                 SalesLine2.SETCURRENTKEY("Document Type","Blanket Order No.","Blanket Order Line No.");
                 SalesLine2.SETRANGE("Blanket Order No.","Document No.");
                 SalesLine2.SETRANGE("Blanket Order Line No.","Line No.");
                 IF SalesLine2.FINDSET THEN
                   REPEAT
                     SalesLine2.TESTFIELD(Type,Type);
                     SalesLine2.TESTFIELD("No.","No.");
                   UNTIL SalesLine2.NEXT = 0;
               END;

               IF ((Quantity <> 0) OR (xRec.Quantity <> 0)) AND ItemExists(xRec."No.") AND NOT FullReservedQtyIsForAsmToOrder THEN
                 ReserveSalesLine.VerifyChange(Rec,xRec);
             END;

    OnDelete=VAR
               SalesCommentLine@1001 : Record 44;
               CapableToPromise@1000 : Codeunit 99000886;
               JobCreateInvoice@1002 : Codeunit 1002;
             BEGIN
               TestStatusOpen;

               IF (Quantity <> 0) AND ItemExists("No.") THEN BEGIN
                 ReserveSalesLine.DeleteLine(Rec);
                 CALCFIELDS("Reserved Qty. (Base)");
                 TESTFIELD("Reserved Qty. (Base)",0);
                 IF "Shipment No." = '' THEN
                   TESTFIELD("Qty. Shipped Not Invoiced",0);
                 IF "Return Receipt No." = '' THEN
                   TESTFIELD("Return Qty. Rcd. Not Invd.",0);
                 WhseValidateSourceLine.SalesLineDelete(Rec);
               END;

               IF ("Document Type" = "Document Type"::Order) AND (Quantity <> "Quantity Invoiced") THEN
                 TESTFIELD("Prepmt. Amt. Inv.","Prepmt Amt Deducted");

               CleanDropShipmentFields;
               CleanSpecialOrderFieldsAndCheckAssocPurchOrder;
               CatalogItemMgt.DelNonStockSales(Rec);

               IF "Document Type" = "Document Type"::"Blanket Order" THEN BEGIN
                 SalesLine2.RESET;
                 SalesLine2.SETCURRENTKEY("Document Type","Blanket Order No.","Blanket Order Line No.");
                 SalesLine2.SETRANGE("Blanket Order No.","Document No.");
                 SalesLine2.SETRANGE("Blanket Order Line No.","Line No.");
                 IF SalesLine2.FINDFIRST THEN
                   SalesLine2.TESTFIELD("Blanket Order Line No.",0);
               END;

               IF Type = Type::Item THEN BEGIN
                 ATOLink.DeleteAsmFromSalesLine(Rec);
                 DeleteItemChargeAssgnt("Document Type","Document No.","Line No.");
               END;

               IF Type = Type::"Charge (Item)" THEN
                 DeleteChargeChargeAssgnt("Document Type","Document No.","Line No.");

               CapableToPromise.RemoveReqLines("Document No.","Line No.",0,FALSE);

               IF "Line No." <> 0 THEN BEGIN
                 SalesLine2.RESET;
                 SalesLine2.SETRANGE("Document Type","Document Type");
                 SalesLine2.SETRANGE("Document No.","Document No.");
                 SalesLine2.SETRANGE("Attached to Line No.","Line No.");
                 SalesLine2.SETFILTER("Line No.",'<>%1',"Line No.");
                 SalesLine2.DELETEALL(TRUE);
               END;

               IF "Job Contract Entry No." <> 0 THEN
                 JobCreateInvoice.DeleteSalesLine(Rec);

               SalesCommentLine.SETRANGE("Document Type","Document Type");
               SalesCommentLine.SETRANGE("No.","Document No.");
               SalesCommentLine.SETRANGE("Document Line No.","Line No.");
               IF NOT SalesCommentLine.ISEMPTY THEN
                 SalesCommentLine.DELETEALL;

               // In case we have roundings on VAT or Sales Tax, we should update some other line
               IF (Type <> Type::" ") AND ("Line No." <> 0) AND ("Attached to Line No." = 0) AND ("Job Contract Entry No." = 0 ) AND
                  (Quantity <> 0) AND (Amount <> 0) AND (Amount <> "Amount Including VAT") AND NOT StatusCheckSuspended
               THEN BEGIN
                 Quantity := 0;
                 "Quantity (Base)" := 0;
                 "Line Discount Amount" := 0;
                 "Inv. Discount Amount" := 0;
                 "Inv. Disc. Amount to Invoice" := 0;
                 UpdateAmounts;
               END;

               IF "Deferral Code" <> '' THEN
                 DeferralUtilities.DeferralCodeOnDelete(
                   DeferralUtilities.GetSalesDeferralDocType,'','',
                   "Document Type","Document No.","Line No.");
             END;

    OnRename=BEGIN
               ERROR(Text001,TABLECAPTION);
             END;

    CaptionML=[ENU=Sales Line;
               ENN=Sales Line];
    LookupPageID=Page516;
    DrillDownPageID=Page516;
  }
  FIELDS
  {
    { 1   ;   ;Document Type       ;Option        ;CaptionML=[ENU=Document Type;
                                                              ENN=Document Type];
                                                   OptionCaptionML=[ENU=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order;
                                                                    ENN=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order];
                                                   OptionString=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order }
    { 2   ;   ;Sell-to Customer No.;Code20        ;TableRelation=Customer;
                                                   CaptionML=[ENU=Sell-to Customer No.;
                                                              ENN=Sell-to Customer No.];
                                                   Editable=No }
    { 3   ;   ;Document No.        ;Code20        ;TableRelation="Sales Header".No. WHERE (Document Type=FIELD(Document Type));
                                                   CaptionML=[ENU=Document No.;
                                                              ENN=Document No.] }
    { 4   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              ENN=Line No.] }
    { 5   ;   ;Type                ;Option        ;OnValidate=VAR
                                                                TempSalesLine@1000 : TEMPORARY Record 37;
                                                              BEGIN
                                                                TestJobPlanningLine;
                                                                TestStatusOpen;
                                                                GetSalesHeader;

                                                                TESTFIELD("Qty. Shipped Not Invoiced",0);
                                                                TESTFIELD("Quantity Shipped",0);
                                                                TESTFIELD("Shipment No.",'');

                                                                TESTFIELD("Return Qty. Rcd. Not Invd.",0);
                                                                TESTFIELD("Return Qty. Received",0);
                                                                TESTFIELD("Return Receipt No.",'');

                                                                TESTFIELD("Prepmt. Amt. Inv.",0);

                                                                CheckAssocPurchOrder(FIELDCAPTION(Type));

                                                                IF Type <> xRec.Type THEN BEGIN
                                                                  CASE xRec.Type OF
                                                                    Type::Item:
                                                                      BEGIN
                                                                        ATOLink.DeleteAsmFromSalesLine(Rec);
                                                                        IF Quantity <> 0 THEN BEGIN
                                                                          SalesHeader.TESTFIELD(Status,SalesHeader.Status::Open);
                                                                          CALCFIELDS("Reserved Qty. (Base)");
                                                                          TESTFIELD("Reserved Qty. (Base)",0);
                                                                          ReserveSalesLine.VerifyChange(Rec,xRec);
                                                                          WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);
                                                                          OnValidateTypeOnAfterCheckItem(Rec,xRec);
                                                                        END;
                                                                      END;
                                                                    Type::"Fixed Asset":
                                                                      IF Quantity <> 0 THEN
                                                                        SalesHeader.TESTFIELD(Status,SalesHeader.Status::Open);
                                                                    Type::"Charge (Item)":
                                                                      DeleteChargeChargeAssgnt("Document Type","Document No.","Line No.");
                                                                  END;
                                                                  IF xRec."Deferral Code" <> '' THEN
                                                                    DeferralUtilities.RemoveOrSetDeferralSchedule('',
                                                                      DeferralUtilities.GetSalesDeferralDocType,'','',
                                                                      xRec."Document Type",xRec."Document No.",xRec."Line No.",
                                                                      xRec.GetDeferralAmount,xRec."Posting Date",'',xRec."Currency Code",TRUE);
                                                                END;
                                                                AddOnIntegrMgt.CheckReceiptOrderStatus(Rec);
                                                                TempSalesLine := Rec;
                                                                INIT;
                                                                IF xRec."Line Amount" <> 0 THEN
                                                                  "Recalculate Invoice Disc." := TRUE;

                                                                Type := TempSalesLine.Type;
                                                                "System-Created Entry" := TempSalesLine."System-Created Entry";
                                                                "Currency Code" := SalesHeader."Currency Code";

                                                                OnValidateTypeOnCopyFromTempSalesLine(Rec,TempSalesLine);

                                                                IF Type = Type::Item THEN
                                                                  "Allow Item Charge Assignment" := TRUE
                                                                ELSE
                                                                  "Allow Item Charge Assignment" := FALSE;
                                                                IF Type = Type::Item THEN BEGIN
                                                                  IF SalesHeader.InventoryPickConflict("Document Type","Document No.",SalesHeader."Shipping Advice") THEN
                                                                    ERROR(Text056,SalesHeader."Shipping Advice");
                                                                  IF SalesHeader.WhseShpmntConflict("Document Type","Document No.",SalesHeader."Shipping Advice") THEN
                                                                    ERROR(Text052,SalesHeader."Shipping Advice");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Type;
                                                              ENN=Type];
                                                   OptionCaptionML=[ENU=" ,G/L Account,Item,Resource,Fixed Asset,Charge (Item)";
                                                                    ENN=" ,G/L Account,Item,Resource,Fixed Asset,Charge (Item)"];
                                                   OptionString=[ ,G/L Account,Item,Resource,Fixed Asset,Charge (Item)] }
    { 6   ;   ;No.                 ;Code20        ;TableRelation=IF (Type=CONST(" ")) "Standard Text"
                                                                 ELSE IF (Type=CONST(G/L Account),
                                                                          System-Created Entry=CONST(No)) "G/L Account" WHERE (Direct Posting=CONST(Yes),
                                                                                                                               Account Type=CONST(Posting),
                                                                                                                               Blocked=CONST(No))
                                                                                                                               ELSE IF (Type=CONST(G/L Account),
                                                                                                                                        System-Created Entry=CONST(Yes)) "G/L Account"
                                                                                                                                        ELSE IF (Type=CONST(Resource)) Resource
                                                                                                                                        ELSE IF (Type=CONST(Fixed Asset)) "Fixed Asset"
                                                                                                                                        ELSE IF (Type=CONST("Charge (Item)")) "Item Charge"
                                                                                                                                        ELSE IF (Type=CONST(Item),
                                                                                                                                                 Document Type=FILTER(<>Credit Memo&<>Return Order)) Item WHERE (Blocked=CONST(No),
                                                                                                                                                                                                                 Sales Blocked=CONST(No))
                                                                                                                                                                                                                 ELSE IF (Type=CONST(Item),
                                                                                                                                                                                                                          Document Type=FILTER(Credit Memo|Return Order)) Item WHERE (Blocked=CONST(No));
                                                   OnValidate=VAR
                                                                TempSalesLine@1003 : TEMPORARY Record 37;
                                                                IsHandled@1001 : Boolean;
                                                              BEGIN
                                                                GetSalesSetup;

                                                                "No." := FindOrCreateRecordByNo("No.");

                                                                TestJobPlanningLine;
                                                                TestStatusOpen;
                                                                CheckItemAvailable(FIELDNO("No."));

                                                                IF (xRec."No." <> "No.") AND (Quantity <> 0) THEN BEGIN
                                                                  TESTFIELD("Qty. to Asm. to Order (Base)",0);
                                                                  CALCFIELDS("Reserved Qty. (Base)");
                                                                  TESTFIELD("Reserved Qty. (Base)",0);
                                                                  IF Type = Type::Item THEN
                                                                    WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);
                                                                  OnValidateNoOnAfterVerifyChange(Rec,xRec);
                                                                END;

                                                                TESTFIELD("Qty. Shipped Not Invoiced",0);
                                                                TESTFIELD("Quantity Shipped",0);
                                                                TESTFIELD("Shipment No.",'');

                                                                TESTFIELD("Prepmt. Amt. Inv.",0);

                                                                TESTFIELD("Return Qty. Rcd. Not Invd.",0);
                                                                TESTFIELD("Return Qty. Received",0);
                                                                TESTFIELD("Return Receipt No.",'');

                                                                IF "No." = '' THEN
                                                                  ATOLink.DeleteAsmFromSalesLine(Rec);
                                                                CheckAssocPurchOrder(FIELDCAPTION("No."));
                                                                AddOnIntegrMgt.CheckReceiptOrderStatus(Rec);

                                                                OnValidateNoOnBeforeInitRec(Rec,xRec,CurrFieldNo);
                                                                TempSalesLine := Rec;
                                                                INIT;
                                                                IF xRec."Line Amount" <> 0 THEN
                                                                  "Recalculate Invoice Disc." := TRUE;
                                                                Type := TempSalesLine.Type;
                                                                "No." := TempSalesLine."No.";
                                                                OnValidateNoOnCopyFromTempSalesLine(Rec,TempSalesLine);
                                                                IF "No." = '' THEN
                                                                  EXIT;

                                                                IF HasTypeToFillMandatoryFields THEN
                                                                  Quantity := TempSalesLine.Quantity;

                                                                "System-Created Entry" := TempSalesLine."System-Created Entry";
                                                                GetSalesHeader;
                                                                InitHeaderDefaults(SalesHeader);
                                                                OnValidateNoOnAfterInitHeaderDefaults(SalesHeader,TempSalesLine);

                                                                CALCFIELDS("Substitution Available");

                                                                "Promised Delivery Date" := SalesHeader."Promised Delivery Date";
                                                                "Requested Delivery Date" := SalesHeader."Requested Delivery Date";
                                                                "Shipment Date" :=
                                                                  CalendarMgmt.CalcDateBOC(
                                                                    '',SalesHeader."Shipment Date",CalChange."Source Type"::Location,"Location Code",'',
                                                                    CalChange."Source Type"::"Shipping Agent","Shipping Agent Code","Shipping Agent Service Code",FALSE);

                                                                IsHandled := FALSE;
                                                                OnValidateNoOnBeforeUpdateDates(Rec,xRec,SalesHeader,CurrFieldNo,IsHandled,TempSalesLine);
                                                                IF NOT IsHandled THEN
                                                                  UpdateDates;

                                                                OnAfterAssignHeaderValues(Rec,SalesHeader);

                                                                CASE Type OF
                                                                  Type::" ":
                                                                    CopyFromStandardText;
                                                                  Type::"G/L Account":
                                                                    CopyFromGLAccount;
                                                                  Type::Item:
                                                                    CopyFromItem;
                                                                  Type::Resource:
                                                                    CopyFromResource;
                                                                  Type::"Fixed Asset":
                                                                    CopyFromFixedAsset;
                                                                  Type::"Charge (Item)":
                                                                    CopyFromItemCharge;
                                                                END;

                                                                OnAfterAssignFieldsForNo(Rec,xRec,SalesHeader);

                                                                IF Type <> Type::" " THEN BEGIN
                                                                  PostingSetupMgt.CheckGenPostingSetupSalesAccount("Gen. Bus. Posting Group","Gen. Prod. Posting Group");
                                                                  PostingSetupMgt.CheckGenPostingSetupCOGSAccount("Gen. Bus. Posting Group","Gen. Prod. Posting Group");
                                                                  PostingSetupMgt.CheckVATPostingSetupSalesAccount("VAT Bus. Posting Group","VAT Prod. Posting Group");
                                                                END;

                                                                IF HasTypeToFillMandatoryFields AND (Type <> Type::"Fixed Asset") THEN
                                                                  VALIDATE("VAT Prod. Posting Group");

                                                                UpdatePrepmtSetupFields;

                                                                IF HasTypeToFillMandatoryFields THEN BEGIN
                                                                  VALIDATE("Unit of Measure Code");
                                                                  IF Quantity <> 0 THEN BEGIN
                                                                    InitOutstanding;
                                                                    IF IsCreditDocType THEN
                                                                      InitQtyToReceive
                                                                    ELSE
                                                                      InitQtyToShip;
                                                                    InitQtyToAsm;
                                                                    UpdateWithWarehouseShip;
                                                                  END;
                                                                  UpdateUnitPrice(FIELDNO("No."));
                                                                END;

                                                                OnValidateNoOnAfterUpdateUnitPrice(Rec,xRec);

                                                                CreateDim(
                                                                  DimMgt.TypeToTableID3(Type),"No.",
                                                                  DATABASE::Job,"Job No.",
                                                                  DATABASE::"Responsibility Center","Responsibility Center");

                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  IF Type = Type::Item THEN
                                                                    IF (Quantity <> 0) AND ItemExists(xRec."No.") THEN BEGIN
                                                                      ReserveSalesLine.VerifyChange(Rec,xRec);
                                                                      WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);
                                                                    END;
                                                                  GetDefaultBin;
                                                                  AutoAsmToOrder;
                                                                  DeleteItemChargeAssgnt("Document Type","Document No.","Line No.");
                                                                  IF Type = Type::"Charge (Item)" THEN
                                                                    DeleteChargeChargeAssgnt("Document Type","Document No.","Line No.");
                                                                END;

                                                                UpdateItemCrossRef;
                                                              END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=No.;
                                                              ENN=No.];
                                                   CaptionClass=GetCaptionClass(FIELDNO("No.")) }
    { 7   ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE (Use As In-Transit=CONST(No));
                                                   OnValidate=VAR
                                                                Item@1000 : Record 27;
                                                                IsHandled@1001 : Boolean;
                                                              BEGIN
                                                                TestJobPlanningLine;
                                                                TestStatusOpen;
                                                                CheckAssocPurchOrder(FIELDCAPTION("Location Code"));
                                                                IF "Location Code" <> '' THEN
                                                                  IF IsNonInventoriableItem THEN BEGIN
                                                                    GetItem(Item);
                                                                    Item.TESTFIELD(Type,Item.Type::Inventory);
                                                                  END;
                                                                IF xRec."Location Code" <> "Location Code" THEN BEGIN
                                                                  IF NOT FullQtyIsForAsmToOrder THEN BEGIN
                                                                    CALCFIELDS("Reserved Qty. (Base)");
                                                                    TESTFIELD("Reserved Qty. (Base)","Qty. to Asm. to Order (Base)");
                                                                  END;
                                                                  TESTFIELD("Qty. Shipped Not Invoiced",0);
                                                                  TESTFIELD("Shipment No.",'');
                                                                  TESTFIELD("Return Qty. Rcd. Not Invd.",0);
                                                                  TESTFIELD("Return Receipt No.",'');
                                                                END;

                                                                GetSalesHeader;
                                                                IsHandled := FALSE;
                                                                OnValidateLocationCodeOnBeforeSetShipmentDate(Rec,IsHandled);
                                                                IF NOT IsHandled THEN
                                                                  "Shipment Date" :=
                                                                    CalendarMgmt.CalcDateBOC(
                                                                      '',SalesHeader."Shipment Date",CalChange."Source Type"::Location,"Location Code",
                                                                      '',CalChange."Source Type"::"Shipping Agent","Shipping Agent Code","Shipping Agent Service Code",
                                                                      FALSE);

                                                                CheckItemAvailable(FIELDNO("Location Code"));

                                                                IF NOT "Drop Shipment" THEN BEGIN
                                                                  IF "Location Code" = '' THEN BEGIN
                                                                    IF InvtSetup.GET THEN
                                                                      "Outbound Whse. Handling Time" := InvtSetup."Outbound Whse. Handling Time";
                                                                  END ELSE
                                                                    IF Location.GET("Location Code") THEN
                                                                      "Outbound Whse. Handling Time" := Location."Outbound Whse. Handling Time";
                                                                END ELSE
                                                                  EVALUATE("Outbound Whse. Handling Time",'<0D>');

                                                                IF "Location Code" <> xRec."Location Code" THEN BEGIN
                                                                  InitItemAppl(TRUE);
                                                                  GetDefaultBin;
                                                                  InitQtyToAsm;
                                                                  AutoAsmToOrder;
                                                                  IF Quantity <> 0 THEN BEGIN
                                                                    IF NOT "Drop Shipment" THEN
                                                                      UpdateWithWarehouseShip;
                                                                    IF NOT FullReservedQtyIsForAsmToOrder THEN
                                                                      ReserveSalesLine.VerifyChange(Rec,xRec);
                                                                    WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);
                                                                  END;
                                                                  IF IsInventoriableItem THEN
                                                                    PostingSetupMgt.CheckInvtPostingSetupInventoryAccount("Location Code","Posting Group");
                                                                END;

                                                                UpdateDates;

                                                                IF (Type = Type::Item) AND ("No." <> '') THEN
                                                                  GetUnitCost;

                                                                CheckWMS;

                                                                IF "Document Type" = "Document Type"::"Return Order" THEN
                                                                  ValidateReturnReasonCode(FIELDNO("Location Code"));
                                                              END;

                                                   CaptionML=[ENU=Location Code;
                                                              ENN=Location Code] }
    { 8   ;   ;Posting Group       ;Code20        ;TableRelation=IF (Type=CONST(Item)) "Inventory Posting Group"
                                                                 ELSE IF (Type=CONST(Fixed Asset)) "FA Posting Group";
                                                   CaptionML=[ENU=Posting Group;
                                                              ENN=Posting Group];
                                                   Editable=No }
    { 10  ;   ;Shipment Date       ;Date          ;OnValidate=VAR
                                                                CheckDateConflict@1000 : Codeunit 99000815;
                                                              BEGIN
                                                                TestStatusOpen;
                                                                WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);
                                                                IF CurrFieldNo <> 0 THEN
                                                                  AddOnIntegrMgt.CheckReceiptOrderStatus(Rec);

                                                                IF "Shipment Date" <> 0D THEN BEGIN
                                                                  IF CurrFieldNo IN [
                                                                                     FIELDNO("Planned Shipment Date"),
                                                                                     FIELDNO("Planned Delivery Date"),
                                                                                     FIELDNO("Shipment Date"),
                                                                                     FIELDNO("Shipping Time"),
                                                                                     FIELDNO("Outbound Whse. Handling Time"),
                                                                                     FIELDNO("Requested Delivery Date")]
                                                                  THEN
                                                                    CheckItemAvailable(FIELDNO("Shipment Date"));

                                                                  IF ("Shipment Date" < WORKDATE) AND HasTypeToFillMandatoryFields THEN
                                                                    IF NOT (GetHideValidationDialog OR HasBeenShown) AND GUIALLOWED THEN BEGIN
                                                                      MESSAGE(
                                                                        Text014,
                                                                        FIELDCAPTION("Shipment Date"),"Shipment Date",WORKDATE);
                                                                      HasBeenShown := TRUE;
                                                                    END;
                                                                END;

                                                                AutoAsmToOrder;
                                                                IF (xRec."Shipment Date" <> "Shipment Date") AND
                                                                   (Quantity <> 0) AND
                                                                   NOT StatusCheckSuspended
                                                                THEN
                                                                  CheckDateConflict.SalesLineCheck(Rec,CurrFieldNo <> 0);

                                                                IF NOT PlannedShipmentDateCalculated THEN
                                                                  "Planned Shipment Date" := CalcPlannedShptDate(FIELDNO("Shipment Date"));
                                                                IF NOT PlannedDeliveryDateCalculated THEN
                                                                  "Planned Delivery Date" := CalcPlannedDeliveryDate(FIELDNO("Shipment Date"));
                                                              END;

                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=[ENU=Shipment Date;
                                                              ENN=Shipment Date] }
    { 11  ;   ;Description         ;Text100       ;TableRelation=IF (Type=CONST(G/L Account),
                                                                     System-Created Entry=CONST(No),
                                                                     No.=CONST('')) "G/L Account".Name WHERE (Direct Posting=CONST(Yes),
                                                                                                              Account Type=CONST(Posting),
                                                                                                              Blocked=CONST(No))
                                                                                                              ELSE IF (Type=CONST(G/L Account),
                                                                                                                       System-Created Entry=CONST(Yes),
                                                                                                                       No.=CONST('')) "G/L Account".Name
                                                                                                                       ELSE IF (Type=CONST(Item),
                                                                                                                                Document Type=FILTER(<>Credit Memo&<>Return Order),
                                                                                                                                No.=CONST('')) Item.Description WHERE (Blocked=CONST(No),
                                                                                                                                                                       Sales Blocked=CONST(No))
                                                                                                                                                                       ELSE IF (Type=CONST(Item),
                                                                                                                                                                                Document Type=FILTER(Credit Memo|Return Order),
                                                                                                                                                                                No.=CONST('')) Item.Description WHERE (Blocked=CONST(No))
                                                                                                                                                                                ELSE IF (Type=CONST(Resource),
                                                                                                                                                                                         No.=CONST('')) Resource.Name
                                                                                                                                                                                         ELSE IF (Type=CONST(Fixed Asset),
                                                                                                                                                                                                  No.=CONST('')) "Fixed Asset".Description
                                                                                                                                                                                                  ELSE IF (Type=CONST("Charge (Item)"),
                                                                                                                                                                                                           No.=CONST('')) "Item Charge".Description;
                                                   OnValidate=VAR
                                                                Item@1000 : Record 27;
                                                                ApplicationAreaMgmtFacade@1004 : Codeunit 9179;
                                                                FindRecordMgt@1005 : Codeunit 703;
                                                                ReturnValue@1001 : Text[50];
                                                                DescriptionIsNo@1002 : Boolean;
                                                                DefaultCreate@1003 : Boolean;
                                                                IsHandled@1008 : Boolean;
                                                              BEGIN
                                                                IF Type = Type::" " THEN
                                                                  EXIT;

                                                                IF "No." <> '' THEN
                                                                  EXIT;

                                                                CASE Type OF
                                                                  Type::Item:
                                                                    BEGIN
                                                                      IF STRLEN(Description) <= MAXSTRLEN(Item."No.") THEN
                                                                        DescriptionIsNo := Item.GET(Description)
                                                                      ELSE
                                                                        DescriptionIsNo := FALSE;

                                                                      IF NOT DescriptionIsNo THEN BEGIN
                                                                        Item.SETRANGE(Blocked,FALSE);
                                                                        Item.SETRANGE("Sales Blocked",FALSE);

                                                                        // looking for an item with exact description
                                                                        Item.SETRANGE(Description,Description);
                                                                        IF Item.FINDFIRST THEN BEGIN
                                                                          VALIDATE("No.",Item."No.");
                                                                          EXIT;
                                                                        END;

                                                                        // looking for an item with similar description
                                                                        Item.SETFILTER(Description,'''@' + CONVERTSTR(Description,'''','?') + '''');
                                                                        IF Item.FINDFIRST THEN BEGIN
                                                                          VALIDATE("No.",Item."No.");
                                                                          EXIT;
                                                                        END;
                                                                      END;

                                                                      GetSalesSetup;
                                                                      DefaultCreate := ("No." = '') AND SalesSetup."Create Item from Description";
                                                                      IF Item.TryGetItemNoOpenCard(
                                                                           ReturnValue,Description,DefaultCreate,NOT GetHideValidationDialog,TRUE)
                                                                      THEN
                                                                        CASE ReturnValue OF
                                                                          '':
                                                                            BEGIN
                                                                              LookupRequested := TRUE;
                                                                              Description := xRec.Description;
                                                                            END;
                                                                          "No.":
                                                                            Description := xRec.Description;
                                                                          ELSE BEGIN
                                                                            CurrFieldNo := FIELDNO("No.");
                                                                            VALIDATE("No.",COPYSTR(ReturnValue,1,MAXSTRLEN(Item."No.")));
                                                                          END;
                                                                        END;
                                                                    END;
                                                                  ELSE BEGIN
                                                                    IsHandled := FALSE;
                                                                    OnBeforeFindNoByDescription(Rec,xRec,CurrFieldNo,IsHandled);
                                                                    IF NOT IsHandled THEN BEGIN
                                                                      ReturnValue := FindRecordMgt.FindNoByDescription(Type,Description,TRUE);
                                                                      IF ReturnValue <> '' THEN BEGIN
                                                                        CurrFieldNo := FIELDNO("No.");
                                                                        VALIDATE("No.",COPYSTR(ReturnValue,1,MAXSTRLEN("No.")));
                                                                      END;
                                                                    END;
                                                                  END;
                                                                END;

                                                                IsHandled := FALSE;
                                                                OnValidateDescriptionOnBeforeCannotFindDescrError(Rec,xRec,IsHandled);
                                                                IF NOT IsHandled THEN
                                                                  IF ("No." = '') AND GUIALLOWED AND ApplicationAreaMgmtFacade.IsFoundationEnabled THEN
                                                                    IF "Document Type" IN
                                                                       ["Document Type"::Order,"Document Type"::Invoice,"Document Type"::Quote,"Document Type"::"Credit Memo"]
                                                                    THEN
                                                                      ERROR(CannotFindDescErr,Type,Description);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Description;
                                                              ENN=Description] }
    { 12  ;   ;Description 2       ;Text50        ;CaptionML=[ENU=Description 2;
                                                              ENN=Description 2] }
    { 13  ;   ;Unit of Measure     ;Text50        ;TableRelation=IF (Type=FILTER(<>' ')) "Unit of Measure".Description;
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Unit of Measure;
                                                              ENN=Unit of Measure] }
    { 15  ;   ;Quantity            ;Decimal       ;OnValidate=VAR
                                                                Item@1001 : Record 27;
                                                                ItemLedgEntry@1000 : Record 32;
                                                              BEGIN
                                                                TestJobPlanningLine;
                                                                TestStatusOpen;

                                                                CheckAssocPurchOrder(FIELDCAPTION(Quantity));

                                                                IF "Shipment No." <> '' THEN
                                                                  CheckShipmentRelation
                                                                ELSE
                                                                  IF "Return Receipt No." <> '' THEN
                                                                    CheckRetRcptRelation;

                                                                "Quantity (Base)" := CalcBaseQty(Quantity);

                                                                OnValidateQuantityOnAfterCalcBaseQty(Rec,xRec);

                                                                IF IsCreditDocType THEN BEGIN
                                                                  IF (Quantity * "Return Qty. Received" < 0) OR
                                                                     ((ABS(Quantity) < ABS("Return Qty. Received")) AND ("Return Receipt No." = ''))
                                                                  THEN
                                                                    FIELDERROR(Quantity,STRSUBSTNO(Text003,FIELDCAPTION("Return Qty. Received")));
                                                                  IF ("Quantity (Base)" * "Return Qty. Received (Base)" < 0) OR
                                                                     ((ABS("Quantity (Base)") < ABS("Return Qty. Received (Base)")) AND ("Return Receipt No." = ''))
                                                                  THEN
                                                                    FIELDERROR("Quantity (Base)",STRSUBSTNO(Text003,FIELDCAPTION("Return Qty. Received (Base)")));
                                                                END ELSE BEGIN
                                                                  IF (Quantity * "Quantity Shipped" < 0) OR
                                                                     ((ABS(Quantity) < ABS("Quantity Shipped")) AND ("Shipment No." = ''))
                                                                  THEN
                                                                    FIELDERROR(Quantity,STRSUBSTNO(Text003,FIELDCAPTION("Quantity Shipped")));
                                                                  IF ("Quantity (Base)" * "Qty. Shipped (Base)" < 0) OR
                                                                     ((ABS("Quantity (Base)") < ABS("Qty. Shipped (Base)")) AND ("Shipment No." = ''))
                                                                  THEN
                                                                    FIELDERROR("Quantity (Base)",STRSUBSTNO(Text003,FIELDCAPTION("Qty. Shipped (Base)")));
                                                                END;

                                                                IF (Type = Type::"Charge (Item)") AND (CurrFieldNo <> 0) THEN BEGIN
                                                                  IF (Quantity = 0) AND ("Qty. to Assign" <> 0) THEN
                                                                    FIELDERROR("Qty. to Assign",STRSUBSTNO(Text009,FIELDCAPTION(Quantity),Quantity));
                                                                  IF (Quantity * "Qty. Assigned" < 0) OR (ABS(Quantity) < ABS("Qty. Assigned")) THEN
                                                                    FIELDERROR(Quantity,STRSUBSTNO(Text003,FIELDCAPTION("Qty. Assigned")));
                                                                END;

                                                                AddOnIntegrMgt.CheckReceiptOrderStatus(Rec);
                                                                IF (xRec.Quantity <> Quantity) OR (xRec."Quantity (Base)" <> "Quantity (Base)") THEN BEGIN
                                                                  InitOutstanding;
                                                                  IF IsCreditDocType THEN
                                                                    InitQtyToReceive
                                                                  ELSE
                                                                    InitQtyToShip;
                                                                  InitQtyToAsm;
                                                                  SetDefaultQuantity;
                                                                END;

                                                                CheckItemAvailable(FIELDNO(Quantity));

                                                                IF (Quantity * xRec.Quantity < 0) OR (Quantity = 0) THEN
                                                                  InitItemAppl(FALSE);

                                                                IF Type = Type::Item THEN BEGIN
                                                                  UpdateUnitPrice(FIELDNO(Quantity));
                                                                  IF (xRec.Quantity <> Quantity) OR (xRec."Quantity (Base)" <> "Quantity (Base)") THEN BEGIN
                                                                    OnBeforeVerifyReservedQty(Rec,xRec,FIELDNO(Quantity));
                                                                    ReserveSalesLine.VerifyQuantity(Rec,xRec);
                                                                    IF NOT "Drop Shipment" THEN
                                                                      UpdateWithWarehouseShip;
                                                                    WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);
                                                                    IF ("Quantity (Base)" * xRec."Quantity (Base)" <= 0) AND ("No." <> '') THEN BEGIN
                                                                      GetItem(Item);
                                                                      OnValidateQuantityOnBeforeGetUnitCost(Rec,Item);
                                                                      IF (Item."Costing Method" = Item."Costing Method"::Standard) AND NOT IsShipment THEN
                                                                        GetUnitCost;
                                                                    END;
                                                                  END;
                                                                  VALIDATE("Qty. to Assemble to Order");
                                                                  IF (Quantity = "Quantity Invoiced") AND (CurrFieldNo <> 0) THEN
                                                                    CheckItemChargeAssgnt;
                                                                  CheckApplFromItemLedgEntry(ItemLedgEntry);
                                                                END ELSE
                                                                  VALIDATE("Line Discount %");

                                                                IF (xRec.Quantity <> Quantity) AND (Quantity = 0) AND
                                                                   ((Amount <> 0) OR ("Amount Including VAT" <> 0) OR ("VAT Base Amount" <> 0))
                                                                THEN BEGIN
                                                                  Amount := 0;
                                                                  "Amount Including VAT" := 0;
                                                                  "VAT Base Amount" := 0;
                                                                END;

                                                                UpdatePrePaymentAmounts;

                                                                CheckWMS;

                                                                UpdatePlanned;
                                                                IF "Document Type" = "Document Type"::"Return Order" THEN
                                                                  ValidateReturnReasonCode(FIELDNO(Quantity));
                                                              END;

                                                   CaptionML=[ENU=Quantity;
                                                              ENN=Quantity];
                                                   DecimalPlaces=0:5 }
    { 16  ;   ;Outstanding Quantity;Decimal       ;CaptionML=[ENU=Outstanding Quantity;
                                                              ENN=Outstanding Quantity];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 17  ;   ;Qty. to Invoice     ;Decimal       ;OnValidate=BEGIN
                                                                IF "Qty. to Invoice" = MaxQtyToInvoice THEN
                                                                  InitQtyToInvoice
                                                                ELSE
                                                                  "Qty. to Invoice (Base)" := CalcBaseQty("Qty. to Invoice");
                                                                IF ("Qty. to Invoice" * Quantity < 0) OR
                                                                   (ABS("Qty. to Invoice") > ABS(MaxQtyToInvoice))
                                                                THEN
                                                                  ERROR(
                                                                    Text005,
                                                                    MaxQtyToInvoice);
                                                                IF ("Qty. to Invoice (Base)" * "Quantity (Base)" < 0) OR
                                                                   (ABS("Qty. to Invoice (Base)") > ABS(MaxQtyToInvoiceBase))
                                                                THEN
                                                                  ERROR(
                                                                    Text006,
                                                                    MaxQtyToInvoiceBase);
                                                                "VAT Difference" := 0;
                                                                CalcInvDiscToInvoice;
                                                                CalcPrepaymentToDeduct;
                                                              END;

                                                   CaptionML=[ENU=Qty. to Invoice;
                                                              ENN=Qty. to Invoice];
                                                   DecimalPlaces=0:5 }
    { 18  ;   ;Qty. to Ship        ;Decimal       ;OnValidate=VAR
                                                                ItemLedgEntry@1000 : Record 32;
                                                                IsHandled@1001 : Boolean;
                                                              BEGIN
                                                                GetLocation("Location Code");
                                                                IF (CurrFieldNo <> 0) AND
                                                                   (Type = Type::Item) AND
                                                                   (NOT "Drop Shipment")
                                                                THEN BEGIN
                                                                  IF Location."Require Shipment" AND
                                                                     ("Qty. to Ship" <> 0)
                                                                  THEN
                                                                    CheckWarehouse;
                                                                  WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);
                                                                END;
                                                                OnValidateQtyToShipOnAfterCheck(Rec,CurrFieldNo);

                                                                IF "Qty. to Ship" = "Outstanding Quantity" THEN
                                                                  InitQtyToShip
                                                                ELSE BEGIN
                                                                  "Qty. to Ship (Base)" := CalcBaseQty("Qty. to Ship");
                                                                  CheckServItemCreation;
                                                                  InitQtyToInvoice;
                                                                END;

                                                                IsHandled := FALSE;
                                                                OnValidateQtyToShipAfterInitQty(Rec,xRec,CurrFieldNo,IsHandled);
                                                                IF NOT IsHandled THEN BEGIN
                                                                  IF ((("Qty. to Ship" < 0) XOR (Quantity < 0)) AND (Quantity <> 0) AND ("Qty. to Ship" <> 0)) OR
                                                                     (ABS("Qty. to Ship") > ABS("Outstanding Quantity")) OR
                                                                     (((Quantity < 0) XOR ("Outstanding Quantity" < 0)) AND (Quantity <> 0) AND ("Outstanding Quantity" <> 0))
                                                                  THEN
                                                                    ERROR(Text007,"Outstanding Quantity");
                                                                  IF ((("Qty. to Ship (Base)" < 0) XOR ("Quantity (Base)" < 0)) AND ("Qty. to Ship (Base)" <> 0) AND ("Quantity (Base)" <> 0)) OR
                                                                     (ABS("Qty. to Ship (Base)") > ABS("Outstanding Qty. (Base)")) OR
                                                                     ((("Quantity (Base)" < 0) XOR ("Outstanding Qty. (Base)" < 0)) AND ("Quantity (Base)" <> 0) AND ("Outstanding Qty. (Base)" <> 0))
                                                                  THEN
                                                                    ERROR(Text008,"Outstanding Qty. (Base)");
                                                                END;

                                                                IF (CurrFieldNo <> 0) AND (Type = Type::Item) AND ("Qty. to Ship" < 0) THEN
                                                                  CheckApplFromItemLedgEntry(ItemLedgEntry);

                                                                ATOLink.UpdateQtyToAsmFromSalesLine(Rec);
                                                              END;

                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=[ENU=Qty. to Ship;
                                                              ENN=Qty. to Ship];
                                                   DecimalPlaces=0:5 }
    { 22  ;   ;Unit Price          ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Line Discount %");
                                                              END;

                                                   CaptionML=[ENU=Unit Price;
                                                              ENN=Unit Price];
                                                   AutoFormatType=2;
                                                   AutoFormatExpr="Currency Code";
                                                   CaptionClass=GetCaptionClass(FIELDNO("Unit Price")) }
    { 23  ;   ;Unit Cost (LCY)     ;Decimal       ;OnValidate=VAR
                                                                Item@1000 : Record 27;
                                                              BEGIN
                                                                IF (CurrFieldNo = FIELDNO("Unit Cost (LCY)")) AND
                                                                   ("Unit Cost (LCY)" <> xRec."Unit Cost (LCY)")
                                                                THEN
                                                                  CheckAssocPurchOrder(FIELDCAPTION("Unit Cost (LCY)"));

                                                                IF (CurrFieldNo = FIELDNO("Unit Cost (LCY)")) AND
                                                                   (Type = Type::Item) AND ("No." <> '') AND ("Quantity (Base)" <> 0)
                                                                THEN BEGIN
                                                                  TestJobPlanningLine;
                                                                  GetItem(Item);
                                                                  IF (Item."Costing Method" = Item."Costing Method"::Standard) AND NOT IsShipment THEN BEGIN
                                                                    IF IsCreditDocType THEN
                                                                      ERROR(
                                                                        Text037,
                                                                        FIELDCAPTION("Unit Cost (LCY)"),Item.FIELDCAPTION("Costing Method"),
                                                                        Item."Costing Method",FIELDCAPTION(Quantity));
                                                                    ERROR(
                                                                      Text038,
                                                                      FIELDCAPTION("Unit Cost (LCY)"),Item.FIELDCAPTION("Costing Method"),
                                                                      Item."Costing Method",FIELDCAPTION(Quantity));
                                                                  END;
                                                                END;

                                                                GetSalesHeader;
                                                                IF SalesHeader."Currency Code" <> '' THEN BEGIN
                                                                  Currency.TESTFIELD("Unit-Amount Rounding Precision");
                                                                  "Unit Cost" :=
                                                                    ROUND(
                                                                      CurrExchRate.ExchangeAmtLCYToFCY(
                                                                        GetDate,SalesHeader."Currency Code",
                                                                        "Unit Cost (LCY)",SalesHeader."Currency Factor"),
                                                                      Currency."Unit-Amount Rounding Precision")
                                                                END ELSE
                                                                  "Unit Cost" := "Unit Cost (LCY)";
                                                              END;

                                                   CaptionML=[ENU=Unit Cost (LCY);
                                                              ENN=Unit Cost (LCY)];
                                                   AutoFormatType=2 }
    { 25  ;   ;VAT %               ;Decimal       ;CaptionML=[ENU=VAT %;
                                                              ENN=VAT %];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 27  ;   ;Line Discount %     ;Decimal       ;OnValidate=BEGIN
                                                                ValidateLineDiscountPercent(TRUE);
                                                              END;

                                                   CaptionML=[ENU=Line Discount %;
                                                              ENN=Line Discount %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 28  ;   ;Line Discount Amount;Decimal       ;OnValidate=BEGIN
                                                                GetSalesHeader;
                                                                "Line Discount Amount" := ROUND("Line Discount Amount",Currency."Amount Rounding Precision");
                                                                TestJobPlanningLine;
                                                                TestStatusOpen;
                                                                TESTFIELD(Quantity);
                                                                IF xRec."Line Discount Amount" <> "Line Discount Amount" THEN
                                                                  UpdateLineDiscPct;
                                                                "Inv. Discount Amount" := 0;
                                                                "Inv. Disc. Amount to Invoice" := 0;
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=[ENU=Line Discount Amount;
                                                              ENN=Line Discount Amount];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 29  ;   ;Amount              ;Decimal       ;OnValidate=BEGIN
                                                                Amount := ROUND(Amount,Currency."Amount Rounding Precision");
                                                                CASE "VAT Calculation Type" OF
                                                                  "VAT Calculation Type"::"Normal VAT",
                                                                  "VAT Calculation Type"::"Reverse Charge VAT":
                                                                    BEGIN
                                                                      "VAT Base Amount" :=
                                                                        ROUND(Amount * (1 - SalesHeader."VAT Base Discount %" / 100),Currency."Amount Rounding Precision");
                                                                      "Amount Including VAT" :=
                                                                        ROUND(Amount + "VAT Base Amount" * "VAT %" / 100,Currency."Amount Rounding Precision");
                                                                    END;
                                                                  "VAT Calculation Type"::"Full VAT":
                                                                    IF Amount <> 0 THEN
                                                                      FIELDERROR(Amount,
                                                                        STRSUBSTNO(
                                                                          Text009,FIELDCAPTION("VAT Calculation Type"),
                                                                          "VAT Calculation Type"));
                                                                  "VAT Calculation Type"::"Sales Tax":
                                                                    BEGIN
                                                                      SalesHeader.TESTFIELD("VAT Base Discount %",0);
                                                                      "VAT Base Amount" := ROUND(Amount,Currency."Amount Rounding Precision");
                                                                      "Amount Including VAT" :=
                                                                        Amount +
                                                                        SalesTaxCalculate.CalculateTax(
                                                                          "Tax Area Code","Tax Group Code","Tax Liable",SalesHeader."Posting Date",
                                                                          "VAT Base Amount","Quantity (Base)",SalesHeader."Currency Factor");
                                                                      OnAfterSalesTaxCalculate(Rec,SalesHeader,Currency);
                                                                      UpdateVATPercent("VAT Base Amount","Amount Including VAT" - "VAT Base Amount");
                                                                      "Amount Including VAT" := ROUND("Amount Including VAT",Currency."Amount Rounding Precision");
                                                                    END;
                                                                END;

                                                                InitOutstandingAmount;
                                                              END;

                                                   CaptionML=[ENU=Amount;
                                                              ENN=Amount];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 30  ;   ;Amount Including VAT;Decimal       ;OnValidate=BEGIN
                                                                "Amount Including VAT" := ROUND("Amount Including VAT",Currency."Amount Rounding Precision");
                                                                CASE "VAT Calculation Type" OF
                                                                  "VAT Calculation Type"::"Normal VAT",
                                                                  "VAT Calculation Type"::"Reverse Charge VAT":
                                                                    BEGIN
                                                                      Amount :=
                                                                        ROUND(
                                                                          "Amount Including VAT" /
                                                                          (1 + (1 - SalesHeader."VAT Base Discount %" / 100) * "VAT %" / 100),
                                                                          Currency."Amount Rounding Precision");
                                                                      "VAT Base Amount" :=
                                                                        ROUND(Amount * (1 - SalesHeader."VAT Base Discount %" / 100),Currency."Amount Rounding Precision");
                                                                    END;
                                                                  "VAT Calculation Type"::"Full VAT":
                                                                    BEGIN
                                                                      Amount := 0;
                                                                      "VAT Base Amount" := 0;
                                                                    END;
                                                                  "VAT Calculation Type"::"Sales Tax":
                                                                    BEGIN
                                                                      SalesHeader.TESTFIELD("VAT Base Discount %",0);
                                                                      Amount :=
                                                                        SalesTaxCalculate.ReverseCalculateTax(
                                                                          "Tax Area Code","Tax Group Code","Tax Liable",SalesHeader."Posting Date",
                                                                          "Amount Including VAT","Quantity (Base)",SalesHeader."Currency Factor");
                                                                      OnAfterSalesTaxCalculateReverse(Rec,SalesHeader,Currency);
                                                                      UpdateVATPercent(Amount,"Amount Including VAT" - Amount);
                                                                      Amount := ROUND(Amount,Currency."Amount Rounding Precision");
                                                                      "VAT Base Amount" := Amount;
                                                                    END;
                                                                END;

                                                                InitOutstandingAmount;
                                                              END;

                                                   CaptionML=[ENU=Amount Including VAT;
                                                              ENN=Amount Including VAT];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 32  ;   ;Allow Invoice Disc. ;Boolean       ;InitValue=Yes;
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF ("VAT Calculation Type" = "VAT Calculation Type"::"Full VAT") AND "Allow Invoice Disc." THEN
                                                                  ERROR(CannotAllowInvDiscountErr,FIELDCAPTION("Allow Invoice Disc."));

                                                                IF "Allow Invoice Disc." <> xRec."Allow Invoice Disc." THEN BEGIN
                                                                  IF NOT "Allow Invoice Disc." THEN BEGIN
                                                                    "Inv. Discount Amount" := 0;
                                                                    "Inv. Disc. Amount to Invoice" := 0;
                                                                  END;
                                                                  UpdateAmounts;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Allow Invoice Disc.;
                                                              ENN=Allow Invoice Disc.] }
    { 34  ;   ;Gross Weight        ;Decimal       ;CaptionML=[ENU=Gross Weight;
                                                              ENN=Gross Weight];
                                                   DecimalPlaces=0:5 }
    { 35  ;   ;Net Weight          ;Decimal       ;CaptionML=[ENU=Net Weight;
                                                              ENN=Net Weight];
                                                   DecimalPlaces=0:5 }
    { 36  ;   ;Units per Parcel    ;Decimal       ;CaptionML=[ENU=Units per Parcel;
                                                              ENN=Units per Parcel];
                                                   DecimalPlaces=0:5 }
    { 37  ;   ;Unit Volume         ;Decimal       ;CaptionML=[ENU=Unit Volume;
                                                              ENN=Unit Volume];
                                                   DecimalPlaces=0:5 }
    { 38  ;   ;Appl.-to Item Entry ;Integer       ;OnValidate=VAR
                                                                ItemLedgEntry@1000 : Record 32;
                                                                ItemTrackingLines@1001 : Page 6510;
                                                              BEGIN
                                                                IF "Appl.-to Item Entry" <> 0 THEN BEGIN
                                                                  AddOnIntegrMgt.CheckReceiptOrderStatus(Rec);

                                                                  TESTFIELD(Type,Type::Item);
                                                                  TESTFIELD(Quantity);
                                                                  IF IsCreditDocType THEN BEGIN
                                                                    IF Quantity > 0 THEN
                                                                      FIELDERROR(Quantity,Text030);
                                                                  END ELSE BEGIN
                                                                    IF Quantity < 0 THEN
                                                                      FIELDERROR(Quantity,Text029);
                                                                  END;
                                                                  ItemLedgEntry.GET("Appl.-to Item Entry");
                                                                  ItemLedgEntry.TESTFIELD(Positive,TRUE);
                                                                  IF ItemLedgEntry.TrackingExists THEN
                                                                    ERROR(Text040,ItemTrackingLines.CAPTION,FIELDCAPTION("Appl.-to Item Entry"));
                                                                  IF ABS("Qty. to Ship (Base)") > ItemLedgEntry.Quantity THEN
                                                                    ERROR(ShippingMoreUnitsThanReceivedErr,ItemLedgEntry.Quantity,ItemLedgEntry."Document No.");

                                                                  VALIDATE("Unit Cost (LCY)",CalcUnitCost(ItemLedgEntry));

                                                                  "Location Code" := ItemLedgEntry."Location Code";
                                                                  IF NOT ItemLedgEntry.Open THEN
                                                                    MESSAGE(Text042,"Appl.-to Item Entry");
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              SelectItemEntry(FIELDNO("Appl.-to Item Entry"));
                                                            END;

                                                   AccessByPermission=TableData 27=R;
                                                   CaptionML=[ENU=Appl.-to Item Entry;
                                                              ENN=Appl.-to Item Entry] }
    { 40  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1),
                                                                                               Blocked=CONST(No));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
                                                                ATOLink.UpdateAsmDimFromSalesLine(Rec);
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 1 Code;
                                                              ENN=Shortcut Dimension 1 Code];
                                                   CaptionClass='1,2,1' }
    { 41  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2),
                                                                                               Blocked=CONST(No));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
                                                                ATOLink.UpdateAsmDimFromSalesLine(Rec);
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 2 Code;
                                                              ENN=Shortcut Dimension 2 Code];
                                                   CaptionClass='1,2,2' }
    { 42  ;   ;Customer Price Group;Code10        ;TableRelation="Customer Price Group";
                                                   OnValidate=BEGIN
                                                                IF Type = Type::Item THEN
                                                                  UpdateUnitPrice(FIELDNO("Customer Price Group"));
                                                              END;

                                                   CaptionML=[ENU=Customer Price Group;
                                                              ENN=Customer Price Group];
                                                   Editable=No }
    { 45  ;   ;Job No.             ;Code20        ;TableRelation=Job;
                                                   CaptionML=[ENU=Job No.;
                                                              ENN=Job No.];
                                                   Editable=No }
    { 52  ;   ;Work Type Code      ;Code10        ;TableRelation="Work Type";
                                                   OnValidate=VAR
                                                                WorkType@1000 : Record 200;
                                                              BEGIN
                                                                IF Type = Type::Resource THEN BEGIN
                                                                  TestStatusOpen;
                                                                  IF WorkType.GET("Work Type Code") THEN
                                                                    VALIDATE("Unit of Measure Code",WorkType."Unit of Measure Code");
                                                                  UpdateUnitPrice(FIELDNO("Work Type Code"));
                                                                  VALIDATE("Unit Price");
                                                                  FindResUnitCost;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Work Type Code;
                                                              ENN=Work Type Code] }
    { 56  ;   ;Recalculate Invoice Disc.;Boolean  ;CaptionML=[ENU=Recalculate Invoice Disc.;
                                                              ENN=Recalculate Invoice Disc.];
                                                   Editable=No }
    { 57  ;   ;Outstanding Amount  ;Decimal       ;OnValidate=VAR
                                                                Currency2@1000 : Record 4;
                                                              BEGIN
                                                                GetSalesHeader;
                                                                Currency2.InitRoundingPrecision;
                                                                IF SalesHeader."Currency Code" <> '' THEN
                                                                  "Outstanding Amount (LCY)" :=
                                                                    ROUND(
                                                                      CurrExchRate.ExchangeAmtFCYToLCY(
                                                                        GetDate,"Currency Code",
                                                                        "Outstanding Amount",SalesHeader."Currency Factor"),
                                                                      Currency2."Amount Rounding Precision")
                                                                ELSE
                                                                  "Outstanding Amount (LCY)" :=
                                                                    ROUND("Outstanding Amount",Currency2."Amount Rounding Precision");
                                                              END;

                                                   CaptionML=[ENU=Outstanding Amount;
                                                              ENN=Outstanding Amount];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 58  ;   ;Qty. Shipped Not Invoiced;Decimal  ;CaptionML=[ENU=Qty. Shipped Not Invoiced;
                                                              ENN=Qty. Shipped Not Invoiced];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 59  ;   ;Shipped Not Invoiced;Decimal       ;OnValidate=VAR
                                                                Currency2@1000 : Record 4;
                                                              BEGIN
                                                                GetSalesHeader;
                                                                Currency2.InitRoundingPrecision;
                                                                IF SalesHeader."Currency Code" <> '' THEN
                                                                  "Shipped Not Invoiced (LCY)" :=
                                                                    ROUND(
                                                                      CurrExchRate.ExchangeAmtFCYToLCY(
                                                                        GetDate,"Currency Code",
                                                                        "Shipped Not Invoiced",SalesHeader."Currency Factor"),
                                                                      Currency2."Amount Rounding Precision")
                                                                ELSE
                                                                  "Shipped Not Invoiced (LCY)" :=
                                                                    ROUND("Shipped Not Invoiced",Currency2."Amount Rounding Precision");

                                                                CalculateNotShippedInvExlcVatLCY;
                                                              END;

                                                   CaptionML=[ENU=Shipped Not Invoiced;
                                                              ENN=Shipped Not Invoiced];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 60  ;   ;Quantity Shipped    ;Decimal       ;AccessByPermission=TableData 110=R;
                                                   CaptionML=[ENU=Quantity Shipped;
                                                              ENN=Quantity Shipped];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 61  ;   ;Quantity Invoiced   ;Decimal       ;CaptionML=[ENU=Quantity Invoiced;
                                                              ENN=Quantity Invoiced];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 63  ;   ;Shipment No.        ;Code20        ;CaptionML=[ENU=Shipment No.;
                                                              ENN=Shipment No.];
                                                   Editable=No }
    { 64  ;   ;Shipment Line No.   ;Integer       ;CaptionML=[ENU=Shipment Line No.;
                                                              ENN=Shipment Line No.];
                                                   Editable=No }
    { 67  ;   ;Profit %            ;Decimal       ;CaptionML=[ENU=Profit %;
                                                              ENN=Profit %];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 68  ;   ;Bill-to Customer No.;Code20        ;TableRelation=Customer;
                                                   CaptionML=[ENU=Bill-to Customer No.;
                                                              ENN=Bill-to Customer No.];
                                                   Editable=No }
    { 69  ;   ;Inv. Discount Amount;Decimal       ;OnValidate=BEGIN
                                                                CalcInvDiscToInvoice;
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=[ENU=Inv. Discount Amount;
                                                              ENN=Inv. Discount Amount];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code";
                                                   CaptionClass=GetCaptionClass(FIELDNO("Inv. Discount Amount")) }
    { 71  ;   ;Purchase Order No.  ;Code20        ;TableRelation=IF (Drop Shipment=CONST(Yes)) "Purchase Header".No. WHERE (Document Type=CONST(Order));
                                                   OnValidate=BEGIN
                                                                IF (xRec."Purchase Order No." <> "Purchase Order No.") AND (Quantity <> 0) THEN BEGIN
                                                                  ReserveSalesLine.VerifyChange(Rec,xRec);
                                                                  WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=[ENU=Purchase Order No.;
                                                              ENN=Purchase Order No.];
                                                   Editable=No }
    { 72  ;   ;Purch. Order Line No.;Integer      ;TableRelation=IF (Drop Shipment=CONST(Yes)) "Purchase Line"."Line No." WHERE (Document Type=CONST(Order),
                                                                                                                                 Document No.=FIELD(Purchase Order No.));
                                                   OnValidate=BEGIN
                                                                IF (xRec."Purch. Order Line No." <> "Purch. Order Line No.") AND (Quantity <> 0) THEN BEGIN
                                                                  ReserveSalesLine.VerifyChange(Rec,xRec);
                                                                  WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=[ENU=Purch. Order Line No.;
                                                              ENN=Purch. Order Line No.];
                                                   Editable=No }
    { 73  ;   ;Drop Shipment       ;Boolean       ;OnValidate=BEGIN
                                                                TESTFIELD("Document Type","Document Type"::Order);
                                                                TESTFIELD(Type,Type::Item);
                                                                TESTFIELD("Quantity Shipped",0);
                                                                TESTFIELD("Job No.",'');
                                                                TESTFIELD("Qty. to Asm. to Order (Base)",0);

                                                                IF "Drop Shipment" THEN
                                                                  TESTFIELD("Special Order",FALSE);

                                                                CheckAssocPurchOrder(FIELDCAPTION("Drop Shipment"));

                                                                IF "Special Order" THEN
                                                                  Reserve := Reserve::Never
                                                                ELSE
                                                                  IF "Drop Shipment" THEN BEGIN
                                                                    Reserve := Reserve::Never;
                                                                    EVALUATE("Outbound Whse. Handling Time",'<0D>');
                                                                    EVALUATE("Shipping Time",'<0D>');
                                                                    UpdateDates;
                                                                    "Bin Code" := '';
                                                                  END ELSE
                                                                    SetReserveWithoutPurchasingCode;

                                                                CheckItemAvailable(FIELDNO("Drop Shipment"));

                                                                AddOnIntegrMgt.CheckReceiptOrderStatus(Rec);
                                                                IF (xRec."Drop Shipment" <> "Drop Shipment") AND (Quantity <> 0) THEN BEGIN
                                                                  IF NOT "Drop Shipment" THEN BEGIN
                                                                    InitQtyToAsm;
                                                                    AutoAsmToOrder;
                                                                    UpdateWithWarehouseShip
                                                                  END ELSE
                                                                    InitQtyToShip;
                                                                  WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);
                                                                  IF NOT FullReservedQtyIsForAsmToOrder THEN
                                                                    ReserveSalesLine.VerifyChange(Rec,xRec);
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 223=R;
                                                   CaptionML=[ENU=Drop Shipment;
                                                              ENN=Drop Shipment];
                                                   Editable=Yes }
    { 74  ;   ;Gen. Bus. Posting Group;Code20     ;TableRelation="Gen. Business Posting Group";
                                                   OnValidate=BEGIN
                                                                IF xRec."Gen. Bus. Posting Group" <> "Gen. Bus. Posting Group" THEN
                                                                  IF GenBusPostingGrp.ValidateVatBusPostingGroup(GenBusPostingGrp,"Gen. Bus. Posting Group") THEN
                                                                    VALIDATE("VAT Bus. Posting Group",GenBusPostingGrp."Def. VAT Bus. Posting Group");
                                                              END;

                                                   CaptionML=[ENU=Gen. Bus. Posting Group;
                                                              ENN=Gen. Bus. Posting Group] }
    { 75  ;   ;Gen. Prod. Posting Group;Code20    ;TableRelation="Gen. Product Posting Group";
                                                   OnValidate=BEGIN
                                                                TestJobPlanningLine;
                                                                TestStatusOpen;
                                                                IF xRec."Gen. Prod. Posting Group" <> "Gen. Prod. Posting Group" THEN
                                                                  IF GenProdPostingGrp.ValidateVatProdPostingGroup(GenProdPostingGrp,"Gen. Prod. Posting Group") THEN
                                                                    VALIDATE("VAT Prod. Posting Group",GenProdPostingGrp."Def. VAT Prod. Posting Group");
                                                              END;

                                                   CaptionML=[ENU=Gen. Prod. Posting Group;
                                                              ENN=Gen. Prod. Posting Group] }
    { 77  ;   ;VAT Calculation Type;Option        ;CaptionML=[ENU=VAT Calculation Type;
                                                              ENN=VAT Calculation Type];
                                                   OptionCaptionML=[ENU=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                                    ENN=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax];
                                                   OptionString=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                   Editable=No }
    { 78  ;   ;Transaction Type    ;Code10        ;TableRelation="Transaction Type";
                                                   CaptionML=[ENU=Transaction Type;
                                                              ENN=Transaction Nature Code] }
    { 79  ;   ;Transport Method    ;Code10        ;TableRelation="Transport Method";
                                                   CaptionML=[ENU=Transport Method;
                                                              ENN=Transport Method] }
    { 80  ;   ;Attached to Line No.;Integer       ;TableRelation="Sales Line"."Line No." WHERE (Document Type=FIELD(Document Type),
                                                                                                Document No.=FIELD(Document No.));
                                                   CaptionML=[ENU=Attached to Line No.;
                                                              ENN=Attached to Line No.];
                                                   Editable=No }
    { 81  ;   ;Exit Point          ;Code10        ;TableRelation="Entry/Exit Point";
                                                   CaptionML=[ENU=Exit Point;
                                                              ENN=Exit Point] }
    { 82  ;   ;Area                ;Code10        ;TableRelation=Area;
                                                   CaptionML=[ENU=Area;
                                                              ENN=Area] }
    { 83  ;   ;Transaction Specification;Code10   ;TableRelation="Transaction Specification";
                                                   CaptionML=[ENU=Transaction Specification;
                                                              ENN=Transaction Specification] }
    { 84  ;   ;Tax Category        ;Code10        ;CaptionML=[ENU=Tax Category;
                                                              ENN=Tax Category] }
    { 85  ;   ;Tax Area Code       ;Code20        ;TableRelation="Tax Area";
                                                   OnValidate=BEGIN
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=[ENU=Tax Area Code;
                                                              ENN=VAT Area Code] }
    { 86  ;   ;Tax Liable          ;Boolean       ;OnValidate=BEGIN
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=[ENU=Tax Liable;
                                                              ENN=VAT Liable] }
    { 87  ;   ;Tax Group Code      ;Code20        ;TableRelation="Tax Group";
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                ValidateTaxGroupCode;
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=[ENU=Tax Group Code;
                                                              ENN=VAT Group Code] }
    { 88  ;   ;VAT Clause Code     ;Code20        ;TableRelation="VAT Clause";
                                                   CaptionML=[ENU=VAT Clause Code;
                                                              ENN=VAT Clause Code] }
    { 89  ;   ;VAT Bus. Posting Group;Code20      ;TableRelation="VAT Business Posting Group";
                                                   OnValidate=BEGIN
                                                                VALIDATE("VAT Prod. Posting Group");
                                                              END;

                                                   CaptionML=[ENU=VAT Bus. Posting Group;
                                                              ENN=VAT Bus. Posting Group] }
    { 90  ;   ;VAT Prod. Posting Group;Code20     ;TableRelation="VAT Product Posting Group";
                                                   OnValidate=VAR
                                                                IsHandled@1000 : Boolean;
                                                              BEGIN
                                                                TestStatusOpen;
                                                                IF "Prepmt. Amt. Inv." <> 0 THEN
                                                                  ERROR(CannotChangeVATGroupWithPrepmInvErr);
                                                                VATPostingSetup.GET("VAT Bus. Posting Group","VAT Prod. Posting Group");
                                                                "VAT Difference" := 0;

                                                                GetSalesHeader;
                                                                "VAT %" := VATPostingSetup."VAT %";
                                                                "VAT Calculation Type" := VATPostingSetup."VAT Calculation Type";
                                                                IF "VAT Calculation Type" = "VAT Calculation Type"::"Full VAT" THEN
                                                                  VALIDATE("Allow Invoice Disc.",FALSE);
                                                                "VAT Identifier" := VATPostingSetup."VAT Identifier";
                                                                "VAT Clause Code" := VATPostingSetup."VAT Clause Code";

                                                                IsHandled := FALSE;
                                                                OnValidateVATProdPostingGroupOnBeforeCheckVATCalcType(Rec,VATPostingSetup,IsHandled);
                                                                IF NOT IsHandled THEN
                                                                  CASE "VAT Calculation Type" OF
                                                                    "VAT Calculation Type"::"Reverse Charge VAT",
                                                                    "VAT Calculation Type"::"Sales Tax":
                                                                      "VAT %" := 0;
                                                                    "VAT Calculation Type"::"Full VAT":
                                                                      BEGIN
                                                                        TESTFIELD(Type,Type::"G/L Account");
                                                                        TESTFIELD("No.",VATPostingSetup.GetSalesAccount(FALSE));
                                                                      END;
                                                                  END;

                                                                IF SalesHeader."Prices Including VAT" AND (Type IN [Type::Item,Type::Resource]) THEN
                                                                  VALIDATE("Unit Price",
                                                                    ROUND(
                                                                      "Unit Price" * (100 + "VAT %") / (100 + xRec."VAT %"),
                                                                      Currency."Unit-Amount Rounding Precision"));
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=[ENU=VAT Prod. Posting Group;
                                                              ENN=VAT Prod. Posting Group] }
    { 91  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   CaptionML=[ENU=Currency Code;
                                                              ENN=Currency Code];
                                                   Editable=No }
    { 92  ;   ;Outstanding Amount (LCY);Decimal   ;CaptionML=[ENU=Outstanding Amount (LCY);
                                                              ENN=Outstanding Amount (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 93  ;   ;Shipped Not Invoiced (LCY);Decimal ;CaptionML=[ENU=Shipped Not Invoiced (LCY) Incl. VAT;
                                                              ENN=Shipped Not Invoiced (LCY) Incl. VAT];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 94  ;   ;Shipped Not Inv. (LCY) No VAT;Decimal;
                                                   FieldClass=Normal;
                                                   CaptionML=[ENU=Shipped Not Invoiced (LCY);
                                                              ENN=Shipped Not Invoiced (LCY)];
                                                   Editable=No }
    { 95  ;   ;Reserved Quantity   ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Reservation Entry".Quantity WHERE (Source ID=FIELD(Document No.),
                                                                                                        Source Ref. No.=FIELD(Line No.),
                                                                                                        Source Type=CONST(37),
                                                                                                        Source Subtype=FIELD(Document Type),
                                                                                                        Reservation Status=CONST(Reservation)));
                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=[ENU=Reserved Quantity;
                                                              ENN=Reserved Quantity];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 96  ;   ;Reserve             ;Option        ;OnValidate=VAR
                                                                Item@1000 : Record 27;
                                                              BEGIN
                                                                IF Reserve <> Reserve::Never THEN BEGIN
                                                                  TESTFIELD(Type,Type::Item);
                                                                  TESTFIELD("No.");
                                                                END;
                                                                CALCFIELDS("Reserved Qty. (Base)");
                                                                IF (Reserve = Reserve::Never) AND ("Reserved Qty. (Base)" > 0) THEN
                                                                  TESTFIELD("Reserved Qty. (Base)",0);

                                                                IF "Drop Shipment" OR "Special Order" THEN
                                                                  TESTFIELD(Reserve,Reserve::Never);
                                                                IF xRec.Reserve = Reserve::Always THEN BEGIN
                                                                  GetItem(Item);
                                                                  IF Item.Reserve = Item.Reserve::Always THEN
                                                                    TESTFIELD(Reserve,Reserve::Always);
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 27=R;
                                                   CaptionML=[ENU=Reserve;
                                                              ENN=Reserve];
                                                   OptionCaptionML=[ENU=Never,Optional,Always;
                                                                    ENN=Never,Optional,Always];
                                                   OptionString=Never,Optional,Always }
    { 97  ;   ;Blanket Order No.   ;Code20        ;TableRelation="Sales Header".No. WHERE (Document Type=CONST(Blanket Order));
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Quantity Shipped",0);
                                                                IF "Blanket Order No." = '' THEN
                                                                  "Blanket Order Line No." := 0
                                                                ELSE
                                                                  VALIDATE("Blanket Order Line No.");
                                                              END;

                                                   OnLookup=BEGIN
                                                              BlanketOrderLookup;
                                                            END;

                                                   TestTableRelation=No;
                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=[ENU=Blanket Order No.;
                                                              ENN=Blanket Order No.] }
    { 98  ;   ;Blanket Order Line No.;Integer     ;TableRelation="Sales Line"."Line No." WHERE (Document Type=CONST(Blanket Order),
                                                                                                Document No.=FIELD(Blanket Order No.));
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Quantity Shipped",0);
                                                                IF "Blanket Order Line No." <> 0 THEN BEGIN
                                                                  SalesLine2.GET("Document Type"::"Blanket Order","Blanket Order No.","Blanket Order Line No.");
                                                                  SalesLine2.TESTFIELD(Type,Type);
                                                                  SalesLine2.TESTFIELD("No.","No.");
                                                                  SalesLine2.TESTFIELD("Bill-to Customer No.","Bill-to Customer No.");
                                                                  SalesLine2.TESTFIELD("Sell-to Customer No.","Sell-to Customer No.");
                                                                  IF "Drop Shipment" THEN BEGIN
                                                                    SalesLine2.TESTFIELD("Variant Code","Variant Code");
                                                                    SalesLine2.TESTFIELD("Location Code","Location Code");
                                                                    SalesLine2.TESTFIELD("Unit of Measure Code","Unit of Measure Code");
                                                                  END ELSE BEGIN
                                                                    VALIDATE("Variant Code",SalesLine2."Variant Code");
                                                                    VALIDATE("Location Code",SalesLine2."Location Code");
                                                                    VALIDATE("Unit of Measure Code",SalesLine2."Unit of Measure Code");
                                                                  END;
                                                                  VALIDATE("Unit Price",SalesLine2."Unit Price");
                                                                  VALIDATE("Line Discount %",SalesLine2."Line Discount %");
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              BlanketOrderLookup;
                                                            END;

                                                   TestTableRelation=No;
                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=[ENU=Blanket Order Line No.;
                                                              ENN=Blanket Order Line No.] }
    { 99  ;   ;VAT Base Amount     ;Decimal       ;CaptionML=[ENU=VAT Base Amount;
                                                              ENN=VAT Base Amount];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 100 ;   ;Unit Cost           ;Decimal       ;CaptionML=[ENU=Unit Cost;
                                                              ENN=Unit Cost];
                                                   Editable=No;
                                                   AutoFormatType=2;
                                                   AutoFormatExpr="Currency Code" }
    { 101 ;   ;System-Created Entry;Boolean       ;CaptionML=[ENU=System-Created Entry;
                                                              ENN=System-Created Entry];
                                                   Editable=No }
    { 103 ;   ;Line Amount         ;Decimal       ;OnValidate=VAR
                                                                MaxLineAmount@1000 : Decimal;
                                                              BEGIN
                                                                TESTFIELD(Type);
                                                                TESTFIELD(Quantity);
                                                                TESTFIELD("Unit Price");
                                                                GetSalesHeader;

                                                                "Line Amount" := ROUND("Line Amount",Currency."Amount Rounding Precision");
                                                                MaxLineAmount := ROUND(Quantity * "Unit Price",Currency."Amount Rounding Precision");

                                                                IF "Line Amount" < 0 THEN
                                                                  IF "Line Amount" < MaxLineAmount THEN
                                                                    ERROR(LineAmountInvalidErr);

                                                                IF "Line Amount" > 0 THEN
                                                                  IF "Line Amount" > MaxLineAmount THEN
                                                                    ERROR(LineAmountInvalidErr);

                                                                VALIDATE("Line Discount Amount",MaxLineAmount - "Line Amount");
                                                              END;

                                                   CaptionML=[ENU=Line Amount;
                                                              ENN=Line Amount];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code";
                                                   CaptionClass=GetCaptionClass(FIELDNO("Line Amount")) }
    { 104 ;   ;VAT Difference      ;Decimal       ;CaptionML=[ENU=VAT Difference;
                                                              ENN=VAT Difference];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 105 ;   ;Inv. Disc. Amount to Invoice;Decimal;
                                                   CaptionML=[ENU=Inv. Disc. Amount to Invoice;
                                                              ENN=Inv. Disc. Amount to Invoice];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 106 ;   ;VAT Identifier      ;Code20        ;CaptionML=[ENU=VAT Identifier;
                                                              ENN=VAT Identifier];
                                                   Editable=No }
    { 107 ;   ;IC Partner Ref. Type;Option        ;OnValidate=VAR
                                                                Item@1000 : Record 27;
                                                              BEGIN
                                                                IF "IC Partner Code" <> '' THEN
                                                                  "IC Partner Ref. Type" := "IC Partner Ref. Type"::"G/L Account";
                                                                IF "IC Partner Ref. Type" <> xRec."IC Partner Ref. Type" THEN
                                                                  "IC Partner Reference" := '';
                                                                IF "IC Partner Ref. Type" = "IC Partner Ref. Type"::"Common Item No." THEN BEGIN
                                                                  GetItem(Item);
                                                                  Item.TESTFIELD("Common Item No.");
                                                                  "IC Partner Reference" := Item."Common Item No.";
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 410=R;
                                                   CaptionML=[ENU=IC Partner Ref. Type;
                                                              ENN=IC Partner Ref. Type];
                                                   OptionCaptionML=[ENU=" ,G/L Account,Item,,,Charge (Item),Cross Reference,Common Item No.";
                                                                    ENN=" ,G/L Account,Item,,,Charge (Item),Cross Reference,Common Item No."];
                                                   OptionString=[ ,G/L Account,Item,,,Charge (Item),Cross Reference,Common Item No.] }
    { 108 ;   ;IC Partner Reference;Code20        ;OnLookup=VAR
                                                              ICGLAccount@1000 : Record 410;
                                                              Item@1002 : Record 27;
                                                              ItemCrossReference@1001 : Record 5717;
                                                            BEGIN
                                                              IF "No." <> '' THEN
                                                                CASE "IC Partner Ref. Type" OF
                                                                  "IC Partner Ref. Type"::"G/L Account":
                                                                    BEGIN
                                                                      IF ICGLAccount.GET("IC Partner Reference") THEN;
                                                                      IF PAGE.RUNMODAL(PAGE::"IC G/L Account List",ICGLAccount) = ACTION::LookupOK THEN
                                                                        VALIDATE("IC Partner Reference",ICGLAccount."No.");
                                                                    END;
                                                                  "IC Partner Ref. Type"::Item:
                                                                    BEGIN
                                                                      IF Item.GET("IC Partner Reference") THEN;
                                                                      IF PAGE.RUNMODAL(PAGE::"Item List",Item) = ACTION::LookupOK THEN
                                                                        VALIDATE("IC Partner Reference",Item."No.");
                                                                    END;
                                                                  "IC Partner Ref. Type"::"Cross Reference":
                                                                    BEGIN
                                                                      ItemCrossReference.RESET;
                                                                      ItemCrossReference.SETCURRENTKEY("Cross-Reference Type","Cross-Reference Type No.");
                                                                      ItemCrossReference.SETFILTER(
                                                                        "Cross-Reference Type",'%1|%2',
                                                                        ItemCrossReference."Cross-Reference Type"::Customer,
                                                                        ItemCrossReference."Cross-Reference Type"::" ");
                                                                      ItemCrossReference.SETFILTER("Cross-Reference Type No.",'%1|%2',"Sell-to Customer No.",'');
                                                                      IF PAGE.RUNMODAL(PAGE::"Cross Reference List",ItemCrossReference) = ACTION::LookupOK THEN
                                                                        VALIDATE("IC Partner Reference",ItemCrossReference."Cross-Reference No.");
                                                                    END;
                                                                END;
                                                            END;

                                                   AccessByPermission=TableData 410=R;
                                                   CaptionML=[ENU=IC Partner Reference;
                                                              ENN=IC Partner Reference] }
    { 109 ;   ;Prepayment %        ;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                UpdatePrepmtSetupFields;

                                                                IF HasTypeToFillMandatoryFields THEN
                                                                  UpdateAmounts;
                                                                UpdateBaseAmounts(Amount,"Amount Including VAT","VAT Base Amount");
                                                              END;

                                                   CaptionML=[ENU=Prepayment %;
                                                              ENN=Prepayment %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 110 ;   ;Prepmt. Line Amount ;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                PrePaymentLineAmountEntered := TRUE;
                                                                TESTFIELD("Line Amount");
                                                                IF "Prepmt. Line Amount" < "Prepmt. Amt. Inv." THEN
                                                                  FIELDERROR("Prepmt. Line Amount",STRSUBSTNO(Text044,"Prepmt. Amt. Inv."));
                                                                IF "Prepmt. Line Amount" > "Line Amount" THEN
                                                                  FIELDERROR("Prepmt. Line Amount",STRSUBSTNO(Text045,"Line Amount"));
                                                                IF "System-Created Entry" AND NOT IsServiceCharge THEN
                                                                  FIELDERROR("Prepmt. Line Amount",STRSUBSTNO(Text045,0));
                                                                VALIDATE("Prepayment %",ROUND("Prepmt. Line Amount" * 100 / "Line Amount",0.00001));
                                                              END;

                                                   CaptionML=[ENU=Prepmt. Line Amount;
                                                              ENN=Prepmt. Line Amount];
                                                   MinValue=0;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code";
                                                   CaptionClass=GetCaptionClass(FIELDNO("Prepmt. Line Amount")) }
    { 111 ;   ;Prepmt. Amt. Inv.   ;Decimal       ;CaptionML=[ENU=Prepmt. Amt. Inv.;
                                                              ENN=Prepmt. Amt. Inv.];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code";
                                                   CaptionClass=GetCaptionClass(FIELDNO("Prepmt. Amt. Inv.")) }
    { 112 ;   ;Prepmt. Amt. Incl. VAT;Decimal     ;CaptionML=[ENU=Prepmt. Amt. Incl. VAT;
                                                              ENN=Prepmt. Amt. Incl. VAT];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 113 ;   ;Prepayment Amount   ;Decimal       ;CaptionML=[ENU=Prepayment Amount;
                                                              ENN=Prepayment Amount];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 114 ;   ;Prepmt. VAT Base Amt.;Decimal      ;CaptionML=[ENU=Prepmt. VAT Base Amt.;
                                                              ENN=Prepmt. VAT Base Amt.];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 115 ;   ;Prepayment VAT %    ;Decimal       ;CaptionML=[ENU=Prepayment VAT %;
                                                              ENN=Prepayment VAT %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   Editable=No }
    { 116 ;   ;Prepmt. VAT Calc. Type;Option      ;CaptionML=[ENU=Prepmt. VAT Calc. Type;
                                                              ENN=Prepmt. VAT Calc. Type];
                                                   OptionCaptionML=[ENU=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                                    ENN=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax];
                                                   OptionString=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                   Editable=No }
    { 117 ;   ;Prepayment VAT Identifier;Code20   ;CaptionML=[ENU=Prepayment VAT Identifier;
                                                              ENN=Prepayment VAT Identifier];
                                                   Editable=No }
    { 118 ;   ;Prepayment Tax Area Code;Code20    ;TableRelation="Tax Area";
                                                   OnValidate=BEGIN
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=[ENU=Prepayment Tax Area Code;
                                                              ENN=Prepayment VAT Area Code] }
    { 119 ;   ;Prepayment Tax Liable;Boolean      ;OnValidate=BEGIN
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=[ENU=Prepayment Tax Liable;
                                                              ENN=Prepayment VAT Liable] }
    { 120 ;   ;Prepayment Tax Group Code;Code20   ;TableRelation="Tax Group";
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=[ENU=Prepayment Tax Group Code;
                                                              ENN=Prepayment VAT Group Code] }
    { 121 ;   ;Prepmt Amt to Deduct;Decimal       ;OnValidate=BEGIN
                                                                IF "Prepmt Amt to Deduct" > "Prepmt. Amt. Inv." - "Prepmt Amt Deducted" THEN
                                                                  FIELDERROR(
                                                                    "Prepmt Amt to Deduct",
                                                                    STRSUBSTNO(Text045,"Prepmt. Amt. Inv." - "Prepmt Amt Deducted"));

                                                                IF "Prepmt Amt to Deduct" > "Qty. to Invoice" * "Unit Price" THEN
                                                                  FIELDERROR(
                                                                    "Prepmt Amt to Deduct",
                                                                    STRSUBSTNO(Text045,"Qty. to Invoice" * "Unit Price"));

                                                                IF ("Prepmt. Amt. Inv." - "Prepmt Amt to Deduct" - "Prepmt Amt Deducted") >
                                                                   (Quantity - "Qty. to Invoice" - "Quantity Invoiced") * "Unit Price"
                                                                THEN
                                                                  FIELDERROR(
                                                                    "Prepmt Amt to Deduct",
                                                                    STRSUBSTNO(Text044,
                                                                      "Prepmt. Amt. Inv." - "Prepmt Amt Deducted" - (Quantity - "Qty. to Invoice" - "Quantity Invoiced") * "Unit Price"));
                                                              END;

                                                   CaptionML=[ENU=Prepmt Amt to Deduct;
                                                              ENN=Prepmt Amt to Deduct];
                                                   MinValue=0;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code";
                                                   CaptionClass=GetCaptionClass(FIELDNO("Prepmt Amt to Deduct")) }
    { 122 ;   ;Prepmt Amt Deducted ;Decimal       ;CaptionML=[ENU=Prepmt Amt Deducted;
                                                              ENN=Prepmt Amt Deducted];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code";
                                                   CaptionClass=GetCaptionClass(FIELDNO("Prepmt Amt Deducted")) }
    { 123 ;   ;Prepayment Line     ;Boolean       ;CaptionML=[ENU=Prepayment Line;
                                                              ENN=Prepayment Line];
                                                   Editable=No }
    { 124 ;   ;Prepmt. Amount Inv. Incl. VAT;Decimal;
                                                   CaptionML=[ENU=Prepmt. Amount Inv. Incl. VAT;
                                                              ENN=Prepmt. Amount Inv. Incl. VAT];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 129 ;   ;Prepmt. Amount Inv. (LCY);Decimal  ;CaptionML=[ENU=Prepmt. Amount Inv. (LCY);
                                                              ENN=Prepmt. Amount Inv. (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 130 ;   ;IC Partner Code     ;Code20        ;TableRelation="IC Partner";
                                                   OnValidate=BEGIN
                                                                IF "IC Partner Code" <> '' THEN BEGIN
                                                                  TESTFIELD(Type,Type::"G/L Account");
                                                                  GetSalesHeader;
                                                                  SalesHeader.TESTFIELD("Sell-to IC Partner Code",'');
                                                                  SalesHeader.TESTFIELD("Bill-to IC Partner Code",'');
                                                                  VALIDATE("IC Partner Ref. Type","IC Partner Ref. Type"::"G/L Account");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=IC Partner Code;
                                                              ENN=IC Partner Code] }
    { 132 ;   ;Prepmt. VAT Amount Inv. (LCY);Decimal;
                                                   CaptionML=[ENU=Prepmt. VAT Amount Inv. (LCY);
                                                              ENN=Prepmt. VAT Amount Inv. (LCY)];
                                                   Editable=No }
    { 135 ;   ;Prepayment VAT Difference;Decimal  ;CaptionML=[ENU=Prepayment VAT Difference;
                                                              ENN=Prepayment VAT Difference];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 136 ;   ;Prepmt VAT Diff. to Deduct;Decimal ;CaptionML=[ENU=Prepmt VAT Diff. to Deduct;
                                                              ENN=Prepmt VAT Diff. to Deduct];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 137 ;   ;Prepmt VAT Diff. Deducted;Decimal  ;CaptionML=[ENU=Prepmt VAT Diff. Deducted;
                                                              ENN=Prepmt VAT Diff. Deducted];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 145 ;   ;Pmt. Discount Amount;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD(Quantity);
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=[ENU=Pmt. Discount Amount;
                                                              ENN=Pmt. Discount Amount];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 180 ;   ;Line Discount Calculation;Option   ;CaptionML=[ENU=Line Discount Calculation;
                                                              ENN=Line Discount Calculation];
                                                   OptionCaptionML=[ENU=None,%,Amount;
                                                                    ENN=None,%,Amount];
                                                   OptionString=None,%,Amount }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnValidate=BEGIN
                                                                DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
                                                              END;

                                                   OnLookup=BEGIN
                                                              ShowDimensions;
                                                            END;

                                                   CaptionML=[ENU=Dimension Set ID;
                                                              ENN=Dimension Set ID];
                                                   Editable=No }
    { 900 ;   ;Qty. to Assemble to Order;Decimal  ;OnValidate=VAR
                                                                SalesLineReserve@1000 : Codeunit 99000832;
                                                              BEGIN
                                                                WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);

                                                                "Qty. to Asm. to Order (Base)" := CalcBaseQty("Qty. to Assemble to Order");

                                                                IF "Qty. to Asm. to Order (Base)" <> 0 THEN BEGIN
                                                                  TESTFIELD("Drop Shipment",FALSE);
                                                                  TESTFIELD("Special Order",FALSE);
                                                                  IF "Qty. to Asm. to Order (Base)" < 0 THEN
                                                                    FIELDERROR("Qty. to Assemble to Order",STRSUBSTNO(Text009,FIELDCAPTION("Quantity (Base)"),"Quantity (Base)"));
                                                                  TESTFIELD("Appl.-to Item Entry",0);

                                                                  CASE "Document Type" OF
                                                                    "Document Type"::"Blanket Order",
                                                                    "Document Type"::Quote:
                                                                      IF ("Quantity (Base)" = 0) OR ("Qty. to Asm. to Order (Base)" <= 0) OR SalesLineReserve.ReservEntryExist(Rec) THEN
                                                                        TESTFIELD("Qty. to Asm. to Order (Base)",0)
                                                                      ELSE
                                                                        IF "Quantity (Base)" <> "Qty. to Asm. to Order (Base)" THEN
                                                                          FIELDERROR("Qty. to Assemble to Order",STRSUBSTNO(Text031,0,"Quantity (Base)"));
                                                                    "Document Type"::Order:
                                                                      ;
                                                                    ELSE
                                                                      TESTFIELD("Qty. to Asm. to Order (Base)",0);
                                                                  END;
                                                                END;

                                                                CheckItemAvailable(FIELDNO("Qty. to Assemble to Order"));
                                                                IF NOT (CurrFieldNo IN [FIELDNO(Quantity),FIELDNO("Qty. to Assemble to Order")]) THEN
                                                                  GetDefaultBin;
                                                                AutoAsmToOrder;
                                                              END;

                                                   AccessByPermission=TableData 90=R;
                                                   CaptionML=[ENU=Qty. to Assemble to Order;
                                                              ENN=Qty. to Assemble to Order];
                                                   DecimalPlaces=0:5 }
    { 901 ;   ;Qty. to Asm. to Order (Base);Decimal;
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE("Qty. to Assemble to Order","Qty. to Asm. to Order (Base)");
                                                              END;

                                                   CaptionML=[ENU=Qty. to Asm. to Order (Base);
                                                              ENN=Qty. to Asm. to Order (Base)];
                                                   DecimalPlaces=0:5 }
    { 902 ;   ;ATO Whse. Outstanding Qty.;Decimal ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Warehouse Shipment Line"."Qty. Outstanding" WHERE (Source Type=CONST(37),
                                                                                                                       Source Subtype=FIELD(Document Type),
                                                                                                                       Source No.=FIELD(Document No.),
                                                                                                                       Source Line No.=FIELD(Line No.),
                                                                                                                       Assemble to Order=FILTER(Yes)));
                                                   AccessByPermission=TableData 90=R;
                                                   CaptionML=[ENU=ATO Whse. Outstanding Qty.;
                                                              ENN=ATO Whse. Outstanding Qty.];
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 903 ;   ;ATO Whse. Outstd. Qty. (Base);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Warehouse Shipment Line"."Qty. Outstanding (Base)" WHERE (Source Type=CONST(37),
                                                                                                                              Source Subtype=FIELD(Document Type),
                                                                                                                              Source No.=FIELD(Document No.),
                                                                                                                              Source Line No.=FIELD(Line No.),
                                                                                                                              Assemble to Order=FILTER(Yes)));
                                                   AccessByPermission=TableData 90=R;
                                                   CaptionML=[ENU=ATO Whse. Outstd. Qty. (Base);
                                                              ENN=ATO Whse. Outstd. Qty. (Base)];
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 1001;   ;Job Task No.        ;Code20        ;TableRelation="Job Task"."Job Task No." WHERE (Job No.=FIELD(Job No.));
                                                   CaptionML=[ENU=Job Task No.;
                                                              ENN=Job Task No.];
                                                   Editable=No }
    { 1002;   ;Job Contract Entry No.;Integer     ;OnValidate=VAR
                                                                JobPlanningLine@1001 : Record 1003;
                                                              BEGIN
                                                                JobPlanningLine.SETCURRENTKEY("Job Contract Entry No.");
                                                                JobPlanningLine.SETRANGE("Job Contract Entry No.","Job Contract Entry No.");
                                                                JobPlanningLine.FINDFIRST;
                                                                CreateDim(
                                                                  DimMgt.TypeToTableID3(Type),"No.",
                                                                  DATABASE::Job,JobPlanningLine."Job No.",
                                                                  DATABASE::"Responsibility Center","Responsibility Center");
                                                              END;

                                                   AccessByPermission=TableData 167=R;
                                                   CaptionML=[ENU=Job Contract Entry No.;
                                                              ENN=Job Contract Entry No.];
                                                   Editable=No }
    { 1300;   ;Posting Date        ;Date          ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Sales Header"."Posting Date" WHERE (Document Type=FIELD(Document Type),
                                                                                                           No.=FIELD(Document No.)));
                                                   CaptionML=[ENU=Posting Date;
                                                              ENN=Posting Date] }
    { 1700;   ;Deferral Code       ;Code10        ;TableRelation="Deferral Template"."Deferral Code";
                                                   OnValidate=VAR
                                                                DeferralPostDate@1000 : Date;
                                                              BEGIN
                                                                GetSalesHeader;
                                                                OnGetDeferralPostDate(SalesHeader,DeferralPostDate,Rec);
                                                                IF DeferralPostDate = 0D THEN
                                                                  DeferralPostDate := SalesHeader."Posting Date";

                                                                DeferralUtilities.DeferralCodeOnValidate(
                                                                  "Deferral Code",DeferralUtilities.GetSalesDeferralDocType,'','',
                                                                  "Document Type","Document No.","Line No.",
                                                                  GetDeferralAmount,DeferralPostDate,
                                                                  Description,SalesHeader."Currency Code");

                                                                IF "Document Type" = "Document Type"::"Return Order" THEN
                                                                  "Returns Deferral Start Date" :=
                                                                    DeferralUtilities.GetDeferralStartDate(DeferralUtilities.GetSalesDeferralDocType,
                                                                      "Document Type","Document No.","Line No.","Deferral Code",SalesHeader."Posting Date");
                                                              END;

                                                   CaptionML=[ENU=Deferral Code;
                                                              ENN=Deferral Code] }
    { 1702;   ;Returns Deferral Start Date;Date   ;OnValidate=VAR
                                                                DeferralHeader@1000 : Record 1701;
                                                              BEGIN
                                                                GetSalesHeader;
                                                                IF DeferralHeader.GET(DeferralUtilities.GetSalesDeferralDocType,'','',"Document Type","Document No.","Line No.") THEN
                                                                  DeferralUtilities.CreateDeferralSchedule("Deferral Code",DeferralUtilities.GetSalesDeferralDocType,'','',
                                                                    "Document Type","Document No.","Line No.",GetDeferralAmount,
                                                                    DeferralHeader."Calc. Method","Returns Deferral Start Date",
                                                                    DeferralHeader."No. of Periods",TRUE,
                                                                    DeferralHeader."Schedule Description",FALSE,
                                                                    SalesHeader."Currency Code");
                                                              END;

                                                   CaptionML=[ENU=Returns Deferral Start Date;
                                                              ENN=Returns Deferral Start Date] }
    { 5402;   ;Variant Code        ;Code10        ;TableRelation=IF (Type=CONST(Item)) "Item Variant".Code WHERE (Item No.=FIELD(No.));
                                                   OnValidate=BEGIN
                                                                TestJobPlanningLine;
                                                                IF "Variant Code" <> '' THEN
                                                                  TESTFIELD(Type,Type::Item);
                                                                TestStatusOpen;
                                                                CheckAssocPurchOrder(FIELDCAPTION("Variant Code"));

                                                                IF xRec."Variant Code" <> "Variant Code" THEN BEGIN
                                                                  TESTFIELD("Qty. Shipped Not Invoiced",0);
                                                                  TESTFIELD("Shipment No.",'');

                                                                  TESTFIELD("Return Qty. Rcd. Not Invd.",0);
                                                                  TESTFIELD("Return Receipt No.",'');
                                                                  InitItemAppl(FALSE);
                                                                END;

                                                                OnValidateVariantCodeOnAfterChecks(Rec,xRec,CurrFieldNo);

                                                                CheckItemAvailable(FIELDNO("Variant Code"));

                                                                IF Type = Type::Item THEN BEGIN
                                                                  GetUnitCost;
                                                                  UpdateUnitPrice(FIELDNO("Variant Code"));
                                                                END;

                                                                GetDefaultBin;
                                                                InitQtyToAsm;
                                                                AutoAsmToOrder;
                                                                IF (xRec."Variant Code" <> "Variant Code") AND (Quantity <> 0) THEN BEGIN
                                                                  IF NOT FullReservedQtyIsForAsmToOrder THEN
                                                                    ReserveSalesLine.VerifyChange(Rec,xRec);
                                                                  WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);
                                                                END;

                                                                UpdateItemCrossRef;
                                                              END;

                                                   CaptionML=[ENU=Variant Code;
                                                              ENN=Variant Code] }
    { 5403;   ;Bin Code            ;Code20        ;TableRelation=IF (Document Type=FILTER(Order|Invoice),
                                                                     Quantity=FILTER(>=0),
                                                                     Qty. to Asm. to Order (Base)=CONST(0)) "Bin Content"."Bin Code" WHERE (Location Code=FIELD(Location Code),
                                                                                                                                            Item No.=FIELD(No.),
                                                                                                                                            Variant Code=FIELD(Variant Code))
                                                                                                                                            ELSE IF (Document Type=FILTER(Return Order|Credit Memo),
                                                                                                                                                     Quantity=FILTER(<0)) "Bin Content"."Bin Code" WHERE (Location Code=FIELD(Location Code),
                                                                                                                                                                                                          Item No.=FIELD(No.),
                                                                                                                                                                                                          Variant Code=FIELD(Variant Code))
                                                                                                                                                                                                          ELSE Bin.Code WHERE (Location Code=FIELD(Location Code));
                                                   OnValidate=VAR
                                                                WMSManagement@1001 : Codeunit 7302;
                                                              BEGIN
                                                                IF "Bin Code" <> '' THEN BEGIN
                                                                  IF NOT IsInbound AND ("Quantity (Base)" <> 0) AND ("Qty. to Asm. to Order (Base)" = 0) THEN
                                                                    WMSManagement.FindBinContent("Location Code","Bin Code","No.","Variant Code",'')
                                                                  ELSE
                                                                    WMSManagement.FindBin("Location Code","Bin Code",'');
                                                                END;

                                                                IF "Drop Shipment" THEN
                                                                  CheckAssocPurchOrder(FIELDCAPTION("Bin Code"));

                                                                TESTFIELD(Type,Type::Item);
                                                                TESTFIELD("Location Code");

                                                                IF (Type = Type::Item) AND ("Bin Code" <> '') THEN BEGIN
                                                                  TESTFIELD("Drop Shipment",FALSE);
                                                                  GetLocation("Location Code");
                                                                  Location.TESTFIELD("Bin Mandatory");
                                                                  CheckWarehouse;
                                                                END;
                                                                ATOLink.UpdateAsmBinCodeFromSalesLine(Rec);
                                                              END;

                                                   OnLookup=VAR
                                                              WMSManagement@1002 : Codeunit 7302;
                                                              BinCode@1000 : Code[20];
                                                            BEGIN
                                                              IF NOT IsInbound AND ("Quantity (Base)" <> 0) THEN
                                                                BinCode := WMSManagement.BinContentLookUp("Location Code","No.","Variant Code",'',"Bin Code")
                                                              ELSE
                                                                BinCode := WMSManagement.BinLookUp("Location Code","No.","Variant Code",'');

                                                              IF BinCode <> '' THEN
                                                                VALIDATE("Bin Code",BinCode);
                                                            END;

                                                   CaptionML=[ENU=Bin Code;
                                                              ENN=Bin Code] }
    { 5404;   ;Qty. per Unit of Measure;Decimal   ;InitValue=1;
                                                   CaptionML=[ENU=Qty. per Unit of Measure;
                                                              ENN=Qty. per Unit of Measure];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5405;   ;Planned             ;Boolean       ;CaptionML=[ENU=Planned;
                                                              ENN=Planned];
                                                   Editable=No }
    { 5407;   ;Unit of Measure Code;Code10        ;TableRelation=IF (Type=CONST(Item),
                                                                     No.=FILTER(<>'')) "Item Unit of Measure".Code WHERE (Item No.=FIELD(No.))
                                                                     ELSE IF (Type=CONST(Resource),
                                                                              No.=FILTER(<>'')) "Resource Unit of Measure".Code WHERE (Resource No.=FIELD(No.))
                                                                              ELSE "Unit of Measure";
                                                   OnValidate=VAR
                                                                Item@1002 : Record 27;
                                                                UnitOfMeasureTranslation@1000 : Record 5402;
                                                                ResUnitofMeasure@1001 : Record 205;
                                                                IdentityManagement@1161 : Codeunit 9801;
                                                              BEGIN
                                                                TestJobPlanningLine;
                                                                TestStatusOpen;
                                                                TESTFIELD("Quantity Shipped",0);
                                                                TESTFIELD("Qty. Shipped (Base)",0);
                                                                TESTFIELD("Return Qty. Received",0);
                                                                TESTFIELD("Return Qty. Received (Base)",0);
                                                                IF "Unit of Measure Code" <> xRec."Unit of Measure Code" THEN BEGIN
                                                                  TESTFIELD("Shipment No.",'');
                                                                  TESTFIELD("Return Receipt No.",'');
                                                                END;

                                                                CheckAssocPurchOrder(FIELDCAPTION("Unit of Measure Code"));

                                                                IF "Unit of Measure Code" = '' THEN
                                                                  "Unit of Measure" := ''
                                                                ELSE BEGIN
                                                                  IF NOT UnitOfMeasure.GET("Unit of Measure Code") THEN
                                                                    UnitOfMeasure.INIT;
                                                                  "Unit of Measure" := UnitOfMeasure.Description;
                                                                  GetSalesHeader;
                                                                  IF SalesHeader."Language Code" <> '' THEN BEGIN
                                                                    UnitOfMeasureTranslation.SETRANGE(Code,"Unit of Measure Code");
                                                                    UnitOfMeasureTranslation.SETRANGE("Language Code",SalesHeader."Language Code");
                                                                    IF UnitOfMeasureTranslation.FINDFIRST THEN
                                                                      "Unit of Measure" := UnitOfMeasureTranslation.Description;
                                                                  END ELSE
                                                                    IF IdentityManagement.IsInvAppId THEN
                                                                      "Unit of Measure" := UnitOfMeasure.GetDescriptionInCurrentLanguage;
                                                                END;
                                                                DistIntegration.EnterSalesItemCrossRef(Rec);
                                                                CASE Type OF
                                                                  Type::Item:
                                                                    BEGIN
                                                                      GetItem(Item);
                                                                      GetUnitCost;
                                                                      UpdateUnitPrice(FIELDNO("Unit of Measure Code"));
                                                                      CheckItemAvailable(FIELDNO("Unit of Measure Code"));
                                                                      "Gross Weight" := Item."Gross Weight" * "Qty. per Unit of Measure";
                                                                      "Net Weight" := Item."Net Weight" * "Qty. per Unit of Measure";
                                                                      "Unit Volume" := Item."Unit Volume" * "Qty. per Unit of Measure";
                                                                      "Units per Parcel" :=
                                                                        ROUND(Item."Units per Parcel" / "Qty. per Unit of Measure",UOMMgt.QtyRndPrecision);
                                                                      OnAfterAssignItemUOM(Rec,Item);
                                                                      IF (xRec."Unit of Measure Code" <> "Unit of Measure Code") AND (Quantity <> 0) THEN
                                                                        WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);
                                                                      IF "Qty. per Unit of Measure" > xRec."Qty. per Unit of Measure" THEN
                                                                        InitItemAppl(FALSE);
                                                                    END;
                                                                  Type::Resource:
                                                                    BEGIN
                                                                      IF "Unit of Measure Code" = '' THEN BEGIN
                                                                        GetResource;
                                                                        "Unit of Measure Code" := Resource."Base Unit of Measure";
                                                                      END;
                                                                      ResUnitofMeasure.GET("No.","Unit of Measure Code");
                                                                      "Qty. per Unit of Measure" := ResUnitofMeasure."Qty. per Unit of Measure";
                                                                      OnAfterAssignResourceUOM(Rec,Resource,ResUnitofMeasure);
                                                                      UpdateUnitPrice(FIELDNO("Unit of Measure Code"));
                                                                      FindResUnitCost;
                                                                    END;
                                                                  Type::"G/L Account",Type::"Fixed Asset",
                                                                  Type::"Charge (Item)",Type::" ":
                                                                    "Qty. per Unit of Measure" := 1;
                                                                END;
                                                                VALIDATE(Quantity);
                                                              END;

                                                   CaptionML=[ENU=Unit of Measure Code;
                                                              ENN=Unit of Measure Code] }
    { 5415;   ;Quantity (Base)     ;Decimal       ;OnValidate=BEGIN
                                                                TestJobPlanningLine;
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE(Quantity,"Quantity (Base)");
                                                                UpdateUnitPrice(FIELDNO("Quantity (Base)"));
                                                              END;

                                                   CaptionML=[ENU=Quantity (Base);
                                                              ENN=Quantity (Base)];
                                                   DecimalPlaces=0:5 }
    { 5416;   ;Outstanding Qty. (Base);Decimal    ;CaptionML=[ENU=Outstanding Qty. (Base);
                                                              ENN=Outstanding Qty. (Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5417;   ;Qty. to Invoice (Base);Decimal     ;OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE("Qty. to Invoice","Qty. to Invoice (Base)");
                                                              END;

                                                   CaptionML=[ENU=Qty. to Invoice (Base);
                                                              ENN=Qty. to Invoice (Base)];
                                                   DecimalPlaces=0:5 }
    { 5418;   ;Qty. to Ship (Base) ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE("Qty. to Ship","Qty. to Ship (Base)");
                                                              END;

                                                   CaptionML=[ENU=Qty. to Ship (Base);
                                                              ENN=Qty. to Ship (Base)];
                                                   DecimalPlaces=0:5 }
    { 5458;   ;Qty. Shipped Not Invd. (Base);Decimal;
                                                   CaptionML=[ENU=Qty. Shipped Not Invd. (Base);
                                                              ENN=Qty. Shipped Not Invd. (Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5460;   ;Qty. Shipped (Base) ;Decimal       ;CaptionML=[ENU=Qty. Shipped (Base);
                                                              ENN=Qty. Shipped (Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5461;   ;Qty. Invoiced (Base);Decimal       ;CaptionML=[ENU=Qty. Invoiced (Base);
                                                              ENN=Qty. Invoiced (Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5495;   ;Reserved Qty. (Base);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Reservation Entry"."Quantity (Base)" WHERE (Source ID=FIELD(Document No.),
                                                                                                                 Source Ref. No.=FIELD(Line No.),
                                                                                                                 Source Type=CONST(37),
                                                                                                                 Source Subtype=FIELD(Document Type),
                                                                                                                 Reservation Status=CONST(Reservation)));
                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=[ENU=Reserved Qty. (Base);
                                                              ENN=Reserved Qty. (Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5600;   ;FA Posting Date     ;Date          ;AccessByPermission=TableData 5600=R;
                                                   CaptionML=[ENU=FA Posting Date;
                                                              ENN=FA Posting Date] }
    { 5602;   ;Depreciation Book Code;Code10      ;TableRelation="Depreciation Book";
                                                   OnValidate=BEGIN
                                                                GetFAPostingGroup;
                                                              END;

                                                   CaptionML=[ENU=Depreciation Book Code;
                                                              ENN=Depreciation Book Code] }
    { 5605;   ;Depr. until FA Posting Date;Boolean;AccessByPermission=TableData 5600=R;
                                                   CaptionML=[ENU=Depr. until FA Posting Date;
                                                              ENN=Depr. until FA Posting Date] }
    { 5612;   ;Duplicate in Depreciation Book;Code10;
                                                   TableRelation="Depreciation Book";
                                                   OnValidate=BEGIN
                                                                "Use Duplication List" := FALSE;
                                                              END;

                                                   CaptionML=[ENU=Duplicate in Depreciation Book;
                                                              ENN=Duplicate in Depreciation Book] }
    { 5613;   ;Use Duplication List;Boolean       ;OnValidate=BEGIN
                                                                "Duplicate in Depreciation Book" := '';
                                                              END;

                                                   AccessByPermission=TableData 5600=R;
                                                   CaptionML=[ENU=Use Duplication List;
                                                              ENN=Use Duplication List] }
    { 5700;   ;Responsibility Center;Code10       ;TableRelation="Responsibility Center";
                                                   OnValidate=BEGIN
                                                                CreateDim(
                                                                  DATABASE::"Responsibility Center","Responsibility Center",
                                                                  DimMgt.TypeToTableID3(Type),"No.",
                                                                  DATABASE::Job,"Job No.");
                                                              END;

                                                   CaptionML=[ENU=Responsibility Center;
                                                              ENN=Responsibility Centre];
                                                   Editable=No }
    { 5701;   ;Out-of-Stock Substitution;Boolean  ;CaptionML=[ENU=Out-of-Stock Substitution;
                                                              ENN=Out-of-Stock Substitution];
                                                   Editable=No }
    { 5702;   ;Substitution Available;Boolean     ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Item Substitution" WHERE (Type=CONST(Item),
                                                                                                No.=FIELD(No.),
                                                                                                Substitute Type=CONST(Item)));
                                                   CaptionML=[ENU=Substitution Available;
                                                              ENN=Substitution Available];
                                                   Editable=No }
    { 5703;   ;Originally Ordered No.;Code20      ;TableRelation=IF (Type=CONST(Item)) Item;
                                                   AccessByPermission=TableData 5715=R;
                                                   CaptionML=[ENU=Originally Ordered No.;
                                                              ENN=Originally Ordered No.] }
    { 5704;   ;Originally Ordered Var. Code;Code10;TableRelation=IF (Type=CONST(Item)) "Item Variant".Code WHERE (Item No.=FIELD(Originally Ordered No.));
                                                   AccessByPermission=TableData 5715=R;
                                                   CaptionML=[ENU=Originally Ordered Var. Code;
                                                              ENN=Originally Ordered Var. Code] }
    { 5705;   ;Cross-Reference No. ;Code20        ;OnValidate=VAR
                                                                ItemCrossReference@1000 : Record 5717;
                                                              BEGIN
                                                                GetSalesHeader;
                                                                "Sell-to Customer No." := SalesHeader."Sell-to Customer No.";
                                                                ValidateCrossReferenceNo(ItemCrossReference,TRUE);
                                                              END;

                                                   OnLookup=BEGIN
                                                              CrossReferenceNoLookUp;
                                                            END;

                                                   AccessByPermission=TableData 5717=R;
                                                   CaptionML=[ENU=Cross-Reference No.;
                                                              ENN=Cross-Reference No.] }
    { 5706;   ;Unit of Measure (Cross Ref.);Code10;TableRelation=IF (Type=CONST(Item)) "Item Unit of Measure".Code WHERE (Item No.=FIELD(No.));
                                                   AccessByPermission=TableData 5717=R;
                                                   CaptionML=[ENU=Unit of Measure (Cross Ref.);
                                                              ENN=Unit of Measure (Cross Ref.)] }
    { 5707;   ;Cross-Reference Type;Option        ;CaptionML=[ENU=Cross-Reference Type;
                                                              ENN=Cross-Reference Type];
                                                   OptionCaptionML=[ENU=" ,Customer,Vendor,Bar Code";
                                                                    ENN=" ,Customer,Vendor,Bar Code"];
                                                   OptionString=[ ,Customer,Vendor,Bar Code] }
    { 5708;   ;Cross-Reference Type No.;Code30    ;CaptionML=[ENU=Cross-Reference Type No.;
                                                              ENN=Cross-Reference Type No.] }
    { 5709;   ;Item Category Code  ;Code20        ;TableRelation="Item Category";
                                                   CaptionML=[ENU=Item Category Code;
                                                              ENN=Item Category Code] }
    { 5710;   ;Nonstock            ;Boolean       ;AccessByPermission=TableData 5718=R;
                                                   CaptionML=[ENU=Catalog;
                                                              ENN=Catalogue];
                                                   Editable=No }
    { 5711;   ;Purchasing Code     ;Code10        ;TableRelation=Purchasing;
                                                   OnValidate=VAR
                                                                PurchasingCode@1000 : Record 5721;
                                                                ShippingAgentServices@1001 : Record 5790;
                                                              BEGIN
                                                                TestStatusOpen;
                                                                TESTFIELD(Type,Type::Item);
                                                                CheckAssocPurchOrder(FIELDCAPTION(Type));

                                                                IF PurchasingCode.GET("Purchasing Code") THEN BEGIN
                                                                  "Drop Shipment" := PurchasingCode."Drop Shipment";
                                                                  "Special Order" := PurchasingCode."Special Order";
                                                                  IF "Drop Shipment" OR "Special Order" THEN BEGIN
                                                                    TESTFIELD("Qty. to Asm. to Order (Base)",0);
                                                                    CALCFIELDS("Reserved Qty. (Base)");
                                                                    TESTFIELD("Reserved Qty. (Base)",0);
                                                                    ReserveSalesLine.VerifyChange(Rec,xRec);

                                                                    IF (Quantity <> 0) AND (Quantity = "Quantity Shipped") THEN
                                                                      ERROR(SalesLineCompletelyShippedErr);
                                                                    Reserve := Reserve::Never;
                                                                    IF "Drop Shipment" THEN BEGIN
                                                                      EVALUATE("Outbound Whse. Handling Time",'<0D>');
                                                                      EVALUATE("Shipping Time",'<0D>');
                                                                      UpdateDates;
                                                                      "Bin Code" := '';
                                                                    END;
                                                                  END ELSE
                                                                    SetReserveWithoutPurchasingCode;
                                                                END ELSE BEGIN
                                                                  "Drop Shipment" := FALSE;
                                                                  "Special Order" := FALSE;
                                                                  SetReserveWithoutPurchasingCode;
                                                                END;

                                                                IF ("Purchasing Code" <> xRec."Purchasing Code") AND
                                                                   (NOT "Drop Shipment") AND
                                                                   ("Drop Shipment" <> xRec."Drop Shipment")
                                                                THEN BEGIN
                                                                  IF "Location Code" = '' THEN BEGIN
                                                                    IF InvtSetup.GET THEN
                                                                      "Outbound Whse. Handling Time" := InvtSetup."Outbound Whse. Handling Time";
                                                                  END ELSE
                                                                    IF Location.GET("Location Code") THEN
                                                                      "Outbound Whse. Handling Time" := Location."Outbound Whse. Handling Time";
                                                                  IF ShippingAgentServices.GET("Shipping Agent Code","Shipping Agent Service Code") THEN
                                                                    "Shipping Time" := ShippingAgentServices."Shipping Time"
                                                                  ELSE BEGIN
                                                                    GetSalesHeader;
                                                                    "Shipping Time" := SalesHeader."Shipping Time";
                                                                  END;
                                                                  UpdateDates;
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 223=R;
                                                   CaptionML=[ENU=Purchasing Code;
                                                              ENN=Purchasing Code] }
    { 5712;   ;Product Group Code  ;Code10        ;TableRelation="Product Group".Code WHERE (Item Category Code=FIELD(Item Category Code));
                                                   ValidateTableRelation=No;
                                                   ObsoleteState=Removed;
                                                   ObsoleteReason=Product Groups became first level children of Item Categories.;
                                                   CaptionML=[ENU=Product Group Code;
                                                              ENN=Product Group Code] }
    { 5713;   ;Special Order       ;Boolean       ;AccessByPermission=TableData 223=R;
                                                   CaptionML=[ENU=Special Order;
                                                              ENN=Special Order];
                                                   Editable=No }
    { 5714;   ;Special Order Purchase No.;Code20  ;TableRelation=IF (Special Order=CONST(Yes)) "Purchase Header".No. WHERE (Document Type=CONST(Order));
                                                   AccessByPermission=TableData 223=R;
                                                   CaptionML=[ENU=Special Order Purchase No.;
                                                              ENN=Special Order Purchase No.] }
    { 5715;   ;Special Order Purch. Line No.;Integer;
                                                   TableRelation=IF (Special Order=CONST(Yes)) "Purchase Line"."Line No." WHERE (Document Type=CONST(Order),
                                                                                                                                 Document No.=FIELD(Special Order Purchase No.));
                                                   AccessByPermission=TableData 223=R;
                                                   CaptionML=[ENU=Special Order Purch. Line No.;
                                                              ENN=Special Order Purch. Line No.] }
    { 5749;   ;Whse. Outstanding Qty.;Decimal     ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Warehouse Shipment Line"."Qty. Outstanding" WHERE (Source Type=CONST(37),
                                                                                                                       Source Subtype=FIELD(Document Type),
                                                                                                                       Source No.=FIELD(Document No.),
                                                                                                                       Source Line No.=FIELD(Line No.)));
                                                   AccessByPermission=TableData 14=R;
                                                   CaptionML=[ENU=Whse. Outstanding Qty.;
                                                              ENN=Whse. Outstanding Qty.];
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 5750;   ;Whse. Outstanding Qty. (Base);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Warehouse Shipment Line"."Qty. Outstanding (Base)" WHERE (Source Type=CONST(37),
                                                                                                                              Source Subtype=FIELD(Document Type),
                                                                                                                              Source No.=FIELD(Document No.),
                                                                                                                              Source Line No.=FIELD(Line No.)));
                                                   AccessByPermission=TableData 14=R;
                                                   CaptionML=[ENU=Whse. Outstanding Qty. (Base);
                                                              ENN=Whse. Outstanding Qty. (Base)];
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 5752;   ;Completely Shipped  ;Boolean       ;CaptionML=[ENU=Completely Shipped;
                                                              ENN=Completely Shipped];
                                                   Editable=No }
    { 5790;   ;Requested Delivery Date;Date       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF ("Requested Delivery Date" <> xRec."Requested Delivery Date") AND
                                                                   ("Promised Delivery Date" <> 0D)
                                                                THEN
                                                                  ERROR(
                                                                    Text028,
                                                                    FIELDCAPTION("Requested Delivery Date"),
                                                                    FIELDCAPTION("Promised Delivery Date"));

                                                                IF "Requested Delivery Date" <> 0D THEN
                                                                  VALIDATE("Planned Delivery Date","Requested Delivery Date")
                                                                ELSE BEGIN
                                                                  GetSalesHeader;
                                                                  VALIDATE("Shipment Date",SalesHeader."Shipment Date");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Requested Delivery Date;
                                                              ENN=Requested Delivery Date] }
    { 5791;   ;Promised Delivery Date;Date        ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF "Promised Delivery Date" <> 0D THEN
                                                                  VALIDATE("Planned Delivery Date","Promised Delivery Date")
                                                                ELSE
                                                                  VALIDATE("Requested Delivery Date");
                                                              END;

                                                   AccessByPermission=TableData 99000880=R;
                                                   CaptionML=[ENU=Promised Delivery Date;
                                                              ENN=Promised Delivery Date] }
    { 5792;   ;Shipping Time       ;DateFormula   ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF "Drop Shipment" THEN
                                                                  DateFormularZero("Shipping Time",FIELDNO("Shipping Time"),FIELDCAPTION("Shipping Time"));
                                                                UpdateDates;
                                                              END;

                                                   AccessByPermission=TableData 99000880=R;
                                                   CaptionML=[ENU=Shipping Time;
                                                              ENN=Shipping Time] }
    { 5793;   ;Outbound Whse. Handling Time;DateFormula;
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF "Drop Shipment" THEN
                                                                  DateFormularZero("Outbound Whse. Handling Time",
                                                                    FIELDNO("Outbound Whse. Handling Time"),FIELDCAPTION("Outbound Whse. Handling Time"));
                                                                UpdateDates;
                                                              END;

                                                   AccessByPermission=TableData 14=R;
                                                   CaptionML=[ENU=Outbound Whse. Handling Time;
                                                              ENN=Outbound Whse. Handling Time] }
    { 5794;   ;Planned Delivery Date;Date         ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF "Planned Delivery Date" <> 0D THEN BEGIN
                                                                  PlannedDeliveryDateCalculated := TRUE;

                                                                  VALIDATE("Planned Shipment Date",CalcPlannedDate);

                                                                  IF "Planned Shipment Date" > "Planned Delivery Date" THEN
                                                                    "Planned Delivery Date" := "Planned Shipment Date";
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 99000880=R;
                                                   CaptionML=[ENU=Planned Delivery Date;
                                                              ENN=Planned Delivery Date] }
    { 5795;   ;Planned Shipment Date;Date         ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF "Planned Shipment Date" <> 0D THEN BEGIN
                                                                  PlannedShipmentDateCalculated := TRUE;

                                                                  VALIDATE("Shipment Date",CalcShipmentDate);
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 99000880=R;
                                                   CaptionML=[ENU=Planned Shipment Date;
                                                              ENN=Planned Shipment Date] }
    { 5796;   ;Shipping Agent Code ;Code10        ;TableRelation="Shipping Agent";
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF "Shipping Agent Code" <> xRec."Shipping Agent Code" THEN
                                                                  VALIDATE("Shipping Agent Service Code",'');
                                                              END;

                                                   AccessByPermission=TableData 5790=R;
                                                   CaptionML=[ENU=Shipping Agent Code;
                                                              ENN=Shipping Agent Code] }
    { 5797;   ;Shipping Agent Service Code;Code10 ;TableRelation="Shipping Agent Services".Code WHERE (Shipping Agent Code=FIELD(Shipping Agent Code));
                                                   OnValidate=VAR
                                                                ShippingAgentServices@1000 : Record 5790;
                                                              BEGIN
                                                                TestStatusOpen;
                                                                IF "Shipping Agent Service Code" <> xRec."Shipping Agent Service Code" THEN
                                                                  EVALUATE("Shipping Time",'<>');

                                                                IF "Drop Shipment" THEN BEGIN
                                                                  EVALUATE("Shipping Time",'<0D>');
                                                                  UpdateDates;
                                                                END ELSE
                                                                  IF ShippingAgentServices.GET("Shipping Agent Code","Shipping Agent Service Code") THEN
                                                                    "Shipping Time" := ShippingAgentServices."Shipping Time"
                                                                  ELSE BEGIN
                                                                    GetSalesHeader;
                                                                    "Shipping Time" := SalesHeader."Shipping Time";
                                                                  END;

                                                                IF ShippingAgentServices."Shipping Time" <> xRec."Shipping Time" THEN
                                                                  VALIDATE("Shipping Time","Shipping Time");
                                                              END;

                                                   AccessByPermission=TableData 5790=R;
                                                   CaptionML=[ENU=Shipping Agent Service Code;
                                                              ENN=Shipping Agent Service Code] }
    { 5800;   ;Allow Item Charge Assignment;Boolean;
                                                   InitValue=Yes;
                                                   OnValidate=BEGIN
                                                                CheckItemChargeAssgnt;
                                                              END;

                                                   AccessByPermission=TableData 5800=R;
                                                   CaptionML=[ENU=Allow Item Charge Assignment;
                                                              ENN=Allow Item Charge Assignment] }
    { 5801;   ;Qty. to Assign      ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Item Charge Assignment (Sales)"."Qty. to Assign" WHERE (Document Type=FIELD(Document Type),
                                                                                                                            Document No.=FIELD(Document No.),
                                                                                                                            Document Line No.=FIELD(Line No.)));
                                                   CaptionML=[ENU=Qty. to Assign;
                                                              ENN=Qty. to Assign];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5802;   ;Qty. Assigned       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Item Charge Assignment (Sales)"."Qty. Assigned" WHERE (Document Type=FIELD(Document Type),
                                                                                                                           Document No.=FIELD(Document No.),
                                                                                                                           Document Line No.=FIELD(Line No.)));
                                                   CaptionML=[ENU=Qty. Assigned;
                                                              ENN=Qty. Assigned];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5803;   ;Return Qty. to Receive;Decimal     ;OnValidate=VAR
                                                                ItemLedgEntry@1000 : Record 32;
                                                                IsHandled@1001 : Boolean;
                                                              BEGIN
                                                                IF (CurrFieldNo <> 0) AND
                                                                   (Type = Type::Item) AND
                                                                   ("Return Qty. to Receive" <> 0) AND
                                                                   (NOT "Drop Shipment")
                                                                THEN
                                                                  CheckWarehouse;

                                                                OnValidateReturnQtyToReceiveOnAfterCheck(Rec,CurrFieldNo);

                                                                IF "Return Qty. to Receive" = Quantity - "Return Qty. Received" THEN
                                                                  InitQtyToReceive
                                                                ELSE BEGIN
                                                                  "Return Qty. to Receive (Base)" := CalcBaseQty("Return Qty. to Receive");
                                                                  InitQtyToInvoice;
                                                                END;

                                                                IsHandled := FALSE;
                                                                OnValidateQtyToReturnAfterInitQty(Rec,xRec,CurrFieldNo,IsHandled);
                                                                IF NOT IsHandled THEN BEGIN
                                                                  IF ("Return Qty. to Receive" * Quantity < 0) OR
                                                                     (ABS("Return Qty. to Receive") > ABS("Outstanding Quantity")) OR
                                                                     (Quantity * "Outstanding Quantity" < 0)
                                                                  THEN
                                                                    ERROR(Text020,"Outstanding Quantity");
                                                                  IF ("Return Qty. to Receive (Base)" * "Quantity (Base)" < 0) OR
                                                                     (ABS("Return Qty. to Receive (Base)") > ABS("Outstanding Qty. (Base)")) OR
                                                                     ("Quantity (Base)" * "Outstanding Qty. (Base)" < 0)
                                                                  THEN
                                                                    ERROR(Text021,"Outstanding Qty. (Base)");
                                                                END;

                                                                IF (CurrFieldNo <> 0) AND (Type = Type::Item) AND ("Return Qty. to Receive" > 0) THEN
                                                                  CheckApplFromItemLedgEntry(ItemLedgEntry);
                                                              END;

                                                   AccessByPermission=TableData 6660=R;
                                                   CaptionML=[ENU=Return Qty. to Receive;
                                                              ENN=Return Qty. to Receive];
                                                   DecimalPlaces=0:5 }
    { 5804;   ;Return Qty. to Receive (Base);Decimal;
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE("Return Qty. to Receive","Return Qty. to Receive (Base)");
                                                              END;

                                                   CaptionML=[ENU=Return Qty. to Receive (Base);
                                                              ENN=Return Qty. to Receive (Base)];
                                                   DecimalPlaces=0:5 }
    { 5805;   ;Return Qty. Rcd. Not Invd.;Decimal ;CaptionML=[ENU=Return Qty. Rcd. Not Invd.;
                                                              ENN=Return Qty. Rcd. Not Invd.];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5806;   ;Ret. Qty. Rcd. Not Invd.(Base);Decimal;
                                                   CaptionML=[ENU=Ret. Qty. Rcd. Not Invd.(Base);
                                                              ENN=Ret. Qty. Rcd. Not Invd.(Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5807;   ;Return Rcd. Not Invd.;Decimal      ;OnValidate=VAR
                                                                Currency2@1000 : Record 4;
                                                              BEGIN
                                                                GetSalesHeader;
                                                                Currency2.InitRoundingPrecision;
                                                                IF SalesHeader."Currency Code" <> '' THEN
                                                                  "Return Rcd. Not Invd. (LCY)" :=
                                                                    ROUND(
                                                                      CurrExchRate.ExchangeAmtFCYToLCY(
                                                                        GetDate,"Currency Code",
                                                                        "Return Rcd. Not Invd.",SalesHeader."Currency Factor"),
                                                                      Currency2."Amount Rounding Precision")
                                                                ELSE
                                                                  "Return Rcd. Not Invd. (LCY)" :=
                                                                    ROUND("Return Rcd. Not Invd.",Currency2."Amount Rounding Precision");
                                                              END;

                                                   CaptionML=[ENU=Return Rcd. Not Invd.;
                                                              ENN=Return Rcd. Not Invd.];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 5808;   ;Return Rcd. Not Invd. (LCY);Decimal;CaptionML=[ENU=Return Rcd. Not Invd. (LCY);
                                                              ENN=Return Rcd. Not Invd. (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 5809;   ;Return Qty. Received;Decimal       ;AccessByPermission=TableData 6660=R;
                                                   CaptionML=[ENU=Return Qty. Received;
                                                              ENN=Return Qty. Received];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5810;   ;Return Qty. Received (Base);Decimal;CaptionML=[ENU=Return Qty. Received (Base);
                                                              ENN=Return Qty. Received (Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5811;   ;Appl.-from Item Entry;Integer      ;OnValidate=VAR
                                                                ItemLedgEntry@1000 : Record 32;
                                                              BEGIN
                                                                IF "Appl.-from Item Entry" <> 0 THEN BEGIN
                                                                  CheckApplFromItemLedgEntry(ItemLedgEntry);
                                                                  VALIDATE("Unit Cost (LCY)",CalcUnitCost(ItemLedgEntry));
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              SelectItemEntry(FIELDNO("Appl.-from Item Entry"));
                                                            END;

                                                   AccessByPermission=TableData 27=R;
                                                   CaptionML=[ENU=Appl.-from Item Entry;
                                                              ENN=Appl.-from Item Entry];
                                                   MinValue=0 }
    { 5909;   ;BOM Item No.        ;Code20        ;TableRelation=Item;
                                                   CaptionML=[ENU=BOM Item No.;
                                                              ENN=BOM Item No.] }
    { 6600;   ;Return Receipt No.  ;Code20        ;CaptionML=[ENU=Return Receipt No.;
                                                              ENN=Return Receipt No.];
                                                   Editable=No }
    { 6601;   ;Return Receipt Line No.;Integer    ;CaptionML=[ENU=Return Receipt Line No.;
                                                              ENN=Return Receipt Line No.];
                                                   Editable=No }
    { 6608;   ;Return Reason Code  ;Code10        ;TableRelation="Return Reason";
                                                   OnValidate=BEGIN
                                                                ValidateReturnReasonCode(FIELDNO("Return Reason Code"));
                                                              END;

                                                   CaptionML=[ENU=Return Reason Code;
                                                              ENN=Return Reason Code] }
    { 6610;   ;Copied From Posted Doc.;Boolean    ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Copied From Posted Doc.;
                                                              ENN=Copied From Posted Doc.] }
    { 7001;   ;Allow Line Disc.    ;Boolean       ;InitValue=Yes;
                                                   CaptionML=[ENU=Allow Line Disc.;
                                                              ENN=Allow Line Disc.] }
    { 7002;   ;Customer Disc. Group;Code20        ;TableRelation="Customer Discount Group";
                                                   OnValidate=BEGIN
                                                                IF Type = Type::Item THEN
                                                                  UpdateUnitPrice(FIELDNO("Customer Disc. Group"))
                                                              END;

                                                   CaptionML=[ENU=Customer Disc. Group;
                                                              ENN=Customer Disc. Group] }
    { 7003;   ;Subtype             ;Option        ;CaptionML=[ENU=Subtype;
                                                              ENN=Subtype];
                                                   OptionCaptionML=[ENU=" ,Item - Inventory,Item - Service,Comment";
                                                                    ENN=" ,Item - Inventory,Item - Service,Comment"];
                                                   OptionString=[ ,Item - Inventory,Item - Service,Comment] }
    { 7004;   ;Price description   ;Text80        ;CaptionML=[ENU=Price description;
                                                              ENN=Price description] }
    { 7010;   ;Attached Doc Count  ;Integer       ;FieldClass=FlowField;
                                                   InitValue=0;
                                                   CalcFormula=Count("Document Attachment" WHERE (Table ID=CONST(37),
                                                                                                  No.=FIELD(Document No.),
                                                                                                  Document Type=FIELD(Document Type),
                                                                                                  Line No.=FIELD(Line No.)));
                                                   CaptionML=[ENU=Attached Doc Count;
                                                              ENN=Attached Doc Count];
                                                   BlankNumbers=DontBlank }
    { 50001;  ;Billing Type        ;Option        ;OptionCaptionML=ENU=" ,Event Driven,Date Driven,Time Sheet Driven,Completion Driven";
                                                   OptionString=[ ,Event Driven,Date Driven,Time Sheet Driven,Completion Driven];
                                                   Description=AD_SD }
    { 50004;  ;Scope1              ;Text150       ;Description=AD_SD }
    { 50005;  ;Scope2              ;Text150       ;Description=AD_SD }
    { 50006;  ;Scope3              ;Text150       ;Description=AD_SD }
    { 50007;  ;Scope4              ;Text150       ;Description=AD_SD }
  }
  KEYS
  {
    {    ;Document Type,Document No.,Line No.     ;Clustered=Yes }
    { No ;Document No.,Line No.,Document Type      }
    {    ;Document Type,Type,No.,Variant Code,Drop Shipment,Location Code,Shipment Date;
                                                   SumIndexFields=Outstanding Qty. (Base) }
    {    ;Document Type,Bill-to Customer No.,Currency Code,Document No.;
                                                   SumIndexFields=Outstanding Amount,Shipped Not Invoiced,Outstanding Amount (LCY),Shipped Not Invoiced (LCY),Return Rcd. Not Invd. (LCY) }
    { No ;Document Type,Type,No.,Variant Code,Drop Shipment,Shortcut Dimension 1 Code,Shortcut Dimension 2 Code,Location Code,Shipment Date;
                                                   SumIndexFields=Outstanding Qty. (Base) }
    { No ;Document Type,Bill-to Customer No.,Shortcut Dimension 1 Code,Shortcut Dimension 2 Code,Currency Code,Document No.;
                                                   SumIndexFields=Outstanding Amount,Shipped Not Invoiced,Outstanding Amount (LCY),Shipped Not Invoiced (LCY) }
    {    ;Document Type,Blanket Order No.,Blanket Order Line No. }
    {    ;Document Type,Document No.,Location Code;SumIndexFields=Amount,Amount Including VAT,Outstanding Amount,Shipped Not Invoiced,Outstanding Amount (LCY),Shipped Not Invoiced (LCY);
                                                   MaintainSQLIndex=No }
    {    ;Document Type,Shipment No.,Shipment Line No. }
    {    ;Type,No.,Variant Code,Drop Shipment,Location Code,Document Type,Shipment Date;
                                                   MaintainSQLIndex=No }
    {    ;Document Type,Sell-to Customer No.,Shipment No.,Document No.;
                                                   SumIndexFields=Outstanding Amount (LCY) }
    {    ;Job Contract Entry No.                   }
    { No ;Document Type,Document No.,Qty. Shipped Not Invoiced }
    { No ;Document Type,Document No.,Type,No.      }
    {    ;Recalculate Invoice Disc.                }
    {    ;Qty. Shipped Not Invoiced                }
    {    ;Qty. Shipped (Base)                      }
    {    ;Shipment Date,Outstanding Quantity       }
  }
  FIELDGROUPS
  {
    { 1   ;Brick               ;No.,Description,Line Amount,Quantity,Unit of Measure Code,Price description }
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=You cannot delete the order line because it is associated with purchase order %1 line %2.;ENN=You cannot delete the order line because it is associated with purchase order %1 line %2.';
      Text001@1001 : TextConst 'ENU=You cannot rename a %1.;ENN=You cannot rename a %1.';
      Text002@1002 : TextConst 'ENU=You cannot change %1 because the order line is associated with purchase order %2 line %3.;ENN=You cannot change %1 because the order line is associated with purchase order %2 line %3.';
      Text003@1003 : TextConst 'ENU=must not be less than %1;ENN=must not be less than %1';
      Text005@1004 : TextConst 'ENU=You cannot invoice more than %1 units.;ENN=You cannot invoice more than %1 units.';
      Text006@1005 : TextConst 'ENU=You cannot invoice more than %1 base units.;ENN=You cannot invoice more than %1 base units.';
      Text007@1006 : TextConst 'ENU=You cannot ship more than %1 units.;ENN=You cannot ship more than %1 units.';
      Text008@1007 : TextConst 'ENU=You cannot ship more than %1 base units.;ENN=You cannot ship more than %1 base units.';
      Text009@1008 : TextConst 'ENU=" must be 0 when %1 is %2";ENN=" must be 0 when %1 is %2"';
      ManualReserveQst@1010 : TextConst 'ENU=Automatic reservation is not possible.\Do you want to reserve items manually?;ENN=Automatic reservation is not possible.\Do you want to reserve items manually?';
      Text014@1013 : TextConst 'ENU=%1 %2 is before work date %3;ENN=%1 %2 is before work date %3';
      Text016@1040 : TextConst 'ENU="%1 is required for %2 = %3.";ENN="%1 is required for %2 = %3."';
      WhseRequirementMsg@1044 : TextConst '@@@="%1=Document";ENU=%1 is required for this line. The entered information may be disregarded by warehouse activities.;ENN=%1 is required for this line. The entered information may be disregarded by warehouse activities.';
      Text020@1019 : TextConst 'ENU=You cannot return more than %1 units.;ENN=You cannot return more than %1 units.';
      Text021@1020 : TextConst 'ENU=You cannot return more than %1 base units.;ENN=You cannot return more than %1 base units.';
      Text026@1025 : TextConst 'ENU=You cannot change %1 if the item charge has already been posted.;ENN=You cannot change %1 if the item charge has already been posted.';
      CurrExchRate@1030 : Record 330;
      SalesHeader@1031 : Record 36;
      SalesLine2@1032 : Record 37;
      GLAcc@1035 : Record 15;
      Resource@1400 : Record 156;
      Currency@1037 : Record 4;
      Res@1043 : Record 156;
      ResCost@1045 : Record 202;
      VATPostingSetup@1048 : Record 325;
      GenBusPostingGrp@1050 : Record 250;
      GenProdPostingGrp@1051 : Record 251;
      UnitOfMeasure@1054 : Record 204;
      NonstockItem@1058 : Record 5718;
      SKU@1060 : Record 5700;
      ItemCharge@1061 : Record 5800;
      InvtSetup@1063 : Record 313;
      Location@1064 : Record 14;
      ATOLink@1016 : Record 904;
      SalesSetup@1065 : Record 311;
      CalChange@1052 : Record 7602;
      ConfigTemplateHeader@1057 : Record 8618;
      TempErrorMessage@1036 : TEMPORARY Record 700;
      PriceCalcMgt@1071 : Codeunit 7000;
      CustCheckCreditLimit@1074 : Codeunit 312;
      ItemCheckAvail@1075 : Codeunit 311;
      SalesTaxCalculate@1076 : Codeunit 398;
      ReserveSalesLine@1079 : Codeunit 99000832;
      UOMMgt@1080 : Codeunit 5402;
      AddOnIntegrMgt@1081 : Codeunit 5403;
      DimMgt@1082 : Codeunit 408;
      ItemSubstitutionMgt@1085 : Codeunit 5701;
      DistIntegration@1086 : Codeunit 5702;
      CatalogItemMgt@1087 : Codeunit 5703;
      WhseValidateSourceLine@1088 : Codeunit 5777;
      TransferExtendedText@1100 : Codeunit 378;
      DeferralUtilities@1026 : Codeunit 1720;
      CalendarMgmt@1056 : Codeunit 7600;
      PostingSetupMgt@1068 : Codeunit 48;
      FullAutoReservation@1092 : Boolean;
      StatusCheckSuspended@1094 : Boolean;
      HasBeenShown@1018 : Boolean;
      PlannedShipmentDateCalculated@1012 : Boolean;
      PlannedDeliveryDateCalculated@1070 : Boolean;
      Text028@1098 : TextConst 'ENU=You cannot change the %1 when the %2 has been filled in.;ENN=You cannot change the %1 when the %2 has been filled in.';
      Text029@1021 : TextConst 'ENU=must be positive;ENN=must be positive';
      Text030@1042 : TextConst 'ENU=must be negative;ENN=must be negative';
      Text031@1093 : TextConst 'ENU=You must either specify %1 or %2.;ENN=You must either specify %1 or %2.';
      Text034@1084 : TextConst 'ENU=The value of %1 field must be a whole number for the item included in the service item group if the %2 field in the Service Item Groups window contains a check mark.;ENN=The value of %1 field must be a whole number for the item included in the service item group if the %2 field in the Service Item Groups window contains a check mark.';
      Text035@1083 : TextConst 'ENU="Warehouse ";ENN="Warehouse "';
      Text036@1090 : TextConst 'ENU="Inventory ";ENN="Inventory "';
      HideValidationDialog@1109 : Boolean;
      Text037@1009 : TextConst 'ENU=You cannot change %1 when %2 is %3 and %4 is positive.;ENN=You cannot change %1 when %2 is %3 and %4 is positive.';
      Text038@1014 : TextConst 'ENU=You cannot change %1 when %2 is %3 and %4 is negative.;ENN=You cannot change %1 when %2 is %3 and %4 is negative.';
      Text039@1034 : TextConst 'ENU=%1 units for %2 %3 have already been returned. Therefore, only %4 units can be returned.;ENN=%1 units for %2 %3 have already been returned. Therefore, only %4 units can be returned.';
      Text040@1039 : TextConst 'ENU=You must use form %1 to enter %2, if item tracking is used.;ENN=You must use form %1 to enter %2, if item tracking is used.';
      Text042@1055 : TextConst 'ENU=When posting the Applied to Ledger Entry %1 will be opened first;ENN=When posting the Applied to Ledger Entry %1 will be opened first';
      ShippingMoreUnitsThanReceivedErr@1047 : TextConst 'ENU=You cannot ship more than the %1 units that you have received for document no. %2.;ENN=You cannot ship more than the %1 units that you have received for document no. %2.';
      Text044@1103 : TextConst 'ENU=cannot be less than %1;ENN=cannot be less than %1';
      Text045@1104 : TextConst 'ENU=cannot be more than %1;ENN=cannot be more than %1';
      Text046@1105 : TextConst 'ENU=You cannot return more than the %1 units that you have shipped for %2 %3.;ENN=You cannot return more than the %1 units that you have shipped for %2 %3.';
      Text047@1106 : TextConst 'ENU=must be positive when %1 is not 0.;ENN=must be positive when %1 is not 0.';
      Text048@1108 : TextConst 'ENU=You cannot use item tracking on a %1 created from a %2.;ENN=You cannot use item tracking on a %1 created from a %2.';
      Text049@1139 : TextConst 'ENU=cannot be %1.;ENN=cannot be %1.';
      Text051@1141 : TextConst 'ENU=You cannot use %1 in a %2.;ENN=You cannot use %1 in a %2.';
      PrePaymentLineAmountEntered@1015 : Boolean;
      Text052@1022 : TextConst 'ENU=You cannot add an item line because an open warehouse shipment exists for the sales header and Shipping Advice is %1.\\You must add items as new lines to the existing warehouse shipment or change Shipping Advice to Partial.;ENN=You cannot add an item line because an open warehouse shipment exists for the sales header and Shipping Advice is %1.\\You must add items as new lines to the existing warehouse shipment or change Shipping Advice to Partial.';
      Text053@1017 : TextConst 'ENU=You have changed one or more dimensions on the %1, which is already shipped. When you post the line with the changed dimension to General Ledger, amounts on the Inventory Interim account will be out of balance when reported per dimension.\\Do you want to keep the changed dimension?;ENN=You have changed one or more dimensions on the %1, which is already shipped. When you post the line with the changed dimension to General Ledger, amounts on the Inventory Interim account will be out of balance when reported per dimension.\\Do you want to keep the changed dimension?';
      Text054@1023 : TextConst 'ENU=Cancelled.;ENN=Cancelled.';
      Text055@1024 : TextConst '@@@=Quantity Invoiced must not be greater than the sum of Qty. Assigned and Qty. to Assign.;ENU=%1 must not be greater than the sum of %2 and %3.;ENN=%1 must not be greater than the sum of %2 and %3.';
      Text056@1011 : TextConst 'ENU=You cannot add an item line because an open inventory pick exists for the Sales Header and because Shipping Advice is %1.\\You must first post or delete the inventory pick or change Shipping Advice to Partial.;ENN=You cannot add an item line because an open inventory pick exists for the Sales Header and because Shipping Advice is %1.\\You must first post or delete the inventory pick or change Shipping Advice to Partial.';
      Text057@1027 : TextConst 'ENU=must have the same sign as the shipment;ENN=must have the same sign as the shipment';
      Text058@1028 : TextConst 'ENU=The quantity that you are trying to invoice is greater than the quantity in shipment %1.;ENN=The quantity that you are trying to invoice is greater than the quantity in shipment %1.';
      Text059@1029 : TextConst 'ENU=must have the same sign as the return receipt;ENN=must have the same sign as the return receipt';
      Text060@1041 : TextConst 'ENU=The quantity that you are trying to invoice is greater than the quantity in return receipt %1.;ENN=The quantity that you are trying to invoice is greater than the quantity in return receipt %1.';
      ItemChargeAssignmentErr@1097 : TextConst 'ENU=You can only assign Item Charges for Line Types of Charge (Item).;ENN=You can only assign Item Charges for Line Types of Charge (Item).';
      SalesLineCompletelyShippedErr@1053 : TextConst 'ENU=You cannot change the purchasing code for a sales line that has been completely shipped.;ENN=You cannot change the purchasing code for a sales line that has been completely shipped.';
      SalesSetupRead@1067 : Boolean;
      LookupRequested@1059 : Boolean;
      FreightLineDescriptionTxt@1033 : TextConst 'ENU=Freight Amount;ENN=Freight Amount';
      CannotFindDescErr@1200 : TextConst '@@@="%1 = Type caption %2 = Description";ENU=Cannot find %1 with Description %2.\\Make sure to use the correct type.;ENN=Cannot find %1 with Description %2.\\Make sure to use the correct type.';
      PriceDescriptionTxt@1038 : TextConst '@@@={Locked};ENU=x%1 (%2%3/%4);ENN=x%1 (%2%3/%4)';
      PriceDescriptionWithLineDiscountTxt@1066 : TextConst '@@@={Locked};ENU=x%1 (%2%3/%4) - %5%;ENN=x%1 (%2%3/%4) - %5%';
      SelectNonstockItemErr@1062 : TextConst 'ENU=You can only select a catalog item for an empty line.;ENN=You can only select a catalogue item for an empty line.';
      EstimateLbl@1072 : TextConst 'ENU=Estimate;ENN=Estimate';
      CommentLbl@1046 : TextConst 'ENU=Comment;ENN=Comment';
      LineDiscountPctErr@1073 : TextConst 'ENU=The value in the Line Discount % field must be between 0 and 100.;ENN=The value in the Line Discount % field must be between 0 and 100.';
      SalesBlockedErr@1077 : TextConst 'ENU=You cannot sell this item because the Sales Blocked check box is selected on the item card.;ENN=You cannot sell this item because the Sales Blocked check box is selected on the item card.';
      CannotChangePrepaidServiceChargeErr@1078 : TextConst 'ENU=You cannot change the line because it will affect service charges that are already invoiced as part of a prepayment.;ENN=You cannot change the line because it will affect service charges that are already invoiced as part of a prepayment.';
      LineAmountInvalidErr@1089 : TextConst 'ENU=You have set the line amount to a value that results in a discount that is not valid. Consider increasing the unit price instead.;ENN=You have set the line amount to a value that results in a discount that is not valid. Consider increasing the unit price instead.';
      LineInvoiceDiscountAmountResetTok@1096 : TextConst '@@@=%1 - Record ID;ENU=The value in the Inv. Discount Amount field in %1 has been cleared.;ENN=The value in the Inv. Discount Amount field in %1 has been cleared.';
      UnitPriceChangedMsg@1091 : TextConst '@@@="%1 = Type caption %2 = No.";ENU=The unit price for %1 %2 that was copied from the posted document has been changed.;ENN=The unit price for %1 %2 that was copied from the posted document has been changed.';
      CannotAllowInvDiscountErr@1049 : TextConst '@@@=%1 is the name of not valid field;ENU=The value of the %1 field is not valid when the VAT Calculation Type field is set to "Full VAT".;ENN=The value of the %1 field is not valid when the VAT Calculation Type field is set to "Full VAT".';
      CannotChangeVATGroupWithPrepmInvErr@1069 : TextConst 'ENU=You cannot change the VAT product posting group because prepayment invoices have been posted.\\You need to post the prepayment credit memo to be able to change the VAT product posting group.;ENN=You cannot change the VAT product posting group because prepayment invoices have been posted.\\You need to post the prepayment credit memo to be able to change the VAT product posting group.';
      CannotChangePrepmtAmtDiffVAtPctErr@1095 : TextConst 'ENU=You cannot change the prepayment amount because the prepayment invoice has been posted with a different VAT percentage. Please check the settings on the prepayment G/L account.;ENN=You cannot change the prepayment amount because the prepayment invoice has been posted with a different VAT percentage. Please check the settings on the prepayment G/L account.';

    [External]
    PROCEDURE InitOutstanding@16();
    BEGIN
      IF IsCreditDocType THEN BEGIN
        "Outstanding Quantity" := Quantity - "Return Qty. Received";
        "Outstanding Qty. (Base)" := "Quantity (Base)" - "Return Qty. Received (Base)";
        "Return Qty. Rcd. Not Invd." := "Return Qty. Received" - "Quantity Invoiced";
        "Ret. Qty. Rcd. Not Invd.(Base)" := "Return Qty. Received (Base)" - "Qty. Invoiced (Base)";
      END ELSE BEGIN
        "Outstanding Quantity" := Quantity - "Quantity Shipped";
        "Outstanding Qty. (Base)" := "Quantity (Base)" - "Qty. Shipped (Base)";
        "Qty. Shipped Not Invoiced" := "Quantity Shipped" - "Quantity Invoiced";
        "Qty. Shipped Not Invd. (Base)" := "Qty. Shipped (Base)" - "Qty. Invoiced (Base)";
      END;
      OnAfterInitOutstandingQty(Rec);
      UpdatePlanned;
      "Completely Shipped" := (Quantity <> 0) AND ("Outstanding Quantity" = 0);
      InitOutstandingAmount;

      OnAfterInitOutstanding(Rec);
    END;

    [External]
    PROCEDURE InitOutstandingAmount@17();
    VAR
      AmountInclVAT@1000 : Decimal;
    BEGIN
      IF Quantity = 0 THEN BEGIN
        "Outstanding Amount" := 0;
        "Outstanding Amount (LCY)" := 0;
        "Shipped Not Invoiced" := 0;
        "Shipped Not Invoiced (LCY)" := 0;
        "Return Rcd. Not Invd." := 0;
        "Return Rcd. Not Invd. (LCY)" := 0;
      END ELSE BEGIN
        GetSalesHeader;
        AmountInclVAT := "Amount Including VAT";
        VALIDATE(
          "Outstanding Amount",
          ROUND(
            AmountInclVAT * "Outstanding Quantity" / Quantity,
            Currency."Amount Rounding Precision"));
        IF IsCreditDocType THEN
          VALIDATE(
            "Return Rcd. Not Invd.",
            ROUND(
              AmountInclVAT * "Return Qty. Rcd. Not Invd." / Quantity,
              Currency."Amount Rounding Precision"))
        ELSE
          VALIDATE(
            "Shipped Not Invoiced",
            ROUND(
              AmountInclVAT * "Qty. Shipped Not Invoiced" / Quantity,
              Currency."Amount Rounding Precision"));
      END;

      OnAfterInitOutstandingAmount(Rec,SalesHeader,Currency);
    END;

    [External]
    PROCEDURE InitQtyToShip@15();
    BEGIN
      GetSalesSetup;
      IF (SalesSetup."Default Quantity to Ship" = SalesSetup."Default Quantity to Ship"::Remainder) OR
         ("Document Type" = "Document Type"::Invoice)
      THEN BEGIN
        "Qty. to Ship" := "Outstanding Quantity";
        "Qty. to Ship (Base)" := "Outstanding Qty. (Base)";
      END ELSE
        IF "Qty. to Ship" <> 0 THEN
          "Qty. to Ship (Base)" := MaxQtyToShipBase(CalcBaseQty("Qty. to Ship"));

      CheckServItemCreation;

      OnAfterInitQtyToShip(Rec,CurrFieldNo);

      InitQtyToInvoice;
    END;

    [External]
    PROCEDURE InitQtyToReceive@5803();
    BEGIN
      GetSalesSetup;
      IF (SalesSetup."Default Quantity to Ship" = SalesSetup."Default Quantity to Ship"::Remainder) OR
         ("Document Type" = "Document Type"::"Credit Memo")
      THEN BEGIN
        "Return Qty. to Receive" := "Outstanding Quantity";
        "Return Qty. to Receive (Base)" := "Outstanding Qty. (Base)";
      END ELSE
        IF "Return Qty. to Receive" <> 0 THEN
          "Return Qty. to Receive (Base)" := CalcBaseQty("Return Qty. to Receive");

      OnAfterInitQtyToReceive(Rec,CurrFieldNo);

      InitQtyToInvoice;
    END;

    [External]
    PROCEDURE InitQtyToInvoice@13();
    BEGIN
      "Qty. to Invoice" := MaxQtyToInvoice;
      "Qty. to Invoice (Base)" := MaxQtyToInvoiceBase;
      "VAT Difference" := 0;

      OnBeforeCalcInvDiscToInvoice(Rec,CurrFieldNo);
      CalcInvDiscToInvoice;
      IF SalesHeader."Document Type" <> SalesHeader."Document Type"::Invoice THEN
        CalcPrepaymentToDeduct;

      OnAfterInitQtyToInvoice(Rec,CurrFieldNo);
    END;

    LOCAL PROCEDURE InitItemAppl@40(OnlyApplTo@1000 : Boolean);
    BEGIN
      "Appl.-to Item Entry" := 0;
      IF NOT OnlyApplTo THEN
        "Appl.-from Item Entry" := 0;
    END;

    [External]
    PROCEDURE MaxQtyToInvoice@18() : Decimal;
    VAR
      MaxQty@1002 : Decimal;
      IsHandled@1000 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeMaxQtyToInvoice(Rec,MaxQty,IsHandled);
      IF IsHandled THEN
        EXIT(MaxQty);

      IF "Prepayment Line" THEN
        EXIT(1);

      IF IsCreditDocType THEN
        EXIT("Return Qty. Received" + "Return Qty. to Receive" - "Quantity Invoiced");

      EXIT("Quantity Shipped" + "Qty. to Ship" - "Quantity Invoiced");
    END;

    [External]
    PROCEDURE MaxQtyToInvoiceBase@19() : Decimal;
    VAR
      MaxQtyBase@1001 : Decimal;
      IsHandled@1000 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeMaxQtyToInvoiceBase(Rec,MaxQtyBase,IsHandled);
      IF IsHandled THEN
        EXIT(MaxQtyBase);

      IF IsCreditDocType THEN
        EXIT("Return Qty. Received (Base)" + "Return Qty. to Receive (Base)" - "Qty. Invoiced (Base)");

      EXIT("Qty. Shipped (Base)" + "Qty. to Ship (Base)" - "Qty. Invoiced (Base)");
    END;

    PROCEDURE MaxQtyToShipBase@277(QtyToShipBase@1001 : Decimal) : Decimal;
    BEGIN
      IF ABS(QtyToShipBase) > ABS("Outstanding Qty. (Base)") THEN
        EXIT("Outstanding Qty. (Base)");

      EXIT(QtyToShipBase);
    END;

    LOCAL PROCEDURE CalcBaseQty@14(Qty@1000 : Decimal) : Decimal;
    BEGIN
      TESTFIELD("Qty. per Unit of Measure");
      EXIT(ROUND(Qty * "Qty. per Unit of Measure",UOMMgt.QtyRndPrecision));
    END;

    [External]
    PROCEDURE CalcLineAmount@163() LineAmount : Decimal;
    BEGIN
      LineAmount := "Line Amount" - "Inv. Discount Amount";

      OnAfterCalcLineAmount(Rec,LineAmount);
    END;

    LOCAL PROCEDURE CopyFromStandardText@131();
    VAR
      StandardText@1000 : Record 7;
    BEGIN
      StandardText.GET("No.");
      Description := StandardText.Description;
      "Allow Item Charge Assignment" := FALSE;
      OnAfterAssignStdTxtValues(Rec,StandardText);
    END;

    LOCAL PROCEDURE CopyFromGLAccount@142();
    BEGIN
      GLAcc.GET("No.");
      GLAcc.CheckGLAcc;
      IF NOT "System-Created Entry" THEN
        GLAcc.TESTFIELD("Direct Posting",TRUE);
      Description := GLAcc.Name;
      "Gen. Prod. Posting Group" := GLAcc."Gen. Prod. Posting Group";
      "VAT Prod. Posting Group" := GLAcc."VAT Prod. Posting Group";
      "Tax Group Code" := GLAcc."Tax Group Code";
      "Allow Invoice Disc." := FALSE;
      "Allow Item Charge Assignment" := FALSE;
      InitDeferralCode;
      OnAfterAssignGLAccountValues(Rec,GLAcc);
    END;

    LOCAL PROCEDURE CopyFromItem@144();
    VAR
      Item@1001 : Record 27;
      PrepaymentMgt@1000 : Codeunit 441;
      IsHandled@1002 : Boolean;
    BEGIN
      GetItem(Item);
      IsHandled := FALSE;
      OnBeforeCopyFromItem(Rec,Item,IsHandled);
      IF NOT IsHandled THEN BEGIN
        Item.TESTFIELD(Blocked,FALSE);
        Item.TESTFIELD("Gen. Prod. Posting Group");
        IF Item."Sales Blocked" AND NOT IsCreditDocType THEN
          ERROR(SalesBlockedErr);
        IF Item.Type = Item.Type::Inventory THEN BEGIN
          Item.TESTFIELD("Inventory Posting Group");
          "Posting Group" := Item."Inventory Posting Group";
        END;
      END;

      OnCopyFromItemOnAfterCheck(Rec,Item);

      Description := Item.Description;
      "Description 2" := Item."Description 2";
      GetUnitCost;
      "Allow Invoice Disc." := Item."Allow Invoice Disc.";
      "Units per Parcel" := Item."Units per Parcel";
      "Gen. Prod. Posting Group" := Item."Gen. Prod. Posting Group";
      "VAT Prod. Posting Group" := Item."VAT Prod. Posting Group";
      "Tax Group Code" := Item."Tax Group Code";
      "Item Category Code" := Item."Item Category Code";
      Nonstock := Item."Created From Nonstock Item";
      "Profit %" := Item."Profit %";
      "Allow Item Charge Assignment" := TRUE;
      PrepaymentMgt.SetSalesPrepaymentPct(Rec,SalesHeader."Posting Date");
      IF Item.Type = Item.Type::Inventory THEN
        PostingSetupMgt.CheckInvtPostingSetupInventoryAccount("Location Code","Posting Group");

      IF SalesHeader."Language Code" <> '' THEN
        GetItemTranslation;

      IF Item.Reserve = Item.Reserve::Optional THEN
        Reserve := SalesHeader.Reserve
      ELSE
        Reserve := Item.Reserve;

      IF Item."Sales Unit of Measure" <> '' THEN
        "Unit of Measure Code" := Item."Sales Unit of Measure"
      ELSE
        "Unit of Measure Code" := Item."Base Unit of Measure";

      OnAfterCopyFromItem(Rec,Item);

      InitDeferralCode;
      SetDefaultItemQuantity;
      OnAfterAssignItemValues(Rec,Item);
    END;

    LOCAL PROCEDURE CopyFromResource@146();
    BEGIN
      Res.GET("No.");
      Res.CheckResourcePrivacyBlocked(FALSE);
      Res.TESTFIELD(Blocked,FALSE);
      Res.TESTFIELD("Gen. Prod. Posting Group");
      Description := Res.Name;
      "Description 2" := Res."Name 2";
      "Unit of Measure Code" := Res."Base Unit of Measure";
      "Unit Cost (LCY)" := Res."Unit Cost";
      "Gen. Prod. Posting Group" := Res."Gen. Prod. Posting Group";
      "VAT Prod. Posting Group" := Res."VAT Prod. Posting Group";
      "Tax Group Code" := Res."Tax Group Code";
      "Allow Item Charge Assignment" := FALSE;
      FindResUnitCost;
      InitDeferralCode;
      OnAfterAssignResourceValues(Rec,Res);
    END;

    LOCAL PROCEDURE CopyFromFixedAsset@148();
    VAR
      FixedAsset@1000 : Record 5600;
    BEGIN
      FixedAsset.GET("No.");
      FixedAsset.TESTFIELD(Inactive,FALSE);
      FixedAsset.TESTFIELD(Blocked,FALSE);
      GetFAPostingGroup;
      Description := FixedAsset.Description;
      "Description 2" := FixedAsset."Description 2";
      "Allow Invoice Disc." := FALSE;
      "Allow Item Charge Assignment" := FALSE;
      OnAfterAssignFixedAssetValues(Rec,FixedAsset);
    END;

    LOCAL PROCEDURE CopyFromItemCharge@150();
    BEGIN
      ItemCharge.GET("No.");
      Description := ItemCharge.Description;
      "Gen. Prod. Posting Group" := ItemCharge."Gen. Prod. Posting Group";
      "VAT Prod. Posting Group" := ItemCharge."VAT Prod. Posting Group";
      "Tax Group Code" := ItemCharge."Tax Group Code";
      "Allow Invoice Disc." := FALSE;
      "Allow Item Charge Assignment" := FALSE;
      OnAfterAssignItemChargeValues(Rec,ItemCharge);
    END;

    LOCAL PROCEDURE SelectItemEntry@8(CurrentFieldNo@1000 : Integer);
    VAR
      ItemLedgEntry@1001 : Record 32;
      SalesLine3@1002 : Record 37;
    BEGIN
      ItemLedgEntry.SETRANGE("Item No.","No.");
      IF "Location Code" <> '' THEN
        ItemLedgEntry.SETRANGE("Location Code","Location Code");
      ItemLedgEntry.SETRANGE("Variant Code","Variant Code");

      IF CurrentFieldNo = FIELDNO("Appl.-to Item Entry") THEN BEGIN
        ItemLedgEntry.SETCURRENTKEY("Item No.",Open);
        ItemLedgEntry.SETRANGE(Positive,TRUE);
        ItemLedgEntry.SETRANGE(Open,TRUE);
      END ELSE BEGIN
        ItemLedgEntry.SETCURRENTKEY("Item No.",Positive);
        ItemLedgEntry.SETRANGE(Positive,FALSE);
        ItemLedgEntry.SETFILTER("Shipped Qty. Not Returned",'<0');
      END;
      IF PAGE.RUNMODAL(PAGE::"Item Ledger Entries",ItemLedgEntry) = ACTION::LookupOK THEN BEGIN
        SalesLine3 := Rec;
        IF CurrentFieldNo = FIELDNO("Appl.-to Item Entry") THEN
          SalesLine3.VALIDATE("Appl.-to Item Entry",ItemLedgEntry."Entry No.")
        ELSE
          SalesLine3.VALIDATE("Appl.-from Item Entry",ItemLedgEntry."Entry No.");
        CheckItemAvailable(CurrentFieldNo);
        Rec := SalesLine3;
      END;
    END;

    [External]
    PROCEDURE SetSalesHeader@24(NewSalesHeader@1000 : Record 36);
    BEGIN
      SalesHeader := NewSalesHeader;

      IF SalesHeader."Currency Code" = '' THEN
        Currency.InitRoundingPrecision
      ELSE BEGIN
        SalesHeader.TESTFIELD("Currency Factor");
        Currency.GET(SalesHeader."Currency Code");
        Currency.TESTFIELD("Amount Rounding Precision");
      END;
    END;

    [External]
    PROCEDURE GetSalesHeader@1();
    VAR
      IsHandled@1000 : Boolean;
    BEGIN
      OnBeforeGetSalesHeader(Rec,SalesHeader,IsHandled);
      IF IsHandled THEN
        EXIT;

      TESTFIELD("Document No.");
      IF ("Document Type" <> SalesHeader."Document Type") OR ("Document No." <> SalesHeader."No.") THEN BEGIN
        SalesHeader.GET("Document Type","Document No.");
        IF SalesHeader."Currency Code" = '' THEN
          Currency.InitRoundingPrecision
        ELSE BEGIN
          SalesHeader.TESTFIELD("Currency Factor");
          Currency.GET(SalesHeader."Currency Code");
          Currency.TESTFIELD("Amount Rounding Precision");
        END;
      END;

      OnAfterGetSalesHeader(Rec,SalesHeader,Currency);
    END;

    LOCAL PROCEDURE GetItem@9(VAR Item@1000 : Record 27);
    BEGIN
      TESTFIELD("No.");
      Item.GET("No.");
    END;

    LOCAL PROCEDURE GetResource@49();
    BEGIN
      TESTFIELD("No.");
      IF "No." <> Resource."No." THEN
        Resource.GET("No.");
    END;

    [External]
    PROCEDURE UpdateUnitPrice@2(CalledByFieldNo@1000 : Integer);
    VAR
      IsHandled@1001 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeUpdateUnitPrice(Rec,xRec,CalledByFieldNo,CurrFieldNo,IsHandled);
      IF IsHandled THEN
        EXIT;

      GetSalesHeader;
      TESTFIELD("Qty. per Unit of Measure");

      CASE Type OF
        Type::Item,
        Type::Resource:
          BEGIN
            IsHandled := FALSE;
            OnUpdateUnitPriceOnBeforeFindPrice(SalesHeader,Rec,CalledByFieldNo,CurrFieldNo,IsHandled);
            IF NOT IsHandled THEN BEGIN
              IF NOT ("Copied From Posted Doc." AND IsCreditDocType) THEN
                PriceCalcMgt.FindSalesLineLineDisc(SalesHeader,Rec);
              PriceCalcMgt.FindSalesLinePrice(SalesHeader,Rec,CalledByFieldNo);
            END;
          END;
      END;

      IF "Copied From Posted Doc." AND IsCreditDocType AND ("Appl.-from Item Entry" <> 0) THEN
        IF xRec."Unit Price" <> "Unit Price" THEN
          IF GUIALLOWED THEN
            ShowMessageOnce(STRSUBSTNO(UnitPriceChangedMsg,Type,"No."));

      VALIDATE("Unit Price");

      OnAfterUpdateUnitPrice(Rec,xRec,CalledByFieldNo,CurrFieldNo);
    END;

    LOCAL PROCEDURE ShowMessageOnce@229(MessageText@1000 : Text);
    BEGIN
      TempErrorMessage.SetContext(Rec);
      IF TempErrorMessage.FindRecord(RECORDID,0,TempErrorMessage."Message Type"::Warning,MessageText) = 0 THEN BEGIN
        TempErrorMessage.LogMessage(Rec,0,TempErrorMessage."Message Type"::Warning,MessageText);
        MESSAGE(MessageText);
      END;
    END;

    [External]
    PROCEDURE FindResUnitCost@5();
    BEGIN
      ResCost.INIT;
      ResCost.Code := "No.";
      ResCost."Work Type Code" := "Work Type Code";
      CODEUNIT.RUN(CODEUNIT::"Resource-Find Cost",ResCost);
      OnAfterFindResUnitCost(Rec,ResCost);
      VALIDATE("Unit Cost (LCY)",ResCost."Unit Cost" * "Qty. per Unit of Measure");
    END;

    [External]
    PROCEDURE UpdatePrepmtSetupFields@102();
    VAR
      GenPostingSetup@1001 : Record 252;
      GLAcc@1000 : Record 15;
      IsHandled@1002 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeUpdatePrepmtSetupFields(Rec,IsHandled);
      IF IsHandled THEN
        EXIT;

      IF ("Prepayment %" <> 0) AND (Type <> Type::" ") THEN BEGIN
        TESTFIELD("Document Type","Document Type"::Order);
        TESTFIELD("No.");
        IF CurrFieldNo = FIELDNO("Prepayment %") THEN
          IF "System-Created Entry" AND NOT IsServiceCharge THEN
            FIELDERROR("Prepmt. Line Amount",STRSUBSTNO(Text045,0));
        IF "System-Created Entry" AND NOT IsServiceCharge THEN
          "Prepayment %" := 0;
        GenPostingSetup.GET("Gen. Bus. Posting Group","Gen. Prod. Posting Group");
        IF GenPostingSetup."Sales Prepayments Account" <> '' THEN BEGIN
          GLAcc.GET(GenPostingSetup."Sales Prepayments Account");
          VATPostingSetup.GET("VAT Bus. Posting Group",GLAcc."VAT Prod. Posting Group");
          VATPostingSetup.TESTFIELD("VAT Calculation Type","VAT Calculation Type");
        END ELSE
          CLEAR(VATPostingSetup);
        IF ("Prepayment VAT %" <> 0) AND ("Prepayment VAT %" <> VATPostingSetup."VAT %") AND ("Prepmt. Amt. Inv." <> 0) THEN
          ERROR(CannotChangePrepmtAmtDiffVAtPctErr);
        "Prepayment VAT %" := VATPostingSetup."VAT %";
        "Prepmt. VAT Calc. Type" := VATPostingSetup."VAT Calculation Type";
        "Prepayment VAT Identifier" := VATPostingSetup."VAT Identifier";
        IF "Prepmt. VAT Calc. Type" IN
           ["Prepmt. VAT Calc. Type"::"Reverse Charge VAT","Prepmt. VAT Calc. Type"::"Sales Tax"]
        THEN
          "Prepayment VAT %" := 0;
        "Prepayment Tax Group Code" := GLAcc."Tax Group Code";
      END;
    END;

    LOCAL PROCEDURE UpdatePrepmtAmounts@197();
    VAR
      RemLineAmountToInvoice@1000 : Decimal;
      IsHandled@1001 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeUpdatePrepmtAmounts(Rec,SalesHeader,IsHandled);
      IF IsHandled THEN
        EXIT;

      IF "Prepayment %" <> 0 THEN BEGIN
        IF Quantity < 0 THEN
          FIELDERROR(Quantity,STRSUBSTNO(Text047,FIELDCAPTION("Prepayment %")));
        IF "Unit Price" < 0 THEN
          FIELDERROR("Unit Price",STRSUBSTNO(Text047,FIELDCAPTION("Prepayment %")));
      END;
      IF SalesHeader."Document Type" <> SalesHeader."Document Type"::Invoice THEN BEGIN
        "Prepayment VAT Difference" := 0;
        IF NOT PrePaymentLineAmountEntered THEN BEGIN
          "Prepmt. Line Amount" := ROUND("Line Amount" * "Prepayment %" / 100,Currency."Amount Rounding Precision");
          IF ABS("Inv. Discount Amount" + "Prepmt. Line Amount") > ABS("Line Amount") THEN
            "Prepmt. Line Amount" := "Line Amount" - "Inv. Discount Amount";
        END;
        IF "Prepmt. Line Amount" < "Prepmt. Amt. Inv." THEN BEGIN
          IF IsServiceCharge THEN
            ERROR(CannotChangePrepaidServiceChargeErr);
          FIELDERROR("Prepmt. Line Amount",STRSUBSTNO(Text049,"Prepmt. Amt. Inv."));
        END;
        PrePaymentLineAmountEntered := FALSE;
        IF "Prepmt. Line Amount" <> 0 THEN BEGIN
          RemLineAmountToInvoice :=
            ROUND("Line Amount" * (Quantity - "Quantity Invoiced") / Quantity,Currency."Amount Rounding Precision");
          IF RemLineAmountToInvoice < ("Prepmt. Line Amount" - "Prepmt Amt Deducted") THEN
            FIELDERROR("Prepmt. Line Amount",STRSUBSTNO(Text045,RemLineAmountToInvoice + "Prepmt Amt Deducted"));
        END;
      END ELSE
        IF (CurrFieldNo <> 0) AND ("Line Amount" <> xRec."Line Amount") AND
           ("Prepmt. Amt. Inv." <> 0) AND ("Prepayment %" = 100)
        THEN BEGIN
          IF "Line Amount" < xRec."Line Amount" THEN
            FIELDERROR("Line Amount",STRSUBSTNO(Text044,xRec."Line Amount"));
          FIELDERROR("Line Amount",STRSUBSTNO(Text045,xRec."Line Amount"));
        END;
    END;

    [External]
    PROCEDURE UpdateAmounts@3();
    VAR
      VATBaseAmount@1003 : Decimal;
      LineAmountChanged@1002 : Boolean;
    BEGIN
      IF Type = Type::" " THEN
        EXIT;
      GetSalesHeader;
      VATBaseAmount := "VAT Base Amount";
      "Recalculate Invoice Disc." := TRUE;

      IF "Line Amount" <> xRec."Line Amount" THEN BEGIN
        "VAT Difference" := 0;
        LineAmountChanged := TRUE;
      END;
      IF "Line Amount" <> ROUND(Quantity * "Unit Price",Currency."Amount Rounding Precision") - "Line Discount Amount" THEN BEGIN
        "Line Amount" := ROUND(Quantity * "Unit Price",Currency."Amount Rounding Precision") - "Line Discount Amount";
        "VAT Difference" := 0;
        LineAmountChanged := TRUE;
      END;

      IF NOT "Prepayment Line" THEN
        UpdatePrepmtAmounts;

      OnAfterUpdateAmounts(Rec,xRec,CurrFieldNo);

      UpdateVATAmounts;
      InitOutstandingAmount;
      CheckCreditLimit;

      IF Type = Type::"Charge (Item)" THEN
        UpdateItemChargeAssgnt;

      CalcPrepaymentToDeduct;
      IF VATBaseAmount <> "VAT Base Amount" THEN
        LineAmountChanged := TRUE;

      IF LineAmountChanged THEN BEGIN
        UpdateDeferralAmounts;
        LineAmountChanged := FALSE;
      END;

      OnAfterUpdateAmountsDone(Rec,xRec,CurrFieldNo);
    END;

    [External]
    PROCEDURE UpdateVATAmounts@38();
    VAR
      SalesLine2@1000 : Record 37;
      TotalLineAmount@1005 : Decimal;
      TotalInvDiscAmount@1004 : Decimal;
      TotalAmount@1001 : Decimal;
      TotalAmountInclVAT@1002 : Decimal;
      TotalVATDifference@1006 : Decimal;
      TotalQuantityBase@1003 : Decimal;
    BEGIN
      OnBeforeUpdateVATAmounts(Rec);

      GetSalesHeader;
      SalesLine2.SETRANGE("Document Type","Document Type");
      SalesLine2.SETRANGE("Document No.","Document No.");
      SalesLine2.SETFILTER("Line No.",'<>%1',"Line No.");
      SalesLine2.SETRANGE("VAT Identifier","VAT Identifier");
      SalesLine2.SETRANGE("Tax Group Code","Tax Group Code");
      SalesLine2.SETRANGE("Tax Area Code","Tax Area Code");

      IF "Line Amount" = "Inv. Discount Amount" THEN BEGIN
        Amount := 0;
        "VAT Base Amount" := 0;
        "Amount Including VAT" := 0;
        IF (Quantity = 0) AND (xRec.Quantity <> 0) AND (xRec.Amount <> 0) THEN BEGIN
          IF "Line No." <> 0 THEN
            MODIFY;
          SalesLine2.SETFILTER(Amount,'<>0');
          IF SalesLine2.FIND('<>') THEN BEGIN
            SalesLine2.ValidateLineDiscountPercent(FALSE);
            SalesLine2.MODIFY;
          END;
        END;
      END ELSE BEGIN
        TotalLineAmount := 0;
        TotalInvDiscAmount := 0;
        TotalAmount := 0;
        TotalAmountInclVAT := 0;
        TotalQuantityBase := 0;
        IF ("VAT Calculation Type" = "VAT Calculation Type"::"Sales Tax") OR
           (("VAT Calculation Type" IN
             ["VAT Calculation Type"::"Normal VAT","VAT Calculation Type"::"Reverse Charge VAT"]) AND ("VAT %" <> 0))
        THEN BEGIN
          SalesLine2.SETFILTER("VAT %",'<>0');
          IF NOT SalesLine2.ISEMPTY THEN BEGIN
            SalesLine2.CALCSUMS("Line Amount","Inv. Discount Amount",Amount,"Amount Including VAT","Quantity (Base)","VAT Difference");
            TotalLineAmount := SalesLine2."Line Amount";
            TotalInvDiscAmount := SalesLine2."Inv. Discount Amount";
            TotalAmount := SalesLine2.Amount;
            TotalAmountInclVAT := SalesLine2."Amount Including VAT";
            TotalVATDifference := SalesLine2."VAT Difference";
            TotalQuantityBase := SalesLine2."Quantity (Base)";
            OnAfterUpdateTotalAmounts(Rec,SalesLine2,TotalAmount,TotalAmountInclVAT,TotalLineAmount,TotalInvDiscAmount);
          END;
        END;

        IF SalesHeader."Prices Including VAT" THEN
          CASE "VAT Calculation Type" OF
            "VAT Calculation Type"::"Normal VAT",
            "VAT Calculation Type"::"Reverse Charge VAT":
              BEGIN
                Amount :=
                  ROUND(
                    (TotalLineAmount - TotalInvDiscAmount + CalcLineAmount) / (1 + "VAT %" / 100),
                    Currency."Amount Rounding Precision") -
                  TotalAmount;
                "VAT Base Amount" :=
                  ROUND(
                    Amount * (1 - SalesHeader."VAT Base Discount %" / 100),
                    Currency."Amount Rounding Precision");
                "Amount Including VAT" :=
                  TotalLineAmount + "Line Amount" -
                  ROUND(
                    (TotalAmount + Amount) * (SalesHeader."VAT Base Discount %" / 100) * "VAT %" / 100,
                    Currency."Amount Rounding Precision",Currency.VATRoundingDirection) -
                  TotalAmountInclVAT - TotalInvDiscAmount - "Inv. Discount Amount";
              END;
            "VAT Calculation Type"::"Full VAT":
              BEGIN
                Amount := 0;
                "VAT Base Amount" := 0;
                "Amount Including VAT" := ROUND(CalcLineAmount,Currency."Amount Rounding Precision");
              END;
            "VAT Calculation Type"::"Sales Tax":
              BEGIN
                SalesHeader.TESTFIELD("VAT Base Discount %",0);
                Amount :=
                  SalesTaxCalculate.ReverseCalculateTax(
                    "Tax Area Code","Tax Group Code","Tax Liable",SalesHeader."Posting Date",
                    TotalAmountInclVAT + "Amount Including VAT",TotalQuantityBase + "Quantity (Base)",
                    SalesHeader."Currency Factor") -
                  TotalAmount;
                OnAfterSalesTaxCalculateReverse(Rec,SalesHeader,Currency);
                UpdateVATPercent(Amount,"Amount Including VAT" - Amount);
                Amount := ROUND(Amount,Currency."Amount Rounding Precision");
                "VAT Base Amount" := Amount;
              END;
          END
        ELSE
          CASE "VAT Calculation Type" OF
            "VAT Calculation Type"::"Normal VAT",
            "VAT Calculation Type"::"Reverse Charge VAT":
              BEGIN
                Amount := ROUND(CalcLineAmount,Currency."Amount Rounding Precision");
                "VAT Base Amount" :=
                  ROUND(Amount * (1 - SalesHeader."VAT Base Discount %" / 100),Currency."Amount Rounding Precision");
                "Amount Including VAT" :=
                  TotalAmount + Amount +
                  ROUND(
                    (TotalAmount + Amount) * (1 - SalesHeader."VAT Base Discount %" / 100) * "VAT %" / 100,
                    Currency."Amount Rounding Precision",Currency.VATRoundingDirection) -
                  TotalAmountInclVAT + TotalVATDifference;
              END;
            "VAT Calculation Type"::"Full VAT":
              BEGIN
                Amount := 0;
                "VAT Base Amount" := 0;
                "Amount Including VAT" := CalcLineAmount;
              END;
            "VAT Calculation Type"::"Sales Tax":
              BEGIN
                Amount := ROUND(CalcLineAmount,Currency."Amount Rounding Precision");
                "VAT Base Amount" := Amount;
                "Amount Including VAT" :=
                  TotalAmount + Amount +
                  ROUND(
                    SalesTaxCalculate.CalculateTax(
                      "Tax Area Code","Tax Group Code","Tax Liable",SalesHeader."Posting Date",
                      TotalAmount + Amount,TotalQuantityBase + "Quantity (Base)",
                      SalesHeader."Currency Factor"),Currency."Amount Rounding Precision") -
                  TotalAmountInclVAT;
                OnAfterSalesTaxCalculate(Rec,SalesHeader,Currency);
                UpdateVATPercent("VAT Base Amount","Amount Including VAT" - "VAT Base Amount");
              END;
          END;
      END;

      OnAfterUpdateVATAmounts(Rec);
    END;

    [External]
    PROCEDURE CheckItemAvailable@4(CalledByFieldNo@1000 : Integer);
    VAR
      IsHandled@1001 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeCheckItemAvailable(Rec,CalledByFieldNo,IsHandled,CurrFieldNo);
      IF IsHandled THEN
        EXIT;

      IF Reserve = Reserve::Always THEN
        EXIT;

      IF "Shipment Date" = 0D THEN BEGIN
        GetSalesHeader;
        IF SalesHeader."Shipment Date" <> 0D THEN
          VALIDATE("Shipment Date",SalesHeader."Shipment Date")
        ELSE
          VALIDATE("Shipment Date",WORKDATE);
      END;

      IF ((CalledByFieldNo = CurrFieldNo) OR (CalledByFieldNo = FIELDNO("Shipment Date"))) AND GUIALLOWED AND
         ("Document Type" IN ["Document Type"::Order,"Document Type"::Invoice]) AND
         (Type = Type::Item) AND ("No." <> '') AND
         ("Outstanding Quantity" > 0) AND
         ("Job Contract Entry No." = 0) AND
         NOT "Special Order"
      THEN BEGIN
        IF ItemCheckAvail.SalesLineCheck(Rec) THEN
          ItemCheckAvail.RaiseUpdateInterruptedError;
      END;
    END;

    LOCAL PROCEDURE CheckCreditLimit@204();
    VAR
      IsHandled@1000 : Boolean;
    BEGIN
      IF (CurrFieldNo <> 0) AND
         NOT ((Type = Type::Item) AND (CurrFieldNo = FIELDNO("No.")) AND (Quantity <> 0) AND
              ("Qty. per Unit of Measure" <> xRec."Qty. per Unit of Measure")) AND
         CheckCreditLimitCondition AND
         (("Outstanding Amount" + "Shipped Not Invoiced") > 0) AND
         (CurrFieldNo <> FIELDNO("Blanket Order No.")) AND
         (CurrFieldNo <> FIELDNO("Blanket Order Line No."))
      THEN BEGIN
        IsHandled := FALSE;
        OnUpdateAmountOnBeforeCheckCreditLimit(Rec,IsHandled);
        IF NOT IsHandled THEN
          CustCheckCreditLimit.SalesLineCheck(Rec);
      END;
    END;

    LOCAL PROCEDURE CheckCreditLimitCondition@186() : Boolean;
    VAR
      RunCheck@1000 : Boolean;
    BEGIN
      RunCheck := "Document Type" <= "Document Type"::Invoice;
      OnAfterCheckCreditLimitCondition(Rec,RunCheck);
      EXIT(RunCheck);
    END;

    [External]
    PROCEDURE ShowReservation@10();
    VAR
      Reservation@1000 : Page 498;
      IsHandled@1001 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeShowReservation(Rec,IsHandled);
      IF IsHandled THEN
        EXIT;

      TESTFIELD(Type,Type::Item);
      TESTFIELD("No.");
      TESTFIELD(Reserve);
      CLEAR(Reservation);
      Reservation.SetSalesLine(Rec);
      Reservation.RUNMODAL;
      UpdatePlanned;
    END;

    [External]
    PROCEDURE ShowReservationEntries@21(Modal@1000 : Boolean);
    VAR
      ReservEntry@1001 : Record 337;
      ReservEngineMgt@1002 : Codeunit 99000831;
      IsHandled@1003 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeShowReservationEntries(Rec,IsHandled);
      IF IsHandled THEN
        EXIT;

      TESTFIELD(Type,Type::Item);
      TESTFIELD("No.");
      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,TRUE);
      ReserveSalesLine.FilterReservFor(ReservEntry,Rec);
      IF Modal THEN
        PAGE.RUNMODAL(PAGE::"Reservation Entries",ReservEntry)
      ELSE
        PAGE.RUN(PAGE::"Reservation Entries",ReservEntry);
    END;

    [External]
    PROCEDURE AutoReserve@11();
    VAR
      SalesSetup@1003 : Record 311;
      ReservMgt@1002 : Codeunit 99000845;
      ConfirmManagement@1004 : Codeunit 27;
      QtyToReserve@1000 : Decimal;
      QtyToReserveBase@1001 : Decimal;
      IsHandled@1005 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeAutoReserve(Rec,IsHandled);
      IF IsHandled THEN
        EXIT;

      TESTFIELD(Type,Type::Item);
      TESTFIELD("No.");

      ReserveSalesLine.ReservQuantity(Rec,QtyToReserve,QtyToReserveBase);
      IF QtyToReserveBase <> 0 THEN BEGIN
        ReservMgt.SetSalesLine(Rec);
        TESTFIELD("Shipment Date");
        ReservMgt.AutoReserve(FullAutoReservation,'',"Shipment Date",QtyToReserve,QtyToReserveBase);
        FIND;
        SalesSetup.GET;
        IF (NOT FullAutoReservation) AND (NOT SalesSetup."Skip Manual Reservation") THEN BEGIN
          COMMIT;
          IF ConfirmManagement.ConfirmProcessUI(ManualReserveQst,TRUE) THEN BEGIN
            ShowReservation;
            FIND;
          END;
        END;
      END;

      OnAfterAutoReserve(Rec);
    END;

    [External]
    PROCEDURE AutoAsmToOrder@82();
    VAR
      IsHandled@1000 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeAutoAsmToOrder(Rec,IsHandled);
      IF IsHandled THEN
        EXIT;

      ATOLink.UpdateAsmFromSalesLine(Rec);

      OnAfterAutoAsmToOrder(Rec);
    END;

    LOCAL PROCEDURE GetDate@22() : Date;
    BEGIN
      GetSalesHeader;
      IF SalesHeader."Posting Date" <> 0D THEN
        EXIT(SalesHeader."Posting Date");
      EXIT(WORKDATE);
    END;

    [External]
    PROCEDURE CalcPlannedDeliveryDate@92(CurrFieldNo@1000 : Integer) PlannedDeliveryDate : Date;
    VAR
      IsHandled@1001 : Boolean;
    BEGIN
      IsHandled := FALSE;
      PlannedDeliveryDate := "Planned Delivery Date";
      OnBeforeCalcPlannedDeliveryDate(Rec,PlannedDeliveryDate,CurrFieldNo,IsHandled);
      IF IsHandled THEN
        EXIT(PlannedDeliveryDate);

      IF "Shipment Date" = 0D THEN
        EXIT("Planned Delivery Date");

      CASE CurrFieldNo OF
        FIELDNO("Shipment Date"):
          EXIT(CalendarMgmt.CalcDateBOC(
              FORMAT("Shipping Time"),
              "Planned Shipment Date",
              CalChange."Source Type"::"Shipping Agent",
              "Shipping Agent Code",
              "Shipping Agent Service Code",
              CalChange."Source Type"::Customer,
              "Sell-to Customer No.",
              '',
              TRUE));
        FIELDNO("Planned Delivery Date"):
          EXIT(CalendarMgmt.CalcDateBOC2(
              FORMAT("Shipping Time"),
              "Planned Delivery Date",
              CalChange."Source Type"::"Shipping Agent",
              "Shipping Agent Code",
              "Shipping Agent Service Code",
              CalChange."Source Type"::Location,
              "Location Code",
              '',
              TRUE));
      END;
    END;

    [External]
    PROCEDURE CalcPlannedShptDate@93(CurrFieldNo@1000 : Integer) PlannedShipmentDate : Date;
    VAR
      IsHandled@1001 : Boolean;
    BEGIN
      OnBeforeCalcPlannedShptDate(Rec,PlannedShipmentDate,CurrFieldNo,IsHandled);
      IF IsHandled THEN
        EXIT(PlannedShipmentDate);

      IF "Shipment Date" = 0D THEN
        EXIT("Planned Shipment Date");

      CASE CurrFieldNo OF
        FIELDNO("Shipment Date"):
          EXIT(CalendarMgmt.CalcDateBOC(
              FORMAT("Outbound Whse. Handling Time"),
              "Shipment Date",
              CalChange."Source Type"::Location,
              "Location Code",
              '',
              CalChange."Source Type"::"Shipping Agent",
              "Shipping Agent Code",
              "Shipping Agent Service Code",
              TRUE));
        FIELDNO("Planned Delivery Date"):
          EXIT(CalendarMgmt.CalcDateBOC(
              FORMAT(''),
              "Planned Delivery Date",
              CalChange."Source Type"::Customer,
              "Sell-to Customer No.",
              '',
              CalChange."Source Type"::"Shipping Agent",
              "Shipping Agent Code",
              "Shipping Agent Service Code",
              TRUE));
      END;
    END;

    [External]
    PROCEDURE CalcShipmentDate@111() : Date;
    VAR
      ShipmentDate@1000 : Date;
      IsHandled@1001 : Boolean;
    BEGIN
      IF "Planned Shipment Date" = 0D THEN
        EXIT("Shipment Date");

      IsHandled := FALSE;
      OnCalcShipmentDateOnPlannedShipmentDate(Rec,ShipmentDate,IsHandled);
      IF IsHandled THEN
        EXIT(ShipmentDate);

      IF FORMAT("Outbound Whse. Handling Time") <> '' THEN
        EXIT(
          CalendarMgmt.CalcDateBOC2(
            FORMAT("Outbound Whse. Handling Time"),
            "Planned Shipment Date",
            CalChange."Source Type"::Location,
            "Location Code",
            '',
            CalChange."Source Type"::"Shipping Agent",
            "Shipping Agent Code",
            "Shipping Agent Service Code",
            FALSE));

      EXIT(
        CalendarMgmt.CalcDateBOC(
          FORMAT(FORMAT('')),
          "Planned Shipment Date",
          CalChange."Source Type"::"Shipping Agent",
          "Shipping Agent Code",
          "Shipping Agent Service Code",
          CalChange."Source Type"::Location,
          "Location Code",
          '',
          FALSE));
    END;

    [External]
    PROCEDURE SignedXX@20(Value@1000 : Decimal) : Decimal;
    BEGIN
      CASE "Document Type" OF
        "Document Type"::Quote,
        "Document Type"::Order,
        "Document Type"::Invoice,
        "Document Type"::"Blanket Order":
          EXIT(-Value);
        "Document Type"::"Return Order",
        "Document Type"::"Credit Memo":
          EXIT(Value);
      END;
    END;

    LOCAL PROCEDURE BlanketOrderLookup@23();
    VAR
      IsHandled@1000 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeBlanketOrderLookup(Rec,IsHandled);
      IF IsHandled THEN
        EXIT;

      SalesLine2.RESET;
      SalesLine2.SETCURRENTKEY("Document Type",Type,"No.");
      SalesLine2.SETRANGE("Document Type","Document Type"::"Blanket Order");
      SalesLine2.SETRANGE(Type,Type);
      SalesLine2.SETRANGE("No.","No.");
      SalesLine2.SETRANGE("Bill-to Customer No.","Bill-to Customer No.");
      SalesLine2.SETRANGE("Sell-to Customer No.","Sell-to Customer No.");
      IF PAGE.RUNMODAL(PAGE::"Sales Lines",SalesLine2) = ACTION::LookupOK THEN BEGIN
        SalesLine2.TESTFIELD("Document Type","Document Type"::"Blanket Order");
        "Blanket Order No." := SalesLine2."Document No.";
        VALIDATE("Blanket Order Line No.",SalesLine2."Line No.");
      END;

      OnAfterBlanketOrderLookup(Rec);
    END;

    [External]
    PROCEDURE ShowDimensions@25() IsChanged : Boolean;
    VAR
      OldDimSetID@1000 : Integer;
    BEGIN
      OldDimSetID := "Dimension Set ID";
      "Dimension Set ID" :=
        DimMgt.EditDimensionSet("Dimension Set ID",STRSUBSTNO('%1 %2 %3',"Document Type","Document No.","Line No."));
      VerifyItemLineDim;
      DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
      ATOLink.UpdateAsmDimFromSalesLine(Rec);
      IsChanged := OldDimSetID <> "Dimension Set ID";
    END;

    [External]
    PROCEDURE OpenItemTrackingLines@6500();
    VAR
      Job@1000 : Record 167;
      IsHandled@1001 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeOpenItemTrackingLines(Rec,IsHandled);
      IF IsHandled THEN
        EXIT;

      TESTFIELD(Type,Type::Item);
      TESTFIELD("No.");
      TESTFIELD("Quantity (Base)");
      IF "Job Contract Entry No." <> 0 THEN
        ERROR(Text048,TABLECAPTION,Job.TABLECAPTION);
      ReserveSalesLine.CallItemTracking(Rec);
    END;

    [External]
    PROCEDURE CreateDim@26(Type1@1000 : Integer;No1@1001 : Code[20];Type2@1002 : Integer;No2@1003 : Code[20];Type3@1004 : Integer;No3@1005 : Code[20]);
    VAR
      SourceCodeSetup@1006 : Record 242;
      TableID@1007 : ARRAY [10] OF Integer;
      No@1008 : ARRAY [10] OF Code[20];
    BEGIN
      SourceCodeSetup.GET;
      TableID[1] := Type1;
      No[1] := No1;
      TableID[2] := Type2;
      No[2] := No2;
      TableID[3] := Type3;
      No[3] := No3;
      OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No);

      "Shortcut Dimension 1 Code" := '';
      "Shortcut Dimension 2 Code" := '';
      GetSalesHeader;
      "Dimension Set ID" :=
        DimMgt.GetRecDefaultDimID(
          Rec,CurrFieldNo,TableID,No,SourceCodeSetup.Sales,
          "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",SalesHeader."Dimension Set ID",DATABASE::Customer);
      DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
      ATOLink.UpdateAsmDimFromSalesLine(Rec);
    END;

    [External]
    PROCEDURE ValidateShortcutDimCode@29(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.ValidateShortcutDimValues(FieldNumber,ShortcutDimCode,"Dimension Set ID");
      VerifyItemLineDim;
    END;

    [External]
    PROCEDURE LookupShortcutDimCode@28(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.LookupDimValueCode(FieldNumber,ShortcutDimCode);
      ValidateShortcutDimCode(FieldNumber,ShortcutDimCode);
    END;

    [External]
    PROCEDURE ShowShortcutDimCode@27(VAR ShortcutDimCode@1000 : ARRAY [8] OF Code[20]);
    BEGIN
      DimMgt.GetShortcutDimensions("Dimension Set ID",ShortcutDimCode);
    END;

    [External]
    PROCEDURE SelectMultipleItems@180();
    VAR
      ItemListPage@1000 : Page 31;
      SelectionFilter@1001 : Text;
    BEGIN
      IF IsCreditDocType THEN
        SelectionFilter := ItemListPage.SelectActiveItems
      ELSE
        SelectionFilter := ItemListPage.SelectActiveItemsForSale;
      IF SelectionFilter <> '' THEN
        AddItems(SelectionFilter);
    END;

    LOCAL PROCEDURE AddItems@181(SelectionFilter@1000 : Text);
    VAR
      Item@1001 : Record 27;
      SalesLine@1002 : Record 37;
      LastSalesLine@1003 : Record 37;
    BEGIN
      OnBeforeAddItems(Rec);

      InitNewLine(SalesLine);
      Item.SETFILTER("No.",SelectionFilter);
      IF Item.FINDSET THEN
        REPEAT
          SalesLine.INIT;
          SalesLine."Line No." += 10000;
          SalesLine.VALIDATE(Type,Type::Item);
          SalesLine.VALIDATE("No.",Item."No.");
          SalesLine.INSERT(TRUE);
          IF TransferExtendedText.SalesCheckIfAnyExtText(SalesLine,FALSE) THEN BEGIN
            TransferExtendedText.InsertSalesExtTextRetLast(SalesLine,LastSalesLine);
            SalesLine."Line No." := LastSalesLine."Line No."
          END;
          OnAfterAddItem(SalesLine,LastSalesLine);
        UNTIL Item.NEXT = 0;
    END;

    LOCAL PROCEDURE InitNewLine@183(VAR NewSalesLine@1001 : Record 37);
    VAR
      SalesLine@1000 : Record 37;
    BEGIN
      NewSalesLine.COPY(Rec);
      SalesLine.SETRANGE("Document Type",NewSalesLine."Document Type");
      SalesLine.SETRANGE("Document No.",NewSalesLine."Document No.");
      IF SalesLine.FINDLAST THEN
        NewSalesLine."Line No." := SalesLine."Line No."
      ELSE
        NewSalesLine."Line No." := 0;
    END;

    [Internal]
    PROCEDURE ShowItemSub@30();
    VAR
      IsHandled@1000 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeShowItemSub(Rec,IsHandled);
      IF IsHandled THEN
        EXIT;

      CLEAR(SalesHeader);
      TestStatusOpen;
      ItemSubstitutionMgt.ItemSubstGet(Rec);
      IF TransferExtendedText.SalesCheckIfAnyExtText(Rec,FALSE) THEN
        TransferExtendedText.InsertSalesExtText(Rec);

      OnAfterShowItemSub(Rec);
    END;

    [External]
    PROCEDURE ShowNonstock@32();
    VAR
      TempItemTemplate@1000 : TEMPORARY Record 1301;
    BEGIN
      TESTFIELD(Type,Type::Item);
      IF "No." <> '' THEN
        ERROR(SelectNonstockItemErr);
      IF PAGE.RUNMODAL(PAGE::"Catalog Item List",NonstockItem) = ACTION::LookupOK THEN BEGIN
        NonstockItem.TESTFIELD("Item Template Code");
        ConfigTemplateHeader.SETRANGE(Code,NonstockItem."Item Template Code");
        ConfigTemplateHeader.FINDFIRST;
        TempItemTemplate.InitializeTempRecordFromConfigTemplate(TempItemTemplate,ConfigTemplateHeader);
        TempItemTemplate.TESTFIELD("Gen. Prod. Posting Group");
        TempItemTemplate.TESTFIELD("Inventory Posting Group");

        "No." := NonstockItem."Entry No.";
        CatalogItemMgt.NonStockSales(Rec);
        VALIDATE("No.","No.");
        VALIDATE("Unit Price",NonstockItem."Unit Price");

        OnAfterShowNonStock(Rec,NonstockItem);
      END;
    END;

    LOCAL PROCEDURE GetSalesSetup@100();
    BEGIN
      IF NOT SalesSetupRead THEN
        SalesSetup.GET;
      SalesSetupRead := TRUE;
    END;

    LOCAL PROCEDURE GetFAPostingGroup@6();
    VAR
      LocalGLAcc@1000 : Record 15;
      FASetup@1001 : Record 5603;
      FAPostingGr@1002 : Record 5606;
      FADeprBook@1003 : Record 5612;
    BEGIN
      IF (Type <> Type::"Fixed Asset") OR ("No." = '') THEN
        EXIT;
      IF "Depreciation Book Code" = '' THEN BEGIN
        FASetup.GET;
        "Depreciation Book Code" := FASetup."Default Depr. Book";
        IF NOT FADeprBook.GET("No.","Depreciation Book Code") THEN
          "Depreciation Book Code" := '';
        IF "Depreciation Book Code" = '' THEN
          EXIT;
      END;
      FADeprBook.GET("No.","Depreciation Book Code");
      FADeprBook.TESTFIELD("FA Posting Group");
      FAPostingGr.GET(FADeprBook."FA Posting Group");
      LocalGLAcc.GET(FAPostingGr.GetAcquisitionCostAccountOnDisposal);
      LocalGLAcc.CheckGLAcc;
      LocalGLAcc.TESTFIELD("Gen. Prod. Posting Group");
      "Posting Group" := FADeprBook."FA Posting Group";
      "Gen. Prod. Posting Group" := LocalGLAcc."Gen. Prod. Posting Group";
      "Tax Group Code" := LocalGLAcc."Tax Group Code";
      VALIDATE("VAT Prod. Posting Group",LocalGLAcc."VAT Prod. Posting Group");
    END;

    [External]
    PROCEDURE GetCaptionClass@34(FieldNumber@1000 : Integer) : Text[80];
    VAR
      SalesLineCaptionClassMgmt@1001 : Codeunit 345;
    BEGIN
      EXIT(SalesLineCaptionClassMgmt.GetSalesLineCaptionClass(Rec,FieldNumber));
    END;

    LOCAL PROCEDURE GetSKU@5806() : Boolean;
    BEGIN
      IF (SKU."Location Code" = "Location Code") AND
         (SKU."Item No." = "No.") AND
         (SKU."Variant Code" = "Variant Code")
      THEN
        EXIT(TRUE);
      IF SKU.GET("Location Code","No.","Variant Code") THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    [External]
    PROCEDURE GetUnitCost@5808();
    VAR
      Item@1000 : Record 27;
      IsHandled@1001 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeGetUnitCost(Rec,IsHandled);
      IF IsHandled THEN
        EXIT;

      TESTFIELD(Type,Type::Item);
      TESTFIELD("No.");
      GetItem(Item);
      "Qty. per Unit of Measure" := UOMMgt.GetQtyPerUnitOfMeasure(Item,"Unit of Measure Code");
      IF GetSKU THEN
        VALIDATE("Unit Cost (LCY)",SKU."Unit Cost" * "Qty. per Unit of Measure")
      ELSE
        VALIDATE("Unit Cost (LCY)",Item."Unit Cost" * "Qty. per Unit of Measure");

      OnAfterGetUnitCost(Rec,Item);
    END;

    LOCAL PROCEDURE CalcUnitCost@5809(ItemLedgEntry@1000 : Record 32) : Decimal;
    VAR
      ValueEntry@1001 : Record 5802;
      UnitCost@1004 : Decimal;
    BEGIN
      WITH ValueEntry DO BEGIN
        SETCURRENTKEY("Item Ledger Entry No.");
        SETRANGE("Item Ledger Entry No.",ItemLedgEntry."Entry No.");
        IF IsNonInventoriableItem THEN BEGIN
          CALCSUMS("Cost Amount (Non-Invtbl.)");
          UnitCost := "Cost Amount (Non-Invtbl.)" / ItemLedgEntry.Quantity;
        END ELSE BEGIN
          CALCSUMS("Cost Amount (Actual)","Cost Amount (Expected)");
          UnitCost :=
            ("Cost Amount (Expected)" + "Cost Amount (Actual)") / ItemLedgEntry.Quantity;
        END;
      END;

      EXIT(ABS(UnitCost * "Qty. per Unit of Measure"));
    END;

    [External]
    PROCEDURE ShowItemChargeAssgnt@5801();
    VAR
      ItemChargeAssgntSales@1003 : Record 5809;
      AssignItemChargeSales@1001 : Codeunit 5807;
      ItemChargeAssgnts@1000 : Page 5814;
      ItemChargeAssgntLineAmt@1002 : Decimal;
      IsHandled@1004 : Boolean;
      ErrorMsg@1005 : Text;
    BEGIN
      GET("Document Type","Document No.","Line No.");
      TESTFIELD("No.");
      TESTFIELD(Quantity);

      IF Type <> Type::"Charge (Item)" THEN BEGIN
        ErrorMsg := FORMAT(ItemChargeAssignmentErr);
        MESSAGE(ErrorMsg);
        EXIT;
      END;

      GetSalesHeader;
      Currency.Initialize(SalesHeader."Currency Code");
      IF ("Inv. Discount Amount" = 0) AND ("Line Discount Amount" = 0) AND
         (NOT SalesHeader."Prices Including VAT")
      THEN
        ItemChargeAssgntLineAmt := "Line Amount"
      ELSE
        IF SalesHeader."Prices Including VAT" THEN
          ItemChargeAssgntLineAmt :=
            ROUND(CalcLineAmount / (1 + "VAT %" / 100),Currency."Amount Rounding Precision")
        ELSE
          ItemChargeAssgntLineAmt := CalcLineAmount;

      ItemChargeAssgntSales.RESET;
      ItemChargeAssgntSales.SETRANGE("Document Type","Document Type");
      ItemChargeAssgntSales.SETRANGE("Document No.","Document No.");
      ItemChargeAssgntSales.SETRANGE("Document Line No.","Line No.");
      ItemChargeAssgntSales.SETRANGE("Item Charge No.","No.");
      IF NOT ItemChargeAssgntSales.FINDLAST THEN BEGIN
        ItemChargeAssgntSales."Document Type" := "Document Type";
        ItemChargeAssgntSales."Document No." := "Document No.";
        ItemChargeAssgntSales."Document Line No." := "Line No.";
        ItemChargeAssgntSales."Item Charge No." := "No.";
        ItemChargeAssgntSales."Unit Cost" :=
          ROUND(ItemChargeAssgntLineAmt / Quantity,Currency."Unit-Amount Rounding Precision");
      END;

      IsHandled := FALSE;
      OnShowItemChargeAssgntOnBeforeCalcItemCharge(Rec,ItemChargeAssgntLineAmt,Currency,IsHandled);
      IF NOT IsHandled THEN
        ItemChargeAssgntLineAmt :=
          ROUND(ItemChargeAssgntLineAmt * ("Qty. to Invoice" / Quantity),Currency."Amount Rounding Precision");

      IF IsCreditDocType THEN
        AssignItemChargeSales.CreateDocChargeAssgn(ItemChargeAssgntSales,"Return Receipt No.")
      ELSE
        AssignItemChargeSales.CreateDocChargeAssgn(ItemChargeAssgntSales,"Shipment No.");
      CLEAR(AssignItemChargeSales);
      COMMIT;

      ItemChargeAssgnts.Initialize(Rec,ItemChargeAssgntLineAmt);
      ItemChargeAssgnts.RUNMODAL;
      CALCFIELDS("Qty. to Assign");
    END;

    [External]
    PROCEDURE UpdateItemChargeAssgnt@5807();
    VAR
      ItemChargeAssgntSales@1003 : Record 5809;
      ShareOfVAT@1000 : Decimal;
      TotalQtyToAssign@1001 : Decimal;
      TotalAmtToAssign@1002 : Decimal;
    BEGIN
      IF "Document Type" = "Document Type"::"Blanket Order" THEN
        EXIT;

      CALCFIELDS("Qty. Assigned","Qty. to Assign");
      IF ABS("Quantity Invoiced") > ABS(("Qty. Assigned" + "Qty. to Assign")) THEN
        ERROR(Text055,FIELDCAPTION("Quantity Invoiced"),FIELDCAPTION("Qty. Assigned"),FIELDCAPTION("Qty. to Assign"));

      ItemChargeAssgntSales.RESET;
      ItemChargeAssgntSales.SETRANGE("Document Type","Document Type");
      ItemChargeAssgntSales.SETRANGE("Document No.","Document No.");
      ItemChargeAssgntSales.SETRANGE("Document Line No.","Line No.");
      ItemChargeAssgntSales.CALCSUMS("Qty. to Assign");
      TotalQtyToAssign := ItemChargeAssgntSales."Qty. to Assign";
      IF (CurrFieldNo <> 0) AND (Amount <> xRec.Amount) AND
         NOT ((Quantity <> xRec.Quantity) AND (TotalQtyToAssign = 0))
      THEN BEGIN
        ItemChargeAssgntSales.SETFILTER("Qty. Assigned",'<>0');
        IF NOT ItemChargeAssgntSales.ISEMPTY THEN
          ERROR(Text026,
            FIELDCAPTION(Amount));
        ItemChargeAssgntSales.SETRANGE("Qty. Assigned");
      END;

      IF ItemChargeAssgntSales.FINDSET(TRUE) THEN BEGIN
        GetSalesHeader;
        TotalAmtToAssign := CalcTotalAmtToAssign(TotalQtyToAssign);
        REPEAT
          ShareOfVAT := 1;
          IF SalesHeader."Prices Including VAT" THEN
            ShareOfVAT := 1 + "VAT %" / 100;
          IF Quantity <> 0 THEN
            IF ItemChargeAssgntSales."Unit Cost" <>
               ROUND(CalcLineAmount / Quantity / ShareOfVAT,Currency."Unit-Amount Rounding Precision")
            THEN
              ItemChargeAssgntSales."Unit Cost" :=
                ROUND(CalcLineAmount / Quantity / ShareOfVAT,Currency."Unit-Amount Rounding Precision");
          IF TotalQtyToAssign <> 0 THEN BEGIN
            ItemChargeAssgntSales."Amount to Assign" :=
              ROUND(ItemChargeAssgntSales."Qty. to Assign" / TotalQtyToAssign * TotalAmtToAssign,
                Currency."Amount Rounding Precision");
            TotalQtyToAssign -= ItemChargeAssgntSales."Qty. to Assign";
            TotalAmtToAssign -= ItemChargeAssgntSales."Amount to Assign";
          END;
          ItemChargeAssgntSales.MODIFY;
        UNTIL ItemChargeAssgntSales.NEXT = 0;
        CALCFIELDS("Qty. to Assign");
      END;
    END;

    LOCAL PROCEDURE DeleteItemChargeAssgnt@5802(DocType@1000 : Option;DocNo@1001 : Code[20];DocLineNo@1002 : Integer);
    VAR
      ItemChargeAssgntSales@1003 : Record 5809;
    BEGIN
      ItemChargeAssgntSales.SETRANGE("Applies-to Doc. Type",DocType);
      ItemChargeAssgntSales.SETRANGE("Applies-to Doc. No.",DocNo);
      ItemChargeAssgntSales.SETRANGE("Applies-to Doc. Line No.",DocLineNo);
      IF NOT ItemChargeAssgntSales.ISEMPTY THEN
        ItemChargeAssgntSales.DELETEALL(TRUE);
    END;

    LOCAL PROCEDURE DeleteChargeChargeAssgnt@5804(DocType@1000 : Option;DocNo@1001 : Code[20];DocLineNo@1002 : Integer);
    VAR
      ItemChargeAssgntSales@1003 : Record 5809;
    BEGIN
      IF DocType <> "Document Type"::"Blanket Order" THEN
        IF "Quantity Invoiced" <> 0 THEN BEGIN
          CALCFIELDS("Qty. Assigned");
          TESTFIELD("Qty. Assigned","Quantity Invoiced");
        END;

      ItemChargeAssgntSales.RESET;
      ItemChargeAssgntSales.SETRANGE("Document Type",DocType);
      ItemChargeAssgntSales.SETRANGE("Document No.",DocNo);
      ItemChargeAssgntSales.SETRANGE("Document Line No.",DocLineNo);
      IF NOT ItemChargeAssgntSales.ISEMPTY THEN
        ItemChargeAssgntSales.DELETEALL;

      OnAfterDeleteChargeChargeAssgnt(Rec,xRec,CurrFieldNo);
    END;

    LOCAL PROCEDURE CheckItemChargeAssgnt@5800();
    VAR
      ItemChargeAssgntSales@1000 : Record 5809;
    BEGIN
      ItemChargeAssgntSales.SETRANGE("Applies-to Doc. Type","Document Type");
      ItemChargeAssgntSales.SETRANGE("Applies-to Doc. No.","Document No.");
      ItemChargeAssgntSales.SETRANGE("Applies-to Doc. Line No.","Line No.");
      ItemChargeAssgntSales.SETRANGE("Document Type","Document Type");
      ItemChargeAssgntSales.SETRANGE("Document No.","Document No.");
      IF ItemChargeAssgntSales.FINDSET THEN BEGIN
        TESTFIELD("Allow Item Charge Assignment");
        REPEAT
          ItemChargeAssgntSales.TESTFIELD("Qty. to Assign",0);
        UNTIL ItemChargeAssgntSales.NEXT = 0;
      END;
    END;

    [External]
    PROCEDURE TestStatusOpen@33();
    BEGIN
      IF StatusCheckSuspended THEN
        EXIT;

      GetSalesHeader;
      OnBeforeTestStatusOpen(Rec,SalesHeader);

      IF NOT "System-Created Entry" THEN
        IF HasTypeToFillMandatoryFields THEN
          SalesHeader.TESTFIELD(Status,SalesHeader.Status::Open);

      OnAfterTestStatusOpen(Rec,SalesHeader);
    END;

    [External]
    PROCEDURE SuspendStatusCheck@39(Suspend@1000 : Boolean);
    BEGIN
      StatusCheckSuspended := Suspend;
    END;

    [External]
    PROCEDURE UpdateVATOnLines@36(QtyType@1000 : 'General,Invoicing,Shipping';VAR SalesHeader@1001 : Record 36;VAR SalesLine@1002 : Record 37;VAR VATAmountLine@1003 : Record 290) LineWasModified : Boolean;
    VAR
      TempVATAmountLineRemainder@1004 : TEMPORARY Record 290;
      Currency@1005 : Record 4;
      NewAmount@1006 : Decimal;
      NewAmountIncludingVAT@1007 : Decimal;
      NewVATBaseAmount@1008 : Decimal;
      VATAmount@1009 : Decimal;
      VATDifference@1010 : Decimal;
      InvDiscAmount@1011 : Decimal;
      LineAmountToInvoice@1012 : Decimal;
      LineAmountToInvoiceDiscounted@1013 : Decimal;
      DeferralAmount@1014 : Decimal;
    BEGIN
      LineWasModified := FALSE;
      IF QtyType = QtyType::Shipping THEN
        EXIT;
      IF SalesHeader."Currency Code" = '' THEN
        Currency.InitRoundingPrecision
      ELSE
        Currency.GET(SalesHeader."Currency Code");

      TempVATAmountLineRemainder.DELETEALL;

      WITH SalesLine DO BEGIN
        SETRANGE("Document Type",SalesHeader."Document Type");
        SETRANGE("Document No.",SalesHeader."No.");
        LOCKTABLE;
        IF FINDSET THEN
          REPEAT
            IF NOT ZeroAmountLine(QtyType) AND
               ((SalesHeader."Document Type" <> SalesHeader."Document Type"::Invoice) OR ("Prepmt. Amt. Inv." = 0))
            THEN BEGIN
              DeferralAmount := GetDeferralAmount;
              VATAmountLine.GET("VAT Identifier","VAT Calculation Type","Tax Group Code",FALSE,"Line Amount" >= 0);
              IF VATAmountLine.Modified THEN BEGIN
                IF NOT TempVATAmountLineRemainder.GET(
                     "VAT Identifier","VAT Calculation Type","Tax Group Code",FALSE,"Line Amount" >= 0)
                THEN BEGIN
                  TempVATAmountLineRemainder := VATAmountLine;
                  TempVATAmountLineRemainder.INIT;
                  TempVATAmountLineRemainder.INSERT;
                END;

                IF QtyType = QtyType::General THEN
                  LineAmountToInvoice := "Line Amount"
                ELSE
                  LineAmountToInvoice :=
                    ROUND("Line Amount" * "Qty. to Invoice" / Quantity,Currency."Amount Rounding Precision");

                IF "Allow Invoice Disc." THEN BEGIN
                  IF (VATAmountLine."Inv. Disc. Base Amount" = 0) OR (LineAmountToInvoice = 0) THEN
                    InvDiscAmount := 0
                  ELSE BEGIN
                    LineAmountToInvoiceDiscounted :=
                      VATAmountLine."Invoice Discount Amount" * LineAmountToInvoice /
                      VATAmountLine."Inv. Disc. Base Amount";
                    TempVATAmountLineRemainder."Invoice Discount Amount" :=
                      TempVATAmountLineRemainder."Invoice Discount Amount" + LineAmountToInvoiceDiscounted;
                    InvDiscAmount :=
                      ROUND(
                        TempVATAmountLineRemainder."Invoice Discount Amount",Currency."Amount Rounding Precision");
                    TempVATAmountLineRemainder."Invoice Discount Amount" :=
                      TempVATAmountLineRemainder."Invoice Discount Amount" - InvDiscAmount;
                  END;
                  IF QtyType = QtyType::General THEN BEGIN
                    "Inv. Discount Amount" := InvDiscAmount;
                    CalcInvDiscToInvoice;
                  END ELSE
                    "Inv. Disc. Amount to Invoice" := InvDiscAmount;
                END ELSE
                  InvDiscAmount := 0;

                IF QtyType = QtyType::General THEN
                  IF SalesHeader."Prices Including VAT" THEN BEGIN
                    IF (VATAmountLine.CalcLineAmount = 0) OR ("Line Amount" = 0) THEN BEGIN
                      VATAmount := 0;
                      NewAmountIncludingVAT := 0;
                    END ELSE BEGIN
                      VATAmount :=
                        TempVATAmountLineRemainder."VAT Amount" +
                        VATAmountLine."VAT Amount" * CalcLineAmount / VATAmountLine.CalcLineAmount;
                      NewAmountIncludingVAT :=
                        TempVATAmountLineRemainder."Amount Including VAT" +
                        VATAmountLine."Amount Including VAT" * CalcLineAmount / VATAmountLine.CalcLineAmount;
                    END;
                    OnUpdateVATOnLinesOnBeforeCalculateNewAmount(
                      Rec,SalesHeader,VATAmountLine,TempVATAmountLineRemainder,NewAmountIncludingVAT,VATAmount);
                    NewAmount :=
                      ROUND(NewAmountIncludingVAT,Currency."Amount Rounding Precision") -
                      ROUND(VATAmount,Currency."Amount Rounding Precision");
                    NewVATBaseAmount :=
                      ROUND(
                        NewAmount * (1 - SalesHeader."VAT Base Discount %" / 100),Currency."Amount Rounding Precision");
                  END ELSE BEGIN
                    IF "VAT Calculation Type" = "VAT Calculation Type"::"Full VAT" THEN BEGIN
                      VATAmount := CalcLineAmount;
                      NewAmount := 0;
                      NewVATBaseAmount := 0;
                    END ELSE BEGIN
                      NewAmount := CalcLineAmount;
                      NewVATBaseAmount :=
                        ROUND(
                          NewAmount * (1 - SalesHeader."VAT Base Discount %" / 100),Currency."Amount Rounding Precision");
                      IF VATAmountLine."VAT Base" = 0 THEN
                        VATAmount := 0
                      ELSE
                        VATAmount :=
                          TempVATAmountLineRemainder."VAT Amount" +
                          VATAmountLine."VAT Amount" * NewAmount / VATAmountLine."VAT Base";
                    END;
                    OnUpdateVATOnLinesOnBeforeCalculateNewAmount(
                      Rec,SalesHeader,VATAmountLine,TempVATAmountLineRemainder,NewAmount,VATAmount);
                    NewAmountIncludingVAT := NewAmount + ROUND(VATAmount,Currency."Amount Rounding Precision");
                  END
                ELSE BEGIN
                  IF VATAmountLine.CalcLineAmount = 0 THEN
                    VATDifference := 0
                  ELSE
                    VATDifference :=
                      TempVATAmountLineRemainder."VAT Difference" +
                      VATAmountLine."VAT Difference" * (LineAmountToInvoice - InvDiscAmount) / VATAmountLine.CalcLineAmount;
                  IF LineAmountToInvoice = 0 THEN
                    "VAT Difference" := 0
                  ELSE
                    "VAT Difference" := ROUND(VATDifference,Currency."Amount Rounding Precision");
                END;
                IF QtyType = QtyType::General THEN BEGIN
                  IF NOT "Prepayment Line" THEN
                    UpdatePrepmtAmounts;
                  UpdateBaseAmounts(NewAmount,ROUND(NewAmountIncludingVAT,Currency."Amount Rounding Precision"),NewVATBaseAmount);
                END;
                InitOutstanding;
                IF Type = Type::"Charge (Item)" THEN
                  UpdateItemChargeAssgnt;
                MODIFY;
                LineWasModified := TRUE;

                IF ("Deferral Code" <> '') AND (DeferralAmount <> GetDeferralAmount) THEN
                  UpdateDeferralAmounts;

                TempVATAmountLineRemainder."Amount Including VAT" :=
                  NewAmountIncludingVAT - ROUND(NewAmountIncludingVAT,Currency."Amount Rounding Precision");
                TempVATAmountLineRemainder."VAT Amount" := VATAmount - NewAmountIncludingVAT + NewAmount;
                TempVATAmountLineRemainder."VAT Difference" := VATDifference - "VAT Difference";
                TempVATAmountLineRemainder.MODIFY;
              END;
            END;
          UNTIL NEXT = 0;
      END;

      OnAfterUpdateVATOnLines(SalesHeader,SalesLine,VATAmountLine,QtyType);
    END;

    [External]
    PROCEDURE CalcVATAmountLines@35(QtyType@1000 : 'General,Invoicing,Shipping';VAR SalesHeader@1001 : Record 36;VAR SalesLine@1002 : Record 37;VAR VATAmountLine@1003 : Record 290);
    VAR
      TotalVATAmount@1011 : Decimal;
      QtyToHandle@1006 : Decimal;
      AmtToHandle@1015 : Decimal;
      RoundingLineInserted@1010 : Boolean;
    BEGIN
      IF IsCalcVATAmountLinesHandled(SalesHeader,SalesLine,VATAmountLine) THEN
        EXIT;

      Currency.Initialize(SalesHeader."Currency Code");

      VATAmountLine.DELETEALL;

      WITH SalesLine DO BEGIN
        SETRANGE("Document Type",SalesHeader."Document Type");
        SETRANGE("Document No.",SalesHeader."No.");
        IF FINDSET THEN
          REPEAT
            IF NOT ZeroAmountLine(QtyType) THEN BEGIN
              IF (Type = Type::"G/L Account") AND NOT "Prepayment Line" THEN
                RoundingLineInserted :=
                  (("No." = GetCPGInvRoundAcc(SalesHeader)) AND "System-Created Entry") OR RoundingLineInserted;
              IF "VAT Calculation Type" IN
                 ["VAT Calculation Type"::"Reverse Charge VAT","VAT Calculation Type"::"Sales Tax"]
              THEN
                "VAT %" := 0;
              IF NOT VATAmountLine.GET(
                   "VAT Identifier","VAT Calculation Type","Tax Group Code",FALSE,"Line Amount" >= 0)
              THEN
                VATAmountLine.InsertNewLine(
                  "VAT Identifier","VAT Calculation Type","Tax Group Code",FALSE,"VAT %","Line Amount" >= 0,FALSE);

              CASE QtyType OF
                QtyType::General:
                  BEGIN
                    VATAmountLine.Quantity += "Quantity (Base)";
                    VATAmountLine.SumLine(
                      "Line Amount","Inv. Discount Amount","VAT Difference","Allow Invoice Disc.","Prepayment Line");
                  END;
                QtyType::Invoicing:
                  BEGIN
                    CASE TRUE OF
                      ("Document Type" IN ["Document Type"::Order,"Document Type"::Invoice]) AND
                      (NOT SalesHeader.Ship) AND SalesHeader.Invoice AND (NOT "Prepayment Line"):
                        IF "Shipment No." = '' THEN BEGIN
                          QtyToHandle := GetAbsMin("Qty. to Invoice","Qty. Shipped Not Invoiced");
                          VATAmountLine.Quantity += GetAbsMin("Qty. to Invoice (Base)","Qty. Shipped Not Invd. (Base)");
                        END ELSE BEGIN
                          QtyToHandle := "Qty. to Invoice";
                          VATAmountLine.Quantity += "Qty. to Invoice (Base)";
                        END;
                      IsCreditDocType AND (NOT SalesHeader.Receive) AND SalesHeader.Invoice:
                        IF "Return Receipt No." = '' THEN BEGIN
                          QtyToHandle := GetAbsMin("Qty. to Invoice","Return Qty. Rcd. Not Invd.");
                          VATAmountLine.Quantity += GetAbsMin("Qty. to Invoice (Base)","Ret. Qty. Rcd. Not Invd.(Base)");
                        END ELSE BEGIN
                          QtyToHandle := "Qty. to Invoice";
                          VATAmountLine.Quantity += "Qty. to Invoice (Base)";
                        END;
                      ELSE
                        BEGIN
                        QtyToHandle := "Qty. to Invoice";
                        VATAmountLine.Quantity += "Qty. to Invoice (Base)";
                      END;
                    END;
                    AmtToHandle := GetLineAmountToHandleInclPrepmt(QtyToHandle);
                    IF SalesHeader."Invoice Discount Calculation" <> SalesHeader."Invoice Discount Calculation"::Amount THEN
                      VATAmountLine.SumLine(
                        AmtToHandle,ROUND("Inv. Discount Amount" * QtyToHandle / Quantity,Currency."Amount Rounding Precision"),
                        "VAT Difference","Allow Invoice Disc.","Prepayment Line")
                    ELSE
                      VATAmountLine.SumLine(
                        AmtToHandle,"Inv. Disc. Amount to Invoice","VAT Difference","Allow Invoice Disc.","Prepayment Line");
                  END;
                QtyType::Shipping:
                  BEGIN
                    IF "Document Type" IN
                       ["Document Type"::"Return Order","Document Type"::"Credit Memo"]
                    THEN BEGIN
                      QtyToHandle := "Return Qty. to Receive";
                      VATAmountLine.Quantity += "Return Qty. to Receive (Base)";
                    END ELSE BEGIN
                      QtyToHandle := "Qty. to Ship";
                      VATAmountLine.Quantity += "Qty. to Ship (Base)";
                    END;
                    AmtToHandle := GetLineAmountToHandleInclPrepmt(QtyToHandle);
                    VATAmountLine.SumLine(
                      AmtToHandle,ROUND("Inv. Discount Amount" * QtyToHandle / Quantity,Currency."Amount Rounding Precision"),
                      "VAT Difference","Allow Invoice Disc.","Prepayment Line");
                  END;
              END;
              TotalVATAmount += "Amount Including VAT" - Amount;
              OnCalcVATAmountLinesOnAfterCalcLineTotals(VATAmountLine,SalesHeader,SalesLine,Currency,QtyType,TotalVATAmount);
            END;
          UNTIL NEXT = 0;
      END;

      VATAmountLine.UpdateLines(
        TotalVATAmount,Currency,SalesHeader."Currency Factor",SalesHeader."Prices Including VAT",
        SalesHeader."VAT Base Discount %",SalesHeader."Tax Area Code",SalesHeader."Tax Liable",SalesHeader."Posting Date");

      IF RoundingLineInserted AND (TotalVATAmount <> 0) THEN
        IF GetVATAmountLineOfMaxAmt(VATAmountLine,SalesLine) THEN BEGIN
          VATAmountLine."VAT Amount" += TotalVATAmount;
          VATAmountLine."Amount Including VAT" += TotalVATAmount;
          VATAmountLine."Calculated VAT Amount" += TotalVATAmount;
          VATAmountLine.MODIFY;
        END;

      OnAfterCalcVATAmountLines(SalesHeader,SalesLine,VATAmountLine,QtyType);
    END;

    [External]
    PROCEDURE GetCPGInvRoundAcc@71(VAR SalesHeader@1000 : Record 36) : Code[20];
    VAR
      Cust@1002 : Record 18;
      CustTemplate@1003 : Record 5105;
      CustPostingGroup@1004 : Record 92;
    BEGIN
      GetSalesSetup;
      IF SalesSetup."Invoice Rounding" THEN
        IF Cust.GET(SalesHeader."Bill-to Customer No.") THEN
          CustPostingGroup.GET(Cust."Customer Posting Group")
        ELSE
          IF CustTemplate.GET(SalesHeader."Sell-to Customer Template Code") THEN
            CustPostingGroup.GET(CustTemplate."Customer Posting Group");

      EXIT(CustPostingGroup."Invoice Rounding Account");
    END;

    LOCAL PROCEDURE GetVATAmountLineOfMaxAmt@231(VAR VATAmountLine@1001 : Record 290;SalesLine@1000 : Record 37) : Boolean;
    VAR
      VATAmount1@1002 : Decimal;
      VATAmount2@1003 : Decimal;
      IsPositive1@1004 : Boolean;
      IsPositive2@1005 : Boolean;
    BEGIN
      IF VATAmountLine.GET(SalesLine."VAT Identifier",SalesLine."VAT Calculation Type",SalesLine."Tax Group Code",FALSE,FALSE) THEN BEGIN
        VATAmount1 := VATAmountLine."VAT Amount";
        IsPositive1 := VATAmountLine.Positive;
      END;
      IF VATAmountLine.GET(SalesLine."VAT Identifier",SalesLine."VAT Calculation Type",SalesLine."Tax Group Code",FALSE,TRUE) THEN BEGIN
        VATAmount2 := VATAmountLine."VAT Amount";
        IsPositive2 := VATAmountLine.Positive;
      END;
      IF ABS(VATAmount1) >= ABS(VATAmount2) THEN
        EXIT(
          VATAmountLine.GET(SalesLine."VAT Identifier",SalesLine."VAT Calculation Type",SalesLine."Tax Group Code",FALSE,IsPositive1));
      EXIT(
        VATAmountLine.GET(SalesLine."VAT Identifier",SalesLine."VAT Calculation Type",SalesLine."Tax Group Code",FALSE,IsPositive2));
    END;

    LOCAL PROCEDURE CalcInvDiscToInvoice@37();
    VAR
      OldInvDiscAmtToInv@1000 : Decimal;
    BEGIN
      GetSalesHeader;
      OldInvDiscAmtToInv := "Inv. Disc. Amount to Invoice";
      IF Quantity = 0 THEN
        VALIDATE("Inv. Disc. Amount to Invoice",0)
      ELSE
        VALIDATE(
          "Inv. Disc. Amount to Invoice",
          ROUND(
            "Inv. Discount Amount" * "Qty. to Invoice" / Quantity,
            Currency."Amount Rounding Precision"));

      IF OldInvDiscAmtToInv <> "Inv. Disc. Amount to Invoice" THEN BEGIN
        "Amount Including VAT" := "Amount Including VAT" - "VAT Difference";
        "VAT Difference" := 0;
      END;
    END;

    [External]
    PROCEDURE UpdateWithWarehouseShip@41();
    BEGIN
      IF Type = Type::Item THEN
        CASE TRUE OF
          ("Document Type" IN ["Document Type"::Quote,"Document Type"::Order]) AND (Quantity >= 0):
            IF Location.RequireShipment("Location Code") THEN
              VALIDATE("Qty. to Ship",0)
            ELSE
              VALIDATE("Qty. to Ship","Outstanding Quantity");
          ("Document Type" IN ["Document Type"::Quote,"Document Type"::Order]) AND (Quantity < 0):
            IF Location.RequireReceive("Location Code") THEN
              VALIDATE("Qty. to Ship",0)
            ELSE
              VALIDATE("Qty. to Ship","Outstanding Quantity");
          ("Document Type" = "Document Type"::"Return Order") AND (Quantity >= 0):
            IF Location.RequireReceive("Location Code") THEN
              VALIDATE("Return Qty. to Receive",0)
            ELSE
              VALIDATE("Return Qty. to Receive","Outstanding Quantity");
          ("Document Type" = "Document Type"::"Return Order") AND (Quantity < 0):
            IF Location.RequireShipment("Location Code") THEN
              VALIDATE("Return Qty. to Receive",0)
            ELSE
              VALIDATE("Return Qty. to Receive","Outstanding Quantity");
        END;

      SetDefaultQuantity;

      OnAfterUpdateWithWarehouseShip(SalesHeader,Rec);
    END;

    LOCAL PROCEDURE CheckWarehouse@46();
    VAR
      Location2@1002 : Record 14;
      WhseSetup@1000 : Record 5769;
      ShowDialog@1001 : ' ,Message,Error';
      DialogText@1003 : Text[50];
    BEGIN
      GetLocation("Location Code");
      IF "Location Code" = '' THEN BEGIN
        WhseSetup.GET;
        Location2."Require Shipment" := WhseSetup."Require Shipment";
        Location2."Require Pick" := WhseSetup."Require Pick";
        Location2."Require Receive" := WhseSetup."Require Receive";
        Location2."Require Put-away" := WhseSetup."Require Put-away";
      END ELSE
        Location2 := Location;

      DialogText := Text035;
      IF ("Document Type" IN ["Document Type"::Order,"Document Type"::"Return Order"]) AND
         Location2."Directed Put-away and Pick"
      THEN BEGIN
        ShowDialog := ShowDialog::Error;
        IF (("Document Type" = "Document Type"::Order) AND (Quantity >= 0)) OR
           (("Document Type" = "Document Type"::"Return Order") AND (Quantity < 0))
        THEN
          DialogText :=
            DialogText + Location2.GetRequirementText(Location2.FIELDNO("Require Shipment"))
        ELSE
          DialogText :=
            DialogText + Location2.GetRequirementText(Location2.FIELDNO("Require Receive"));
      END ELSE BEGIN
        IF (("Document Type" = "Document Type"::Order) AND (Quantity >= 0) AND
            (Location2."Require Shipment" OR Location2."Require Pick")) OR
           (("Document Type" = "Document Type"::"Return Order") AND (Quantity < 0) AND
            (Location2."Require Shipment" OR Location2."Require Pick"))
        THEN BEGIN
          IF WhseValidateSourceLine.WhseLinesExist(
               DATABASE::"Sales Line",
               "Document Type",
               "Document No.",
               "Line No.",
               0,
               Quantity)
          THEN
            ShowDialog := ShowDialog::Error
          ELSE
            IF Location2."Require Shipment" THEN
              ShowDialog := ShowDialog::Message;
          IF Location2."Require Shipment" THEN
            DialogText :=
              DialogText + Location2.GetRequirementText(Location2.FIELDNO("Require Shipment"))
          ELSE BEGIN
            DialogText := Text036;
            DialogText :=
              DialogText + Location2.GetRequirementText(Location2.FIELDNO("Require Pick"));
          END;
        END;

        IF (("Document Type" = "Document Type"::Order) AND (Quantity < 0) AND
            (Location2."Require Receive" OR Location2."Require Put-away")) OR
           (("Document Type" = "Document Type"::"Return Order") AND (Quantity >= 0) AND
            (Location2."Require Receive" OR Location2."Require Put-away"))
        THEN BEGIN
          IF WhseValidateSourceLine.WhseLinesExist(
               DATABASE::"Sales Line",
               "Document Type",
               "Document No.",
               "Line No.",
               0,
               Quantity)
          THEN
            ShowDialog := ShowDialog::Error
          ELSE
            IF Location2."Require Receive" THEN
              ShowDialog := ShowDialog::Message;
          IF Location2."Require Receive" THEN
            DialogText :=
              DialogText + Location2.GetRequirementText(Location2.FIELDNO("Require Receive"))
          ELSE BEGIN
            DialogText := Text036;
            DialogText :=
              DialogText + Location2.GetRequirementText(Location2.FIELDNO("Require Put-away"));
          END;
        END;
      END;

      OnCheckWarehouseOnBeforeShowDialog(Rec,Location2,ShowDialog,DialogText);

      CASE ShowDialog OF
        ShowDialog::Message:
          MESSAGE(WhseRequirementMsg,DialogText);
        ShowDialog::Error:
          ERROR(Text016,DialogText,FIELDCAPTION("Line No."),"Line No.");
      END;

      HandleDedicatedBin(TRUE);
    END;

    LOCAL PROCEDURE UpdateDates@43();
    BEGIN
      IF CurrFieldNo = 0 THEN BEGIN
        PlannedShipmentDateCalculated := FALSE;
        PlannedDeliveryDateCalculated := FALSE;
      END;
      IF "Promised Delivery Date" <> 0D THEN
        VALIDATE("Promised Delivery Date")
      ELSE
        IF "Requested Delivery Date" <> 0D THEN
          VALIDATE("Requested Delivery Date")
        ELSE
          VALIDATE("Shipment Date");

      OnAfterUpdateDates(Rec);
    END;

    [External]
    PROCEDURE GetItemTranslation@42();
    VAR
      ItemTranslation@1000 : Record 30;
      IsHandled@1001 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeGetItemTranslation(Rec,IsHandled);
      IF IsHandled THEN
        EXIT;

      GetSalesHeader;
      IF ItemTranslation.GET("No.","Variant Code",SalesHeader."Language Code") THEN BEGIN
        Description := ItemTranslation.Description;
        "Description 2" := ItemTranslation."Description 2";
        OnAfterGetItemTranslation(Rec,SalesHeader,ItemTranslation);
      END;
    END;

    LOCAL PROCEDURE GetLocation@7300(LocationCode@1000 : Code[10]);
    BEGIN
      IF LocationCode = '' THEN
        CLEAR(Location)
      ELSE
        IF Location.Code <> LocationCode THEN
          Location.GET(LocationCode);
    END;

    [External]
    PROCEDURE PriceExists@44() : Boolean;
    BEGIN
      IF "Document No." <> '' THEN BEGIN
        GetSalesHeader;
        EXIT(PriceCalcMgt.SalesLinePriceExists(SalesHeader,Rec,TRUE));
      END;
      EXIT(FALSE);
    END;

    [External]
    PROCEDURE LineDiscExists@45() : Boolean;
    BEGIN
      IF "Document No." <> '' THEN BEGIN
        GetSalesHeader;
        EXIT(PriceCalcMgt.SalesLineLineDiscExists(SalesHeader,Rec,TRUE));
      END;
      EXIT(FALSE);
    END;

    [External]
    PROCEDURE RowID1@47() : Text[250];
    VAR
      ItemTrackingMgt@1000 : Codeunit 6500;
    BEGIN
      EXIT(ItemTrackingMgt.ComposeRowID(DATABASE::"Sales Line","Document Type",
          "Document No.",'',0,"Line No."));
    END;

    LOCAL PROCEDURE UpdateItemCrossRef@48();
    BEGIN
      DistIntegration.EnterSalesItemCrossRef(Rec);
      UpdateICPartner;

      OnAfterUpdateItemCrossRef(Rec);
    END;

    LOCAL PROCEDURE GetDefaultBin@50();
    VAR
      WMSManagement@1000 : Codeunit 7302;
      IsHandled@1001 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeGetDefaultBin(Rec,IsHandled);
      IF IsHandled THEN
        EXIT;

      IF Type <> Type::Item THEN
        EXIT;

      "Bin Code" := '';
      IF "Drop Shipment" THEN
        EXIT;

      IF ("Location Code" <> '') AND ("No." <> '') THEN BEGIN
        GetLocation("Location Code");
        IF Location."Bin Mandatory" AND NOT Location."Directed Put-away and Pick" THEN BEGIN
          IF ("Qty. to Assemble to Order" > 0) OR IsAsmToOrderRequired THEN
            IF GetATOBin(Location,"Bin Code") THEN
              EXIT;

          WMSManagement.GetDefaultBin("No.","Variant Code","Location Code","Bin Code");
          HandleDedicatedBin(FALSE);
        END;
      END;
    END;

    [External]
    PROCEDURE GetATOBin@89(Location@1001 : Record 14;VAR BinCode@1002 : Code[20]) : Boolean;
    VAR
      AsmHeader@1000 : Record 900;
    BEGIN
      IF NOT Location."Require Shipment" THEN
        BinCode := Location."Asm.-to-Order Shpt. Bin Code";
      IF BinCode <> '' THEN
        EXIT(TRUE);

      IF AsmHeader.GetFromAssemblyBin(Location,BinCode) THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    [External]
    PROCEDURE IsInbound@97() : Boolean;
    BEGIN
      CASE "Document Type" OF
        "Document Type"::Order,"Document Type"::Invoice,"Document Type"::Quote,"Document Type"::"Blanket Order":
          EXIT("Quantity (Base)" < 0);
        "Document Type"::"Return Order","Document Type"::"Credit Memo":
          EXIT("Quantity (Base)" > 0);
      END;

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE HandleDedicatedBin@70(IssueWarning@1001 : Boolean);
    VAR
      WhseIntegrationMgt@1002 : Codeunit 7317;
    BEGIN
      IF NOT IsInbound AND ("Quantity (Base)" <> 0) THEN
        WhseIntegrationMgt.CheckIfBinDedicatedOnSrcDoc("Location Code","Bin Code",IssueWarning);
    END;

    [External]
    PROCEDURE CheckAssocPurchOrder@51(TheFieldCaption@1000 : Text[250]);
    VAR
      IsHandled@1001 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeCheckAssocPurchOrder(Rec,TheFieldCaption,IsHandled,xRec);
      IF IsHandled THEN
        EXIT;

      IF TheFieldCaption = '' THEN BEGIN // If sales line is being deleted
        IF "Purch. Order Line No." <> 0 THEN
          ERROR(Text000,"Purchase Order No.","Purch. Order Line No.");
        IF "Special Order Purch. Line No." <> 0 THEN
          CheckPurchOrderLineDeleted("Special Order Purchase No.","Special Order Purch. Line No.");
      END ELSE BEGIN
        IF "Purch. Order Line No." <> 0 THEN
          ERROR(Text002,TheFieldCaption,"Purchase Order No.","Purch. Order Line No.");

        IF "Special Order Purch. Line No." <> 0 THEN
          ERROR(Text002,TheFieldCaption,"Special Order Purchase No.","Special Order Purch. Line No.");
      END;
    END;

    LOCAL PROCEDURE CheckPurchOrderLineDeleted@209(PurchaseOrderNo@1001 : Code[20];PurchaseLineNo@1002 : Integer);
    VAR
      PurchaseLine@1000 : Record 39;
    BEGIN
      IF PurchaseLine.GET(PurchaseLine."Document Type"::Order,PurchaseOrderNo,PurchaseLineNo) THEN
        ERROR(Text000,PurchaseOrderNo,PurchaseLineNo);
    END;

    [External]
    PROCEDURE CrossReferenceNoLookUp@53();
    VAR
      ItemCrossReference@1000 : Record 5717;
      ICGLAcc@1001 : Record 410;
    BEGIN
      CASE Type OF
        Type::Item:
          BEGIN
            GetSalesHeader;
            ItemCrossReference.RESET;
            ItemCrossReference.SETCURRENTKEY("Cross-Reference Type","Cross-Reference Type No.");
            ItemCrossReference.SETFILTER(
              "Cross-Reference Type",'%1|%2',
              ItemCrossReference."Cross-Reference Type"::Customer,
              ItemCrossReference."Cross-Reference Type"::" ");
            ItemCrossReference.SETFILTER("Cross-Reference Type No.",'%1|%2',SalesHeader."Sell-to Customer No.",'');
            IF PAGE.RUNMODAL(PAGE::"Cross Reference List",ItemCrossReference) = ACTION::LookupOK THEN BEGIN
              "Cross-Reference No." := ItemCrossReference."Cross-Reference No.";
              ValidateCrossReferenceNo(ItemCrossReference,FALSE);
              PriceCalcMgt.FindSalesLineLineDisc(SalesHeader,Rec);
              PriceCalcMgt.FindSalesLinePrice(SalesHeader,Rec,FIELDNO("Cross-Reference No."));
              OnCrossReferenceNoLookupOnBeforeValidateUnitPrice(SalesHeader,Rec);
              VALIDATE("Unit Price");
            END;
          END;
        Type::"G/L Account",Type::Resource:
          BEGIN
            GetSalesHeader;
            SalesHeader.TESTFIELD("Sell-to IC Partner Code");
            IF PAGE.RUNMODAL(PAGE::"IC G/L Account List",ICGLAcc) = ACTION::LookupOK THEN
              "Cross-Reference No." := ICGLAcc."No.";
          END;
      END;
    END;

    LOCAL PROCEDURE ValidateCrossReferenceNo@211(ItemCrossReference@1001 : Record 5717;SearchItem@1000 : Boolean);
    VAR
      ReturnedItemCrossReference@1002 : Record 5717;
    BEGIN
      ReturnedItemCrossReference.INIT;
      IF "Cross-Reference No." <> '' THEN BEGIN
        IF SearchItem THEN
          DistIntegration.ICRLookupSalesItem(Rec,ReturnedItemCrossReference,CurrFieldNo <> 0)
        ELSE
          ReturnedItemCrossReference := ItemCrossReference;

        OnBeforeCrossReferenceNoAssign(Rec,ReturnedItemCrossReference);

        IF "No." <> ReturnedItemCrossReference."Item No." THEN
          VALIDATE("No.",ReturnedItemCrossReference."Item No.");
        IF ReturnedItemCrossReference."Variant Code" <> '' THEN
          VALIDATE("Variant Code",ReturnedItemCrossReference."Variant Code");

        IF (ReturnedItemCrossReference."Unit of Measure" <> '') AND
           ("Unit of Measure Code" <> ReturnedItemCrossReference."Unit of Measure")
        THEN
          VALIDATE("Unit of Measure Code",ReturnedItemCrossReference."Unit of Measure");
      END;

      "Unit of Measure (Cross Ref.)" := ReturnedItemCrossReference."Unit of Measure";
      "Cross-Reference Type" := ReturnedItemCrossReference."Cross-Reference Type";
      "Cross-Reference Type No." := ReturnedItemCrossReference."Cross-Reference Type No.";
      "Cross-Reference No." := ReturnedItemCrossReference."Cross-Reference No.";

      IF (ReturnedItemCrossReference.Description <> '') OR (ReturnedItemCrossReference."Description 2" <> '') THEN BEGIN
        Description := ReturnedItemCrossReference.Description;
        "Description 2" := ReturnedItemCrossReference."Description 2";
      END;

      UpdateUnitPrice(FIELDNO("Cross-Reference No."));
      UpdateICPartner;

      OnAfterValidateCrossReferenceNo(Rec,ItemCrossReference);
    END;

    LOCAL PROCEDURE CheckServItemCreation@52();
    VAR
      Item@1001 : Record 27;
      ServItemGroup@1000 : Record 5904;
    BEGIN
      IF CurrFieldNo = 0 THEN
        EXIT;
      IF Type <> Type::Item THEN
        EXIT;
      GetItem(Item);
      IF Item."Service Item Group" = '' THEN
        EXIT;
      IF ServItemGroup.GET(Item."Service Item Group") THEN
        IF ServItemGroup."Create Service Item" THEN
          IF "Qty. to Ship (Base)" <> ROUND("Qty. to Ship (Base)",1) THEN
            ERROR(
              Text034,
              FIELDCAPTION("Qty. to Ship (Base)"),
              ServItemGroup.FIELDCAPTION("Create Service Item"));
    END;

    [External]
    PROCEDURE ItemExists@54(ItemNo@1000 : Code[20]) : Boolean;
    VAR
      Item2@1001 : Record 27;
    BEGIN
      IF Type = Type::Item THEN
        IF NOT Item2.GET(ItemNo) THEN
          EXIT(FALSE);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE FindOrCreateRecordByNo@276(SourceNo@1001 : Code[20]) : Code[20];
    VAR
      Item@1002 : Record 27;
      FindRecordManagement@1000 : Codeunit 703;
      FoundNo@1003 : Text[50];
    BEGIN
      GetSalesSetup;

      IF Type = Type::Item THEN BEGIN
        IF Item.TryGetItemNoOpenCardWithView(
             FoundNo,SourceNo,SalesSetup."Create Item from Item No.",TRUE,SalesSetup."Create Item from Item No.",'')
        THEN
          EXIT(COPYSTR(FoundNo,1,MAXSTRLEN("No.")))
      END ELSE
        EXIT(FindRecordManagement.FindNoFromTypedValue(Type,"No.",NOT "System-Created Entry"));

      EXIT(SourceNo);
    END;

    [External]
    PROCEDURE IsShipment@55() : Boolean;
    BEGIN
      EXIT(SignedXX("Quantity (Base)") < 0);
    END;

    LOCAL PROCEDURE GetAbsMin@56(QtyToHandle@1000 : Decimal;QtyHandled@1001 : Decimal) : Decimal;
    BEGIN
      IF ABS(QtyHandled) < ABS(QtyToHandle) THEN
        EXIT(QtyHandled);

      EXIT(QtyToHandle);
    END;

    [External]
    PROCEDURE SetHideValidationDialog@57(NewHideValidationDialog@1000 : Boolean);
    BEGIN
      HideValidationDialog := NewHideValidationDialog;
    END;

    [External]
    PROCEDURE GetHideValidationDialog@123() : Boolean;
    VAR
      IdentityManagement@1000 : Codeunit 9801;
    BEGIN
      EXIT(HideValidationDialog OR IdentityManagement.IsInvAppId);
    END;

    LOCAL PROCEDURE CheckApplFromItemLedgEntry@157(VAR ItemLedgEntry@1000 : Record 32);
    VAR
      ItemTrackingLines@1003 : Page 6510;
      QtyNotReturned@1002 : Decimal;
      QtyReturned@1004 : Decimal;
    BEGIN
      IF "Appl.-from Item Entry" = 0 THEN
        EXIT;

      IF "Shipment No." <> '' THEN
        EXIT;

      TESTFIELD(Type,Type::Item);
      TESTFIELD(Quantity);
      IF IsCreditDocType THEN BEGIN
        IF Quantity < 0 THEN
          FIELDERROR(Quantity,Text029);
      END ELSE BEGIN
        IF Quantity > 0 THEN
          FIELDERROR(Quantity,Text030);
      END;

      ItemLedgEntry.GET("Appl.-from Item Entry");
      ItemLedgEntry.TESTFIELD(Positive,FALSE);
      ItemLedgEntry.TESTFIELD("Item No.","No.");
      ItemLedgEntry.TESTFIELD("Variant Code","Variant Code");
      IF ItemLedgEntry.TrackingExists THEN
        ERROR(Text040,ItemTrackingLines.CAPTION,FIELDCAPTION("Appl.-from Item Entry"));

      IF ABS("Quantity (Base)") > -ItemLedgEntry.Quantity THEN
        ERROR(
          Text046,
          -ItemLedgEntry.Quantity,ItemLedgEntry.FIELDCAPTION("Document No."),
          ItemLedgEntry."Document No.");

      IF IsCreditDocType THEN
        IF ABS("Outstanding Qty. (Base)") > -ItemLedgEntry."Shipped Qty. Not Returned" THEN BEGIN
          QtyNotReturned := ItemLedgEntry."Shipped Qty. Not Returned";
          QtyReturned := ItemLedgEntry.Quantity - ItemLedgEntry."Shipped Qty. Not Returned";
          IF "Qty. per Unit of Measure" <> 0 THEN BEGIN
            QtyNotReturned :=
              ROUND(ItemLedgEntry."Shipped Qty. Not Returned" / "Qty. per Unit of Measure",UOMMgt.QtyRndPrecision);
            QtyReturned :=
              ROUND(
                (ItemLedgEntry.Quantity - ItemLedgEntry."Shipped Qty. Not Returned") /
                "Qty. per Unit of Measure",UOMMgt.QtyRndPrecision);
          END;
          ERROR(
            Text039,
            -QtyReturned,ItemLedgEntry.FIELDCAPTION("Document No."),
            ItemLedgEntry."Document No.",-QtyNotReturned);
        END;
    END;

    [External]
    PROCEDURE CalcPrepaymentToDeduct@63();
    BEGIN
      IF ("Qty. to Invoice" <> 0) AND ("Prepmt. Amt. Inv." <> 0) THEN BEGIN
        GetSalesHeader;
        IF ("Prepayment %" = 100) AND NOT IsFinalInvoice THEN
          "Prepmt Amt to Deduct" := GetLineAmountToHandle("Qty. to Invoice") - "Inv. Disc. Amount to Invoice"
        ELSE
          "Prepmt Amt to Deduct" :=
            ROUND(
              ("Prepmt. Amt. Inv." - "Prepmt Amt Deducted") *
              "Qty. to Invoice" / (Quantity - "Quantity Invoiced"),Currency."Amount Rounding Precision")
      END ELSE
        "Prepmt Amt to Deduct" := 0
    END;

    [External]
    PROCEDURE IsFinalInvoice@116() : Boolean;
    BEGIN
      EXIT("Qty. to Invoice" = Quantity - "Quantity Invoiced");
    END;

    [External]
    PROCEDURE GetLineAmountToHandle@117(QtyToHandle@1002 : Decimal) : Decimal;
    VAR
      LineAmount@1001 : Decimal;
      LineDiscAmount@1000 : Decimal;
    BEGIN
      IF "Line Discount %" = 100 THEN
        EXIT(0);

      GetSalesHeader;

      IF "Prepmt Amt to Deduct" = 0 THEN
        LineAmount := ROUND(QtyToHandle * "Unit Price",Currency."Amount Rounding Precision")
      ELSE BEGIN
        IF Quantity <> 0 THEN BEGIN
          LineAmount := ROUND(Quantity * "Unit Price",Currency."Amount Rounding Precision");
          LineAmount := ROUND(QtyToHandle * LineAmount / Quantity,Currency."Amount Rounding Precision");
        END ELSE
          LineAmount := 0;
      END;

      IF QtyToHandle <> Quantity THEN
        LineDiscAmount := ROUND(LineAmount * "Line Discount %" / 100,Currency."Amount Rounding Precision")
      ELSE
        LineDiscAmount := "Line Discount Amount";

      OnAfterGetLineAmountToHandle(Rec,QtyToHandle,LineAmount,LineDiscAmount);
      EXIT(LineAmount - LineDiscAmount);
    END;

    [External]
    PROCEDURE GetLineAmountToHandleInclPrepmt@265(QtyToHandle@1002 : Decimal) : Decimal;
    VAR
      SalesPostPrepayments@1000 : Codeunit 442;
      DocType@1001 : 'Invoice,Credit Memo,Statistic';
    BEGIN
      IF "Line Discount %" = 100 THEN
        EXIT(0);

      IF IsCreditDocType THEN
        DocType := DocType::"Credit Memo"
      ELSE
        DocType := DocType::Invoice;

      IF ("Prepayment %" = 100) AND NOT "Prepayment Line" AND ("Prepmt Amt to Deduct" <> 0) THEN
        IF SalesPostPrepayments.PrepmtAmount(Rec,DocType) <= 0 THEN
          EXIT("Prepmt Amt to Deduct" + "Inv. Disc. Amount to Invoice");

      EXIT(GetLineAmountToHandle(QtyToHandle));
    END;

    [External]
    PROCEDURE GetLineAmountExclVAT@349() : Decimal;
    BEGIN
      IF "Document No." = '' THEN
        EXIT(0);
      GetSalesHeader;
      IF NOT SalesHeader."Prices Including VAT" THEN
        EXIT("Line Amount");

      EXIT(ROUND("Line Amount" / (1 + "VAT %" / 100),Currency."Amount Rounding Precision"));
    END;

    [External]
    PROCEDURE GetLineAmountInclVAT@351() : Decimal;
    BEGIN
      IF "Document No." = '' THEN
        EXIT(0);
      GetSalesHeader;
      IF SalesHeader."Prices Including VAT" THEN
        EXIT("Line Amount");

      EXIT(ROUND("Line Amount" * (1 + "VAT %" / 100),Currency."Amount Rounding Precision"));
    END;

    [External]
    PROCEDURE SetHasBeenShown@59();
    BEGIN
      HasBeenShown := TRUE;
    END;

    LOCAL PROCEDURE TestJobPlanningLine@60();
    VAR
      JobPostLine@1000 : Codeunit 1001;
      IsHandled@1001 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeTestJobPlanningLine(Rec,IsHandled);
      IF IsHandled THEN
        EXIT;

      IF "Job Contract Entry No." = 0 THEN
        EXIT;

      JobPostLine.TestSalesLine(Rec);
    END;

    [External]
    PROCEDURE BlockDynamicTracking@58(SetBlock@1000 : Boolean);
    BEGIN
      ReserveSalesLine.Block(SetBlock);
    END;

    [External]
    PROCEDURE InitQtyToShip2@7();
    BEGIN
      "Qty. to Ship" := "Outstanding Quantity";
      "Qty. to Ship (Base)" := "Outstanding Qty. (Base)";

      OnAfterInitQtyToShip2(Rec,CurrFieldNo);

      ATOLink.UpdateQtyToAsmFromSalesLine(Rec);

      CheckServItemCreation;

      "Qty. to Invoice" := MaxQtyToInvoice;
      "Qty. to Invoice (Base)" := MaxQtyToInvoiceBase;
      "VAT Difference" := 0;

      OnInitQtyToShip2OnBeforeCalcInvDiscToInvoice(Rec,xRec);

      CalcInvDiscToInvoice;

      CalcPrepaymentToDeduct;
    END;

    [External]
    PROCEDURE ShowLineComments@61();
    VAR
      SalesCommentLine@1000 : Record 44;
      SalesCommentSheet@1001 : Page 67;
    BEGIN
      TESTFIELD("Document No.");
      TESTFIELD("Line No.");
      SalesCommentLine.SETRANGE("Document Type","Document Type");
      SalesCommentLine.SETRANGE("No.","Document No.");
      SalesCommentLine.SETRANGE("Document Line No.","Line No.");
      SalesCommentSheet.SETTABLEVIEW(SalesCommentLine);
      SalesCommentSheet.RUNMODAL;
    END;

    [External]
    PROCEDURE SetDefaultQuantity@62();
    BEGIN
      GetSalesSetup;
      IF SalesSetup."Default Quantity to Ship" = SalesSetup."Default Quantity to Ship"::Blank THEN BEGIN
        IF ("Document Type" = "Document Type"::Order) OR ("Document Type" = "Document Type"::Quote) THEN BEGIN
          "Qty. to Ship" := 0;
          "Qty. to Ship (Base)" := 0;
          "Qty. to Invoice" := 0;
          "Qty. to Invoice (Base)" := 0;
        END;
        IF "Document Type" = "Document Type"::"Return Order" THEN BEGIN
          "Return Qty. to Receive" := 0;
          "Return Qty. to Receive (Base)" := 0;
          "Qty. to Invoice" := 0;
          "Qty. to Invoice (Base)" := 0;
        END;
      END;

      OnAfterSetDefaultQuantity(Rec,xRec);
    END;

    LOCAL PROCEDURE SetReserveWithoutPurchasingCode@198();
    VAR
      Item@1000 : Record 27;
    BEGIN
      GetItem(Item);
      IF Item.Reserve = Item.Reserve::Optional THEN BEGIN
        GetSalesHeader;
        Reserve := SalesHeader.Reserve;
      END ELSE
        Reserve := Item.Reserve;

      OnAfterSetReserveWithoutPurchasingCode(Rec,SalesHeader,Item);
    END;

    LOCAL PROCEDURE SetDefaultItemQuantity@122();
    BEGIN
      GetSalesSetup;
      IF SalesSetup."Default Item Quantity" THEN BEGIN
        VALIDATE(Quantity,1);
        CheckItemAvailable(CurrFieldNo);
      END;
    END;

    [External]
    PROCEDURE UpdatePrePaymentAmounts@64();
    VAR
      ShipmentLine@1000 : Record 111;
      SalesOrderLine@1001 : Record 37;
      SalesOrderHeader@1002 : Record 36;
    BEGIN
      IF ("Document Type" <> "Document Type"::Invoice) OR ("Prepayment %" = 0) THEN
        EXIT;

      IF NOT ShipmentLine.GET("Shipment No.","Shipment Line No.") THEN BEGIN
        "Prepmt Amt to Deduct" := 0;
        "Prepmt VAT Diff. to Deduct" := 0;
      END ELSE
        IF SalesOrderLine.GET(SalesOrderLine."Document Type"::Order,ShipmentLine."Order No.",ShipmentLine."Order Line No.") THEN BEGIN
          IF ("Prepayment %" = 100) AND (Quantity <> SalesOrderLine.Quantity - SalesOrderLine."Quantity Invoiced") THEN
            "Prepmt Amt to Deduct" := "Line Amount"
          ELSE
            "Prepmt Amt to Deduct" :=
              ROUND((SalesOrderLine."Prepmt. Amt. Inv." - SalesOrderLine."Prepmt Amt Deducted") *
                Quantity / (SalesOrderLine.Quantity - SalesOrderLine."Quantity Invoiced"),Currency."Amount Rounding Precision");
          "Prepmt VAT Diff. to Deduct" := "Prepayment VAT Difference" - "Prepmt VAT Diff. Deducted";
          SalesOrderHeader.GET(SalesOrderHeader."Document Type"::Order,SalesOrderLine."Document No.");
        END ELSE BEGIN
          "Prepmt Amt to Deduct" := 0;
          "Prepmt VAT Diff. to Deduct" := 0;
        END;

      GetSalesHeader;
      SalesHeader.TESTFIELD("Prices Including VAT",SalesOrderHeader."Prices Including VAT");
      IF SalesHeader."Prices Including VAT" THEN BEGIN
        "Prepmt. Amt. Incl. VAT" := "Prepmt Amt to Deduct";
        "Prepayment Amount" :=
          ROUND(
            "Prepmt Amt to Deduct" / (1 + ("Prepayment VAT %" / 100)),
            Currency."Amount Rounding Precision");
      END ELSE BEGIN
        "Prepmt. Amt. Incl. VAT" :=
          ROUND(
            "Prepmt Amt to Deduct" * (1 + ("Prepayment VAT %" / 100)),
            Currency."Amount Rounding Precision");
        "Prepayment Amount" := "Prepmt Amt to Deduct";
      END;
      "Prepmt. Line Amount" := "Prepmt Amt to Deduct";
      "Prepmt. Amt. Inv." := "Prepmt. Line Amount";
      "Prepmt. VAT Base Amt." := "Prepayment Amount";
      "Prepmt. Amount Inv. Incl. VAT" := "Prepmt. Amt. Incl. VAT";
      "Prepmt Amt Deducted" := 0;
    END;

    [External]
    PROCEDURE ZeroAmountLine@65(QtyType@1000 : 'General,Invoicing,Shipping') : Boolean;
    BEGIN
      IF NOT HasTypeToFillMandatoryFields THEN
        EXIT(TRUE);
      IF Quantity = 0 THEN
        EXIT(TRUE);
      IF "Unit Price" = 0 THEN
        EXIT(TRUE);
      IF QtyType = QtyType::Invoicing THEN
        IF "Qty. to Invoice" = 0 THEN
          EXIT(TRUE);
      EXIT(FALSE);
    END;

    [External]
    PROCEDURE FilterLinesWithItemToPlan@69(VAR Item@1000 : Record 27;DocumentType@1001 : Option);
    BEGIN
      RESET;
      SETCURRENTKEY("Document Type",Type,"No.","Variant Code","Drop Shipment","Location Code","Shipment Date");
      SETRANGE("Document Type",DocumentType);
      SETRANGE(Type,Type::Item);
      SETRANGE("No.",Item."No.");
      SETFILTER("Variant Code",Item.GETFILTER("Variant Filter"));
      SETFILTER("Location Code",Item.GETFILTER("Location Filter"));
      SETFILTER("Drop Shipment",Item.GETFILTER("Drop Shipment Filter"));
      SETFILTER("Shortcut Dimension 1 Code",Item.GETFILTER("Global Dimension 1 Filter"));
      SETFILTER("Shortcut Dimension 2 Code",Item.GETFILTER("Global Dimension 2 Filter"));
      SETFILTER("Shipment Date",Item.GETFILTER("Date Filter"));
      SETFILTER("Outstanding Qty. (Base)",'<>0');

      OnAfterFilterLinesWithItemToPlan(Rec,Item,DocumentType);
    END;

    [External]
    PROCEDURE FindLinesWithItemToPlan@66(VAR Item@1000 : Record 27;DocumentType@1001 : Option) : Boolean;
    BEGIN
      FilterLinesWithItemToPlan(Item,DocumentType);
      EXIT(FIND('-'));
    END;

    [External]
    PROCEDURE LinesWithItemToPlanExist@67(VAR Item@1000 : Record 27;DocumentType@1001 : Option) : Boolean;
    BEGIN
      FilterLinesWithItemToPlan(Item,DocumentType);
      EXIT(NOT ISEMPTY);
    END;

    LOCAL PROCEDURE DateFormularZero@73(VAR DateFormularValue@1001 : DateFormula;CalledByFieldNo@1002 : Integer;CalledByFieldCaption@1003 : Text[250]);
    VAR
      DateFormularZero@1000 : DateFormula;
    BEGIN
      EVALUATE(DateFormularZero,'<0D>');
      IF (DateFormularValue <> DateFormularZero) AND (CalledByFieldNo = CurrFieldNo) THEN
        ERROR(Text051,CalledByFieldCaption,FIELDCAPTION("Drop Shipment"));
      EVALUATE(DateFormularValue,'<0D>');
    END;

    LOCAL PROCEDURE InitQtyToAsm@76();
    BEGIN
      OnBeforeInitQtyToAsm(Rec,CurrFieldNo);

      IF NOT IsAsmToOrderAllowed THEN BEGIN
        "Qty. to Assemble to Order" := 0;
        "Qty. to Asm. to Order (Base)" := 0;
        EXIT;
      END;

      IF ((xRec."Qty. to Asm. to Order (Base)" = 0) AND IsAsmToOrderRequired AND ("Qty. Shipped (Base)" = 0)) OR
         ((xRec."Qty. to Asm. to Order (Base)" <> 0) AND
          (xRec."Qty. to Asm. to Order (Base)" = xRec."Quantity (Base)")) OR
         ("Qty. to Asm. to Order (Base)" > "Quantity (Base)")
      THEN BEGIN
        "Qty. to Assemble to Order" := Quantity;
        "Qty. to Asm. to Order (Base)" := "Quantity (Base)";
      END;

      OnAfterInitQtyToAsm(Rec,CurrFieldNo)
    END;

    [External]
    PROCEDURE AsmToOrderExists@72(VAR AsmHeader@1000 : Record 900) : Boolean;
    VAR
      ATOLink@1001 : Record 904;
    BEGIN
      IF NOT ATOLink.AsmExistsForSalesLine(Rec) THEN
        EXIT(FALSE);
      EXIT(AsmHeader.GET(ATOLink."Assembly Document Type",ATOLink."Assembly Document No."));
    END;

    [External]
    PROCEDURE FullQtyIsForAsmToOrder@74() : Boolean;
    BEGIN
      IF "Qty. to Asm. to Order (Base)" = 0 THEN
        EXIT(FALSE);
      EXIT("Quantity (Base)" = "Qty. to Asm. to Order (Base)");
    END;

    LOCAL PROCEDURE FullReservedQtyIsForAsmToOrder@75() : Boolean;
    BEGIN
      IF "Qty. to Asm. to Order (Base)" = 0 THEN
        EXIT(FALSE);
      CALCFIELDS("Reserved Qty. (Base)");
      EXIT("Reserved Qty. (Base)" = "Qty. to Asm. to Order (Base)");
    END;

    [External]
    PROCEDURE QtyBaseOnATO@86() : Decimal;
    VAR
      AsmHeader@1000 : Record 900;
    BEGIN
      IF AsmToOrderExists(AsmHeader) THEN
        EXIT(AsmHeader."Quantity (Base)");
      EXIT(0);
    END;

    [External]
    PROCEDURE QtyAsmRemainingBaseOnATO@90() : Decimal;
    VAR
      AsmHeader@1000 : Record 900;
    BEGIN
      IF AsmToOrderExists(AsmHeader) THEN
        EXIT(AsmHeader."Remaining Quantity (Base)");
      EXIT(0);
    END;

    [External]
    PROCEDURE QtyToAsmBaseOnATO@88() : Decimal;
    VAR
      AsmHeader@1000 : Record 900;
    BEGIN
      IF AsmToOrderExists(AsmHeader) THEN
        EXIT(AsmHeader."Quantity to Assemble (Base)");
      EXIT(0);
    END;

    [External]
    PROCEDURE IsAsmToOrderAllowed@77() : Boolean;
    BEGIN
      IF NOT ("Document Type" IN ["Document Type"::Quote,"Document Type"::"Blanket Order","Document Type"::Order]) THEN
        EXIT(FALSE);
      IF Quantity < 0 THEN
        EXIT(FALSE);
      IF Type <> Type::Item THEN
        EXIT(FALSE);
      IF "No." = '' THEN
        EXIT(FALSE);
      IF "Drop Shipment" OR "Special Order" THEN
        EXIT(FALSE);
      EXIT(TRUE)
    END;

    [External]
    PROCEDURE IsAsmToOrderRequired@81() : Boolean;
    VAR
      Item@1000 : Record 27;
      Result@1002 : Boolean;
      IsHandled@1001 : Boolean;
    BEGIN
      IsHandled := FALSE;
      Result := FALSE;
      OnBeforeIsAsmToOrderRequired(Rec,Result,IsHandled);
      IF IsHandled THEN
        EXIT(Result);

      IF (Type <> Type::Item) OR ("No." = '') THEN
        EXIT(FALSE);
      GetItem(Item);
      IF GetSKU THEN
        EXIT(SKU."Assembly Policy" = SKU."Assembly Policy"::"Assemble-to-Order");
      EXIT(Item."Assembly Policy" = Item."Assembly Policy"::"Assemble-to-Order");
    END;

    [External]
    PROCEDURE CheckAsmToOrder@85(AsmHeader@1001 : Record 900);
    BEGIN
      TESTFIELD("Qty. to Assemble to Order",AsmHeader.Quantity);
      TESTFIELD("Document Type",AsmHeader."Document Type");
      TESTFIELD(Type,Type::Item);
      TESTFIELD("No.",AsmHeader."Item No.");
      TESTFIELD("Location Code",AsmHeader."Location Code");
      TESTFIELD("Unit of Measure Code",AsmHeader."Unit of Measure Code");
      TESTFIELD("Variant Code",AsmHeader."Variant Code");
      TESTFIELD("Shipment Date",AsmHeader."Due Date");
      IF "Document Type" = "Document Type"::Order THEN BEGIN
        AsmHeader.CALCFIELDS("Reserved Qty. (Base)");
        AsmHeader.TESTFIELD("Reserved Qty. (Base)",AsmHeader."Remaining Quantity (Base)");
      END;
      TESTFIELD("Qty. to Asm. to Order (Base)",AsmHeader."Quantity (Base)");
      IF "Outstanding Qty. (Base)" < AsmHeader."Remaining Quantity (Base)" THEN
        AsmHeader.FIELDERROR("Remaining Quantity (Base)",STRSUBSTNO(Text045,AsmHeader."Remaining Quantity (Base)"));
    END;

    [External]
    PROCEDURE ShowAsmToOrderLines@80();
    VAR
      ATOLink@1000 : Record 904;
    BEGIN
      ATOLink.ShowAsmToOrderLines(Rec);
    END;

    [External]
    PROCEDURE FindOpenATOEntry@96(LotNo@1003 : Code[50];SerialNo@1004 : Code[50]) : Integer;
    VAR
      PostedATOLink@1002 : Record 914;
      ItemLedgEntry@1001 : Record 32;
    BEGIN
      TESTFIELD("Document Type","Document Type"::Order);
      IF PostedATOLink.FindLinksFromSalesLine(Rec) THEN
        REPEAT
          ItemLedgEntry.SETRANGE("Document Type",ItemLedgEntry."Document Type"::"Posted Assembly");
          ItemLedgEntry.SETRANGE("Document No.",PostedATOLink."Assembly Document No.");
          ItemLedgEntry.SETRANGE("Document Line No.",0);
          ItemLedgEntry.SetTrackingFilter(SerialNo,LotNo);
          ItemLedgEntry.SETRANGE(Open,TRUE);
          IF ItemLedgEntry.FINDFIRST THEN
            EXIT(ItemLedgEntry."Entry No.");
        UNTIL PostedATOLink.NEXT = 0;
    END;

    [External]
    PROCEDURE RollUpAsmCost@83();
    BEGIN
      ATOLink.RollUpCost(Rec);
    END;

    [External]
    PROCEDURE RollupAsmPrice@84();
    BEGIN
      GetSalesHeader;
      ATOLink.RollUpPrice(SalesHeader,Rec);
    END;

    LOCAL PROCEDURE UpdateICPartner@78();
    VAR
      ICPartner@1000 : Record 413;
      ItemCrossReference@1001 : Record 5717;
    BEGIN
      IF SalesHeader."Send IC Document" AND
         (SalesHeader."IC Direction" = SalesHeader."IC Direction"::Outgoing) AND
         (SalesHeader."Bill-to IC Partner Code" <> '')
      THEN
        CASE Type OF
          Type::" ",Type::"Charge (Item)":
            BEGIN
              "IC Partner Ref. Type" := Type;
              "IC Partner Reference" := "No.";
            END;
          Type::"G/L Account":
            BEGIN
              "IC Partner Ref. Type" := Type;
              "IC Partner Reference" := GLAcc."Default IC Partner G/L Acc. No";
            END;
          Type::Item:
            BEGIN
              IF SalesHeader."Sell-to IC Partner Code" <> '' THEN
                ICPartner.GET(SalesHeader."Sell-to IC Partner Code")
              ELSE
                ICPartner.GET(SalesHeader."Bill-to IC Partner Code");
              CASE ICPartner."Outbound Sales Item No. Type" OF
                ICPartner."Outbound Sales Item No. Type"::"Common Item No.":
                  VALIDATE("IC Partner Ref. Type","IC Partner Ref. Type"::"Common Item No.");
                ICPartner."Outbound Sales Item No. Type"::"Internal No.",
                ICPartner."Outbound Sales Item No. Type"::"Cross Reference":
                  BEGIN
                    IF ICPartner."Outbound Sales Item No. Type" = ICPartner."Outbound Sales Item No. Type"::"Internal No." THEN
                      VALIDATE("IC Partner Ref. Type","IC Partner Ref. Type"::Item)
                    ELSE
                      VALIDATE("IC Partner Ref. Type","IC Partner Ref. Type"::"Cross Reference");
                    ItemCrossReference.SETRANGE("Cross-Reference Type",ItemCrossReference."Cross-Reference Type"::Customer);
                    ItemCrossReference.SETRANGE("Cross-Reference Type No.","Sell-to Customer No.");
                    ItemCrossReference.SETRANGE("Item No.","No.");
                    ItemCrossReference.SETRANGE("Variant Code","Variant Code");
                    ItemCrossReference.SETRANGE("Unit of Measure","Unit of Measure Code");
                    IF ItemCrossReference.FINDFIRST THEN
                      "IC Partner Reference" := ItemCrossReference."Cross-Reference No."
                    ELSE
                      "IC Partner Reference" := "No.";
                  END;
              END;
            END;
          Type::"Fixed Asset":
            BEGIN
              "IC Partner Ref. Type" := "IC Partner Ref. Type"::" ";
              "IC Partner Reference" := '';
            END;
          Type::Resource:
            BEGIN
              Resource.GET("No.");
              "IC Partner Ref. Type" := "IC Partner Ref. Type"::"G/L Account";
              "IC Partner Reference" := Resource."IC Partner Purch. G/L Acc. No.";
            END;
        END;
    END;

    [External]
    PROCEDURE OutstandingInvoiceAmountFromShipment@12(SellToCustomerNo@1000 : Code[20]) : Decimal;
    VAR
      SalesLine@1001 : Record 37;
    BEGIN
      SalesLine.SETCURRENTKEY("Document Type","Sell-to Customer No.","Shipment No.");
      SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Invoice);
      SalesLine.SETRANGE("Sell-to Customer No.",SellToCustomerNo);
      SalesLine.SETFILTER("Shipment No.",'<>%1','');
      SalesLine.CALCSUMS("Outstanding Amount (LCY)");
      EXIT(SalesLine."Outstanding Amount (LCY)");
    END;

    LOCAL PROCEDURE CheckShipmentRelation@94();
    VAR
      SalesShptLine@1001 : Record 111;
    BEGIN
      SalesShptLine.GET("Shipment No.","Shipment Line No.");
      IF (Quantity * SalesShptLine."Qty. Shipped Not Invoiced") < 0 THEN
        FIELDERROR("Qty. to Invoice",Text057);
      IF ABS(Quantity) > ABS(SalesShptLine."Qty. Shipped Not Invoiced") THEN
        ERROR(Text058,SalesShptLine."Document No.");

      OnAfterCheckShipmentRelation(Rec,SalesShptLine);
    END;

    LOCAL PROCEDURE CheckRetRcptRelation@95();
    VAR
      ReturnRcptLine@1000 : Record 6661;
    BEGIN
      ReturnRcptLine.GET("Return Receipt No.","Return Receipt Line No.");
      IF (Quantity * (ReturnRcptLine.Quantity - ReturnRcptLine."Quantity Invoiced")) < 0 THEN
        FIELDERROR("Qty. to Invoice",Text059);
      IF ABS(Quantity) > ABS(ReturnRcptLine.Quantity - ReturnRcptLine."Quantity Invoiced") THEN
        ERROR(Text060,ReturnRcptLine."Document No.");

      OnAfterCheckRetRcptRelation(Rec,ReturnRcptLine);
    END;

    LOCAL PROCEDURE VerifyItemLineDim@87();
    BEGIN
      IF IsShippedReceivedItemDimChanged THEN
        ConfirmShippedReceivedItemDimChange;
    END;

    [External]
    PROCEDURE IsShippedReceivedItemDimChanged@113() : Boolean;
    BEGIN
      EXIT(("Dimension Set ID" <> xRec."Dimension Set ID") AND (Type = Type::Item) AND
        (("Qty. Shipped Not Invoiced" <> 0) OR ("Return Rcd. Not Invd." <> 0)));
    END;

    LOCAL PROCEDURE IsServiceCharge@177() : Boolean;
    VAR
      CustomerPostingGroup@1001 : Record 92;
    BEGIN
      IF Type <> Type::"G/L Account" THEN
        EXIT(FALSE);

      GetSalesHeader;
      CustomerPostingGroup.GET(SalesHeader."Customer Posting Group");
      EXIT(CustomerPostingGroup."Service Charge Acc." = "No.");
    END;

    [External]
    PROCEDURE ConfirmShippedReceivedItemDimChange@114() : Boolean;
    VAR
      ConfirmManagement@1000 : Codeunit 27;
    BEGIN
      IF NOT ConfirmManagement.ConfirmProcess(STRSUBSTNO(Text053,TABLECAPTION),TRUE) THEN
        ERROR(Text054);

      EXIT(TRUE);
    END;

    [External]
    PROCEDURE InitType@91();
    BEGIN
      IF "Document No." <> '' THEN BEGIN
        IF NOT SalesHeader.GET("Document Type","Document No.") THEN
          EXIT;
        IF (SalesHeader.Status = SalesHeader.Status::Released) AND
           (xRec.Type IN [xRec.Type::Item,xRec.Type::"Fixed Asset"])
        THEN
          Type := Type::" "
        ELSE
          Type := xRec.Type;
      END;
    END;

    LOCAL PROCEDURE CheckWMS@98();
    BEGIN
      IF CurrFieldNo <> 0 THEN
        CheckLocationOnWMS;
    END;

    [External]
    PROCEDURE CheckLocationOnWMS@101();
    VAR
      DialogText@1001 : Text;
    BEGIN
      IF Type = Type::Item THEN BEGIN
        DialogText := Text035;
        IF "Quantity (Base)" <> 0 THEN
          CASE "Document Type" OF
            "Document Type"::Invoice:
              IF "Shipment No." = '' THEN
                IF Location.GET("Location Code") AND Location."Directed Put-away and Pick" THEN BEGIN
                  DialogText += Location.GetRequirementText(Location.FIELDNO("Require Shipment"));
                  ERROR(Text016,DialogText,FIELDCAPTION("Line No."),"Line No.");
                END;
            "Document Type"::"Credit Memo":
              IF "Return Receipt No." = '' THEN
                IF Location.GET("Location Code") AND Location."Directed Put-away and Pick" THEN BEGIN
                  DialogText += Location.GetRequirementText(Location.FIELDNO("Require Receive"));
                  ERROR(Text016,DialogText,FIELDCAPTION("Line No."),"Line No.");
                END;
          END;
      END;
    END;

    [External]
    PROCEDURE IsNonInventoriableItem@195() : Boolean;
    VAR
      Item@1000 : Record 27;
    BEGIN
      IF Type <> Type::Item THEN
        EXIT(FALSE);
      IF "No." = '' THEN
        EXIT(FALSE);
      GetItem(Item);
      EXIT(Item.IsNonInventoriableType);
    END;

    [External]
    PROCEDURE IsInventoriableItem@196() : Boolean;
    VAR
      Item@1000 : Record 27;
    BEGIN
      IF Type <> Type::Item THEN
        EXIT(FALSE);
      IF "No." = '' THEN
        EXIT(FALSE);
      GetItem(Item);
      EXIT(Item.IsInventoriableType);
    END;

    LOCAL PROCEDURE ValidateReturnReasonCode@99(CallingFieldNo@1000 : Integer);
    VAR
      ReturnReason@1001 : Record 6635;
      IsHandled@1002 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeValidateReturnReasonCode(Rec,CallingFieldNo,IsHandled);
      IF IsHandled THEN
        EXIT;

      IF CallingFieldNo = 0 THEN
        EXIT;
      IF "Return Reason Code" = '' THEN BEGIN
        IF (Type = Type::Item) AND ("No." <> '') THEN
          GetUnitCost;
        UpdateUnitPrice(CallingFieldNo);
      END;

      IF ReturnReason.GET("Return Reason Code") THEN BEGIN
        IF (CallingFieldNo <> FIELDNO("Location Code")) AND (ReturnReason."Default Location Code" <> '') THEN
          VALIDATE("Location Code",ReturnReason."Default Location Code");
        IF ReturnReason."Inventory Value Zero" THEN
          VALIDATE("Unit Cost (LCY)",0)
        ELSE
          IF "Unit Price" = 0 THEN
            UpdateUnitPrice(CallingFieldNo);
      END;

      OnAfterValidateReturnReasonCode(Rec,CallingFieldNo);
    END;

    [Internal]
    PROCEDURE ValidateLineDiscountPercent@226(DropInvoiceDiscountAmount@1000 : Boolean);
    BEGIN
      TestJobPlanningLine;
      TestStatusOpen;
      "Line Discount Amount" :=
        ROUND(
          ROUND(Quantity * "Unit Price",Currency."Amount Rounding Precision") *
          "Line Discount %" / 100,Currency."Amount Rounding Precision");
      IF DropInvoiceDiscountAmount THEN BEGIN
        "Inv. Discount Amount" := 0;
        "Inv. Disc. Amount to Invoice" := 0;
      END;
      UpdateAmounts;
    END;

    [External]
    PROCEDURE HasTypeToFillMandatoryFields@103() : Boolean;
    BEGIN
      EXIT(Type <> Type::" ");
    END;

    [External]
    PROCEDURE GetDeferralAmount@104() DeferralAmount : Decimal;
    BEGIN
      IF "VAT Base Amount" <> 0 THEN
        DeferralAmount := "VAT Base Amount"
      ELSE
        DeferralAmount := CalcLineAmount;
    END;

    LOCAL PROCEDURE UpdateDeferralAmounts@105();
    VAR
      AdjustStartDate@1000 : Boolean;
      DeferralPostDate@1001 : Date;
    BEGIN
      GetSalesHeader;
      OnGetDeferralPostDate(SalesHeader,DeferralPostDate,Rec);
      IF DeferralPostDate = 0D THEN
        DeferralPostDate := SalesHeader."Posting Date";
      AdjustStartDate := TRUE;
      IF "Document Type" = "Document Type"::"Return Order" THEN BEGIN
        IF "Returns Deferral Start Date" = 0D THEN
          "Returns Deferral Start Date" := SalesHeader."Posting Date";
        DeferralPostDate := "Returns Deferral Start Date";
        AdjustStartDate := FALSE;
      END;

      DeferralUtilities.RemoveOrSetDeferralSchedule(
        "Deferral Code",DeferralUtilities.GetSalesDeferralDocType,'','',
        "Document Type","Document No.","Line No.",
        GetDeferralAmount,DeferralPostDate,Description,SalesHeader."Currency Code",AdjustStartDate);
    END;

    [External]
    PROCEDURE UpdatePriceDescription@147();
    VAR
      Currency@1000 : Record 4;
    BEGIN
      "Price description" := '';
      IF Type IN [Type::"Charge (Item)",Type::"Fixed Asset",Type::Item,Type::Resource] THEN BEGIN
        IF "Line Discount %" = 0 THEN
          "Price description" := STRSUBSTNO(
              PriceDescriptionTxt,Quantity,Currency.ResolveGLCurrencySymbol("Currency Code"),
              "Unit Price","Unit of Measure")
        ELSE
          "Price description" := STRSUBSTNO(
              PriceDescriptionWithLineDiscountTxt,Quantity,Currency.ResolveGLCurrencySymbol("Currency Code"),
              "Unit Price","Unit of Measure","Line Discount %")
      END;
    END;

    LOCAL PROCEDURE UpdateVATPercent@248(BaseAmount@1000 : Decimal;VATAmount@1001 : Decimal);
    BEGIN
      IF BaseAmount <> 0 THEN
        "VAT %" := ROUND(100 * VATAmount / BaseAmount,0.00001)
      ELSE
        "VAT %" := 0;
    END;

    PROCEDURE ShowDeferrals@106(PostingDate@1000 : Date;CurrencyCode@1001 : Code[10]) : Boolean;
    BEGIN
      EXIT(DeferralUtilities.OpenLineScheduleEdit(
          "Deferral Code",DeferralUtilities.GetSalesDeferralDocType,'','',
          "Document Type","Document No.","Line No.",
          GetDeferralAmount,PostingDate,Description,CurrencyCode));
    END;

    LOCAL PROCEDURE InitHeaderDefaults@107(SalesHeader@1000 : Record 36);
    BEGIN
      IF SalesHeader."Document Type" = SalesHeader."Document Type"::Quote THEN BEGIN
        IF (SalesHeader."Sell-to Customer No." = '') AND
           (SalesHeader."Sell-to Customer Template Code" = '')
        THEN
          ERROR(
            Text031,
            SalesHeader.FIELDCAPTION("Sell-to Customer No."),
            SalesHeader.FIELDCAPTION("Sell-to Customer Template Code"));
        IF (SalesHeader."Bill-to Customer No." = '') AND
           (SalesHeader."Bill-to Customer Template Code" = '')
        THEN
          ERROR(
            Text031,
            SalesHeader.FIELDCAPTION("Bill-to Customer No."),
            SalesHeader.FIELDCAPTION("Bill-to Customer Template Code"));
      END ELSE
        SalesHeader.TESTFIELD("Sell-to Customer No.");

      "Sell-to Customer No." := SalesHeader."Sell-to Customer No.";
      "Currency Code" := SalesHeader."Currency Code";
      IF NOT IsNonInventoriableItem THEN
        "Location Code" := SalesHeader."Location Code";
      "Customer Price Group" := SalesHeader."Customer Price Group";
      "Customer Disc. Group" := SalesHeader."Customer Disc. Group";
      "Allow Line Disc." := SalesHeader."Allow Line Disc.";
      "Transaction Type" := SalesHeader."Transaction Type";
      "Transport Method" := SalesHeader."Transport Method";
      "Bill-to Customer No." := SalesHeader."Bill-to Customer No.";
      "Gen. Bus. Posting Group" := SalesHeader."Gen. Bus. Posting Group";
      "VAT Bus. Posting Group" := SalesHeader."VAT Bus. Posting Group";
      "Exit Point" := SalesHeader."Exit Point";
      Area := SalesHeader.Area;
      "Transaction Specification" := SalesHeader."Transaction Specification";
      "Tax Area Code" := SalesHeader."Tax Area Code";
      "Tax Liable" := SalesHeader."Tax Liable";
      IF NOT "System-Created Entry" AND ("Document Type" = "Document Type"::Order) AND HasTypeToFillMandatoryFields OR
         IsServiceCharge
      THEN
        "Prepayment %" := SalesHeader."Prepayment %";
      "Prepayment Tax Area Code" := SalesHeader."Tax Area Code";
      "Prepayment Tax Liable" := SalesHeader."Tax Liable";
      "Responsibility Center" := SalesHeader."Responsibility Center";

      "Shipping Agent Code" := SalesHeader."Shipping Agent Code";
      "Shipping Agent Service Code" := SalesHeader."Shipping Agent Service Code";
      "Outbound Whse. Handling Time" := SalesHeader."Outbound Whse. Handling Time";
      "Shipping Time" := SalesHeader."Shipping Time";

      OnAfterInitHeaderDefaults(Rec,SalesHeader);
    END;

    LOCAL PROCEDURE InitDeferralCode@108();
    VAR
      Item@1000 : Record 27;
    BEGIN
      IF "Document Type" IN
         ["Document Type"::Order,"Document Type"::Invoice,"Document Type"::"Credit Memo","Document Type"::"Return Order"]
      THEN
        CASE Type OF
          Type::"G/L Account":
            VALIDATE("Deferral Code",GLAcc."Default Deferral Template Code");
          Type::Item:
            BEGIN
              GetItem(Item);
              VALIDATE("Deferral Code",Item."Default Deferral Template Code");
            END;
          Type::Resource:
            VALIDATE("Deferral Code",Res."Default Deferral Template Code");
        END;
    END;

    [External]
    PROCEDURE DefaultDeferralCode@109();
    VAR
      Item@1000 : Record 27;
    BEGIN
      CASE Type OF
        Type::"G/L Account":
          BEGIN
            GLAcc.GET("No.");
            InitDeferralCode;
          END;
        Type::Item:
          BEGIN
            GetItem(Item);
            InitDeferralCode;
          END;
        Type::Resource:
          BEGIN
            Res.GET("No.");
            InitDeferralCode;
          END;
      END;
    END;

    [External]
    PROCEDURE IsCreditDocType@110() : Boolean;
    BEGIN
      EXIT("Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"]);
    END;

    LOCAL PROCEDURE IsFullyInvoiced@224() : Boolean;
    BEGIN
      EXIT(("Qty. Shipped Not Invd. (Base)" = 0) AND ("Qty. Shipped (Base)" = "Quantity (Base)"))
    END;

    LOCAL PROCEDURE CleanDropShipmentFields@112();
    BEGIN
      IF ("Purch. Order Line No." <> 0) AND IsFullyInvoiced THEN
        IF CleanPurchaseLineDropShipmentFields THEN BEGIN
          "Purchase Order No." := '';
          "Purch. Order Line No." := 0;
        END;
    END;

    LOCAL PROCEDURE CleanSpecialOrderFieldsAndCheckAssocPurchOrder@125();
    BEGIN
      IF ("Special Order Purch. Line No." <> 0) AND IsFullyInvoiced THEN
        IF CleanPurchaseLineSpecialOrderFields THEN BEGIN
          "Special Order Purchase No." := '';
          "Special Order Purch. Line No." := 0;
        END;
      CheckAssocPurchOrder('');
    END;

    LOCAL PROCEDURE CleanPurchaseLineDropShipmentFields@155() : Boolean;
    VAR
      PurchaseLine@1000 : Record 39;
    BEGIN
      IF PurchaseLine.GET(PurchaseLine."Document Type"::Order,"Purchase Order No.","Purch. Order Line No.") THEN BEGIN
        IF PurchaseLine."Qty. Received (Base)" < "Qty. Shipped (Base)" THEN
          EXIT(FALSE);

        PurchaseLine."Sales Order No." := '';
        PurchaseLine."Sales Order Line No." := 0;
        PurchaseLine.MODIFY;
      END;

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CleanPurchaseLineSpecialOrderFields@219() : Boolean;
    VAR
      PurchaseLine@1000 : Record 39;
    BEGIN
      IF PurchaseLine.GET(PurchaseLine."Document Type"::Order,"Special Order Purchase No.","Special Order Purch. Line No.") THEN BEGIN
        IF PurchaseLine."Qty. Received (Base)" < "Qty. Shipped (Base)" THEN
          EXIT(FALSE);

        PurchaseLine."Special Order" := FALSE;
        PurchaseLine."Special Order Sales No." := '';
        PurchaseLine."Special Order Sales Line No." := 0;
        PurchaseLine.MODIFY;
      END;

      EXIT(TRUE);
    END;

    [External]
    PROCEDURE CanEditUnitOfMeasureCode@115() : Boolean;
    VAR
      ItemUnitOfMeasure@1000 : Record 5404;
    BEGIN
      IF (Type = Type::Item) AND ("No." <> '') THEN BEGIN
        ItemUnitOfMeasure.SETRANGE("Item No.","No.");
        EXIT(ItemUnitOfMeasure.COUNT > 1);
      END;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE ValidateTaxGroupCode@79();
    VAR
      TaxDetail@1001 : Record 322;
    BEGIN
      IF ("Tax Area Code" <> '') AND ("Tax Group Code" <> '') THEN
        TaxDetail.ValidateTaxSetup("Tax Area Code","Tax Group Code","Posting Date");
    END;

    [External]
    PROCEDURE InsertFreightLine@121(VAR FreightAmount@1000 : Decimal);
    VAR
      SalesLine@1001 : Record 37;
      FreightAmountQuantity@1002 : Integer;
    BEGIN
      IF FreightAmount <= 0 THEN BEGIN
        FreightAmount := 0;
        EXIT;
      END;

      FreightAmountQuantity := 1;

      SalesSetup.GET;
      SalesSetup.TESTFIELD("Freight G/L Acc. No.");

      TESTFIELD("Document Type");
      TESTFIELD("Document No.");

      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","Document No.");
      SalesLine.SETRANGE(Type,SalesLine.Type::"G/L Account");
      SalesLine.SETRANGE("No.",SalesSetup."Freight G/L Acc. No.");
      // "Quantity Shipped" will be equal to 0 until FreightAmount line successfully shipped
      SalesLine.SETRANGE("Quantity Shipped",0);
      IF SalesLine.FINDFIRST THEN BEGIN
        SalesLine.VALIDATE(Quantity,FreightAmountQuantity);
        SalesLine.VALIDATE("Unit Price",FreightAmount);
        SalesLine.MODIFY;
      END ELSE BEGIN
        SalesLine.SETRANGE(Type);
        SalesLine.SETRANGE("No.");
        SalesLine.SETRANGE("Quantity Shipped");
        SalesLine.FINDLAST;
        SalesLine."Line No." += 10000;
        SalesLine.INIT;
        SalesLine.VALIDATE(Type,SalesLine.Type::"G/L Account");
        SalesLine.VALIDATE("No.",SalesSetup."Freight G/L Acc. No.");
        SalesLine.VALIDATE(Description,FreightLineDescriptionTxt);
        SalesLine.VALIDATE(Quantity,FreightAmountQuantity);
        SalesLine.VALIDATE("Unit Price",FreightAmount);
        SalesLine.INSERT;
      END;
    END;

    LOCAL PROCEDURE CalcTotalAmtToAssign@154(TotalQtyToAssign@1000 : Decimal) TotalAmtToAssign : Decimal;
    BEGIN
      TotalAmtToAssign := CalcLineAmount * TotalQtyToAssign / Quantity;
      IF SalesHeader."Prices Including VAT" THEN
        TotalAmtToAssign := TotalAmtToAssign / (1 + "VAT %" / 100) - "VAT Difference";

      TotalAmtToAssign := ROUND(TotalAmtToAssign,Currency."Amount Rounding Precision");
    END;

    [External]
    PROCEDURE IsLookupRequested@119() Result : Boolean;
    BEGIN
      Result := LookupRequested;
      LookupRequested := FALSE;
    END;

    [External]
    PROCEDURE TestItemFields@120(ItemNo@1000 : Code[20];VariantCode@1001 : Code[10];LocationCode@1002 : Code[10]);
    BEGIN
      TESTFIELD(Type,Type::Item);
      TESTFIELD("No.",ItemNo);
      TESTFIELD("Variant Code",VariantCode);
      TESTFIELD("Location Code",LocationCode);
    END;

    [External]
    PROCEDURE CalculateNotShippedInvExlcVatLCY@118();
    VAR
      Currency2@1000 : Record 4;
    BEGIN
      Currency2.InitRoundingPrecision;
      "Shipped Not Inv. (LCY) No VAT" :=
        ROUND("Shipped Not Invoiced (LCY)" / (1 + "VAT %" / 100),Currency2."Amount Rounding Precision");
    END;

    [External]
    PROCEDURE ClearSalesHeader@124();
    BEGIN
      CLEAR(SalesHeader);
    END;

    [External]
    PROCEDURE SendLineInvoiceDiscountResetNotification@323();
    VAR
      NotificationLifecycleMgt@1003 : Codeunit 1511;
      NotificationToSend@1000 : Notification;
    BEGIN
      IF ("Inv. Discount Amount" = 0) AND (xRec."Inv. Discount Amount" <> 0) AND ("Line Amount" <> 0) THEN BEGIN
        NotificationToSend.ID := SalesHeader.GetLineInvoiceDiscountResetNotificationId;
        NotificationToSend.MESSAGE := STRSUBSTNO(LineInvoiceDiscountAmountResetTok,RECORDID);

        NotificationLifecycleMgt.SendNotification(NotificationToSend,RECORDID);
      END;
    END;

    [External]
    PROCEDURE GetDocumentTypeDescription@156() : Text;
    VAR
      IdentityManagement@1000 : Codeunit 9801;
    BEGIN
      IF IdentityManagement.IsInvAppId AND ("Document Type" = "Document Type"::Quote) THEN
        EXIT(EstimateLbl);

      EXIT(FORMAT("Document Type"));
    END;

    [External]
    PROCEDURE FormatType@149() : Text[20];
    BEGIN
      IF Type = Type::" " THEN
        EXIT(CommentLbl);

      EXIT(FORMAT(Type));
    END;

    [External]
    PROCEDURE RenameNo@133(LineType@1000 : Option;OldNo@1001 : Code[20];NewNo@1002 : Code[20]);
    BEGIN
      RESET;
      SETRANGE(Type,LineType);
      SETRANGE("No.",OldNo);
      MODIFYALL("No.",NewNo,TRUE);
    END;

    [External]
    PROCEDURE UpdatePlanned@151() : Boolean;
    BEGIN
      TESTFIELD("Qty. per Unit of Measure");
      CALCFIELDS("Reserved Quantity");
      IF Planned = ("Reserved Quantity" = "Outstanding Quantity") THEN
        EXIT(FALSE);
      Planned := NOT Planned;
      EXIT(TRUE);
    END;

    [External]
    PROCEDURE AssignedItemCharge@153() : Boolean;
    BEGIN
      EXIT((Type = Type::"Charge (Item)") AND ("No." <> '') AND ("Qty. to Assign" < Quantity));
    END;

    LOCAL PROCEDURE UpdateLineDiscPct@189();
    VAR
      LineDiscountPct@1000 : Decimal;
      IsHandled@1001 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeUpdateLineDiscPct(Rec,IsHandled,Currency);
      IF IsHandled THEN
        EXIT;

      IF ROUND(Quantity * "Unit Price",Currency."Amount Rounding Precision") <> 0 THEN BEGIN
        LineDiscountPct := ROUND(
            "Line Discount Amount" / ROUND(Quantity * "Unit Price",Currency."Amount Rounding Precision") * 100,
            0.00001);
        IF NOT (LineDiscountPct IN [0..100]) THEN
          ERROR(LineDiscountPctErr);
        "Line Discount %" := LineDiscountPct;
      END ELSE
        "Line Discount %" := 0;

      OnAfterUpdateLineDiscPct(Rec);
    END;

    LOCAL PROCEDURE UpdateBaseAmounts@173(NewAmount@1000 : Decimal;NewAmountIncludingVAT@1001 : Decimal;NewVATBaseAmount@1002 : Decimal);
    BEGIN
      Amount := NewAmount;
      "Amount Including VAT" := NewAmountIncludingVAT;
      "VAT Base Amount" := NewVATBaseAmount;
    END;

    [External]
    PROCEDURE CalcPlannedDate@218() : Date;
    BEGIN
      IF FORMAT("Shipping Time") <> '' THEN
        EXIT(CalcPlannedDeliveryDate(FIELDNO("Planned Delivery Date")));

      EXIT(CalcPlannedShptDate(FIELDNO("Planned Delivery Date")));
    END;

    LOCAL PROCEDURE IsCalcVATAmountLinesHandled@192(SalesHeader@1001 : Record 36;VAR SalesLine@1002 : Record 37;VAR VATAmountLine@1003 : Record 290) IsHandled : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeCalcVATAmountLines(SalesHeader,SalesLine,VATAmountLine,IsHandled);
      EXIT(IsHandled);
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterAssignFieldsForNo@158(VAR SalesLine@1000 : Record 37;VAR xSalesLine@1001 : Record 37;SalesHeader@1002 : Record 36);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterAssignHeaderValues@134(VAR SalesLine@1000 : Record 37;SalesHeader@1001 : Record 36);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterAssignStdTxtValues@135(VAR SalesLine@1000 : Record 37;StandardText@1001 : Record 7);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterAssignGLAccountValues@138(VAR SalesLine@1000 : Record 37;GLAccount@1001 : Record 15);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterAssignItemValues@136(VAR SalesLine@1000 : Record 37;Item@1001 : Record 27);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterAssignItemChargeValues@137(VAR SalesLine@1000 : Record 37;ItemCharge@1001 : Record 5800);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterAssignResourceValues@139(VAR SalesLine@1000 : Record 37;Resource@1001 : Record 156);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterAssignFixedAssetValues@140(VAR SalesLine@1000 : Record 37;FixedAsset@1001 : Record 5600);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterAssignItemUOM@141(VAR SalesLine@1000 : Record 37;Item@1001 : Record 27);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterAssignResourceUOM@143(VAR SalesLine@1001 : Record 37;Resource@1000 : Record 156;ResourceUOM@1002 : Record 205);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterAutoReserve@208(VAR SalesLine@1000 : Record 37);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCheckShipmentRelation@272(SalesLine@1000 : Record 37;SalesShipmentLine@1001 : Record 111);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCheckRetRcptRelation@274(SalesLine@1000 : Record 37;ReturnReceiptLine@1001 : Record 6661);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCopyFromItem@230(VAR SalesLine@1000 : Record 37;Item@1001 : Record 27);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterDeleteChargeChargeAssgnt@267(VAR SalesLine@1000 : Record 37;VAR xSalesLine@1001 : Record 37;CurrentFieldNo@1002 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterFilterLinesWithItemToPlan@217(VAR SalesLine@1000 : Record 37;VAR Item@1001 : Record 27;DocumentType@1002 : Option);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterFindResUnitCost@214(VAR SalesLine@1000 : Record 37;VAR ResourceCost@1001 : Record 202);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterGetItemTranslation@329(VAR SalesLine@1000 : Record 37;SalesHeader@1001 : Record 36;ItemTranslation@1002 : Record 30);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterGetSalesHeader@241(VAR SalesLine@1000 : Record 37;VAR SalesHeader@1001 : Record 36;VAR Currency@1002 : Record 4);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterGetUnitCost@172(VAR SalesLine@1000 : Record 37;Item@1001 : Record 27);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterInitQtyToAsm@223(VAR SalesLine@1000 : Record 37;CallingFieldNo@1001 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterShowNonStock@263(VAR SalesLine@1000 : Record 37;NonstockItem@1001 : Record 5718);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterUpdateLineDiscPct@232(VAR SalesLine@1000 : Record 37);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterUpdateUnitPrice@126(VAR SalesLine@1000 : Record 37;xSalesLine@1001 : Record 37;CalledByFieldNo@1002 : Integer;CurrFieldNo@1003 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterAddItem@268(VAR SalesLine@1000 : Record 37;LastSalesLine@1001 : Record 37);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeAddItems@252(VAR SalesLine@1000 : Record 37);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeAutoReserve@235(SalesLine@1000 : Record 37;VAR IsHandled@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCalcInvDiscToInvoice@220(VAR SalesLine@1000 : Record 37;CallingFieldNo@1001 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCalcPlannedShptDate@261(VAR SalesLine@1000 : Record 37;VAR PlannedShipmentDate@1001 : Date;CallingFieldNo@1002 : Integer;VAR IsHandled@1003 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCalcVATAmountLines@190(SalesHeader@1002 : Record 36;VAR SalesLine@1001 : Record 37;VAR VATAmountLine@1000 : Record 290;VAR IsHandled@1003 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCheckAssocPurchOrder@175(VAR SalesLine@1000 : Record 37;FieldCaption@1001 : Text[250];VAR IsHandled@1002 : Boolean;xSalesLine@1003 : Record 37);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCheckItemAvailable@225(SalesLine@1000 : Record 37;CalledByFieldNo@1001 : Integer;VAR IsHandled@1002 : Boolean;CurrentFieldNo@1003 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCopyFromItem@222(VAR SalesLine@1000 : Record 37;Item@1001 : Record 27;VAR IsHandled@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCrossReferenceNoAssign@193(VAR SalesLine@1000 : Record 37;ItemCrossReference@1001 : Record 5717);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeFindNoByDescription@260(SalesLine@1000 : Record 37;xSalesLine@1001 : Record 37;VAR CurrentFieldNo@1002 : Integer;VAR IsHandled@1003 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeGetDefaultBin@216(VAR SalesLine@1000 : Record 37;VAR IsHandled@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeGetItemTranslation@275(VAR SalesLine@1000 : Record 37;VAR IsHandled@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeGetSalesHeader@262(VAR SalesLine@1000 : Record 37;VAR SalesHeader@1001 : Record 36;VAR IsHanded@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeGetUnitCost@333(SalesLine@1000 : Record 37;VAR IsHandled@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeInitQtyToAsm@221(VAR SalesLine@1000 : Record 37;CallingFieldNo@1001 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeIsAsmToOrderRequired@314(SalesLine@1000 : Record 37;VAR Result@1001 : Boolean;VAR IsHandled@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeMaxQtyToInvoice@332(SalesLine@1000 : Record 37;VAR MaxQty@1001 : Decimal;VAR IsHandled@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeMaxQtyToInvoiceBase@234(SalesLine@1000 : Record 37;VAR MaxQty@1001 : Decimal;VAR IsHandled@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeShowItemSub@238(VAR SalesLine@1000 : Record 37;VAR IsHandled@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeShowReservation@242(SalesLine@1000 : Record 37;VAR IsHandled@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeShowReservationEntries@240(SalesLine@1000 : Record 37;VAR IsHandled@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeTestJobPlanningLine@237(VAR SalesLine@1000 : Record 37;VAR IsHandled@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeTestStatusOpen@205(VAR SalesLine@1000 : Record 37;VAR SalesHeader@1001 : Record 36);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeUpdatePrepmtAmounts@245(VAR SalesLine@1000 : Record 37;SalesHeader@1001 : Record 36;VAR IsHandled@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeUpdatePrepmtSetupFields@236(VAR SalesLine@1000 : Record 37;VAR IsHandled@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeUpdateLineDiscPct@429(VAR SalesLine@1000 : Record 37;VAR IsHandled@1001 : Boolean;Currency@1002 : Record 4);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeUpdateUnitPrice@127(VAR SalesLine@1003 : Record 37;xSalesLine@1002 : Record 37;CalledByFieldNo@1001 : Integer;CurrFieldNo@1000 : Integer;VAR Handled@1004 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeUpdateVATAmounts@206(VAR SalesLine@1000 : Record 37);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeValidateReturnReasonCode@227(VAR SalesLine@1000 : Record 37;CallingFieldNo@1001 : Integer;VAR IsHandled@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeVerifyReservedQty@145(VAR SalesLine@1000 : Record 37;xSalesLine@1001 : Record 37;CalledByFieldNo@1002 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterInitHeaderDefaults@161(VAR SalesLine@1000 : Record 37;SalesHeader@1001 : Record 36);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterInitOutstanding@215(VAR SalesLine@1000 : Record 37);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterInitOutstandingQty@202(VAR SalesLine@1000 : Record 37);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterInitOutstandingAmount@132(VAR SalesLine@1000 : Record 37;SalesHeader@1001 : Record 36;Currency@1002 : Record 4);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterInitQtyToInvoice@128(VAR SalesLine@1000 : Record 37;CurrFieldNo@1001 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterInitQtyToShip@129(VAR SalesLine@1000 : Record 37;CurrFieldNo@1001 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterInitQtyToShip2@315(VAR SalesLine@1000 : Record 37;CurrFieldNo@1001 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterInitQtyToReceive@130(VAR SalesLine@1000 : Record 37;CurrFieldNo@1001 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCalcLineAmount@251(VAR SalesLine@1000 : Record 37;VAR LineAmount@1001 : Decimal);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCalcVATAmountLines@170(VAR SalesHeader@1003 : Record 36;VAR SalesLine@1002 : Record 37;VAR VATAmountLine@1001 : Record 290;QtyType@1000 : 'General,Invoicing,Shipping');
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterGetLineAmountToHandle@171(SalesLine@1000 : Record 37;QtyToHandle@1001 : Decimal;VAR LineAmount@1002 : Decimal;VAR LineDiscAmount@1003 : Decimal);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterSalesTaxCalculate@249(VAR SalesLine@1000 : Record 37;SalesHeader@1001 : Record 36;Currency@1002 : Record 4);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterSalesTaxCalculateReverse@246(VAR SalesLine@1000 : Record 37;SalesHeader@1001 : Record 36;Currency@1002 : Record 4);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterSetReserveWithoutPurchasingCode@233(VAR SalesLine@1000 : Record 37;SalesHeader@1001 : Record 36;Item@1002 : Record 27);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterUpdateAmounts@152(VAR SalesLine@1000 : Record 37;VAR xSalesLine@1002 : Record 37;CurrentFieldNo@1001 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterUpdateAmountsDone@165(VAR SalesLine@1000 : Record 37;VAR xSalesLine@1001 : Record 37;CurrentFieldNo@1002 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterUpdateDates@200(VAR SalesLine@1000 : Record 37);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterUpdateItemCrossRef@257(VAR SalesLine@1000 : Record 37);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterUpdateVATAmounts@199(VAR SalesLine@1000 : Record 37);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterUpdateVATOnLines@162(VAR SalesHeader@1002 : Record 36;VAR SalesLine@1001 : Record 37;VAR VATAmountLine@1000 : Record 290;QtyType@1003 : 'General,Invoicing,Shipping');
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterUpdateWithWarehouseShip@271(SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterValidateCrossReferenceNo@258(SalesLine@1000 : Record 37;ItemCrossReference@1001 : Record 5717);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCreateDimTableIDs@164(VAR SalesLine@1000 : Record 37;CallingFieldNo@1001 : Integer;VAR TableID@1003 : ARRAY [10] OF Integer;VAR No@1002 : ARRAY [10] OF Code[20]);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterShowItemSub@166(VAR SalesLine@1000 : Record 37);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterValidateReturnReasonCode@174(VAR SalesLine@1000 : Record 37;CallingFieldNo@1001 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnInitQtyToShip2OnBeforeCalcInvDiscToInvoice@239(VAR SalesLine@1000 : Record 37;VAR xSalesLine@1001 : Record 37);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnShowItemChargeAssgntOnBeforeCalcItemCharge@194(VAR SalesLine@1000 : Record 37;VAR ItemChargeAssgntLineAmt@1001 : Decimal;Currency@1002 : Record 4;VAR IsHandled@1003 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnUpdateUnitPriceOnBeforeFindPrice@191(SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37;CalledByFieldNo@1002 : Integer;CallingFieldNo@1003 : Integer;VAR IsHandled@1004 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnValidateLocationCodeOnBeforeSetShipmentDate@201(VAR SalesLine@1000 : Record 37;VAR IsHandled@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnValidateTypeOnAfterCheckItem@188(VAR SalesLine@1000 : Record 37;xSalesLine@1001 : Record 37);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnValidateTypeOnCopyFromTempSalesLine@167(VAR SalesLine@1000 : Record 37;VAR TempSalesLine@1001 : TEMPORARY Record 37);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnValidateNoOnAfterInitHeaderDefaults@269(VAR SalesHeader@1000 : Record 36;VAR TempSalesLine@1001 : TEMPORARY Record 37);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnValidateNoOnAfterUpdateUnitPrice@255(VAR SalesLine@1000 : Record 37;xSalesLine@1001 : Record 37);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnValidateNoOnAfterVerifyChange@187(VAR SalesLine@1000 : Record 37;xSalesLine@1001 : Record 37);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnValidateNoOnCopyFromTempSalesLine@168(VAR SalesLine@1000 : Record 37;VAR TempSalesLine@1001 : TEMPORARY Record 37);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnValidateNoOnBeforeInitRec@31(VAR SalesLine@1000 : Record 37;xSalesLine@1001 : Record 37;CallingFieldNo@1002 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnValidateNoOnBeforeUpdateDates@210(VAR SalesLine@1000 : Record 37;xSalesLine@1001 : Record 37;SalesHeader@1002 : Record 36;CallingFieldNo@1003 : Integer;VAR IsHandled@1004 : Boolean;VAR TempSalesLine@1005 : TEMPORARY Record 37);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnValidateQuantityOnAfterCalcBaseQty@256(VAR SalesLine@1000 : Record 37;xSalesLine@1001 : Record 37);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnValidateQuantityOnBeforeGetUnitCost@254(VAR SalesLine@1000 : Record 37;Item@1001 : Record 27);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnValidateQtyToShipAfterInitQty@244(VAR SalesLine@1000 : Record 37;VAR xSalesLine@1001 : Record 37;CallingFieldNo@1002 : Integer;VAR IsHandled@1003 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnValidateQtyToShipOnAfterCheck@270(VAR SalesLine@1000 : Record 37;CurrentFieldNo@1001 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnValidateQtyToReturnAfterInitQty@250(VAR SalesLine@1000 : Record 37;VAR xSalesLine@1001 : Record 37;CallingFieldNo@1002 : Integer;VAR IsHandled@1003 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnValidateReturnQtyToReceiveOnAfterCheck@273(VAR SalesLine@1000 : Record 37;CurrentFieldNo@1001 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnValidateVariantCodeOnAfterChecks@213(VAR SalesLine@1000 : Record 37;xSalesLine@1001 : Record 37;CallingFieldNo@1002 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnValidateVATProdPostingGroupOnBeforeCheckVATCalcType@259(VAR SalesLine@1000 : Record 37;VATPostingSetup@1001 : Record 325;VAR IsHandled@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterTestStatusOpen@169(VAR SalesLine@1000 : Record 37;VAR SalesHeader@1001 : Record 36);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterSetDefaultQuantity@176(VAR SalesLine@1000 : Record 37;VAR xSalesLine@1001 : Record 37);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterUpdateTotalAmounts@68(VAR SalesLine@1000 : Record 37;SalesLine2@1001 : Record 37;VAR TotalAmount@1003 : Decimal;VAR TotalAmountInclVAT@1002 : Decimal;VAR TotalLineAmount@1005 : Decimal;VAR TotalInvDiscAmount@1004 : Decimal);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnCheckWarehouseOnBeforeShowDialog@247(SalesLine@1000 : Record 37;Location@1001 : Record 14;ShowDialog@1004 : ' ,Message,Error';VAR DialogText@1003 : Text[50]);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnCalcShipmentDateOnPlannedShipmentDate@253(SalesLine@1000 : Record 37;VAR ShipmentDate@1001 : Date;VAR IsHandled@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnCopyFromItemOnAfterCheck@243(VAR SalesLine@1000 : Record 37;Item@1001 : Record 27);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnGetDeferralPostDate@159(SalesHeader@1000 : Record 36;VAR DeferralPostingDate@1001 : Date;SalesLine@1002 : Record 37);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterAutoAsmToOrder@179(VAR SalesLine@1000 : Record 37);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeAutoAsmToOrder@178(VAR SalesLine@1000 : Record 37;VAR IsHandled@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterBlanketOrderLookup@182(VAR SalesLine@1000 : Record 37);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeBlanketOrderLookup@184(VAR SalesLine@1000 : Record 37;IsHandled@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCalcPlannedDeliveryDate@203(VAR SalesLine@1000 : Record 37;VAR PlannedDeliveryDate@1001 : Date;CallingFieldNo@1002 : Integer;VAR IsHandled@1003 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeOpenItemTrackingLines@212(SalesLine@1000 : Record 37;VAR IsHandled@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCheckCreditLimitCondition@185(SalesLine@1000 : Record 37;VAR RunCheck@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnUpdateAmountOnBeforeCheckCreditLimit@207(VAR SalesLine@1000 : Record 37;VAR IsHandled@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnUpdateVATOnLinesOnBeforeCalculateNewAmount@264(VAR SalesLine@1000 : Record 37;SalesHeader@1001 : Record 36;VATAmountLine@1003 : Record 290;VATAmountLineReminder@1002 : Record 290;VAR NewAmount@1004 : Decimal;VAR VATAmount@1005 : Decimal);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnValidateDescriptionOnBeforeCannotFindDescrError@451(VAR SalesLine@1000 : Record 37;xSalesLine@1001 : Record 37;VAR IsHandled@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnCalcVATAmountLinesOnAfterCalcLineTotals@266(VAR VATAmountLine@1000 : Record 290;SalesHeader@1001 : Record 36;SalesLine@1002 : Record 37;Currency@1003 : Record 4;QtyType@1004 : 'General,Invoicing,Shipping';VAR TotalVATAmount@1005 : Decimal);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnCrossReferenceNoLookupOnBeforeValidateUnitPrice@228(SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37);
    BEGIN
    END;

    PROCEDURE ShowDeferralSchedule@160();
    BEGIN
      GetSalesHeader;
      ShowDeferrals(SalesHeader."Posting Date",SalesHeader."Currency Code");
    END;

    BEGIN
    END.
  }
}

OBJECT Table 38 Purchase Header
{
  OBJECT-PROPERTIES
  {
    Date=02-10-21;
    Time=12:00:00;
    Modified=Yes;
    Version List=NAVW114.30;
  }
  PROPERTIES
  {
    DataCaptionFields=No.,Buy-from Vendor Name;
    OnInsert=VAR
               StandardCodesMgt@1000 : Codeunit 170;
             BEGIN
               InitInsert;

               IF GETFILTER("Buy-from Vendor No.") <> '' THEN
                 IF GETRANGEMIN("Buy-from Vendor No.") = GETRANGEMAX("Buy-from Vendor No.") THEN
                   VALIDATE("Buy-from Vendor No.",GETRANGEMIN("Buy-from Vendor No."));

               IF "Purchaser Code" = '' THEN
                 SetDefaultPurchaser;

               IF "Buy-from Vendor No." <> '' THEN
                 StandardCodesMgt.CheckShowPurchRecurringLinesNotification(Rec);
             END;

    OnDelete=VAR
               PostPurchDelete@1000 : Codeunit 364;
               ArchiveManagement@1001 : Codeunit 5063;
             BEGIN
               IF NOT UserSetupMgt.CheckRespCenter(1,"Responsibility Center") THEN
                 ERROR(
                   Text023,
                   RespCenter.TABLECAPTION,UserSetupMgt.GetPurchasesFilter);

               ArchiveManagement.AutoArchivePurchDocument(Rec);
               PostPurchDelete.DeleteHeader(
                 Rec,PurchRcptHeader,PurchInvHeader,PurchCrMemoHeader,
                 ReturnShptHeader,PurchInvHeaderPrepmt,PurchCrMemoHeaderPrepmt);
               VALIDATE("Applies-to ID",'');
               VALIDATE("Incoming Document Entry No.",0);

               ApprovalsMgmt.OnDeleteRecordInApprovalRequest(RECORDID);
               PurchLine.LOCKTABLE;

               WhseRequest.SETRANGE("Source Type",DATABASE::"Purchase Line");
               WhseRequest.SETRANGE("Source Subtype","Document Type");
               WhseRequest.SETRANGE("Source No.","No.");
               WhseRequest.DELETEALL(TRUE);

               PurchLine.SETRANGE("Document Type","Document Type");
               PurchLine.SETRANGE("Document No.","No.");
               PurchLine.SETRANGE(Type,PurchLine.Type::"Charge (Item)");
               DeletePurchaseLines;
               PurchLine.SETRANGE(Type);
               DeletePurchaseLines;

               PurchCommentLine.SETRANGE("Document Type","Document Type");
               PurchCommentLine.SETRANGE("No.","No.");
               PurchCommentLine.DELETEALL;

               IF (PurchRcptHeader."No." <> '') OR
                  (PurchInvHeader."No." <> '') OR
                  (PurchCrMemoHeader."No." <> '') OR
                  (ReturnShptHeader."No." <> '') OR
                  (PurchInvHeaderPrepmt."No." <> '') OR
                  (PurchCrMemoHeaderPrepmt."No." <> '')
               THEN
                 MESSAGE(PostedDocsToPrintCreatedMsg);
             END;

    OnRename=BEGIN
               ERROR(Text003,TABLECAPTION);
             END;

    CaptionML=[ENU=Purchase Header;
               ENN=Purchase Header];
    LookupPageID=Page53;
  }
  FIELDS
  {
    { 1   ;   ;Document Type       ;Option        ;CaptionML=[ENU=Document Type;
                                                              ENN=Document Type];
                                                   OptionCaptionML=[ENU=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order;
                                                                    ENN=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order];
                                                   OptionString=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order }
    { 2   ;   ;Buy-from Vendor No. ;Code20        ;TableRelation=Vendor;
                                                   OnValidate=VAR
                                                                StandardCodesMgt@1000 : Codeunit 170;
                                                              BEGIN
                                                                IF "No." = '' THEN
                                                                  InitRecord;
                                                                TestStatusOpen;
                                                                IF ("Buy-from Vendor No." <> xRec."Buy-from Vendor No.") AND
                                                                   (xRec."Buy-from Vendor No." <> '')
                                                                THEN BEGIN
                                                                  CheckDropShipmentLineExists;
                                                                  IF GetHideValidationDialog OR NOT GUIALLOWED THEN
                                                                    Confirmed := TRUE
                                                                  ELSE
                                                                    Confirmed := CONFIRM(ConfirmChangeQst,FALSE,BuyFromVendorTxt);
                                                                  IF Confirmed THEN BEGIN
                                                                    IF InitFromVendor("Buy-from Vendor No.",FIELDCAPTION("Buy-from Vendor No.")) THEN
                                                                      EXIT;

                                                                    CheckReceiptInfo(PurchLine,FALSE);
                                                                    CheckPrepmtInfo(PurchLine);
                                                                    CheckReturnInfo(PurchLine,FALSE);

                                                                    PurchLine.RESET;
                                                                  END ELSE BEGIN
                                                                    Rec := xRec;
                                                                    EXIT;
                                                                  END;
                                                                END;

                                                                GetVend("Buy-from Vendor No.");
                                                                Vend.CheckBlockedVendOnDocs(Vend,FALSE);
                                                                Vend.TESTFIELD("Gen. Bus. Posting Group");
                                                                OnAfterCheckBuyFromVendor(Rec,xRec,Vend);

                                                                "Buy-from Vendor Name" := Vend.Name;
                                                                "Buy-from Vendor Name 2" := Vend."Name 2";
                                                                CopyBuyFromVendorAddressFieldsFromVendor(Vend,FALSE);
                                                                IF NOT SkipBuyFromContact THEN
                                                                  "Buy-from Contact" := Vend.Contact;
                                                                "Gen. Bus. Posting Group" := Vend."Gen. Bus. Posting Group";
                                                                "VAT Bus. Posting Group" := Vend."VAT Bus. Posting Group";
                                                                "Tax Area Code" := Vend."Tax Area Code";
                                                                "Tax Liable" := Vend."Tax Liable";
                                                                "VAT Country/Region Code" := Vend."Country/Region Code";
                                                                "VAT Registration No." := Vend."VAT Registration No.";
                                                                VALIDATE("Lead Time Calculation",Vend."Lead Time Calculation");
                                                                "Responsibility Center" := UserSetupMgt.GetRespCenter(1,Vend."Responsibility Center");
                                                                ValidateEmptySellToCustomerAndLocation;
                                                                OnAfterCopyBuyFromVendorFieldsFromVendor(Rec,Vend,xRec);

                                                                IF "Buy-from Vendor No." = xRec."Pay-to Vendor No." THEN
                                                                  IF ReceivedPurchLinesExist OR ReturnShipmentExist THEN BEGIN
                                                                    TESTFIELD("VAT Bus. Posting Group",xRec."VAT Bus. Posting Group");
                                                                    TESTFIELD("Gen. Bus. Posting Group",xRec."Gen. Bus. Posting Group");
                                                                  END;

                                                                "Buy-from IC Partner Code" := Vend."IC Partner Code";
                                                                "Send IC Document" := ("Buy-from IC Partner Code" <> '') AND ("IC Direction" = "IC Direction"::Outgoing);

                                                                IF Vend."Pay-to Vendor No." <> '' THEN
                                                                  VALIDATE("Pay-to Vendor No.",Vend."Pay-to Vendor No.")
                                                                ELSE BEGIN
                                                                  IF "Buy-from Vendor No." = "Pay-to Vendor No." THEN
                                                                    SkipPayToContact := TRUE;
                                                                  VALIDATE("Pay-to Vendor No.","Buy-from Vendor No.");
                                                                  SkipPayToContact := FALSE;
                                                                END;
                                                                "Order Address Code" := '';

                                                                CopyPayToVendorAddressFieldsFromVendor(Vend,FALSE);
                                                                IF IsCreditDocType THEN BEGIN
                                                                  "Ship-to Name" := Vend.Name;
                                                                  "Ship-to Name 2" := Vend."Name 2";
                                                                  CopyShipToVendorAddressFieldsFromVendor(Vend,TRUE);
                                                                  "Ship-to Contact" := Vend.Contact;
                                                                  "Shipment Method Code" := Vend."Shipment Method Code";
                                                                  IF Vend."Location Code" <> '' THEN
                                                                    VALIDATE("Location Code",Vend."Location Code");
                                                                END;

                                                                OnValidateBuyFromVendorNoBeforeRecreateLines(Rec,CurrFieldNo);

                                                                IF (xRec."Buy-from Vendor No." <> "Buy-from Vendor No.") OR
                                                                   (xRec."Currency Code" <> "Currency Code") OR
                                                                   (xRec."Gen. Bus. Posting Group" <> "Gen. Bus. Posting Group") OR
                                                                   (xRec."VAT Bus. Posting Group" <> "VAT Bus. Posting Group")
                                                                THEN
                                                                  RecreatePurchLines(BuyFromVendorTxt);

                                                                IF NOT SkipBuyFromContact THEN
                                                                  UpdateBuyFromCont("Buy-from Vendor No.");

                                                                IF "No." <> '' THEN
                                                                  StandardCodesMgt.CheckShowPurchRecurringLinesNotification(Rec);

                                                                IF (xRec."Buy-from Vendor No." <> '') AND (xRec."Buy-from Vendor No." <> "Buy-from Vendor No.") THEN
                                                                  RecallModifyAddressNotification(GetModifyVendorAddressNotificationId);
                                                              END;

                                                   CaptionML=[ENU=Buy-from Vendor No.;
                                                              ENN=Buy-from Vendor No.] }
    { 3   ;   ;No.                 ;Code20        ;OnValidate=BEGIN
                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  GetPurchSetup;
                                                                  NoSeriesMgt.TestManual(GetNoSeriesCode);
                                                                  "No. Series" := '';
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=No.;
                                                              ENN=No.] }
    { 4   ;   ;Pay-to Vendor No.   ;Code20        ;TableRelation=Vendor;
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF (xRec."Pay-to Vendor No." <> "Pay-to Vendor No.") AND
                                                                   (xRec."Pay-to Vendor No." <> '')
                                                                THEN BEGIN
                                                                  IF GetHideValidationDialog OR NOT GUIALLOWED THEN
                                                                    Confirmed := TRUE
                                                                  ELSE
                                                                    Confirmed := CONFIRM(ConfirmChangeQst,FALSE,PayToVendorTxt);
                                                                  IF Confirmed THEN BEGIN
                                                                    PurchLine.SETRANGE("Document Type","Document Type");
                                                                    PurchLine.SETRANGE("Document No.","No.");

                                                                    CheckReceiptInfo(PurchLine,TRUE);
                                                                    CheckPrepmtInfo(PurchLine);
                                                                    CheckReturnInfo(PurchLine,TRUE);

                                                                    PurchLine.RESET;
                                                                  END ELSE
                                                                    "Pay-to Vendor No." := xRec."Pay-to Vendor No.";
                                                                END;

                                                                GetVend("Pay-to Vendor No.");
                                                                Vend.CheckBlockedVendOnDocs(Vend,FALSE);
                                                                Vend.TESTFIELD("Vendor Posting Group");
                                                                PostingSetupMgt.CheckVendPostingGroupPayablesAccount("Vendor Posting Group");
                                                                OnAfterCheckPayToVendor(Rec,xRec,Vend);

                                                                "Pay-to Name" := Vend.Name;
                                                                "Pay-to Name 2" := Vend."Name 2";
                                                                CopyPayToVendorAddressFieldsFromVendor(Vend,FALSE);
                                                                IF NOT SkipPayToContact THEN
                                                                  "Pay-to Contact" := Vend.Contact;
                                                                "Payment Terms Code" := Vend."Payment Terms Code";
                                                                "Prepmt. Payment Terms Code" := Vend."Payment Terms Code";
                                                                "Payment Method Code" := Vend."Payment Method Code";

                                                                IF "Buy-from Vendor No." = Vend."No." THEN
                                                                  "Shipment Method Code" := Vend."Shipment Method Code";
                                                                "Vendor Posting Group" := Vend."Vendor Posting Group";
                                                                GLSetup.GET;
                                                                IF GLSetup."Bill-to/Sell-to VAT Calc." = GLSetup."Bill-to/Sell-to VAT Calc."::"Bill-to/Pay-to No." THEN BEGIN
                                                                  "VAT Bus. Posting Group" := Vend."VAT Bus. Posting Group";
                                                                  "VAT Country/Region Code" := Vend."Country/Region Code";
                                                                  "VAT Registration No." := Vend."VAT Registration No.";
                                                                  "Gen. Bus. Posting Group" := Vend."Gen. Bus. Posting Group";
                                                                END;
                                                                "Prices Including VAT" := Vend."Prices Including VAT";
                                                                "Currency Code" := Vend."Currency Code";
                                                                "Invoice Disc. Code" := Vend."Invoice Disc. Code";
                                                                "Language Code" := Vend."Language Code";
                                                                SetPurchaserCode(Vend."Purchaser Code","Purchaser Code");
                                                                VALIDATE("Payment Terms Code");
                                                                VALIDATE("Prepmt. Payment Terms Code");
                                                                VALIDATE("Payment Method Code");
                                                                VALIDATE("Currency Code");
                                                                VALIDATE("Creditor No.",Vend."Creditor No.");

                                                                OnValidatePurchaseHeaderPayToVendorNo(Vend,Rec);

                                                                IF "Document Type" = "Document Type"::Order THEN
                                                                  VALIDATE("Prepayment %",Vend."Prepayment %");

                                                                IF "Pay-to Vendor No." = xRec."Pay-to Vendor No." THEN BEGIN
                                                                  IF ReceivedPurchLinesExist THEN
                                                                    TESTFIELD("Currency Code",xRec."Currency Code");
                                                                END;

                                                                CreateDim(
                                                                  DATABASE::Vendor,"Pay-to Vendor No.",
                                                                  DATABASE::"Salesperson/Purchaser","Purchaser Code",
                                                                  DATABASE::Campaign,"Campaign No.",
                                                                  DATABASE::"Responsibility Center","Responsibility Center");

                                                                OnValidatePaytoVendorNoBeforeRecreateLines(Rec,CurrFieldNo);

                                                                IF (xRec."Buy-from Vendor No." = "Buy-from Vendor No.") AND
                                                                   (xRec."Pay-to Vendor No." <> "Pay-to Vendor No.")
                                                                THEN
                                                                  RecreatePurchLines(PayToVendorTxt);

                                                                IF NOT SkipPayToContact THEN
                                                                  UpdatePayToCont("Pay-to Vendor No.");

                                                                "Pay-to IC Partner Code" := Vend."IC Partner Code";

                                                                IF (xRec."Pay-to Vendor No." <> '') AND (xRec."Pay-to Vendor No." <> "Pay-to Vendor No.") THEN
                                                                  RecallModifyAddressNotification(GetModifyPayToVendorAddressNotificationId);
                                                              END;

                                                   CaptionML=[ENU=Pay-to Vendor No.;
                                                              ENN=Pay-to Vendor No.];
                                                   NotBlank=Yes }
    { 5   ;   ;Pay-to Name         ;Text100       ;TableRelation=Vendor.Name;
                                                   OnValidate=VAR
                                                                Vendor@1000 : Record 23;
                                                              BEGIN
                                                                IF ShouldLookForVendorByName("Pay-to Vendor No.") THEN
                                                                  VALIDATE("Pay-to Vendor No.",Vendor.GetVendorNo("Pay-to Name"));
                                                              END;

                                                   OnLookup=VAR
                                                              Vendor@1000 : Record 23;
                                                            BEGIN
                                                              IF "Pay-to Vendor No." <> '' THEN
                                                                Vendor.GET("Pay-to Vendor No.");

                                                              IF Vendor.LookupVendor(Vendor) THEN BEGIN
                                                                "Pay-to Name" := Vendor.Name;
                                                                VALIDATE("Pay-to Vendor No.",Vendor."No.");
                                                              END;
                                                            END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Pay-to Name;
                                                              ENN=Pay-to Name] }
    { 6   ;   ;Pay-to Name 2       ;Text50        ;CaptionML=[ENU=Pay-to Name 2;
                                                              ENN=Pay-to Name 2] }
    { 7   ;   ;Pay-to Address      ;Text100       ;OnValidate=BEGIN
                                                                ModifyPayToVendorAddress;
                                                              END;

                                                   CaptionML=[ENU=Pay-to Address;
                                                              ENN=Pay-to Address] }
    { 8   ;   ;Pay-to Address 2    ;Text50        ;OnValidate=BEGIN
                                                                ModifyPayToVendorAddress;
                                                              END;

                                                   CaptionML=[ENU=Pay-to Address 2;
                                                              ENN=Pay-to Address 2] }
    { 9   ;   ;Pay-to City         ;Text30        ;TableRelation=IF (Pay-to Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Pay-to Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Pay-to Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(
                                                                  "Pay-to City","Pay-to Post Code","Pay-to County","Pay-to Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                                ModifyPayToVendorAddress;
                                                              END;

                                                   OnLookup=BEGIN
                                                              PostCode.LookupPostCode("Pay-to City","Pay-to Post Code","Pay-to County","Pay-to Country/Region Code");
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Pay-to City;
                                                              ENN=Pay-to City] }
    { 10  ;   ;Pay-to Contact      ;Text100       ;OnValidate=BEGIN
                                                                ModifyPayToVendorAddress;
                                                              END;

                                                   OnLookup=VAR
                                                              Contact@1000 : Record 5050;
                                                            BEGIN
                                                              Contact.FILTERGROUP(2);
                                                              LookupContact("Pay-to Vendor No.","Pay-to Contact No.",Contact);
                                                              IF PAGE.RUNMODAL(0,Contact) = ACTION::LookupOK THEN
                                                                VALIDATE("Pay-to Contact No.",Contact."No.");
                                                              Contact.FILTERGROUP(0);
                                                            END;

                                                   CaptionML=[ENU=Pay-to Contact;
                                                              ENN=Pay-to Contact] }
    { 11  ;   ;Your Reference      ;Text35        ;CaptionML=[ENU=Your Reference;
                                                              ENN=Your Reference] }
    { 12  ;   ;Ship-to Code        ;Code10        ;TableRelation="Ship-to Address".Code WHERE (Customer No.=FIELD(Sell-to Customer No.));
                                                   OnValidate=VAR
                                                                ShipToAddr@1000 : Record 222;
                                                              BEGIN
                                                                IF ("Document Type" = "Document Type"::Order) AND
                                                                   (xRec."Ship-to Code" <> "Ship-to Code")
                                                                THEN BEGIN
                                                                  PurchLine.SETRANGE("Document Type",PurchLine."Document Type"::Order);
                                                                  PurchLine.SETRANGE("Document No.","No.");
                                                                  PurchLine.SETFILTER("Sales Order Line No.",'<>0');
                                                                  IF NOT PurchLine.ISEMPTY THEN
                                                                    ERROR(
                                                                      YouCannotChangeFieldErr,
                                                                      FIELDCAPTION("Ship-to Code"));
                                                                END;

                                                                IF "Ship-to Code" <> '' THEN BEGIN
                                                                  ShipToAddr.GET("Sell-to Customer No.","Ship-to Code");
                                                                  SetShipToAddress(
                                                                    ShipToAddr.Name,ShipToAddr."Name 2",ShipToAddr.Address,ShipToAddr."Address 2",
                                                                    ShipToAddr.City,ShipToAddr."Post Code",ShipToAddr.County,ShipToAddr."Country/Region Code");
                                                                  "Ship-to Contact" := ShipToAddr.Contact;
                                                                  "Shipment Method Code" := ShipToAddr."Shipment Method Code";
                                                                  IF ShipToAddr."Location Code" <> '' THEN
                                                                    VALIDATE("Location Code",ShipToAddr."Location Code");
                                                                END ELSE BEGIN
                                                                  TESTFIELD("Sell-to Customer No.");
                                                                  Cust.GET("Sell-to Customer No.");
                                                                  SetShipToAddress(
                                                                    Cust.Name,Cust."Name 2",Cust.Address,Cust."Address 2",
                                                                    Cust.City,Cust."Post Code",Cust.County,Cust."Country/Region Code");
                                                                  "Ship-to Contact" := Cust.Contact;
                                                                  "Shipment Method Code" := Cust."Shipment Method Code";
                                                                  IF Cust."Location Code" <> '' THEN
                                                                    VALIDATE("Location Code",Cust."Location Code");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Ship-to Code;
                                                              ENN=Ship-to Code] }
    { 13  ;   ;Ship-to Name        ;Text100       ;CaptionML=[ENU=Ship-to Name;
                                                              ENN=Ship-to Name] }
    { 14  ;   ;Ship-to Name 2      ;Text50        ;CaptionML=[ENU=Ship-to Name 2;
                                                              ENN=Ship-to Name 2] }
    { 15  ;   ;Ship-to Address     ;Text100       ;CaptionML=[ENU=Ship-to Address;
                                                              ENN=Ship-to Address] }
    { 16  ;   ;Ship-to Address 2   ;Text50        ;CaptionML=[ENU=Ship-to Address 2;
                                                              ENN=Ship-to Address 2] }
    { 17  ;   ;Ship-to City        ;Text30        ;TableRelation=IF (Ship-to Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Ship-to Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Ship-to Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(
                                                                  "Ship-to City","Ship-to Post Code","Ship-to County","Ship-to Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   OnLookup=BEGIN
                                                              PostCode.LookupPostCode("Ship-to City","Ship-to Post Code","Ship-to County","Ship-to Country/Region Code");
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Ship-to City;
                                                              ENN=Ship-to City] }
    { 18  ;   ;Ship-to Contact     ;Text100       ;CaptionML=[ENU=Ship-to Contact;
                                                              ENN=Ship-to Contact] }
    { 19  ;   ;Order Date          ;Date          ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF ("Document Type" IN ["Document Type"::Quote,"Document Type"::Order]) AND
                                                                   NOT ("Order Date" = xRec."Order Date")
                                                                THEN
                                                                  PriceMessageIfPurchLinesExist(FIELDCAPTION("Order Date"));
                                                              END;

                                                   AccessByPermission=TableData 120=R;
                                                   CaptionML=[ENU=Order Date;
                                                              ENN=Order Date] }
    { 20  ;   ;Posting Date        ;Date          ;OnValidate=VAR
                                                                SkipJobCurrFactorUpdate@1000 : Boolean;
                                                              BEGIN
                                                                TESTFIELD("Posting Date");
                                                                TestNoSeriesDate(
                                                                  "Posting No.","Posting No. Series",
                                                                  FIELDCAPTION("Posting No."),FIELDCAPTION("Posting No. Series"));
                                                                TestNoSeriesDate(
                                                                  "Prepayment No.","Prepayment No. Series",
                                                                  FIELDCAPTION("Prepayment No."),FIELDCAPTION("Prepayment No. Series"));
                                                                TestNoSeriesDate(
                                                                  "Prepmt. Cr. Memo No.","Prepmt. Cr. Memo No. Series",
                                                                  FIELDCAPTION("Prepmt. Cr. Memo No."),FIELDCAPTION("Prepmt. Cr. Memo No. Series"));

                                                                IF "Incoming Document Entry No." = 0 THEN
                                                                  VALIDATE("Document Date","Posting Date");

                                                                IF ("Document Type" IN ["Document Type"::Invoice,"Document Type"::"Credit Memo"]) AND
                                                                   NOT ("Posting Date" = xRec."Posting Date")
                                                                THEN
                                                                  PriceMessageIfPurchLinesExist(FIELDCAPTION("Posting Date"));

                                                                IF "Currency Code" <> '' THEN BEGIN
                                                                  UpdateCurrencyFactor;
                                                                  IF ("Currency Factor" <> xRec."Currency Factor") AND NOT CalledFromWhseDoc THEN
                                                                    SkipJobCurrFactorUpdate := NOT ConfirmUpdateCurrencyFactor;
                                                                END;

                                                                IF "Posting Date" <> xRec."Posting Date" THEN
                                                                  IF DeferralHeadersExist THEN
                                                                    ConfirmUpdateDeferralDate;

                                                                IF PurchLinesExist THEN
                                                                  JobUpdatePurchLines(SkipJobCurrFactorUpdate);
                                                              END;

                                                   CaptionML=[ENU=Posting Date;
                                                              ENN=Posting Date] }
    { 21  ;   ;Expected Receipt Date;Date         ;OnValidate=BEGIN
                                                                IF "Expected Receipt Date" <> 0D THEN
                                                                  UpdatePurchLinesByFieldNo(FIELDNO("Expected Receipt Date"),CurrFieldNo <> 0);
                                                              END;

                                                   CaptionML=[ENU=Expected Receipt Date;
                                                              ENN=Expected Receipt Date] }
    { 22  ;   ;Posting Description ;Text100       ;CaptionML=[ENU=Posting Description;
                                                              ENN=Posting Description] }
    { 23  ;   ;Payment Terms Code  ;Code10        ;TableRelation="Payment Terms";
                                                   OnValidate=VAR
                                                                IsHandled@1000 : Boolean;
                                                              BEGIN
                                                                IF ("Payment Terms Code" <> '') AND ("Document Date" <> 0D) THEN BEGIN
                                                                  PaymentTerms.GET("Payment Terms Code");
                                                                  IF IsCreditDocType AND NOT PaymentTerms."Calc. Pmt. Disc. on Cr. Memos" THEN BEGIN
                                                                    IsHandled := FALSE;
                                                                    OnValidatePaymentTermsCodeOnBeforeValidateDueDate(Rec,xRec,CurrFieldNo,IsHandled);
                                                                    IF NOT IsHandled THEN
                                                                      VALIDATE("Due Date","Document Date");
                                                                    VALIDATE("Pmt. Discount Date",0D);
                                                                    VALIDATE("Payment Discount %",0);
                                                                  END ELSE BEGIN
                                                                    IsHandled := FALSE;
                                                                    OnValidatePaymentTermsCodeOnBeforeCalcDueDate(Rec,xRec,FIELDNO("Payment Terms Code"),CurrFieldNo,IsHandled);
                                                                    IF NOT IsHandled THEN
                                                                      "Due Date" := CALCDATE(PaymentTerms."Due Date Calculation","Document Date");
                                                                    IsHandled := FALSE;
                                                                    OnValidatePaymentTermsCodeOnBeforeCalcPmtDiscDate(Rec,xRec,FIELDNO("Payment Terms Code"),CurrFieldNo,IsHandled);
                                                                    IF NOT IsHandled THEN
                                                                      "Pmt. Discount Date" := CALCDATE(PaymentTerms."Discount Date Calculation","Document Date");
                                                                    IF NOT UpdateDocumentDate THEN
                                                                      VALIDATE("Payment Discount %",PaymentTerms."Discount %")
                                                                  END;
                                                                END ELSE BEGIN
                                                                  IsHandled := FALSE;
                                                                  OnValidatePaymentTermsCodeOnBeforeValidateDueDateWhenBlank(Rec,xRec,CurrFieldNo,IsHandled);
                                                                  IF NOT IsHandled THEN
                                                                    VALIDATE("Due Date","Document Date");
                                                                  IF NOT UpdateDocumentDate THEN BEGIN
                                                                    VALIDATE("Pmt. Discount Date",0D);
                                                                    VALIDATE("Payment Discount %",0);
                                                                  END;
                                                                END;
                                                                IF xRec."Payment Terms Code" = "Prepmt. Payment Terms Code" THEN
                                                                  VALIDATE("Prepmt. Payment Terms Code","Payment Terms Code");
                                                              END;

                                                   CaptionML=[ENU=Payment Terms Code;
                                                              ENN=Payment Terms Code] }
    { 24  ;   ;Due Date            ;Date          ;CaptionML=[ENU=Due Date;
                                                              ENN=Due Date] }
    { 25  ;   ;Payment Discount %  ;Decimal       ;OnValidate=BEGIN
                                                                IF NOT (CurrFieldNo IN [0,FIELDNO("Posting Date"),FIELDNO("Document Date")]) THEN
                                                                  TestStatusOpen;
                                                                GLSetup.GET;
                                                                IF "Payment Discount %" < GLSetup."VAT Tolerance %" THEN
                                                                  "VAT Base Discount %" := "Payment Discount %"
                                                                ELSE
                                                                  "VAT Base Discount %" := GLSetup."VAT Tolerance %";
                                                                VALIDATE("VAT Base Discount %");
                                                              END;

                                                   CaptionML=[ENU=Payment Discount %;
                                                              ENN=Payment Discount %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 26  ;   ;Pmt. Discount Date  ;Date          ;CaptionML=[ENU=Pmt. Discount Date;
                                                              ENN=Pmt. Discount Date] }
    { 27  ;   ;Shipment Method Code;Code10        ;TableRelation="Shipment Method";
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                              END;

                                                   CaptionML=[ENU=Shipment Method Code;
                                                              ENN=Shipment Method Code] }
    { 28  ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE (Use As In-Transit=CONST(No));
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF ("Location Code" <> xRec."Location Code") AND
                                                                   (xRec."Buy-from Vendor No." = "Buy-from Vendor No.")
                                                                THEN
                                                                  MessageIfPurchLinesExist(FIELDCAPTION("Location Code"));

                                                                UpdateShipToAddress;
                                                                UpdateInboundWhseHandlingTime;
                                                              END;

                                                   CaptionML=[ENU=Location Code;
                                                              ENN=Location Code] }
    { 29  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1),
                                                                                               Blocked=CONST(No));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 1 Code;
                                                              ENN=Shortcut Dimension 1 Code];
                                                   CaptionClass='1,2,1' }
    { 30  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2),
                                                                                               Blocked=CONST(No));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 2 Code;
                                                              ENN=Shortcut Dimension 2 Code];
                                                   CaptionClass='1,2,2' }
    { 31  ;   ;Vendor Posting Group;Code20        ;TableRelation="Vendor Posting Group";
                                                   CaptionML=[ENU=Vendor Posting Group;
                                                              ENN=Vendor Posting Group];
                                                   Editable=No }
    { 32  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   OnValidate=BEGIN
                                                                IF NOT (CurrFieldNo IN [0,FIELDNO("Posting Date")]) OR ("Currency Code" <> xRec."Currency Code") THEN
                                                                  TestStatusOpen;
                                                                IF (CurrFieldNo <> FIELDNO("Currency Code")) AND ("Currency Code" = xRec."Currency Code") THEN
                                                                  UpdateCurrencyFactor
                                                                ELSE
                                                                  IF "Currency Code" <> xRec."Currency Code" THEN
                                                                    UpdateCurrencyFactor
                                                                  ELSE
                                                                    IF "Currency Code" <> '' THEN BEGIN
                                                                      UpdateCurrencyFactor;
                                                                      IF "Currency Factor" <> xRec."Currency Factor" THEN
                                                                        ConfirmUpdateCurrencyFactor;
                                                                    END;
                                                              END;

                                                   CaptionML=[ENU=Currency Code;
                                                              ENN=Currency Code] }
    { 33  ;   ;Currency Factor     ;Decimal       ;OnValidate=BEGIN
                                                                IF "Currency Factor" <> xRec."Currency Factor" THEN
                                                                  UpdatePurchLinesByFieldNo(FIELDNO("Currency Factor"),CurrFieldNo <> 0);
                                                              END;

                                                   CaptionML=[ENU=Currency Factor;
                                                              ENN=Currency Factor];
                                                   DecimalPlaces=0:15;
                                                   MinValue=0;
                                                   Editable=No }
    { 35  ;   ;Prices Including VAT;Boolean       ;OnValidate=VAR
                                                                PurchLine@1000 : Record 39;
                                                                Currency@1001 : Record 4;
                                                                ConfirmManagement@1006 : Codeunit 27;
                                                                RecalculatePrice@1002 : Boolean;
                                                                VatFactor@1005 : Decimal;
                                                                LineInvDiscAmt@1004 : Decimal;
                                                                InvDiscRounding@1003 : Decimal;
                                                              BEGIN
                                                                TestStatusOpen;

                                                                IF "Prices Including VAT" <> xRec."Prices Including VAT" THEN BEGIN
                                                                  PurchLine.SETRANGE("Document Type","Document Type");
                                                                  PurchLine.SETRANGE("Document No.","No.");
                                                                  PurchLine.SETFILTER("Direct Unit Cost",'<>%1',0);
                                                                  PurchLine.SETFILTER("VAT %",'<>%1',0);
                                                                  IF PurchLine.FIND('-') THEN BEGIN
                                                                    IF GetHideValidationDialog OR NOT GUIALLOWED THEN
                                                                      RecalculatePrice := TRUE
                                                                    ELSE
                                                                      RecalculatePrice :=
                                                                        ConfirmManagement.ConfirmProcess(
                                                                          STRSUBSTNO(
                                                                            Text025 +
                                                                            Text027,
                                                                            FIELDCAPTION("Prices Including VAT"),PurchLine.FIELDCAPTION("Direct Unit Cost")),
                                                                          TRUE);
                                                                    OnAfterConfirmPurchPrice(Rec,PurchLine,RecalculatePrice);
                                                                    PurchLine.SetPurchHeader(Rec);

                                                                    IF "Currency Code" = '' THEN
                                                                      Currency.InitRoundingPrecision
                                                                    ELSE
                                                                      Currency.GET("Currency Code");

                                                                    PurchLine.FINDSET;
                                                                    REPEAT
                                                                      PurchLine.TESTFIELD("Quantity Invoiced",0);
                                                                      PurchLine.TESTFIELD("Prepmt. Amt. Inv.",0);
                                                                      IF NOT RecalculatePrice THEN BEGIN
                                                                        PurchLine."VAT Difference" := 0;
                                                                        PurchLine.UpdateAmounts;
                                                                      END ELSE BEGIN
                                                                        VatFactor := 1 + PurchLine."VAT %" / 100;
                                                                        IF VatFactor = 0 THEN
                                                                          VatFactor := 1;
                                                                        IF NOT "Prices Including VAT" THEN
                                                                          VatFactor := 1 / VatFactor;
                                                                        IF PurchLine."VAT Calculation Type" = PurchLine."VAT Calculation Type"::"Full VAT" THEN
                                                                          VatFactor := 1;
                                                                        PurchLine."Direct Unit Cost" :=
                                                                          ROUND(PurchLine."Direct Unit Cost" * VatFactor,Currency."Unit-Amount Rounding Precision");
                                                                        PurchLine."Line Discount Amount" :=
                                                                          ROUND(
                                                                            PurchLine.Quantity * PurchLine."Direct Unit Cost" * PurchLine."Line Discount %" / 100,
                                                                            Currency."Amount Rounding Precision");
                                                                        LineInvDiscAmt := InvDiscRounding + PurchLine."Inv. Discount Amount" * VatFactor;
                                                                        PurchLine."Inv. Discount Amount" := ROUND(LineInvDiscAmt,Currency."Amount Rounding Precision");
                                                                        InvDiscRounding := LineInvDiscAmt - PurchLine."Inv. Discount Amount";
                                                                        IF PurchLine."VAT Calculation Type" = PurchLine."VAT Calculation Type"::"Full VAT" THEN
                                                                          PurchLine."Line Amount" := PurchLine."Amount Including VAT"
                                                                        ELSE
                                                                          IF "Prices Including VAT" THEN
                                                                            PurchLine."Line Amount" := PurchLine."Amount Including VAT" + PurchLine."Inv. Discount Amount"
                                                                          ELSE
                                                                            PurchLine."Line Amount" := PurchLine.Amount + PurchLine."Inv. Discount Amount";
                                                                        UpdatePrepmtAmounts(PurchLine);
                                                                      END;
                                                                      PurchLine.MODIFY;
                                                                    UNTIL PurchLine.NEXT = 0;
                                                                  END;
                                                                  OnAfterChangePricesIncludingVAT(Rec);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Prices Including VAT;
                                                              ENN=Prices Including VAT] }
    { 37  ;   ;Invoice Disc. Code  ;Code20        ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                MessageIfPurchLinesExist(FIELDCAPTION("Invoice Disc. Code"));
                                                              END;

                                                   CaptionML=[ENU=Invoice Disc. Code;
                                                              ENN=Invoice Disc. Code] }
    { 41  ;   ;Language Code       ;Code10        ;TableRelation=Language;
                                                   OnValidate=BEGIN
                                                                MessageIfPurchLinesExist(FIELDCAPTION("Language Code"));
                                                              END;

                                                   CaptionML=[ENU=Language Code;
                                                              ENN=Language Code] }
    { 43  ;   ;Purchaser Code      ;Code20        ;TableRelation=Salesperson/Purchaser;
                                                   OnValidate=VAR
                                                                ApprovalEntry@1001 : Record 454;
                                                              BEGIN
                                                                ValidatePurchaserOnPurchHeader(Rec,FALSE,FALSE);

                                                                ApprovalEntry.SETRANGE("Table ID",DATABASE::"Purchase Header");
                                                                ApprovalEntry.SETRANGE("Document Type","Document Type");
                                                                ApprovalEntry.SETRANGE("Document No.","No.");
                                                                ApprovalEntry.SETFILTER(Status,'%1|%2',ApprovalEntry.Status::Created,ApprovalEntry.Status::Open);
                                                                IF NOT ApprovalEntry.ISEMPTY THEN
                                                                  ERROR(Text042,FIELDCAPTION("Purchaser Code"));

                                                                CreateDim(
                                                                  DATABASE::"Salesperson/Purchaser","Purchaser Code",
                                                                  DATABASE::Vendor,"Pay-to Vendor No.",
                                                                  DATABASE::Campaign,"Campaign No.",
                                                                  DATABASE::"Responsibility Center","Responsibility Center");
                                                              END;

                                                   CaptionML=[ENU=Purchaser Code;
                                                              ENN=Purchaser Code] }
    { 45  ;   ;Order Class         ;Code10        ;CaptionML=[ENU=Order Class;
                                                              ENN=Order Class] }
    { 46  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Purch. Comment Line" WHERE (Document Type=FIELD(Document Type),
                                                                                                  No.=FIELD(No.),
                                                                                                  Document Line No.=CONST(0)));
                                                   CaptionML=[ENU=Comment;
                                                              ENN=Comment];
                                                   Editable=No }
    { 47  ;   ;No. Printed         ;Integer       ;CaptionML=[ENU=No. Printed;
                                                              ENN=No. Printed];
                                                   Editable=No }
    { 51  ;   ;On Hold             ;Code3         ;CaptionML=[ENU=On Hold;
                                                              ENN=On Hold] }
    { 52  ;   ;Applies-to Doc. Type;Option        ;CaptionML=[ENU=Applies-to Doc. Type;
                                                              ENN=Applies-to Doc. Type];
                                                   OptionCaptionML=[ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund";
                                                                    ENN=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund"];
                                                   OptionString=[ ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund] }
    { 53  ;   ;Applies-to Doc. No. ;Code20        ;OnValidate=BEGIN
                                                                IF "Applies-to Doc. No." <> '' THEN
                                                                  TESTFIELD("Bal. Account No.",'');

                                                                IF ("Applies-to Doc. No." <> xRec."Applies-to Doc. No.") AND (xRec."Applies-to Doc. No." <> '') AND
                                                                   ("Applies-to Doc. No." <> '')
                                                                THEN BEGIN
                                                                  SetAmountToApply("Applies-to Doc. No.","Buy-from Vendor No.");
                                                                  SetAmountToApply(xRec."Applies-to Doc. No.","Buy-from Vendor No.");
                                                                END ELSE
                                                                  IF ("Applies-to Doc. No." <> xRec."Applies-to Doc. No.") AND (xRec."Applies-to Doc. No." = '') THEN
                                                                    SetAmountToApply("Applies-to Doc. No.","Buy-from Vendor No.")
                                                                  ELSE
                                                                    IF ("Applies-to Doc. No." <> xRec."Applies-to Doc. No.") AND ("Applies-to Doc. No." = '') THEN
                                                                      SetAmountToApply(xRec."Applies-to Doc. No.","Buy-from Vendor No.");
                                                              END;

                                                   OnLookup=VAR
                                                              GenJnlLine@1001 : Record 81;
                                                              GenJnlApply@1000 : Codeunit 225;
                                                              ApplyVendEntries@1002 : Page 233;
                                                            BEGIN
                                                              TESTFIELD("Bal. Account No.",'');
                                                              VendLedgEntry.SETCURRENTKEY("Vendor No.",Open,Positive,"Due Date");
                                                              VendLedgEntry.SETRANGE("Vendor No.","Pay-to Vendor No.");
                                                              VendLedgEntry.SETRANGE(Open,TRUE);
                                                              IF "Applies-to Doc. No." <> '' THEN BEGIN
                                                                VendLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
                                                                VendLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
                                                                IF VendLedgEntry.FINDFIRST THEN;
                                                                VendLedgEntry.SETRANGE("Document Type");
                                                                VendLedgEntry.SETRANGE("Document No.");
                                                              END ELSE
                                                                IF "Applies-to Doc. Type" <> 0 THEN BEGIN
                                                                  VendLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
                                                                  IF VendLedgEntry.FINDFIRST THEN;
                                                                  VendLedgEntry.SETRANGE("Document Type");
                                                                END ELSE
                                                                  IF Amount <> 0 THEN BEGIN
                                                                    VendLedgEntry.SETRANGE(Positive,Amount < 0);
                                                                    IF VendLedgEntry.FINDFIRST THEN;
                                                                    VendLedgEntry.SETRANGE(Positive);
                                                                  END;
                                                              ApplyVendEntries.SetPurch(Rec,VendLedgEntry,PurchHeader.FIELDNO("Applies-to Doc. No."));
                                                              ApplyVendEntries.SETTABLEVIEW(VendLedgEntry);
                                                              ApplyVendEntries.SETRECORD(VendLedgEntry);
                                                              ApplyVendEntries.LOOKUPMODE(TRUE);
                                                              IF ApplyVendEntries.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                                                ApplyVendEntries.GetVendLedgEntry(VendLedgEntry);
                                                                GenJnlApply.CheckAgainstApplnCurrency(
                                                                  "Currency Code",VendLedgEntry."Currency Code",GenJnlLine."Account Type"::Vendor,TRUE);
                                                                "Applies-to Doc. Type" := VendLedgEntry."Document Type";
                                                                "Applies-to Doc. No." := VendLedgEntry."Document No.";
                                                                OnAfterAppliesToDocNoOnLookup(Rec,VendLedgEntry);
                                                              END;
                                                              CLEAR(ApplyVendEntries);
                                                            END;

                                                   CaptionML=[ENU=Applies-to Doc. No.;
                                                              ENN=Applies-to Doc. No.] }
    { 55  ;   ;Bal. Account No.    ;Code20        ;TableRelation=IF (Bal. Account Type=CONST(G/L Account)) "G/L Account"
                                                                 ELSE IF (Bal. Account Type=CONST(Bank Account)) "Bank Account";
                                                   OnValidate=BEGIN
                                                                IF "Bal. Account No." <> '' THEN
                                                                  CASE "Bal. Account Type" OF
                                                                    "Bal. Account Type"::"G/L Account":
                                                                      BEGIN
                                                                        GLAcc.GET("Bal. Account No.");
                                                                        GLAcc.CheckGLAcc;
                                                                        GLAcc.TESTFIELD("Direct Posting",TRUE);
                                                                      END;
                                                                    "Bal. Account Type"::"Bank Account":
                                                                      BEGIN
                                                                        BankAcc.GET("Bal. Account No.");
                                                                        BankAcc.TESTFIELD(Blocked,FALSE);
                                                                        BankAcc.TESTFIELD("Currency Code","Currency Code");
                                                                      END;
                                                                  END;
                                                              END;

                                                   CaptionML=[ENU=Bal. Account No.;
                                                              ENN=Bal. Account No.] }
    { 56  ;   ;Recalculate Invoice Disc.;Boolean  ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Purchase Line" WHERE (Document Type=FIELD(Document Type),
                                                                                            Document No.=FIELD(No.),
                                                                                            Recalculate Invoice Disc.=CONST(Yes)));
                                                   CaptionML=[ENU=Recalculate Invoice Disc.;
                                                              ENN=Recalculate Invoice Disc.];
                                                   Editable=No }
    { 57  ;   ;Receive             ;Boolean       ;CaptionML=[ENU=Receive;
                                                              ENN=Receive] }
    { 58  ;   ;Invoice             ;Boolean       ;CaptionML=[ENU=Invoice;
                                                              ENN=Invoice] }
    { 59  ;   ;Print Posted Documents;Boolean     ;CaptionML=[ENU=Print Posted Documents;
                                                              ENN=Print Posted Documents] }
    { 60  ;   ;Amount              ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Purchase Line".Amount WHERE (Document Type=FIELD(Document Type),
                                                                                                 Document No.=FIELD(No.)));
                                                   CaptionML=[ENU=Amount;
                                                              ENN=Amount];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 61  ;   ;Amount Including VAT;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Purchase Line"."Amount Including VAT" WHERE (Document Type=FIELD(Document Type),
                                                                                                                 Document No.=FIELD(No.)));
                                                   CaptionML=[ENU=Amount Including VAT;
                                                              ENN=Amount Including VAT];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 62  ;   ;Receiving No.       ;Code20        ;CaptionML=[ENU=Receiving No.;
                                                              ENN=Receiving No.] }
    { 63  ;   ;Posting No.         ;Code20        ;CaptionML=[ENU=Posting No.;
                                                              ENN=Posting No.] }
    { 64  ;   ;Last Receiving No.  ;Code20        ;TableRelation="Purch. Rcpt. Header";
                                                   CaptionML=[ENU=Last Receiving No.;
                                                              ENN=Last Receiving No.];
                                                   Editable=No }
    { 65  ;   ;Last Posting No.    ;Code20        ;TableRelation="Purch. Inv. Header";
                                                   CaptionML=[ENU=Last Posting No.;
                                                              ENN=Last Posting No.];
                                                   Editable=No }
    { 66  ;   ;Vendor Order No.    ;Code35        ;CaptionML=[ENU=Vendor Order No.;
                                                              ENN=Vendor Order No.] }
    { 67  ;   ;Vendor Shipment No. ;Code35        ;OnValidate=VAR
                                                                WhsePurchRelease@1000 : Codeunit 5772;
                                                              BEGIN
                                                                IF (xRec."Vendor Shipment No." <> "Vendor Shipment No.") AND (Status = Status::Released) AND
                                                                   ("Document Type" IN ["Document Type"::Order,"Document Type"::"Return Order"])
                                                                THEN
                                                                  WhsePurchRelease.UpdateExternalDocNoForReleasedOrder(Rec);
                                                              END;

                                                   CaptionML=[ENU=Vendor Shipment No.;
                                                              ENN=Vendor Shipment No.] }
    { 68  ;   ;Vendor Invoice No.  ;Code35        ;OnValidate=VAR
                                                                VendorLedgerEntry@1000 : Record 25;
                                                              BEGIN
                                                                IF "Vendor Invoice No." <> '' THEN
                                                                  IF FindPostedDocumentWithSameExternalDocNo(VendorLedgerEntry,"Vendor Invoice No.") THEN
                                                                    ShowExternalDocAlreadyExistNotification(VendorLedgerEntry)
                                                                  ELSE
                                                                    RecallExternalDocAlreadyExistsNotification;
                                                              END;

                                                   CaptionML=[ENU=Vendor Invoice No.;
                                                              ENN=Vendor Invoice No.] }
    { 69  ;   ;Vendor Cr. Memo No. ;Code35        ;OnValidate=VAR
                                                                VendorLedgerEntry@1000 : Record 25;
                                                              BEGIN
                                                                IF "Vendor Cr. Memo No." <> '' THEN
                                                                  IF FindPostedDocumentWithSameExternalDocNo(VendorLedgerEntry,"Vendor Cr. Memo No.") THEN
                                                                    ShowExternalDocAlreadyExistNotification(VendorLedgerEntry)
                                                                  ELSE
                                                                    RecallExternalDocAlreadyExistsNotification;
                                                              END;

                                                   CaptionML=[ENU=Vendor Cr. Memo No.;
                                                              ENN=Vendor Cr. Memo No.] }
    { 70  ;   ;VAT Registration No.;Text20        ;CaptionML=[ENU=VAT Registration No.;
                                                              ENN=VAT Registration No.] }
    { 72  ;   ;Sell-to Customer No.;Code20        ;TableRelation=Customer;
                                                   OnValidate=BEGIN
                                                                IF ("Document Type" = "Document Type"::Order) AND
                                                                   (xRec."Sell-to Customer No." <> "Sell-to Customer No.")
                                                                THEN BEGIN
                                                                  PurchLine.SETRANGE("Document Type",PurchLine."Document Type"::Order);
                                                                  PurchLine.SETRANGE("Document No.","No.");
                                                                  PurchLine.SETFILTER("Sales Order Line No.",'<>0');
                                                                  IF NOT PurchLine.ISEMPTY THEN
                                                                    ERROR(
                                                                      YouCannotChangeFieldErr,
                                                                      FIELDCAPTION("Sell-to Customer No."));

                                                                  PurchLine.SETRANGE("Sales Order Line No.");
                                                                  PurchLine.SETFILTER("Special Order Sales Line No.",'<>0');
                                                                  IF NOT PurchLine.ISEMPTY THEN
                                                                    ERROR(
                                                                      YouCannotChangeFieldErr,
                                                                      FIELDCAPTION("Sell-to Customer No."));
                                                                END;

                                                                IF "Sell-to Customer No." = '' THEN
                                                                  UpdateLocationCode('')
                                                                ELSE
                                                                  VALIDATE("Ship-to Code",'');
                                                              END;

                                                   CaptionML=[ENU=Sell-to Customer No.;
                                                              ENN=Sell-to Customer No.] }
    { 73  ;   ;Reason Code         ;Code10        ;TableRelation="Reason Code";
                                                   CaptionML=[ENU=Reason Code;
                                                              ENN=Reason Code] }
    { 74  ;   ;Gen. Bus. Posting Group;Code20     ;TableRelation="Gen. Business Posting Group";
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF (xRec."Buy-from Vendor No." = "Buy-from Vendor No.") AND
                                                                   (xRec."Gen. Bus. Posting Group" <> "Gen. Bus. Posting Group")
                                                                THEN BEGIN
                                                                  IF GenBusPostingGrp.ValidateVatBusPostingGroup(GenBusPostingGrp,"Gen. Bus. Posting Group") THEN
                                                                    "VAT Bus. Posting Group" := GenBusPostingGrp."Def. VAT Bus. Posting Group";
                                                                  RecreatePurchLines(FIELDCAPTION("Gen. Bus. Posting Group"));
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Gen. Bus. Posting Group;
                                                              ENN=Gen. Bus. Posting Group] }
    { 76  ;   ;Transaction Type    ;Code10        ;TableRelation="Transaction Type";
                                                   OnValidate=BEGIN
                                                                UpdatePurchLinesByFieldNo(FIELDNO("Transaction Type"),CurrFieldNo <> 0);
                                                              END;

                                                   CaptionML=[ENU=Transaction Type;
                                                              ENN=Transaction Nature Code] }
    { 77  ;   ;Transport Method    ;Code10        ;TableRelation="Transport Method";
                                                   OnValidate=BEGIN
                                                                UpdatePurchLinesByFieldNo(FIELDNO("Transport Method"),CurrFieldNo <> 0);
                                                              END;

                                                   CaptionML=[ENU=Transport Method;
                                                              ENN=Transport Method] }
    { 78  ;   ;VAT Country/Region Code;Code10     ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=VAT Country/Region Code;
                                                              ENN=VAT Country/Region Code] }
    { 79  ;   ;Buy-from Vendor Name;Text100       ;TableRelation=Vendor.Name;
                                                   OnValidate=VAR
                                                                Vendor@1000 : Record 23;
                                                              BEGIN
                                                                IF ShouldLookForVendorByName("Buy-from Vendor No.") THEN
                                                                  VALIDATE("Buy-from Vendor No.",Vendor.GetVendorNo("Buy-from Vendor Name"));
                                                              END;

                                                   OnLookup=VAR
                                                              Vendor@1000 : Record 23;
                                                            BEGIN
                                                              IF "Buy-from Vendor No." <> '' THEN
                                                                Vendor.GET("Buy-from Vendor No.");

                                                              IF Vendor.LookupVendor(Vendor) THEN BEGIN
                                                                "Buy-from Vendor Name" := Vendor.Name;
                                                                VALIDATE("Buy-from Vendor No.",Vendor."No.");
                                                              END;
                                                            END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Buy-from Vendor Name;
                                                              ENN=Buy-from Vendor Name] }
    { 80  ;   ;Buy-from Vendor Name 2;Text50      ;CaptionML=[ENU=Buy-from Vendor Name 2;
                                                              ENN=Buy-from Vendor Name 2] }
    { 81  ;   ;Buy-from Address    ;Text100       ;OnValidate=BEGIN
                                                                UpdatePayToAddressFromBuyFromAddress(FIELDNO("Pay-to Address"));
                                                                ModifyVendorAddress;
                                                              END;

                                                   CaptionML=[ENU=Buy-from Address;
                                                              ENN=Buy-from Address] }
    { 82  ;   ;Buy-from Address 2  ;Text50        ;OnValidate=BEGIN
                                                                UpdatePayToAddressFromBuyFromAddress(FIELDNO("Pay-to Address 2"));
                                                                ModifyVendorAddress;
                                                              END;

                                                   CaptionML=[ENU=Buy-from Address 2;
                                                              ENN=Buy-from Address 2] }
    { 83  ;   ;Buy-from City       ;Text30        ;TableRelation=IF (Buy-from Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Buy-from Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Buy-from Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(
                                                                  "Buy-from City","Buy-from Post Code","Buy-from County","Buy-from Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                                UpdatePayToAddressFromBuyFromAddress(FIELDNO("Pay-to City"));
                                                                ModifyVendorAddress;
                                                              END;

                                                   OnLookup=BEGIN
                                                              PostCode.LookupPostCode("Buy-from City","Buy-from Post Code","Buy-from County","Buy-from Country/Region Code");
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Buy-from City;
                                                              ENN=Buy-from City] }
    { 84  ;   ;Buy-from Contact    ;Text100       ;OnValidate=BEGIN
                                                                ModifyVendorAddress;
                                                              END;

                                                   OnLookup=VAR
                                                              Contact@1001 : Record 5050;
                                                            BEGIN
                                                              IF "Buy-from Vendor No." = '' THEN
                                                                EXIT;

                                                              Contact.FILTERGROUP(2);
                                                              LookupContact("Buy-from Vendor No.","Buy-from Contact No.",Contact);
                                                              IF PAGE.RUNMODAL(0,Contact) = ACTION::LookupOK THEN
                                                                VALIDATE("Buy-from Contact No.",Contact."No.");
                                                              Contact.FILTERGROUP(0);
                                                            END;

                                                   CaptionML=[ENU=Buy-from Contact;
                                                              ENN=Buy-from Contact] }
    { 85  ;   ;Pay-to Post Code    ;Code20        ;TableRelation=IF (Pay-to Country/Region Code=CONST()) "Post Code"
                                                                 ELSE IF (Pay-to Country/Region Code=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Pay-to Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(
                                                                  "Pay-to City","Pay-to Post Code","Pay-to County","Pay-to Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                                ModifyPayToVendorAddress;
                                                              END;

                                                   OnLookup=BEGIN
                                                              PostCode.LookupPostCode("Pay-to City","Pay-to Post Code","Pay-to County","Pay-to Country/Region Code");
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Pay-to Post Code;
                                                              ENN=Pay-to Postcode] }
    { 86  ;   ;Pay-to County       ;Text30        ;OnValidate=BEGIN
                                                                ModifyPayToVendorAddress;
                                                              END;

                                                   CaptionML=[ENU=Pay-to County;
                                                              ENN=Pay-to County];
                                                   CaptionClass='5,1,' + "Pay-to Country/Region Code" }
    { 87  ;   ;Pay-to Country/Region Code;Code10  ;TableRelation=Country/Region;
                                                   OnValidate=BEGIN
                                                                ModifyPayToVendorAddress;
                                                              END;

                                                   CaptionML=[ENU=Pay-to Country/Region Code;
                                                              ENN=Pay-to Country/Region Code] }
    { 88  ;   ;Buy-from Post Code  ;Code20        ;TableRelation=IF (Buy-from Country/Region Code=CONST()) "Post Code"
                                                                 ELSE IF (Buy-from Country/Region Code=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Buy-from Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(
                                                                  "Buy-from City","Buy-from Post Code","Buy-from County","Buy-from Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                                UpdatePayToAddressFromBuyFromAddress(FIELDNO("Pay-to Post Code"));
                                                                ModifyVendorAddress;
                                                              END;

                                                   OnLookup=BEGIN
                                                              PostCode.LookupPostCode("Buy-from City","Buy-from Post Code","Buy-from County","Buy-from Country/Region Code");
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Buy-from Post Code;
                                                              ENN=Buy-from Postcode] }
    { 89  ;   ;Buy-from County     ;Text30        ;OnValidate=BEGIN
                                                                UpdatePayToAddressFromBuyFromAddress(FIELDNO("Pay-to County"));
                                                                ModifyVendorAddress;
                                                              END;

                                                   CaptionML=[ENU=Buy-from County;
                                                              ENN=Buy-from County];
                                                   CaptionClass='5,1,' + "Buy-from Country/Region Code" }
    { 90  ;   ;Buy-from Country/Region Code;Code10;TableRelation=Country/Region;
                                                   OnValidate=BEGIN
                                                                UpdatePayToAddressFromBuyFromAddress(FIELDNO("Pay-to Country/Region Code"));
                                                                ModifyVendorAddress;
                                                              END;

                                                   CaptionML=[ENU=Buy-from Country/Region Code;
                                                              ENN=Buy-from Country/Region Code] }
    { 91  ;   ;Ship-to Post Code   ;Code20        ;TableRelation=IF (Ship-to Country/Region Code=CONST()) "Post Code"
                                                                 ELSE IF (Ship-to Country/Region Code=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Ship-to Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(
                                                                  "Ship-to City","Ship-to Post Code","Ship-to County","Ship-to Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   OnLookup=BEGIN
                                                              PostCode.LookupPostCode("Ship-to City","Ship-to Post Code","Ship-to County","Ship-to Country/Region Code");
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Ship-to Post Code;
                                                              ENN=Ship-to Postcode] }
    { 92  ;   ;Ship-to County      ;Text30        ;CaptionML=[ENU=Ship-to County;
                                                              ENN=Ship-to County];
                                                   CaptionClass='5,1,' + "Ship-to Country/Region Code" }
    { 93  ;   ;Ship-to Country/Region Code;Code10 ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=Ship-to Country/Region Code;
                                                              ENN=Ship-to Country/Region Code] }
    { 94  ;   ;Bal. Account Type   ;Option        ;CaptionML=[ENU=Bal. Account Type;
                                                              ENN=Bal. Account Type];
                                                   OptionCaptionML=[ENU=G/L Account,Bank Account;
                                                                    ENN=G/L Account,Bank Account];
                                                   OptionString=G/L Account,Bank Account }
    { 95  ;   ;Order Address Code  ;Code10        ;TableRelation="Order Address".Code WHERE (Vendor No.=FIELD(Buy-from Vendor No.));
                                                   OnValidate=BEGIN
                                                                IF "Order Address Code" <> '' THEN BEGIN
                                                                  OrderAddr.GET("Buy-from Vendor No.","Order Address Code");
                                                                  "Buy-from Vendor Name" := OrderAddr.Name;
                                                                  "Buy-from Vendor Name 2" := OrderAddr."Name 2";
                                                                  "Buy-from Address" := OrderAddr.Address;
                                                                  "Buy-from Address 2" := OrderAddr."Address 2";
                                                                  "Buy-from City" := OrderAddr.City;
                                                                  "Buy-from Contact" := OrderAddr.Contact;
                                                                  "Buy-from Post Code" := OrderAddr."Post Code";
                                                                  "Buy-from County" := OrderAddr.County;
                                                                  "Buy-from Country/Region Code" := OrderAddr."Country/Region Code";

                                                                  IF IsCreditDocType THEN BEGIN
                                                                    SetShipToAddress(
                                                                      OrderAddr.Name,OrderAddr."Name 2",OrderAddr.Address,OrderAddr."Address 2",
                                                                      OrderAddr.City,OrderAddr."Post Code",OrderAddr.County,OrderAddr."Country/Region Code");
                                                                    "Ship-to Contact" := OrderAddr.Contact;
                                                                  END
                                                                END ELSE BEGIN
                                                                  GetVend("Buy-from Vendor No.");
                                                                  "Buy-from Vendor Name" := Vend.Name;
                                                                  "Buy-from Vendor Name 2" := Vend."Name 2";
                                                                  CopyBuyFromVendorAddressFieldsFromVendor(Vend,TRUE);

                                                                  IF IsCreditDocType THEN BEGIN
                                                                    "Ship-to Name" := Vend.Name;
                                                                    "Ship-to Name 2" := Vend."Name 2";
                                                                    CopyShipToVendorAddressFieldsFromVendor(Vend,TRUE);
                                                                    "Ship-to Contact" := Vend.Contact;
                                                                    "Shipment Method Code" := Vend."Shipment Method Code";
                                                                    IF Vend."Location Code" <> '' THEN
                                                                      VALIDATE("Location Code",Vend."Location Code");
                                                                  END
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Order Address Code;
                                                              ENN=Order Address Code] }
    { 97  ;   ;Entry Point         ;Code10        ;TableRelation="Entry/Exit Point";
                                                   OnValidate=BEGIN
                                                                UpdatePurchLinesByFieldNo(FIELDNO("Entry Point"),CurrFieldNo <> 0);
                                                              END;

                                                   CaptionML=[ENU=Entry Point;
                                                              ENN=Entry Point] }
    { 98  ;   ;Correction          ;Boolean       ;CaptionML=[ENU=Correction;
                                                              ENN=Correction] }
    { 99  ;   ;Document Date       ;Date          ;OnValidate=BEGIN
                                                                IF xRec."Document Date" <> "Document Date" THEN
                                                                  UpdateDocumentDate := TRUE;
                                                                VALIDATE("Payment Terms Code");
                                                                VALIDATE("Prepmt. Payment Terms Code");
                                                              END;

                                                   CaptionML=[ENU=Document Date;
                                                              ENN=Document Date] }
    { 101 ;   ;Area                ;Code10        ;TableRelation=Area;
                                                   OnValidate=BEGIN
                                                                UpdatePurchLinesByFieldNo(FIELDNO(Area),CurrFieldNo <> 0);
                                                              END;

                                                   CaptionML=[ENU=Area;
                                                              ENN=Area] }
    { 102 ;   ;Transaction Specification;Code10   ;TableRelation="Transaction Specification";
                                                   OnValidate=BEGIN
                                                                UpdatePurchLinesByFieldNo(FIELDNO("Transaction Specification"),CurrFieldNo <> 0);
                                                              END;

                                                   CaptionML=[ENU=Transaction Specification;
                                                              ENN=Transaction Specification] }
    { 104 ;   ;Payment Method Code ;Code10        ;TableRelation="Payment Method";
                                                   OnValidate=BEGIN
                                                                PaymentMethod.INIT;
                                                                IF "Payment Method Code" <> '' THEN
                                                                  PaymentMethod.GET("Payment Method Code");
                                                                "Bal. Account Type" := PaymentMethod."Bal. Account Type";
                                                                "Bal. Account No." := PaymentMethod."Bal. Account No.";
                                                                IF "Bal. Account No." <> '' THEN BEGIN
                                                                  TESTFIELD("Applies-to Doc. No.",'');
                                                                  TESTFIELD("Applies-to ID",'');
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Payment Method Code;
                                                              ENN=Payment Method Code] }
    { 107 ;   ;No. Series          ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=[ENU=No. Series;
                                                              ENN=No. Series];
                                                   Editable=No }
    { 108 ;   ;Posting No. Series  ;Code20        ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                IF "Posting No. Series" <> '' THEN BEGIN
                                                                  GetPurchSetup;
                                                                  TestNoSeries;
                                                                  NoSeriesMgt.TestSeries(GetPostingNoSeriesCode,"Posting No. Series");
                                                                END;
                                                                TESTFIELD("Posting No.",'');
                                                              END;

                                                   OnLookup=BEGIN
                                                              WITH PurchHeader DO BEGIN
                                                                PurchHeader := Rec;
                                                                GetPurchSetup;
                                                                TestNoSeries;
                                                                IF NoSeriesMgt.LookupSeries(GetPostingNoSeriesCode,"Posting No. Series") THEN
                                                                  VALIDATE("Posting No. Series");
                                                                Rec := PurchHeader;
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Posting No. Series;
                                                              ENN=Posting No. Series] }
    { 109 ;   ;Receiving No. Series;Code20        ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                IF "Receiving No. Series" <> '' THEN BEGIN
                                                                  GetPurchSetup;
                                                                  PurchSetup.TESTFIELD("Posted Receipt Nos.");
                                                                  NoSeriesMgt.TestSeries(PurchSetup."Posted Receipt Nos.","Receiving No. Series");
                                                                END;
                                                                TESTFIELD("Receiving No.",'');
                                                              END;

                                                   OnLookup=BEGIN
                                                              WITH PurchHeader DO BEGIN
                                                                PurchHeader := Rec;
                                                                GetPurchSetup;
                                                                PurchSetup.TESTFIELD("Posted Receipt Nos.");
                                                                IF NoSeriesMgt.LookupSeries(PurchSetup."Posted Receipt Nos.","Receiving No. Series") THEN
                                                                  VALIDATE("Receiving No. Series");
                                                                Rec := PurchHeader;
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Receiving No. Series;
                                                              ENN=Receiving No. Series] }
    { 114 ;   ;Tax Area Code       ;Code20        ;TableRelation="Tax Area";
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                MessageIfPurchLinesExist(FIELDCAPTION("Tax Area Code"));
                                                              END;

                                                   CaptionML=[ENU=Tax Area Code;
                                                              ENN=VAT Area Code] }
    { 115 ;   ;Tax Liable          ;Boolean       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                MessageIfPurchLinesExist(FIELDCAPTION("Tax Liable"));
                                                              END;

                                                   CaptionML=[ENU=Tax Liable;
                                                              ENN=VAT Liable] }
    { 116 ;   ;VAT Bus. Posting Group;Code20      ;TableRelation="VAT Business Posting Group";
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF (xRec."Buy-from Vendor No." = "Buy-from Vendor No.") AND
                                                                   (xRec."VAT Bus. Posting Group" <> "VAT Bus. Posting Group")
                                                                THEN
                                                                  RecreatePurchLines(FIELDCAPTION("VAT Bus. Posting Group"));
                                                              END;

                                                   CaptionML=[ENU=VAT Bus. Posting Group;
                                                              ENN=VAT Bus. Posting Group] }
    { 118 ;   ;Applies-to ID       ;Code50        ;OnValidate=VAR
                                                                TempVendLedgEntry@1000 : TEMPORARY Record 25;
                                                                VendEntrySetApplID@1001 : Codeunit 111;
                                                              BEGIN
                                                                IF "Applies-to ID" <> '' THEN
                                                                  TESTFIELD("Bal. Account No.",'');
                                                                IF ("Applies-to ID" <> xRec."Applies-to ID") AND (xRec."Applies-to ID" <> '') THEN BEGIN
                                                                  VendLedgEntry.SETCURRENTKEY("Vendor No.",Open);
                                                                  VendLedgEntry.SETRANGE("Vendor No.","Pay-to Vendor No.");
                                                                  VendLedgEntry.SETRANGE(Open,TRUE);
                                                                  VendLedgEntry.SETRANGE("Applies-to ID",xRec."Applies-to ID");
                                                                  IF VendLedgEntry.FINDFIRST THEN
                                                                    VendEntrySetApplID.SetApplId(VendLedgEntry,TempVendLedgEntry,'');
                                                                  VendLedgEntry.RESET;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Applies-to ID;
                                                              ENN=Applies-to ID] }
    { 119 ;   ;VAT Base Discount % ;Decimal       ;OnValidate=BEGIN
                                                                GLSetup.GET;
                                                                IF "VAT Base Discount %" > GLSetup."VAT Tolerance %" THEN BEGIN
                                                                  IF GetHideValidationDialog OR NOT GUIALLOWED THEN
                                                                    Confirmed := TRUE
                                                                  ELSE
                                                                    Confirmed :=
                                                                      CONFIRM(
                                                                        Text007 +
                                                                        Text008,FALSE,
                                                                        FIELDCAPTION("VAT Base Discount %"),
                                                                        GLSetup.FIELDCAPTION("VAT Tolerance %"),
                                                                        GLSetup.TABLECAPTION);
                                                                  IF NOT Confirmed THEN
                                                                    "VAT Base Discount %" := xRec."VAT Base Discount %";
                                                                END;

                                                                IF ("VAT Base Discount %" = xRec."VAT Base Discount %") AND (CurrFieldNo <> 0) THEN
                                                                  EXIT;

                                                                UpdatePurchAmountLines;
                                                              END;

                                                   CaptionML=[ENU=VAT Base Discount %;
                                                              ENN=VAT Base Discount %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 120 ;   ;Status              ;Option        ;CaptionML=[ENU=Status;
                                                              ENN=Status];
                                                   OptionCaptionML=[ENU=Open,Released,Pending Approval,Pending Prepayment;
                                                                    ENN=Open,Released,Pending Approval,Pending Prepayment];
                                                   OptionString=Open,Released,Pending Approval,Pending Prepayment;
                                                   Editable=No }
    { 121 ;   ;Invoice Discount Calculation;Option;CaptionML=[ENU=Invoice Discount Calculation;
                                                              ENN=Invoice Discount Calculation];
                                                   OptionCaptionML=[ENU=None,%,Amount;
                                                                    ENN=None,%,Amount];
                                                   OptionString=None,%,Amount;
                                                   Editable=No }
    { 122 ;   ;Invoice Discount Value;Decimal     ;CaptionML=[ENU=Invoice Discount Value;
                                                              ENN=Invoice Discount Value];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 123 ;   ;Send IC Document    ;Boolean       ;OnValidate=BEGIN
                                                                IF "Send IC Document" THEN BEGIN
                                                                  TESTFIELD("Buy-from IC Partner Code");
                                                                  TESTFIELD("IC Direction","IC Direction"::Outgoing);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Send IC Document;
                                                              ENN=Send IC Document] }
    { 124 ;   ;IC Status           ;Option        ;CaptionML=[ENU=IC Status;
                                                              ENN=IC Status];
                                                   OptionCaptionML=[ENU=New,Pending,Sent;
                                                                    ENN=New,Pending,Sent];
                                                   OptionString=New,Pending,Sent }
    { 125 ;   ;Buy-from IC Partner Code;Code20    ;TableRelation="IC Partner";
                                                   CaptionML=[ENU=Buy-from IC Partner Code;
                                                              ENN=Buy-from IC Partner Code];
                                                   Editable=No }
    { 126 ;   ;Pay-to IC Partner Code;Code20      ;TableRelation="IC Partner";
                                                   CaptionML=[ENU=Pay-to IC Partner Code;
                                                              ENN=Pay-to IC Partner Code];
                                                   Editable=No }
    { 129 ;   ;IC Direction        ;Option        ;OnValidate=BEGIN
                                                                IF "IC Direction" = "IC Direction"::Incoming THEN
                                                                  "Send IC Document" := FALSE;
                                                              END;

                                                   CaptionML=[ENU=IC Direction;
                                                              ENN=IC Direction];
                                                   OptionCaptionML=[ENU=Outgoing,Incoming;
                                                                    ENN=Outgoing,Incoming];
                                                   OptionString=Outgoing,Incoming }
    { 130 ;   ;Prepayment No.      ;Code20        ;CaptionML=[ENU=Prepayment No.;
                                                              ENN=Prepayment No.] }
    { 131 ;   ;Last Prepayment No. ;Code20        ;TableRelation="Purch. Inv. Header";
                                                   CaptionML=[ENU=Last Prepayment No.;
                                                              ENN=Last Prepayment No.] }
    { 132 ;   ;Prepmt. Cr. Memo No.;Code20        ;CaptionML=[ENU=Prepmt. Cr. Memo No.;
                                                              ENN=Prepmt. Cr. Memo No.] }
    { 133 ;   ;Last Prepmt. Cr. Memo No.;Code20   ;TableRelation="Purch. Cr. Memo Hdr.";
                                                   CaptionML=[ENU=Last Prepmt. Cr. Memo No.;
                                                              ENN=Last Prepmt. Cr. Memo No.] }
    { 134 ;   ;Prepayment %        ;Decimal       ;OnValidate=BEGIN
                                                                IF xRec."Prepayment %" <> "Prepayment %" THEN
                                                                  UpdatePurchLinesByFieldNo(FIELDNO("Prepayment %"),CurrFieldNo <> 0);
                                                              END;

                                                   CaptionML=[ENU=Prepayment %;
                                                              ENN=Prepayment %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 135 ;   ;Prepayment No. Series;Code20       ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                IF "Prepayment No. Series" <> '' THEN BEGIN
                                                                  GetPurchSetup;
                                                                  PurchSetup.TESTFIELD("Posted Prepmt. Inv. Nos.");
                                                                  NoSeriesMgt.TestSeries(GetPostingPrepaymentNoSeriesCode,"Prepayment No. Series");
                                                                END;
                                                                TESTFIELD("Prepayment No.",'');
                                                              END;

                                                   OnLookup=BEGIN
                                                              WITH PurchHeader DO BEGIN
                                                                PurchHeader := Rec;
                                                                GetPurchSetup;
                                                                PurchSetup.TESTFIELD("Posted Prepmt. Inv. Nos.");
                                                                IF NoSeriesMgt.LookupSeries(GetPostingPrepaymentNoSeriesCode,"Prepayment No. Series") THEN
                                                                  VALIDATE("Prepayment No. Series");
                                                                Rec := PurchHeader;
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Prepayment No. Series;
                                                              ENN=Prepayment No. Series] }
    { 136 ;   ;Compress Prepayment ;Boolean       ;InitValue=Yes;
                                                   CaptionML=[ENU=Compress Prepayment;
                                                              ENN=Compress Prepayment] }
    { 137 ;   ;Prepayment Due Date ;Date          ;CaptionML=[ENU=Prepayment Due Date;
                                                              ENN=Prepayment Due Date] }
    { 138 ;   ;Prepmt. Cr. Memo No. Series;Code20 ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                IF "Prepmt. Cr. Memo No. Series" <> '' THEN BEGIN
                                                                  GetPurchSetup;
                                                                  PurchSetup.TESTFIELD("Posted Prepmt. Cr. Memo Nos.");
                                                                  NoSeriesMgt.TestSeries(GetPostingPrepaymentNoSeriesCode,"Prepmt. Cr. Memo No. Series");
                                                                END;
                                                                TESTFIELD("Prepmt. Cr. Memo No.",'');
                                                              END;

                                                   OnLookup=BEGIN
                                                              WITH PurchHeader DO BEGIN
                                                                PurchHeader := Rec;
                                                                GetPurchSetup;
                                                                PurchSetup.TESTFIELD("Posted Prepmt. Cr. Memo Nos.");
                                                                IF NoSeriesMgt.LookupSeries(GetPostingPrepaymentNoSeriesCode,"Prepmt. Cr. Memo No. Series") THEN
                                                                  VALIDATE("Prepmt. Cr. Memo No. Series");
                                                                Rec := PurchHeader;
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Prepmt. Cr. Memo No. Series;
                                                              ENN=Prepmt. Cr. Memo No. Series] }
    { 139 ;   ;Prepmt. Posting Description;Text100;CaptionML=[ENU=Prepmt. Posting Description;
                                                              ENN=Prepmt. Posting Description] }
    { 142 ;   ;Prepmt. Pmt. Discount Date;Date    ;CaptionML=[ENU=Prepmt. Pmt. Discount Date;
                                                              ENN=Prepmt. Pmt. Discount Date] }
    { 143 ;   ;Prepmt. Payment Terms Code;Code10  ;TableRelation="Payment Terms";
                                                   OnValidate=VAR
                                                                PaymentTerms@1000 : Record 3;
                                                                IsHandled@1001 : Boolean;
                                                              BEGIN
                                                                IF ("Prepmt. Payment Terms Code" <> '') AND ("Document Date" <> 0D) THEN BEGIN
                                                                  PaymentTerms.GET("Prepmt. Payment Terms Code");
                                                                  IF IsCreditDocType AND NOT PaymentTerms."Calc. Pmt. Disc. on Cr. Memos" THEN BEGIN
                                                                    VALIDATE("Prepayment Due Date","Document Date");
                                                                    VALIDATE("Prepmt. Pmt. Discount Date",0D);
                                                                    VALIDATE("Prepmt. Payment Discount %",0);
                                                                  END ELSE BEGIN
                                                                    IsHandled := FALSE;
                                                                    OnValidatePaymentTermsCodeOnBeforeCalcDueDate(Rec,xRec,FIELDNO("Prepmt. Payment Terms Code"),CurrFieldNo,IsHandled);
                                                                    IF NOT IsHandled THEN
                                                                      "Prepayment Due Date" := CALCDATE(PaymentTerms."Due Date Calculation","Document Date");
                                                                    IsHandled := FALSE;
                                                                    OnValidatePaymentTermsCodeOnBeforeCalcPmtDiscDate(Rec,xRec,FIELDNO("Prepmt. Payment Terms Code"),CurrFieldNo,IsHandled);
                                                                    IF NOT IsHandled THEN
                                                                      "Prepmt. Pmt. Discount Date" := CALCDATE(PaymentTerms."Discount Date Calculation","Document Date");
                                                                    IF NOT UpdateDocumentDate THEN
                                                                      VALIDATE("Prepmt. Payment Discount %",PaymentTerms."Discount %")
                                                                  END;
                                                                END ELSE BEGIN
                                                                  VALIDATE("Prepayment Due Date","Document Date");
                                                                  IF NOT UpdateDocumentDate THEN BEGIN
                                                                    VALIDATE("Prepmt. Pmt. Discount Date",0D);
                                                                    VALIDATE("Prepmt. Payment Discount %",0);
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Prepmt. Payment Terms Code;
                                                              ENN=Prepmt. Payment Terms Code] }
    { 144 ;   ;Prepmt. Payment Discount %;Decimal ;OnValidate=BEGIN
                                                                IF NOT (CurrFieldNo IN [0,FIELDNO("Posting Date"),FIELDNO("Document Date")]) THEN
                                                                  TestStatusOpen;
                                                                GLSetup.GET;
                                                                IF "Payment Discount %" < GLSetup."VAT Tolerance %" THEN
                                                                  "VAT Base Discount %" := "Payment Discount %"
                                                                ELSE
                                                                  "VAT Base Discount %" := GLSetup."VAT Tolerance %";
                                                                VALIDATE("VAT Base Discount %");
                                                              END;

                                                   CaptionML=[ENU=Prepmt. Payment Discount %;
                                                              ENN=Prepmt. Payment Discount %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 151 ;   ;Quote No.           ;Code20        ;CaptionML=[ENU=Quote No.;
                                                              ENN=Quote No.];
                                                   Editable=No }
    { 160 ;   ;Job Queue Status    ;Option        ;OnLookup=VAR
                                                              JobQueueEntry@1000 : Record 472;
                                                            BEGIN
                                                              IF "Job Queue Status" = "Job Queue Status"::" " THEN
                                                                EXIT;
                                                              JobQueueEntry.ShowStatusMsg("Job Queue Entry ID");
                                                            END;

                                                   CaptionML=[ENU=Job Queue Status;
                                                              ENN=Job Queue Status];
                                                   OptionCaptionML=[ENU=" ,Scheduled for Posting,Error,Posting";
                                                                    ENN=" ,Scheduled for Posting,Error,Posting"];
                                                   OptionString=[ ,Scheduled for Posting,Error,Posting];
                                                   Editable=No }
    { 161 ;   ;Job Queue Entry ID  ;GUID          ;CaptionML=[ENU=Job Queue Entry ID;
                                                              ENN=Job Queue Entry ID];
                                                   Editable=No }
    { 165 ;   ;Incoming Document Entry No.;Integer;TableRelation="Incoming Document";
                                                   OnValidate=VAR
                                                                IncomingDocument@1000 : Record 130;
                                                              BEGIN
                                                                IF "Incoming Document Entry No." = xRec."Incoming Document Entry No." THEN
                                                                  EXIT;
                                                                IF "Incoming Document Entry No." = 0 THEN
                                                                  IncomingDocument.RemoveReferenceToWorkingDocument(xRec."Incoming Document Entry No.")
                                                                ELSE
                                                                  IncomingDocument.SetPurchDoc(Rec);
                                                              END;

                                                   CaptionML=[ENU=Incoming Document Entry No.;
                                                              ENN=Incoming Document Entry No.] }
    { 170 ;   ;Creditor No.        ;Code20        ;CaptionML=[ENU=Creditor No.;
                                                              ENN=Creditor No.] }
    { 171 ;   ;Payment Reference   ;Code50        ;CaptionML=[ENU=Payment Reference;
                                                              ENN=Payment Reference];
                                                   Numeric=Yes }
    { 300 ;   ;A. Rcd. Not Inv. Ex. VAT (LCY);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Purchase Line"."A. Rcd. Not Inv. Ex. VAT (LCY)" WHERE (Document Type=FIELD(Document Type),
                                                                                                                           Document No.=FIELD(No.)));
                                                   CaptionML=[ENU=Amount Received Not Invoiced (LCY);
                                                              ENN=Amount Received Not Invoiced (LCY)] }
    { 301 ;   ;Amt. Rcd. Not Invoiced (LCY);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Purchase Line"."Amt. Rcd. Not Invoiced (LCY)" WHERE (Document Type=FIELD(Document Type),
                                                                                                                         Document No.=FIELD(No.)));
                                                   CaptionML=[ENU=Amount Received Not Invoiced (LCY) Incl. VAT;
                                                              ENN=Amount Received Not Invoiced (LCY) Incl. VAT] }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnValidate=BEGIN
                                                                DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
                                                              END;

                                                   OnLookup=BEGIN
                                                              ShowDocDim;
                                                            END;

                                                   CaptionML=[ENU=Dimension Set ID;
                                                              ENN=Dimension Set ID];
                                                   Editable=No }
    { 1305;   ;Invoice Discount Amount;Decimal    ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Purchase Line"."Inv. Discount Amount" WHERE (Document No.=FIELD(No.),
                                                                                                                 Document Type=FIELD(Document Type)));
                                                   CaptionML=[ENU=Invoice Discount Amount;
                                                              ENN=Invoice Discount Amount];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 5043;   ;No. of Archived Versions;Integer   ;FieldClass=FlowField;
                                                   CalcFormula=Max("Purchase Header Archive"."Version No." WHERE (Document Type=FIELD(Document Type),
                                                                                                                  No.=FIELD(No.),
                                                                                                                  Doc. No. Occurrence=FIELD(Doc. No. Occurrence)));
                                                   CaptionML=[ENU=No. of Archived Versions;
                                                              ENN=No. of Archived Versions];
                                                   Editable=No }
    { 5048;   ;Doc. No. Occurrence ;Integer       ;CaptionML=[ENU=Doc. No. Occurrence;
                                                              ENN=Doc. No. Occurrence] }
    { 5050;   ;Campaign No.        ;Code20        ;TableRelation=Campaign;
                                                   OnValidate=BEGIN
                                                                CreateDim(
                                                                  DATABASE::Campaign,"Campaign No.",
                                                                  DATABASE::Vendor,"Pay-to Vendor No.",
                                                                  DATABASE::"Salesperson/Purchaser","Purchaser Code",
                                                                  DATABASE::"Responsibility Center","Responsibility Center");
                                                              END;

                                                   CaptionML=[ENU=Campaign No.;
                                                              ENN=Campaign No.] }
    { 5052;   ;Buy-from Contact No.;Code20        ;TableRelation=Contact;
                                                   OnValidate=VAR
                                                                ContBusinessRelation@1000 : Record 5054;
                                                                Cont@1002 : Record 5050;
                                                              BEGIN
                                                                TestStatusOpen;

                                                                IF "Buy-from Contact No." <> '' THEN
                                                                  IF Cont.GET("Buy-from Contact No.") THEN
                                                                    Cont.CheckIfPrivacyBlockedGeneric;

                                                                IF ("Buy-from Contact No." <> xRec."Buy-from Contact No.") AND
                                                                   (xRec."Buy-from Contact No." <> '')
                                                                THEN BEGIN
                                                                  IF GetHideValidationDialog OR NOT GUIALLOWED THEN
                                                                    Confirmed := TRUE
                                                                  ELSE
                                                                    Confirmed := CONFIRM(ConfirmChangeQst,FALSE,FIELDCAPTION("Buy-from Contact No."));
                                                                  IF Confirmed THEN BEGIN
                                                                    IF InitFromContact("Buy-from Contact No.","Buy-from Vendor No.",FIELDCAPTION("Buy-from Contact No.")) THEN
                                                                      EXIT
                                                                  END ELSE BEGIN
                                                                    Rec := xRec;
                                                                    EXIT;
                                                                  END;
                                                                END;

                                                                IF ("Buy-from Vendor No." <> '') AND ("Buy-from Contact No." <> '') THEN BEGIN
                                                                  Cont.GET("Buy-from Contact No.");
                                                                  IF ContBusinessRelation.FindByRelation(ContBusinessRelation."Link to Table"::Vendor,"Buy-from Vendor No.") THEN
                                                                    IF ContBusinessRelation."Contact No." <> Cont."Company No." THEN
                                                                      ERROR(Text038,Cont."No.",Cont.Name,"Buy-from Vendor No.");
                                                                END;

                                                                UpdateBuyFromVend("Buy-from Contact No.");
                                                              END;

                                                   OnLookup=VAR
                                                              Cont@1001 : Record 5050;
                                                              ContBusinessRelation@1000 : Record 5054;
                                                            BEGIN
                                                              IF "Buy-from Vendor No." <> '' THEN
                                                                IF Cont.GET("Buy-from Contact No.") THEN
                                                                  Cont.SETRANGE("Company No.",Cont."Company No.")
                                                                ELSE
                                                                  IF ContBusinessRelation.FindByRelation(ContBusinessRelation."Link to Table"::Vendor,"Buy-from Vendor No.") THEN
                                                                    Cont.SETRANGE("Company No.",ContBusinessRelation."Contact No.")
                                                                  ELSE
                                                                    Cont.SETRANGE("No.",'');

                                                              IF "Buy-from Contact No." <> '' THEN
                                                                IF Cont.GET("Buy-from Contact No.") THEN ;
                                                              IF PAGE.RUNMODAL(0,Cont) = ACTION::LookupOK THEN BEGIN
                                                                xRec := Rec;
                                                                VALIDATE("Buy-from Contact No.",Cont."No.");
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Buy-from Contact No.;
                                                              ENN=Buy-from Contact No.] }
    { 5053;   ;Pay-to Contact No.  ;Code20        ;TableRelation=Contact;
                                                   OnValidate=VAR
                                                                ContBusinessRelation@1004 : Record 5054;
                                                                Cont@1002 : Record 5050;
                                                              BEGIN
                                                                TestStatusOpen;

                                                                IF "Pay-to Contact No." <> '' THEN
                                                                  IF Cont.GET("Pay-to Contact No.") THEN
                                                                    Cont.CheckIfPrivacyBlockedGeneric;

                                                                IF ("Pay-to Contact No." <> xRec."Pay-to Contact No.") AND
                                                                   (xRec."Pay-to Contact No." <> '')
                                                                THEN BEGIN
                                                                  IF GetHideValidationDialog OR NOT GUIALLOWED THEN
                                                                    Confirmed := TRUE
                                                                  ELSE
                                                                    Confirmed := CONFIRM(ConfirmChangeQst,FALSE,FIELDCAPTION("Pay-to Contact No."));
                                                                  IF Confirmed THEN BEGIN
                                                                    IF InitFromContact("Pay-to Contact No.","Pay-to Vendor No.",FIELDCAPTION("Pay-to Contact No.")) THEN
                                                                      EXIT
                                                                  END ELSE BEGIN
                                                                    "Pay-to Contact No." := xRec."Pay-to Contact No.";
                                                                    EXIT;
                                                                  END;
                                                                END;

                                                                IF ("Pay-to Vendor No." <> '') AND ("Pay-to Contact No." <> '') THEN BEGIN
                                                                  Cont.GET("Pay-to Contact No.");
                                                                  IF ContBusinessRelation.FindByRelation(ContBusinessRelation."Link to Table"::Vendor,"Pay-to Vendor No.") THEN
                                                                    IF ContBusinessRelation."Contact No." <> Cont."Company No." THEN
                                                                      ERROR(Text038,Cont."No.",Cont.Name,"Pay-to Vendor No.");
                                                                END;

                                                                UpdatePayToVend("Pay-to Contact No.");
                                                              END;

                                                   OnLookup=VAR
                                                              Cont@1000 : Record 5050;
                                                              ContBusinessRelation@1001 : Record 5054;
                                                            BEGIN
                                                              IF "Pay-to Vendor No." <> '' THEN
                                                                IF Cont.GET("Pay-to Contact No.") THEN
                                                                  Cont.SETRANGE("Company No.",Cont."Company No.")
                                                                ELSE
                                                                  IF ContBusinessRelation.FindByRelation(ContBusinessRelation."Link to Table"::Vendor,"Pay-to Vendor No.") THEN
                                                                    Cont.SETRANGE("Company No.",ContBusinessRelation."Contact No.")
                                                                  ELSE
                                                                    Cont.SETRANGE("No.",'');

                                                              IF "Pay-to Contact No." <> '' THEN
                                                                IF Cont.GET("Pay-to Contact No.") THEN ;
                                                              IF PAGE.RUNMODAL(0,Cont) = ACTION::LookupOK THEN BEGIN
                                                                xRec := Rec;
                                                                VALIDATE("Pay-to Contact No.",Cont."No.");
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Pay-to Contact No.;
                                                              ENN=Pay-to Contact No.] }
    { 5700;   ;Responsibility Center;Code10       ;TableRelation="Responsibility Center";
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF NOT UserSetupMgt.CheckRespCenter(1,"Responsibility Center") THEN
                                                                  ERROR(
                                                                    Text028,
                                                                    RespCenter.TABLECAPTION,UserSetupMgt.GetPurchasesFilter);

                                                                UpdateLocationCode('');
                                                                UpdateInboundWhseHandlingTime;

                                                                UpdateShipToAddress;

                                                                CreateDim(
                                                                  DATABASE::"Responsibility Center","Responsibility Center",
                                                                  DATABASE::Vendor,"Pay-to Vendor No.",
                                                                  DATABASE::"Salesperson/Purchaser","Purchaser Code",
                                                                  DATABASE::Campaign,"Campaign No.");

                                                                IF xRec."Responsibility Center" <> "Responsibility Center" THEN BEGIN
                                                                  RecreatePurchLines(FIELDCAPTION("Responsibility Center"));
                                                                  "Assigned User ID" := '';
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Responsibility Center;
                                                              ENN=Responsibility Centre] }
    { 5751;   ;Partially Invoiced  ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Purchase Line" WHERE (Document Type=FIELD(Document Type),
                                                                                            Document No.=FIELD(No.),
                                                                                            Type=FILTER(<>' '),
                                                                                            Location Code=FIELD(Location Filter),
                                                                                            Quantity Invoiced=FILTER(<>0)));
                                                   CaptionML=[ENU=Partially Invoiced;
                                                              ENN=Partially Invoiced];
                                                   Editable=No }
    { 5752;   ;Completely Received ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Min("Purchase Line"."Completely Received" WHERE (Document Type=FIELD(Document Type),
                                                                                                                Document No.=FIELD(No.),
                                                                                                                Type=FILTER(<>' '),
                                                                                                                Location Code=FIELD(Location Filter)));
                                                   CaptionML=[ENU=Completely Received;
                                                              ENN=Completely Received];
                                                   Editable=No }
    { 5753;   ;Posting from Whse. Ref.;Integer    ;AccessByPermission=TableData 14=R;
                                                   CaptionML=[ENU=Posting from Whse. Ref.;
                                                              ENN=Posting from Whse. Ref.] }
    { 5754;   ;Location Filter     ;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation=Location;
                                                   CaptionML=[ENU=Location Filter;
                                                              ENN=Location Filter] }
    { 5790;   ;Requested Receipt Date;Date        ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF "Promised Receipt Date" <> 0D THEN
                                                                  ERROR(
                                                                    Text034,
                                                                    FIELDCAPTION("Requested Receipt Date"),
                                                                    FIELDCAPTION("Promised Receipt Date"));

                                                                IF "Requested Receipt Date" <> xRec."Requested Receipt Date" THEN
                                                                  UpdatePurchLinesByFieldNo(FIELDNO("Requested Receipt Date"),CurrFieldNo <> 0);
                                                              END;

                                                   CaptionML=[ENU=Requested Receipt Date;
                                                              ENN=Requested Receipt Date] }
    { 5791;   ;Promised Receipt Date;Date         ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF "Promised Receipt Date" <> xRec."Promised Receipt Date" THEN
                                                                  UpdatePurchLinesByFieldNo(FIELDNO("Promised Receipt Date"),CurrFieldNo <> 0);
                                                              END;

                                                   CaptionML=[ENU=Promised Receipt Date;
                                                              ENN=Promised Receipt Date] }
    { 5792;   ;Lead Time Calculation;DateFormula  ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                LeadTimeMgt.CheckLeadTimeIsNotNegative("Lead Time Calculation");

                                                                IF "Lead Time Calculation" <> xRec."Lead Time Calculation" THEN
                                                                  UpdatePurchLinesByFieldNo(FIELDNO("Lead Time Calculation"),CurrFieldNo <> 0);
                                                              END;

                                                   AccessByPermission=TableData 120=R;
                                                   CaptionML=[ENU=Lead Time Calculation;
                                                              ENN=Lead Time Calculation] }
    { 5793;   ;Inbound Whse. Handling Time;DateFormula;
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF "Inbound Whse. Handling Time" <> xRec."Inbound Whse. Handling Time" THEN
                                                                  UpdatePurchLinesByFieldNo(FIELDNO("Inbound Whse. Handling Time"),CurrFieldNo <> 0);
                                                              END;

                                                   AccessByPermission=TableData 14=R;
                                                   CaptionML=[ENU=Inbound Whse. Handling Time;
                                                              ENN=Inbound Whse. Handling Time] }
    { 5796;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Date Filter;
                                                              ENN=Date Filter] }
    { 5800;   ;Vendor Authorization No.;Code35    ;CaptionML=[ENU=Vendor Authorization No.;
                                                              ENN=Vendor Authorisation No.] }
    { 5801;   ;Return Shipment No. ;Code20        ;CaptionML=[ENU=Return Shipment No.;
                                                              ENN=Return Shipment No.] }
    { 5802;   ;Return Shipment No. Series;Code20  ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                IF "Return Shipment No. Series" <> '' THEN BEGIN
                                                                  GetPurchSetup;
                                                                  PurchSetup.TESTFIELD("Posted Return Shpt. Nos.");
                                                                  NoSeriesMgt.TestSeries(PurchSetup."Posted Return Shpt. Nos.","Return Shipment No. Series");
                                                                END;
                                                                TESTFIELD("Return Shipment No.",'');
                                                              END;

                                                   OnLookup=BEGIN
                                                              WITH PurchHeader DO BEGIN
                                                                PurchHeader := Rec;
                                                                GetPurchSetup;
                                                                PurchSetup.TESTFIELD("Posted Return Shpt. Nos.");
                                                                IF NoSeriesMgt.LookupSeries(PurchSetup."Posted Return Shpt. Nos.","Return Shipment No. Series") THEN
                                                                  VALIDATE("Return Shipment No. Series");
                                                                Rec := PurchHeader;
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Return Shipment No. Series;
                                                              ENN=Return Shipment No. Series] }
    { 5803;   ;Ship                ;Boolean       ;CaptionML=[ENU=Ship;
                                                              ENN=Ship] }
    { 5804;   ;Last Return Shipment No.;Code20    ;TableRelation="Return Shipment Header";
                                                   CaptionML=[ENU=Last Return Shipment No.;
                                                              ENN=Last Return Shipment No.];
                                                   Editable=No }
    { 8000;   ;Id                  ;GUID          ;CaptionML=[ENU=Id;
                                                              ENN=Id] }
    { 9000;   ;Assigned User ID    ;Code50        ;TableRelation="User Setup";
                                                   OnValidate=BEGIN
                                                                IF NOT UserSetupMgt.CheckRespCenter2(1,"Responsibility Center","Assigned User ID") THEN
                                                                  ERROR(
                                                                    Text049,"Assigned User ID",
                                                                    RespCenter.TABLECAPTION,UserSetupMgt.GetPurchasesFilter2("Assigned User ID"));
                                                              END;

                                                   DataClassification=EndUserIdentifiableInformation;
                                                   CaptionML=[ENU=Assigned User ID;
                                                              ENN=Assigned User ID] }
    { 9001;   ;Pending Approvals   ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Approval Entry" WHERE (Table ID=CONST(38),
                                                                                             Document Type=FIELD(Document Type),
                                                                                             Document No.=FIELD(No.),
                                                                                             Status=FILTER(Open|Created)));
                                                   CaptionML=[ENU=Pending Approvals;
                                                              ENN=Pending Approvals] }
    { 50000;  ;Remarks             ;Text150       ;Description=Santosh }
    { 50001;  ;License Start Date  ;Date          ;DataClassification=ToBeClassified;
                                                   Description=Santosh }
    { 50002;  ;License End Date    ;Date          ;DataClassification=ToBeClassified;
                                                   Description=Santosh }
  }
  KEYS
  {
    {    ;Document Type,No.                       ;Clustered=Yes }
    {    ;No.,Document Type                        }
    {    ;Document Type,Buy-from Vendor No.        }
    {    ;Document Type,Pay-to Vendor No.          }
    {    ;Buy-from Vendor No.                      }
    {    ;Incoming Document Entry No.              }
    {    ;Document Date                            }
    {    ;Status,Expected Receipt Date,Location Code,Responsibility Center }
    {    ;Assigned User ID                         }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text003@1003 : TextConst 'ENU=You cannot rename a %1.;ENN=You cannot rename a %1.';
      ConfirmChangeQst@1004 : TextConst '@@@="%1 = a Field Caption like Currency Code";ENU=Do you want to change %1?;ENN=Do you want to change %1?';
      Text005@1005 : TextConst 'ENU=You cannot reset %1 because the document still has one or more lines.;ENN=You cannot reset %1 because the document still has one or more lines.';
      YouCannotChangeFieldErr@1006 : TextConst '@@@=%1 - fieldcaption;ENU=You cannot change %1 because the order is associated with one or more sales orders.;ENN=You cannot change %1 because the order is associated with one or more sales orders.';
      Text007@1007 : TextConst 'ENU=%1 is greater than %2 in the %3 table.\;ENN=%1 is greater than %2 in the %3 table.\';
      Text008@1008 : TextConst 'ENU=Confirm change?;ENN=Confirm change?';
      Text009@1009 : TextConst '@@@="%1 = Document No.";ENU=Deleting this document will cause a gap in the number series for receipts. An empty receipt %1 will be created to fill this gap in the number series.\\Do you want to continue?;ENN=Deleting this document will cause a gap in the number series for receipts. An empty receipt %1 will be created to fill this gap in the number series.\\Do you want to continue?';
      Text012@1012 : TextConst '@@@="%1 = Document No.";ENU=Deleting this document will cause a gap in the number series for posted invoices. An empty posted invoice %1 will be created to fill this gap in the number series.\\Do you want to continue?;ENN=Deleting this document will cause a gap in the number series for posted invoices. An empty posted invoice %1 will be created to fill this gap in the number series.\\Do you want to continue?';
      Text014@1014 : TextConst '@@@="%1 = Document No.";ENU=Deleting this document will cause a gap in the number series for posted credit memos. An empty posted credit memo %1 will be created to fill this gap in the number series.\\Do you want to continue?;ENN=Deleting this document will cause a gap in the number series for posted credit memos. An empty posted credit memo %1 will be created to fill this gap in the number series.\\Do you want to continue?';
      RecreatePurchLinesMsg@1016 : TextConst '@@@=%1: FieldCaption;ENU=If you change %1, the existing purchase lines will be deleted and new purchase lines based on the new information in the header will be created.\\Do you want to continue?;ENN=If you change %1, the existing purchase lines will be deleted and new purchase lines based on the new information in the header will be created.\\Do you want to continue?';
      ResetItemChargeAssignMsg@1093 : TextConst '@@@=%1: FieldCaption;ENU=If you change %1, the existing purchase lines will be deleted and new purchase lines based on the new information in the header will be created.\The amount of the item charge assignment will be reset to 0.\\Do you want to continue?;ENN=If you change %1, the existing purchase lines will be deleted and new purchase lines based on the new information in the header will be created.\The amount of the item charge assignment will be reset to 0.\\Do you want to continue?';
      LinesNotUpdatedMsg@1018 : TextConst '@@@=You have changed Posting Date on the purchase header, but it has not been changed on the existing purchase lines.;ENU=You have changed %1 on the purchase header, but it has not been changed on the existing purchase lines.;ENN=You have changed %1 on the purchase header, but it has not been changed on the existing purchase lines.';
      Text020@1019 : TextConst 'ENU=You must update the existing purchase lines manually.;ENN=You must update the existing purchase lines manually.';
      AffectExchangeRateMsg@1020 : TextConst 'ENU=The change may affect the exchange rate that is used for price calculation on the purchase lines.;ENN=The change may affect the exchange rate that is used for price calculation on the purchase lines.';
      Text022@1021 : TextConst 'ENU=Do you want to update the exchange rate?;ENN=Do you want to update the exchange rate?';
      Text023@1022 : TextConst 'ENU=You cannot delete this document. Your identification is set up to process from %1 %2 only.;ENN=You cannot delete this document. Your identification is set up to process from %1 %2 only.';
      Text025@1024 : TextConst 'ENU="You have modified the %1 field. Note that the recalculation of VAT may cause penny differences, so you must check the amounts afterwards. ";ENN="You have modified the %1 field. Note that the recalculation of VAT may cause penny differences, so you must check the amounts afterwards. "';
      Text027@1026 : TextConst 'ENU=Do you want to update the %2 field on the lines to reflect the new value of %1?;ENN=Do you want to update the %2 field on the lines to reflect the new value of %1?';
      Text028@1027 : TextConst 'ENU=Your identification is set up to process from %1 %2 only.;ENN=Your identification is set up to process from %1 %2 only.';
      Text029@1028 : TextConst '@@@="%1 = Document No.";ENU=Deleting this document will cause a gap in the number series for return shipments. An empty return shipment %1 will be created to fill this gap in the number series.\\Do you want to continue?;ENN=Deleting this document will cause a gap in the number series for return shipments. An empty return shipment %1 will be created to fill this gap in the number series.\\Do you want to continue?';
      Text032@1031 : TextConst '@@@=You have modified Currency Factor.\\Do you want to update the lines?;ENU=You have modified %1.\\Do you want to update the lines?;ENN=You have modified %1.\\Do you want to update the lines?';
      PurchSetup@1033 : Record 312;
      GLSetup@1034 : Record 98;
      GLAcc@1035 : Record 15;
      PurchLine@1036 : Record 39;
      xPurchLine@1080 : Record 39;
      VendLedgEntry@1037 : Record 25;
      Vend@1038 : Record 23;
      PaymentTerms@1039 : Record 3;
      PaymentMethod@1040 : Record 289;
      CurrExchRate@1041 : Record 330;
      PurchHeader@1042 : Record 38;
      PurchCommentLine@1043 : Record 43;
      Cust@1045 : Record 18;
      CompanyInfo@1046 : Record 79;
      PostCode@1047 : Record 225;
      OrderAddr@1048 : Record 224;
      BankAcc@1049 : Record 270;
      PurchRcptHeader@1050 : Record 120;
      PurchInvHeader@1051 : Record 122;
      PurchCrMemoHeader@1052 : Record 124;
      ReturnShptHeader@1053 : Record 6650;
      PurchInvHeaderPrepmt@1090 : Record 122;
      PurchCrMemoHeaderPrepmt@1089 : Record 124;
      GenBusPostingGrp@1054 : Record 250;
      RespCenter@1056 : Record 5714;
      Location@1057 : Record 14;
      WhseRequest@1058 : Record 5765;
      InvtSetup@1059 : Record 313;
      SalespersonPurchaser@1932 : Record 13;
      NoSeriesMgt@1060 : Codeunit 396;
      DimMgt@1065 : Codeunit 408;
      ApprovalsMgmt@1082 : Codeunit 1535;
      UserSetupMgt@1066 : Codeunit 5700;
      LeadTimeMgt@1002 : Codeunit 5404;
      PostingSetupMgt@1023 : Codeunit 48;
      CurrencyDate@1069 : Date;
      HideValidationDialog@1070 : Boolean;
      Confirmed@1071 : Boolean;
      Text034@1072 : TextConst 'ENU=You cannot change the %1 when the %2 has been filled in.;ENN=You cannot change the %1 when the %2 has been filled in.';
      Text037@1076 : TextConst 'ENU=Contact %1 %2 is not related to vendor %3.;ENN=Contact %1 %2 is not related to vendor %3.';
      Text038@1075 : TextConst 'ENU=Contact %1 %2 is related to a different company than vendor %3.;ENN=Contact %1 %2 is related to a different company than vendor %3.';
      Text039@1077 : TextConst 'ENU=Contact %1 %2 is not related to a vendor.;ENN=Contact %1 %2 is not related to a vendor.';
      SkipBuyFromContact@1030 : Boolean;
      SkipPayToContact@1078 : Boolean;
      Text040@1079 : TextConst 'ENU="You can not change the %1 field because %2 %3 has %4 = %5 and the %6 has already been assigned %7 %8.";ENN="You can not change the %1 field because %2 %3 has %4 = %5 and the %6 has already been assigned %7 %8."';
      Text042@1084 : TextConst 'ENU=You must cancel the approval process if you wish to change the %1.;ENN=You must cancel the approval process if you wish to change the %1.';
      Text045@1086 : TextConst 'ENU=Deleting this document will cause a gap in the number series for prepayment invoices. An empty prepayment invoice %1 will be created to fill this gap in the number series.\\Do you want to continue?;ENN=Deleting this document will cause a gap in the number series for prepayment invoices. An empty prepayment invoice %1 will be created to fill this gap in the number series.\\Do you want to continue?';
      Text046@1087 : TextConst 'ENU=Deleting this document will cause a gap in the number series for prepayment credit memos. An empty prepayment credit memo %1 will be created to fill this gap in the number series.\\Do you want to continue?;ENN=Deleting this document will cause a gap in the number series for prepayment credit memos. An empty prepayment credit memo %1 will be created to fill this gap in the number series.\\Do you want to continue?';
      Text049@1092 : TextConst 'ENU=%1 is set up to process from %2 %3 only.;ENN=%1 is set up to process from %2 %3 only.';
      Text050@1067 : TextConst 'ENU=Reservations exist for this order. These reservations will be canceled if a date conflict is caused by this change.\\Do you want to continue?;ENN=Reservations exist for this order. These reservations will be cancelled if a date conflict is caused by this change.\\Do you want to continue?';
      Text051@1025 : TextConst 'ENU=You may have changed a dimension.\\Do you want to update the lines?;ENN=You may have changed a dimension.\\Do you want to update the lines?';
      Text052@1091 : TextConst 'ENU=The %1 field on the purchase order %2 must be the same as on sales order %3.;ENN=The %1 field on the purchase order %2 must be the same as on sales order %3.';
      UpdateDocumentDate@1120 : Boolean;
      PrepaymentInvoicesNotPaidErr@1074 : TextConst '@@@=You cannot post the document of type Order with the number 1001 before all related prepayment invoices are posted.;ENU=You cannot post the document of type %1 with the number %2 before all related prepayment invoices are posted.;ENN=You cannot post the document of type %1 with the number %2 before all related prepayment invoices are posted.';
      Text054@1096 : TextConst 'ENU=There are unpaid prepayment invoices that are related to the document of type %1 with the number %2.;ENN=There are unpaid prepayment invoices that are related to the document of type %1 with the number %2.';
      DeferralLineQst@1055 : TextConst '@@@="%1=The posting date on the document.";ENU=You have changed the %1 on the purchase header, do you want to update the deferral schedules for the lines with this date?;ENN=You have changed the %1 on the purchase header, do you want to update the deferral schedules for the lines with this date?';
      PostedDocsToPrintCreatedMsg@1083 : TextConst 'ENU=One or more related posted documents have been generated during deletion to fill gaps in the posting number series. You can view or print the documents from the respective document archive.;ENN=One or more related posted documents have been generated during deletion to fill gaps in the posting number series. You can view or print the documents from the respective document archive.';
      BuyFromVendorTxt@1010 : TextConst 'ENU=Buy-from Vendor;ENN=Buy-from Vendor';
      PayToVendorTxt@1011 : TextConst 'ENU=Pay-to Vendor;ENN=Pay-to Vendor';
      DocumentNotPostedClosePageQst@1013 : TextConst 'ENU=The document has been saved but is not yet posted.\\Are you sure you want to exit?;ENN=The document has been saved but is not yet posted.\\Are you sure you want to exit?';
      SelectNoSeriesAllowed@1015 : Boolean;
      MixedDropshipmentErr@1001 : TextConst 'ENU=You cannot print the purchase order because it contains one or more lines for drop shipment in addition to regular purchase lines.;ENN=You cannot print the purchase order because it contains one or more lines for drop shipment in addition to regular purchase lines.';
      ModifyVendorAddressNotificationLbl@1062 : TextConst 'ENU=Update the address;ENN=Update the address';
      DontShowAgainActionLbl@1064 : TextConst 'ENU=Don''t show again;ENN=Don''t show again';
      ModifyVendorAddressNotificationMsg@1063 : TextConst '@@@="%1=Vendor name";ENU=The address you entered for %1 is different from the Vendor''s existing address.;ENN=The address you entered for %1 is different from the Vendor''s existing address.';
      ModifyBuyFromVendorAddressNotificationNameTxt@1106 : TextConst 'ENU=Update Buy-from Vendor Address;ENN=Update Buy-from Vendor Address';
      ModifyBuyFromVendorAddressNotificationDescriptionTxt@1098 : TextConst 'ENU=Warn if the Buy-from address on sales documents is different from the Vendor''s existing address.;ENN=Warn if the Buy-from address on sales documents is different from the Vendor''s existing address.';
      ModifyPayToVendorAddressNotificationNameTxt@1102 : TextConst 'ENU=Update Pay-to Vendor Address;ENN=Update Pay-to Vendor Address';
      ModifyPayToVendorAddressNotificationDescriptionTxt@1099 : TextConst 'ENU=Warn if the Pay-to address on sales documents is different from the Vendor''s existing address.;ENN=Warn if the Pay-to address on sales documents is different from the Vendor''s existing address.';
      PurchaseAlreadyExistsTxt@1029 : TextConst '@@@="%1 = Document Type; %2 = Document No.";ENU=Purchase %1 %2 already exists for this vendor.;ENN=Purchase %1 %2 already exists for this vendor.';
      ShowVendLedgEntryTxt@1044 : TextConst 'ENU=Show the vendor ledger entry.;ENN=Show the vendor ledger entry.';
      ShowDocAlreadyExistNotificationNameTxt@1068 : TextConst 'ENU=Purchase document with same external document number already exists.;ENN=Purchase document with same external document number already exists.';
      ShowDocAlreadyExistNotificationDescriptionTxt@1061 : TextConst 'ENU=Warn if purchase document with same external document number already exists.;ENN=Warn if purchase document with same external document number already exists.';
      DuplicatedCaptionsNotAllowedErr@1081 : TextConst 'ENU=Field captions must not be duplicated when using this method. Use UpdatePurchLinesByFieldNo instead.;ENN=Field captions must not be duplicated when using this method. Use UpdatePurchLinesByFieldNo instead.';
      MissingExchangeRatesQst@1032 : TextConst '@@@=%1 - currency code, %2 - posting date;ENU=There are no exchange rates for currency %1 and date %2. Do you want to add them now? Otherwise, the last change you made will be reverted.;ENN=There are no exchange rates for currency %1 and date %2. Do you want to add them now? Otherwise, the last change you made will be reverted.';
      SplitMessageTxt@1085 : TextConst '@@@=Some message text 1.\Some message text 2.;ENU=%1\%2;ENN=%1\%2';
      StatusCheckSuspended@1073 : Boolean;
      RecreatePurchaseLinesCancelErr@1017 : TextConst '@@@=%1 - Field Name, Sample:You must delete the existing purchase lines before you can change Currency Code.;ENU=You must delete the existing purchase lines before you can change %1.;ENN=You must delete the existing purchase lines before you can change %1.';
      CalledFromWhseDoc@1000 : Boolean;

    [External]
    PROCEDURE InitInsert@41();
    VAR
      IsHandled@1000 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeInitInsert(Rec,xRec,IsHandled);
      IF NOT IsHandled THEN
        IF "No." = '' THEN BEGIN
          TestNoSeries;
          NoSeriesMgt.InitSeries(GetNoSeriesCode,xRec."No. Series","Posting Date","No.","No. Series");
        END;

      OnInitInsertOnBeforeInitRecord(Rec,xRec);
      InitRecord;
    END;

    [External]
    PROCEDURE InitRecord@10();
    VAR
      ArchiveManagement@1000 : Codeunit 5063;
      IsHandled@1001 : Boolean;
    BEGIN
      GetPurchSetup;
      IsHandled := FALSE;
      OnBeforeInitRecord(Rec,IsHandled);
      IF NOT IsHandled THEN
        CASE "Document Type" OF
          "Document Type"::Quote,"Document Type"::Order:
            BEGIN
              NoSeriesMgt.SetDefaultSeries("Posting No. Series",PurchSetup."Posted Invoice Nos.");
              NoSeriesMgt.SetDefaultSeries("Receiving No. Series",PurchSetup."Posted Receipt Nos.");
              IF "Document Type" = "Document Type"::Order THEN BEGIN
                NoSeriesMgt.SetDefaultSeries("Prepayment No. Series",PurchSetup."Posted Prepmt. Inv. Nos.");
                NoSeriesMgt.SetDefaultSeries("Prepmt. Cr. Memo No. Series",PurchSetup."Posted Prepmt. Cr. Memo Nos.");
              END;
            END;
          "Document Type"::Invoice:
            BEGIN
              IF ("No. Series" <> '') AND
                 (PurchSetup."Invoice Nos." = PurchSetup."Posted Invoice Nos.")
              THEN
                "Posting No. Series" := "No. Series"
              ELSE
                NoSeriesMgt.SetDefaultSeries("Posting No. Series",PurchSetup."Posted Invoice Nos.");
              IF PurchSetup."Receipt on Invoice" THEN
                NoSeriesMgt.SetDefaultSeries("Receiving No. Series",PurchSetup."Posted Receipt Nos.");
            END;
          "Document Type"::"Return Order":
            BEGIN
              NoSeriesMgt.SetDefaultSeries("Posting No. Series",PurchSetup."Posted Credit Memo Nos.");
              NoSeriesMgt.SetDefaultSeries("Return Shipment No. Series",PurchSetup."Posted Return Shpt. Nos.");
            END;
          "Document Type"::"Credit Memo":
            BEGIN
              IF ("No. Series" <> '') AND
                 (PurchSetup."Credit Memo Nos." = PurchSetup."Posted Credit Memo Nos.")
              THEN
                "Posting No. Series" := "No. Series"
              ELSE
                NoSeriesMgt.SetDefaultSeries("Posting No. Series",PurchSetup."Posted Credit Memo Nos.");
              IF PurchSetup."Return Shipment on Credit Memo" THEN
                NoSeriesMgt.SetDefaultSeries("Return Shipment No. Series",PurchSetup."Posted Return Shpt. Nos.");
            END;
        END;

      IF "Document Type" = "Document Type"::Invoice THEN
        "Expected Receipt Date" := WORKDATE;

      IF NOT ("Document Type" IN ["Document Type"::"Blanket Order","Document Type"::Quote]) AND
         ("Posting Date" = 0D)
      THEN
        "Posting Date" := WORKDATE;

      IF PurchSetup."Default Posting Date" = PurchSetup."Default Posting Date"::"No Date" THEN
        "Posting Date" := 0D;

      "Order Date" := WORKDATE;
      "Document Date" := WORKDATE;

      ValidateEmptySellToCustomerAndLocation;

      IF IsCreditDocType THEN BEGIN
        GLSetup.GET;
        Correction := GLSetup."Mark Cr. Memos as Corrections";
      END;

      "Posting Description" := FORMAT("Document Type") + ' ' + "No.";

      UpdateInboundWhseHandlingTime;

      "Responsibility Center" := UserSetupMgt.GetRespCenter(1,"Responsibility Center");
      "Doc. No. Occurrence" := ArchiveManagement.GetNextOccurrenceNo(DATABASE::"Purchase Header","Document Type","No.");

      OnAfterInitRecord(Rec);
    END;

    LOCAL PROCEDURE InitNoSeries@52();
    BEGIN
      IF xRec."Receiving No." <> '' THEN BEGIN
        "Receiving No. Series" := xRec."Receiving No. Series";
        "Receiving No." := xRec."Receiving No.";
      END;
      IF xRec."Posting No." <> '' THEN BEGIN
        "Posting No. Series" := xRec."Posting No. Series";
        "Posting No." := xRec."Posting No.";
      END;
      IF xRec."Return Shipment No." <> '' THEN BEGIN
        "Return Shipment No. Series" := xRec."Return Shipment No. Series";
        "Return Shipment No." := xRec."Return Shipment No.";
      END;
      IF xRec."Prepayment No." <> '' THEN BEGIN
        "Prepayment No. Series" := xRec."Prepayment No. Series";
        "Prepayment No." := xRec."Prepayment No.";
      END;
      IF xRec."Prepmt. Cr. Memo No." <> '' THEN BEGIN
        "Prepmt. Cr. Memo No. Series" := xRec."Prepmt. Cr. Memo No. Series";
        "Prepmt. Cr. Memo No." := xRec."Prepmt. Cr. Memo No.";
      END;

      OnAfterInitNoSeries(Rec);
    END;

    [External]
    PROCEDURE AssistEdit@2(OldPurchHeader@1000 : Record 38) : Boolean;
    BEGIN
      GetPurchSetup;
      TestNoSeries;
      IF NoSeriesMgt.SelectSeries(GetNoSeriesCode,OldPurchHeader."No. Series","No. Series") THEN BEGIN
        TestNoSeries;
        NoSeriesMgt.SetSeries("No.");
        EXIT(TRUE);
      END;
    END;

    [External]
    PROCEDURE TestNoSeries@6();
    VAR
      IsHandled@1000 : Boolean;
    BEGIN
      GetPurchSetup;
      IsHandled := FALSE;
      OnBeforeTestNoSeries(Rec,IsHandled);
      IF NOT IsHandled THEN
        CASE "Document Type" OF
          "Document Type"::Quote:
            PurchSetup.TESTFIELD("Quote Nos.");
          "Document Type"::Order:
            PurchSetup.TESTFIELD("Order Nos.");
          "Document Type"::Invoice:
            BEGIN
              PurchSetup.TESTFIELD("Invoice Nos.");
              PurchSetup.TESTFIELD("Posted Invoice Nos.");
            END;
          "Document Type"::"Return Order":
            PurchSetup.TESTFIELD("Return Order Nos.");
          "Document Type"::"Credit Memo":
            BEGIN
              PurchSetup.TESTFIELD("Credit Memo Nos.");
              PurchSetup.TESTFIELD("Posted Credit Memo Nos.");
            END;
          "Document Type"::"Blanket Order":
            PurchSetup.TESTFIELD("Blanket Order Nos.");
        END;

      OnAfterTestNoSeries(Rec);
    END;

    [External]
    PROCEDURE GetNoSeriesCode@9() : Code[20];
    VAR
      NoSeriesCode@1001 : Code[20];
    BEGIN
      CASE "Document Type" OF
        "Document Type"::Quote:
          NoSeriesCode := PurchSetup."Quote Nos.";
        "Document Type"::Order:
          NoSeriesCode := PurchSetup."Order Nos.";
        "Document Type"::Invoice:
          NoSeriesCode := PurchSetup."Invoice Nos.";
        "Document Type"::"Return Order":
          NoSeriesCode := PurchSetup."Return Order Nos.";
        "Document Type"::"Credit Memo":
          NoSeriesCode := PurchSetup."Credit Memo Nos.";
        "Document Type"::"Blanket Order":
          NoSeriesCode := PurchSetup."Blanket Order Nos.";
      END;
      OnAfterGetNoSeriesCode(Rec,PurchSetup,NoSeriesCode);
      EXIT(NoSeriesMgt.GetNoSeriesWithCheck(NoSeriesCode,SelectNoSeriesAllowed,"No. Series"));
    END;

    LOCAL PROCEDURE GetPostingNoSeriesCode@8() PostingNos : Code[20];
    BEGIN
      IF IsCreditDocType THEN
        PostingNos := PurchSetup."Posted Credit Memo Nos."
      ELSE
        PostingNos := PurchSetup."Posted Invoice Nos.";

      OnAfterGetPostingNoSeriesCode(Rec,PostingNos);
    END;

    LOCAL PROCEDURE GetPostingPrepaymentNoSeriesCode@37() PostingNos : Code[20];
    BEGIN
      IF IsCreditDocType THEN
        PostingNos := PurchSetup."Posted Prepmt. Cr. Memo Nos."
      ELSE
        PostingNos := PurchSetup."Posted Prepmt. Inv. Nos.";

      OnAfterGetPrepaymentPostingNoSeriesCode(Rec,PostingNos);
    END;

    LOCAL PROCEDURE TestNoSeriesDate@40(No@1000 : Code[20];NoSeriesCode@1001 : Code[20];NoCapt@1002 : Text[1024];NoSeriesCapt@1004 : Text[1024]);
    VAR
      NoSeries@1005 : Record 308;
    BEGIN
      IF (No <> '') AND (NoSeriesCode <> '') THEN BEGIN
        NoSeries.GET(NoSeriesCode);
        IF NoSeries."Date Order" THEN
          ERROR(
            Text040,
            FIELDCAPTION("Posting Date"),NoSeriesCapt,NoSeriesCode,
            NoSeries.FIELDCAPTION("Date Order"),NoSeries."Date Order","Document Type",
            NoCapt,No);
      END;
    END;

    [External]
    PROCEDURE ConfirmDeletion@11() : Boolean;
    VAR
      SourceCode@1001 : Record 230;
      SourceCodeSetup@1000 : Record 242;
      PostPurchDelete@1002 : Codeunit 364;
      ConfirmManagement@1003 : Codeunit 27;
    BEGIN
      SourceCodeSetup.GET;
      SourceCodeSetup.TESTFIELD("Deleted Document");
      SourceCode.GET(SourceCodeSetup."Deleted Document");

      PostPurchDelete.InitDeleteHeader(
        Rec,PurchRcptHeader,PurchInvHeader,PurchCrMemoHeader,
        ReturnShptHeader,PurchInvHeaderPrepmt,PurchCrMemoHeaderPrepmt,SourceCode.Code);

      IF PurchRcptHeader."No." <> '' THEN
        IF NOT ConfirmManagement.ConfirmProcess(STRSUBSTNO(Text009,PurchRcptHeader."No."),TRUE) THEN
          EXIT;
      IF PurchInvHeader."No." <> '' THEN
        IF NOT ConfirmManagement.ConfirmProcess(STRSUBSTNO(Text012,PurchInvHeader."No."),TRUE) THEN
          EXIT;
      IF PurchCrMemoHeader."No." <> '' THEN
        IF NOT ConfirmManagement.ConfirmProcess(STRSUBSTNO(Text014,PurchCrMemoHeader."No."),TRUE) THEN
          EXIT;
      IF ReturnShptHeader."No." <> '' THEN
        IF NOT ConfirmManagement.ConfirmProcess(STRSUBSTNO(Text029,ReturnShptHeader."No."),TRUE) THEN
          EXIT;
      IF "Prepayment No." <> '' THEN
        IF NOT ConfirmManagement.ConfirmProcess(STRSUBSTNO(Text045,PurchInvHeaderPrepmt."No."),TRUE) THEN
          EXIT;
      IF "Prepmt. Cr. Memo No." <> '' THEN
        IF NOT ConfirmManagement.ConfirmProcess(STRSUBSTNO(Text046,PurchCrMemoHeaderPrepmt."No."),TRUE) THEN
          EXIT;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetPurchSetup@176();
    BEGIN
      PurchSetup.GET;
      OnAfterGetPurchSetup(Rec,PurchSetup,CurrFieldNo);
    END;

    LOCAL PROCEDURE GetVend@1(VendNo@1000 : Code[20]);
    BEGIN
      IF VendNo <> Vend."No." THEN
        Vend.GET(VendNo);
    END;

    [External]
    PROCEDURE PurchLinesExist@3() : Boolean;
    BEGIN
      PurchLine.RESET;
      PurchLine.SETRANGE("Document Type","Document Type");
      PurchLine.SETRANGE("Document No.","No.");
      EXIT(NOT PurchLine.ISEMPTY);
    END;

    LOCAL PROCEDURE RecreatePurchLines@4(ChangedFieldName@1000 : Text[100]);
    VAR
      TempPurchLine@1001 : TEMPORARY Record 39;
      ItemChargeAssgntPurch@1005 : Record 5805;
      TempItemChargeAssgntPurch@1004 : TEMPORARY Record 5805;
      TempInteger@1003 : TEMPORARY Record 2000000026;
      SalesHeader@1006 : Record 36;
      TransferExtendedText@1009 : Codeunit 378;
      ConfirmManagement@1008 : Codeunit 27;
      ExtendedTextAdded@1002 : Boolean;
      ConfirmText@1007 : Text;
      IsHandled@1010 : Boolean;
    BEGIN
      IF NOT PurchLinesExist THEN
        EXIT;

      IsHandled := FALSE;
      OnRecreatePurchLinesOnBeforeConfirm(Rec,xRec,ChangedFieldName,HideValidationDialog,Confirmed,IsHandled);
      IF NOT IsHandled THEN
        IF GetHideValidationDialog THEN
          Confirmed := TRUE
        ELSE BEGIN
          IF HasItemChargeAssignment THEN
            ConfirmText := ResetItemChargeAssignMsg
          ELSE
            ConfirmText := RecreatePurchLinesMsg;
          Confirmed := ConfirmManagement.ConfirmProcess(STRSUBSTNO(ConfirmText,ChangedFieldName),TRUE);
        END;

      IF Confirmed THEN BEGIN
        PurchLine.LOCKTABLE;
        ItemChargeAssgntPurch.LOCKTABLE;
        MODIFY;
        OnBeforeRecreatePurchLines(Rec);

        PurchLine.RESET;
        PurchLine.SETRANGE("Document Type","Document Type");
        PurchLine.SETRANGE("Document No.","No.");
        IF PurchLine.FINDSET THEN BEGIN
          REPEAT
            PurchLine.TESTFIELD("Quantity Received",0);
            PurchLine.TESTFIELD("Quantity Invoiced",0);
            PurchLine.TESTFIELD("Return Qty. Shipped",0);
            PurchLine.CALCFIELDS("Reserved Qty. (Base)");
            PurchLine.TESTFIELD("Reserved Qty. (Base)",0);
            PurchLine.TESTFIELD("Receipt No.",'');
            PurchLine.TESTFIELD("Return Shipment No.",'');
            PurchLine.TESTFIELD("Blanket Order No.",'');
            IF PurchLine."Drop Shipment" OR PurchLine."Special Order" THEN BEGIN
              CASE TRUE OF
                PurchLine."Drop Shipment":
                  SalesHeader.GET(SalesHeader."Document Type"::Order,PurchLine."Sales Order No.");
                PurchLine."Special Order":
                  SalesHeader.GET(SalesHeader."Document Type"::Order,PurchLine."Special Order Sales No.");
              END;
              TESTFIELD("Sell-to Customer No.",SalesHeader."Sell-to Customer No.");
              TESTFIELD("Ship-to Code",SalesHeader."Ship-to Code");
            END;

            PurchLine.TESTFIELD("Prepmt. Amt. Inv.",0);
            TempPurchLine := PurchLine;
            IF PurchLine.Nonstock THEN BEGIN
              PurchLine.Nonstock := FALSE;
              PurchLine.MODIFY;
            END;
            OnRecreatePurchLinesOnBeforeTempPurchLineInsert(TempPurchLine,PurchLine);
            TempPurchLine.INSERT;
          UNTIL PurchLine.NEXT = 0;

          TransferItemChargeAssgntPurchToTemp(ItemChargeAssgntPurch,TempItemChargeAssgntPurch);

          PurchLine.DELETEALL(TRUE);

          PurchLine.INIT;
          PurchLine."Line No." := 0;
          TempPurchLine.FINDSET;
          ExtendedTextAdded := FALSE;
          REPEAT
            IF TempPurchLine."Attached to Line No." = 0 THEN BEGIN
              PurchLine.INIT;
              PurchLine."Line No." := PurchLine."Line No." + 10000;
              PurchLine.VALIDATE(Type,TempPurchLine.Type);
              OnRecreatePurchLinesOnAfterValidateType(PurchLine,TempPurchLine);
              IF TempPurchLine."No." = '' THEN BEGIN
                PurchLine.VALIDATE(Description,TempPurchLine.Description);
                PurchLine.VALIDATE("Description 2",TempPurchLine."Description 2");
              END ELSE BEGIN
                PurchLine.VALIDATE("No.",TempPurchLine."No.");
                IF PurchLine.Type <> PurchLine.Type::" " THEN
                  CASE TRUE OF
                    TempPurchLine."Drop Shipment":
                      TransferSavedFieldsDropShipment(PurchLine,TempPurchLine);
                    TempPurchLine."Special Order":
                      TransferSavedFieldsSpecialOrder(PurchLine,TempPurchLine);
                    ELSE
                      TransferSavedFields(PurchLine,TempPurchLine);
                  END;
              END;

              OnRecreatePurchLinesOnBeforeInsertPurchLine(PurchLine,TempPurchLine);
              PurchLine.INSERT;
              ExtendedTextAdded := FALSE;

              OnAfterRecreatePurchLine(PurchLine,TempPurchLine);

              IF PurchLine.Type = PurchLine.Type::Item THEN
                RecreatePurchLinesFillItemChargeAssignment(PurchLine,TempPurchLine,TempItemChargeAssgntPurch);

              IF PurchLine.Type = PurchLine.Type::"Charge (Item)" THEN BEGIN
                TempInteger.INIT;
                TempInteger.Number := PurchLine."Line No.";
                TempInteger.INSERT;
              END;
            END ELSE
              IF NOT ExtendedTextAdded THEN BEGIN
                TransferExtendedText.PurchCheckIfAnyExtText(PurchLine,TRUE);
                TransferExtendedText.InsertPurchExtText(PurchLine);
                OnAfterTransferExtendedTextForPurchaseLineRecreation(PurchLine,TempPurchLine);
                PurchLine.FINDLAST;
                ExtendedTextAdded := TRUE;
              END;
          UNTIL TempPurchLine.NEXT = 0;

          RecreateItemChargeAssgntPurch(TempItemChargeAssgntPurch,TempPurchLine,TempInteger);

          TempPurchLine.SETRANGE(Type);
          TempPurchLine.DELETEALL;
          OnAfterDeleteAllTempPurchLines;
        END;
      END ELSE
        ERROR(STRSUBSTNO(RecreatePurchaseLinesCancelErr,ChangedFieldName));
    END;

    LOCAL PROCEDURE RecreatePurchLinesFillItemChargeAssignment@154(PurchLine@1000 : Record 39;VAR TempPurchLine@1001 : TEMPORARY Record 39;VAR TempItemChargeAssgntPurch@1002 : TEMPORARY Record 5805);
    BEGIN
      ClearItemAssgntPurchFilter(TempItemChargeAssgntPurch);
      TempItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Type",TempPurchLine."Document Type");
      TempItemChargeAssgntPurch.SETRANGE("Applies-to Doc. No.",TempPurchLine."Document No.");
      TempItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Line No.",TempPurchLine."Line No.");
      IF TempItemChargeAssgntPurch.FINDSET THEN
        REPEAT
          IF NOT TempItemChargeAssgntPurch.MARK THEN BEGIN
            TempItemChargeAssgntPurch."Applies-to Doc. Line No." := PurchLine."Line No.";
            TempItemChargeAssgntPurch.Description := PurchLine.Description;
            TempItemChargeAssgntPurch.MODIFY;
            TempItemChargeAssgntPurch.MARK(TRUE);
          END;
        UNTIL TempItemChargeAssgntPurch.NEXT = 0;
    END;

    LOCAL PROCEDURE RecreateItemChargeAssgntPurch@159(VAR TempItemChargeAssgntPurch@1001 : TEMPORARY Record 5805;VAR TempPurchLine@1000 : TEMPORARY Record 39;VAR TempInteger@1002 : TEMPORARY Record 2000000026);
    VAR
      ItemChargeAssgntPurch@1003 : Record 5805;
    BEGIN
      ClearItemAssgntPurchFilter(TempItemChargeAssgntPurch);
      TempPurchLine.SETRANGE(Type,TempPurchLine.Type::"Charge (Item)");
      IF TempPurchLine.FINDSET THEN
        REPEAT
          TempItemChargeAssgntPurch.SETRANGE("Document Line No.",TempPurchLine."Line No.");
          IF TempItemChargeAssgntPurch.FINDSET THEN BEGIN
            REPEAT
              TempInteger.FINDFIRST;
              ItemChargeAssgntPurch.INIT;
              ItemChargeAssgntPurch := TempItemChargeAssgntPurch;
              ItemChargeAssgntPurch."Document Line No." := TempInteger.Number;
              ItemChargeAssgntPurch.VALIDATE("Unit Cost",0);
              ItemChargeAssgntPurch.INSERT;
            UNTIL TempItemChargeAssgntPurch.NEXT = 0;
            TempInteger.DELETE;
          END;
        UNTIL TempPurchLine.NEXT = 0;

      ClearItemAssgntPurchFilter(TempItemChargeAssgntPurch);
      TempItemChargeAssgntPurch.DELETEALL;
    END;

    LOCAL PROCEDURE TransferSavedFields@72(VAR DestinationPurchaseLine@1000 : Record 39;VAR SourcePurchaseLine@1001 : Record 39);
    BEGIN
      DestinationPurchaseLine.VALIDATE("Unit of Measure Code",SourcePurchaseLine."Unit of Measure Code");
      DestinationPurchaseLine.VALIDATE("Variant Code",SourcePurchaseLine."Variant Code");
      DestinationPurchaseLine."Prod. Order No." := SourcePurchaseLine."Prod. Order No.";
      IF DestinationPurchaseLine."Prod. Order No." <> '' THEN BEGIN
        DestinationPurchaseLine.Description := SourcePurchaseLine.Description;
        DestinationPurchaseLine.VALIDATE("VAT Prod. Posting Group",SourcePurchaseLine."VAT Prod. Posting Group");
        DestinationPurchaseLine.VALIDATE("Gen. Prod. Posting Group",SourcePurchaseLine."Gen. Prod. Posting Group");
        DestinationPurchaseLine.VALIDATE("Expected Receipt Date",SourcePurchaseLine."Expected Receipt Date");
        DestinationPurchaseLine.VALIDATE("Requested Receipt Date",SourcePurchaseLine."Requested Receipt Date");
        DestinationPurchaseLine.VALIDATE("Qty. per Unit of Measure",SourcePurchaseLine."Qty. per Unit of Measure");
      END;
      IF (SourcePurchaseLine."Job No." <> '') AND (SourcePurchaseLine."Job Task No." <> '') THEN BEGIN
        DestinationPurchaseLine.VALIDATE("Job No.",SourcePurchaseLine."Job No.");
        DestinationPurchaseLine.VALIDATE("Job Task No.",SourcePurchaseLine."Job Task No.");
        DestinationPurchaseLine."Job Line Type" := SourcePurchaseLine."Job Line Type";
      END;
      IF SourcePurchaseLine.Quantity <> 0 THEN
        DestinationPurchaseLine.VALIDATE(Quantity,SourcePurchaseLine.Quantity);
      IF ("Currency Code" = xRec."Currency Code") AND (PurchLine."Direct Unit Cost" = 0) THEN
        DestinationPurchaseLine.VALIDATE("Direct Unit Cost",SourcePurchaseLine."Direct Unit Cost");
      DestinationPurchaseLine."Routing No." := SourcePurchaseLine."Routing No.";
      DestinationPurchaseLine."Routing Reference No." := SourcePurchaseLine."Routing Reference No.";
      DestinationPurchaseLine."Operation No." := SourcePurchaseLine."Operation No.";
      DestinationPurchaseLine."Work Center No." := SourcePurchaseLine."Work Center No.";
      DestinationPurchaseLine."Prod. Order Line No." := SourcePurchaseLine."Prod. Order Line No.";
      DestinationPurchaseLine."Overhead Rate" := SourcePurchaseLine."Overhead Rate";

      OnAfterTransferSavedFields(DestinationPurchaseLine,SourcePurchaseLine);
    END;

    LOCAL PROCEDURE TransferSavedFieldsDropShipment@79(VAR DestinationPurchaseLine@1001 : Record 39;VAR SourcePurchaseLine@1000 : Record 39);
    VAR
      SalesLine@1003 : Record 37;
      CopyDocMgt@1002 : Codeunit 6620;
    BEGIN
      SalesLine.GET(SalesLine."Document Type"::Order,
        SourcePurchaseLine."Sales Order No.",
        SourcePurchaseLine."Sales Order Line No.");
      CopyDocMgt.TransfldsFromSalesToPurchLine(SalesLine,DestinationPurchaseLine);
      DestinationPurchaseLine."Drop Shipment" := SourcePurchaseLine."Drop Shipment";
      DestinationPurchaseLine."Purchasing Code" := SalesLine."Purchasing Code";
      DestinationPurchaseLine."Sales Order No." := SourcePurchaseLine."Sales Order No.";
      DestinationPurchaseLine."Sales Order Line No." := SourcePurchaseLine."Sales Order Line No.";
      EVALUATE(DestinationPurchaseLine."Inbound Whse. Handling Time",'<0D>');
      DestinationPurchaseLine.VALIDATE("Inbound Whse. Handling Time");
      SalesLine.VALIDATE("Unit Cost (LCY)",DestinationPurchaseLine."Unit Cost (LCY)");
      SalesLine."Purchase Order No." := DestinationPurchaseLine."Document No.";
      SalesLine."Purch. Order Line No." := DestinationPurchaseLine."Line No.";
      SalesLine.MODIFY;
    END;

    LOCAL PROCEDURE TransferSavedFieldsSpecialOrder@82(VAR DestinationPurchaseLine@1003 : Record 39;VAR SourcePurchaseLine@1002 : Record 39);
    VAR
      SalesLine@1004 : Record 37;
      CopyDocMgt@1000 : Codeunit 6620;
    BEGIN
      SalesLine.GET(SalesLine."Document Type"::Order,
        SourcePurchaseLine."Special Order Sales No.",
        SourcePurchaseLine."Special Order Sales Line No.");
      CopyDocMgt.TransfldsFromSalesToPurchLine(SalesLine,DestinationPurchaseLine);
      DestinationPurchaseLine."Special Order" := SourcePurchaseLine."Special Order";
      DestinationPurchaseLine."Purchasing Code" := SalesLine."Purchasing Code";
      DestinationPurchaseLine."Special Order Sales No." := SourcePurchaseLine."Special Order Sales No.";
      DestinationPurchaseLine."Special Order Sales Line No." := SourcePurchaseLine."Special Order Sales Line No.";
      DestinationPurchaseLine.VALIDATE("Unit of Measure Code",SourcePurchaseLine."Unit of Measure Code");
      IF SourcePurchaseLine.Quantity <> 0 THEN
        DestinationPurchaseLine.VALIDATE(Quantity,SourcePurchaseLine.Quantity);

      SalesLine.VALIDATE("Unit Cost (LCY)",DestinationPurchaseLine."Unit Cost (LCY)");
      SalesLine."Special Order Purchase No." := DestinationPurchaseLine."Document No.";
      SalesLine."Special Order Purch. Line No." := DestinationPurchaseLine."Line No.";
      SalesLine.MODIFY;
    END;

    [External]
    PROCEDURE MessageIfPurchLinesExist@5(ChangedFieldName@1000 : Text[100]);
    VAR
      MessageText@1001 : Text;
    BEGIN
      IF PurchLinesExist AND NOT GetHideValidationDialog THEN BEGIN
        MessageText := STRSUBSTNO(LinesNotUpdatedMsg,ChangedFieldName);
        MessageText := STRSUBSTNO(SplitMessageTxt,MessageText,Text020);
        MESSAGE(MessageText);
      END;
    END;

    [External]
    PROCEDURE PriceMessageIfPurchLinesExist@7(ChangedFieldName@1000 : Text[100]);
    VAR
      MessageText@1001 : Text;
    BEGIN
      IF PurchLinesExist AND NOT GetHideValidationDialog THEN BEGIN
        MessageText := STRSUBSTNO(LinesNotUpdatedMsg,ChangedFieldName);
        IF "Currency Code" <> '' THEN
          MessageText := STRSUBSTNO(SplitMessageTxt,MessageText,AffectExchangeRateMsg);
        MESSAGE(MessageText);
      END;
    END;

    [External]
    PROCEDURE UpdateCurrencyFactor@12();
    VAR
      UpdateCurrencyExchangeRates@1001 : Codeunit 1281;
      ConfirmManagement@1002 : Codeunit 27;
      Updated@1000 : Boolean;
    BEGIN
      OnBeforeUpdateCurrencyFactor(Rec,Updated);
      IF Updated THEN
        EXIT;

      IF "Currency Code" <> '' THEN BEGIN
        IF "Posting Date" <> 0D THEN
          CurrencyDate := "Posting Date"
        ELSE
          CurrencyDate := WORKDATE;

        IF UpdateCurrencyExchangeRates.ExchangeRatesForCurrencyExist(CurrencyDate,"Currency Code") THEN BEGIN
          "Currency Factor" := CurrExchRate.ExchangeRate(CurrencyDate,"Currency Code");
          IF "Currency Code" <> xRec."Currency Code" THEN
            RecreatePurchLines(FIELDCAPTION("Currency Code"));
        END ELSE BEGIN
          IF ConfirmManagement.ConfirmProcess(
               STRSUBSTNO(MissingExchangeRatesQst,"Currency Code",CurrencyDate),TRUE)
          THEN BEGIN
            UpdateCurrencyExchangeRates.OpenExchangeRatesPage("Currency Code");
            UpdateCurrencyFactor;
          END ELSE
            RevertCurrencyCodeAndPostingDate;
        END;
      END ELSE BEGIN
        "Currency Factor" := 0;
        IF "Currency Code" <> xRec."Currency Code" THEN
          RecreatePurchLines(FIELDCAPTION("Currency Code"));
      END;

      OnAfterUpdateCurrencyFactor(Rec,GetHideValidationDialog);
    END;

    LOCAL PROCEDURE ConfirmUpdateCurrencyFactor@13() : Boolean;
    BEGIN
      OnBeforeConfirmUpdateCurrencyFactor(Rec,HideValidationDialog);
      IF GetHideValidationDialog OR NOT GUIALLOWED THEN
        Confirmed := TRUE
      ELSE
        Confirmed := CONFIRM(Text022,FALSE);
      IF Confirmed THEN
        VALIDATE("Currency Factor")
      ELSE
        "Currency Factor" := xRec."Currency Factor";
      EXIT(Confirmed);
    END;

    [External]
    PROCEDURE GetHideValidationDialog@100() : Boolean;
    BEGIN
      EXIT(HideValidationDialog);
    END;

    [External]
    PROCEDURE SetHideValidationDialog@14(NewHideValidationDialog@1000 : Boolean);
    BEGIN
      HideValidationDialog := NewHideValidationDialog;
    END;

    LOCAL PROCEDURE UpdateLocationCode@160(LocationCode@1000 : Code[10]);
    VAR
      IsHandled@1001 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeUpdateLocationCode(Rec,LocationCode,IsHandled);
      IF NOT IsHandled THEN
        VALIDATE("Location Code",UserSetupMgt.GetLocation(1,LocationCode,"Responsibility Center"));
    END;

    [External]
    PROCEDURE UpdatePurchLines@15(ChangedFieldName@1000 : Text[100];AskQuestion@1001 : Boolean);
    VAR
      Field@1002 : Record 2000000041;
    BEGIN
      Field.SETRANGE(TableNo,DATABASE::"Purchase Header");
      Field.SETRANGE("Field Caption",ChangedFieldName);
      Field.SETFILTER(ObsoleteState,'<>%1',Field.ObsoleteState::Removed);
      Field.FIND('-');
      IF Field.NEXT <> 0 THEN
        ERROR(DuplicatedCaptionsNotAllowedErr);
      UpdatePurchLinesByFieldNo(Field."No.",AskQuestion);

      OnAfterUpdatePurchLines(Rec);
    END;

    LOCAL PROCEDURE UpdatePurchAmountLines@198();
    VAR
      PurchLine@1000 : Record 39;
    BEGIN
      PurchLine.RESET;
      PurchLine.SETRANGE("Document Type","Document Type");
      PurchLine.SETRANGE("Document No.","No.");
      PurchLine.SETFILTER(Type,'<>%1',PurchLine.Type::" ");
      PurchLine.SETFILTER(Quantity,'<>0');
      PurchLine.LOCKTABLE;
      IF PurchLine.FINDSET THEN BEGIN
        MODIFY;
        REPEAT
          PurchLine.UpdateAmounts;
          PurchLine.MODIFY;
        UNTIL PurchLine.NEXT = 0;
      END;
    END;

    [External]
    PROCEDURE UpdatePurchLinesByFieldNo@99(ChangedFieldNo@1000 : Integer;AskQuestion@1001 : Boolean);
    VAR
      Field@1004 : Record 2000000041;
      PurchLineReserve@1003 : Codeunit 99000834;
      Question@1002 : Text[250];
      IsHandled@1005 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeUpdatePurchLinesByFieldNo(Rec,ChangedFieldNo,AskQuestion,IsHandled);
      IF IsHandled THEN
        EXIT;

      IF NOT PurchLinesExist THEN
        EXIT;

      IF NOT Field.GET(DATABASE::"Purchase Header",ChangedFieldNo) THEN
        Field.GET(DATABASE::"Purchase Line",ChangedFieldNo);

      IF AskQuestion THEN BEGIN
        Question := STRSUBSTNO(Text032,Field."Field Caption");
        IF GUIALLOWED THEN
          IF DIALOG.CONFIRM(Question,TRUE) THEN
            CASE ChangedFieldNo OF
              FIELDNO("Expected Receipt Date"),
              FIELDNO("Requested Receipt Date"),
              FIELDNO("Promised Receipt Date"),
              FIELDNO("Lead Time Calculation"),
              FIELDNO("Inbound Whse. Handling Time"):
                ConfirmResvDateConflict;
            END
          ELSE
            EXIT;
      END;

      PurchLine.LOCKTABLE;
      MODIFY;

      PurchLine.RESET;
      PurchLine.SETRANGE("Document Type","Document Type");
      PurchLine.SETRANGE("Document No.","No.");
      IF PurchLine.FINDSET THEN
        REPEAT
          xPurchLine := PurchLine;
          OnUpdatePurchLinesByFieldNoOnBeforeValidateFields(PurchLine,xPurchLine);
          CASE ChangedFieldNo OF
            FIELDNO("Expected Receipt Date"):
              IF PurchLine."No." <> '' THEN
                PurchLine.VALIDATE("Expected Receipt Date","Expected Receipt Date");
            FIELDNO("Currency Factor"):
              IF PurchLine.Type <> PurchLine.Type::" " THEN
                PurchLine.VALIDATE("Direct Unit Cost");
            FIELDNO("Transaction Type"):
              PurchLine.VALIDATE("Transaction Type","Transaction Type");
            FIELDNO("Transport Method"):
              PurchLine.VALIDATE("Transport Method","Transport Method");
            FIELDNO("Entry Point"):
              PurchLine.VALIDATE("Entry Point","Entry Point");
            FIELDNO(Area):
              PurchLine.VALIDATE(Area,Area);
            FIELDNO("Transaction Specification"):
              PurchLine.VALIDATE("Transaction Specification","Transaction Specification");
            FIELDNO("Requested Receipt Date"):
              IF PurchLine."No." <> '' THEN
                PurchLine.VALIDATE("Requested Receipt Date","Requested Receipt Date");
            FIELDNO("Prepayment %"):
              IF PurchLine."No." <> '' THEN
                PurchLine.VALIDATE("Prepayment %","Prepayment %");
            FIELDNO("Promised Receipt Date"):
              IF PurchLine."No." <> '' THEN
                PurchLine.VALIDATE("Promised Receipt Date","Promised Receipt Date");
            FIELDNO("Lead Time Calculation"):
              IF PurchLine."No." <> '' THEN
                PurchLine.VALIDATE("Lead Time Calculation","Lead Time Calculation");
            FIELDNO("Inbound Whse. Handling Time"):
              IF PurchLine."No." <> '' THEN
                PurchLine.VALIDATE("Inbound Whse. Handling Time","Inbound Whse. Handling Time");
            PurchLine.FIELDNO("Deferral Code"):
              IF PurchLine."No." <> '' THEN
                PurchLine.VALIDATE("Deferral Code");
            ELSE
              OnUpdatePurchLinesByChangedFieldName(Rec,PurchLine,Field.FieldName,ChangedFieldNo);
          END;
          PurchLine.MODIFY(TRUE);
          PurchLineReserve.VerifyChange(PurchLine,xPurchLine);
        UNTIL PurchLine.NEXT = 0;
    END;

    LOCAL PROCEDURE ConfirmResvDateConflict@31();
    VAR
      ResvEngMgt@1000 : Codeunit 99000831;
      ConfirmManagement@1001 : Codeunit 27;
    BEGIN
      IF ResvEngMgt.ResvExistsForPurchHeader(Rec) THEN
        IF NOT ConfirmManagement.ConfirmProcess(Text050,TRUE) THEN
          ERROR('');
    END;

    [External]
    PROCEDURE CreateDim@16(Type1@1000 : Integer;No1@1001 : Code[20];Type2@1002 : Integer;No2@1003 : Code[20];Type3@1004 : Integer;No3@1005 : Code[20];Type4@1006 : Integer;No4@1007 : Code[20]);
    VAR
      SourceCodeSetup@1010 : Record 242;
      TableID@1011 : ARRAY [10] OF Integer;
      No@1012 : ARRAY [10] OF Code[20];
      OldDimSetID@1008 : Integer;
    BEGIN
      SourceCodeSetup.GET;
      TableID[1] := Type1;
      No[1] := No1;
      TableID[2] := Type2;
      No[2] := No2;
      TableID[3] := Type3;
      No[3] := No3;
      TableID[4] := Type4;
      No[4] := No4;
      OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No);

      "Shortcut Dimension 1 Code" := '';
      "Shortcut Dimension 2 Code" := '';
      OldDimSetID := "Dimension Set ID";
      "Dimension Set ID" :=
        DimMgt.GetRecDefaultDimID(
          Rec,CurrFieldNo,TableID,No,SourceCodeSetup.Purchases,"Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",0,0);

      OnCreateDimOnBeforeUpdateLines(Rec,xRec,CurrFieldNo);

      IF (OldDimSetID <> "Dimension Set ID") AND PurchLinesExist THEN BEGIN
        MODIFY;
        UpdateAllLineDim("Dimension Set ID",OldDimSetID);
      END;
    END;

    [External]
    PROCEDURE ValidateShortcutDimCode@19(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    VAR
      OldDimSetID@1005 : Integer;
    BEGIN
      OldDimSetID := "Dimension Set ID";
      DimMgt.ValidateShortcutDimValues(FieldNumber,ShortcutDimCode,"Dimension Set ID");
      IF "No." <> '' THEN
        MODIFY;

      IF OldDimSetID <> "Dimension Set ID" THEN BEGIN
        MODIFY;
        IF PurchLinesExist THEN
          UpdateAllLineDim("Dimension Set ID",OldDimSetID);
      END;

      OnAfterValidateShortcutDimCode(Rec,xRec,FieldNumber,ShortcutDimCode);
    END;

    LOCAL PROCEDURE ReceivedPurchLinesExist@20() : Boolean;
    BEGIN
      PurchLine.RESET;
      PurchLine.SETRANGE("Document Type","Document Type");
      PurchLine.SETRANGE("Document No.","No.");
      PurchLine.SETFILTER("Quantity Received",'<>0');
      EXIT(PurchLine.FINDFIRST);
    END;

    LOCAL PROCEDURE ReturnShipmentExist@5800() : Boolean;
    BEGIN
      PurchLine.RESET;
      PurchLine.SETRANGE("Document Type","Document Type");
      PurchLine.SETRANGE("Document No.","No.");
      PurchLine.SETFILTER("Return Qty. Shipped",'<>0');
      EXIT(PurchLine.FINDFIRST);
    END;

    [External]
    PROCEDURE UpdateShipToAddress@21();
    VAR
      IsHandled@1000 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeUpdateShipToAddress(Rec,IsHandled);
      IF IsHandled THEN
        EXIT;

      IF IsCreditDocType THEN BEGIN
        OnAfterUpdateShipToAddress(Rec);
        EXIT;
      END;

      IF ("Location Code" <> '') AND Location.GET("Location Code") AND ("Sell-to Customer No." = '') THEN BEGIN
        SetShipToAddress(
          Location.Name,Location."Name 2",Location.Address,Location."Address 2",
          Location.City,Location."Post Code",Location.County,Location."Country/Region Code");
        "Ship-to Contact" := Location.Contact;
      END;

      IF ("Location Code" = '') AND ("Sell-to Customer No." = '') THEN BEGIN
        CompanyInfo.GET;
        "Ship-to Code" := '';
        SetShipToAddress(
          CompanyInfo."Ship-to Name",CompanyInfo."Ship-to Name 2",CompanyInfo."Ship-to Address",CompanyInfo."Ship-to Address 2",
          CompanyInfo."Ship-to City",CompanyInfo."Ship-to Post Code",CompanyInfo."Ship-to County",
          CompanyInfo."Ship-to Country/Region Code");
        "Ship-to Contact" := CompanyInfo."Ship-to Contact";
      END;

      OnAfterUpdateShipToAddress(Rec);
    END;

    LOCAL PROCEDURE DeletePurchaseLines@17();
    VAR
      ReservMgt@1000 : Codeunit 99000845;
    BEGIN
      IF PurchLine.FINDSET THEN BEGIN
        ReservMgt.DeleteDocumentReservation(DATABASE::"Purchase Line","Document Type","No.",GetHideValidationDialog);
        REPEAT
          PurchLine.SuspendStatusCheck(TRUE);
          PurchLine.DELETE(TRUE);
        UNTIL PurchLine.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE ClearItemAssgntPurchFilter@22(VAR TempItemChargeAssgntPurch@1000 : TEMPORARY Record 5805);
    BEGIN
      TempItemChargeAssgntPurch.SETRANGE("Document Line No.");
      TempItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Type");
      TempItemChargeAssgntPurch.SETRANGE("Applies-to Doc. No.");
      TempItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Line No.");
    END;

    LOCAL PROCEDURE CheckReceiptInfo@70(VAR PurchLine@1000 : Record 39;PayTo@1001 : Boolean);
    BEGIN
      IF "Document Type" = "Document Type"::Order THEN
        PurchLine.SETFILTER("Quantity Received",'<>0')
      ELSE
        IF "Document Type" = "Document Type"::Invoice THEN BEGIN
          IF NOT PayTo THEN
            PurchLine.SETRANGE("Buy-from Vendor No.",xRec."Buy-from Vendor No.");
          PurchLine.SETFILTER("Receipt No.",'<>%1','');
        END;

      IF PurchLine.FINDFIRST THEN
        IF "Document Type" = "Document Type"::Order THEN
          PurchLine.TESTFIELD("Quantity Received",0)
        ELSE
          PurchLine.TESTFIELD("Receipt No.",'');
      PurchLine.SETRANGE("Receipt No.");
      PurchLine.SETRANGE("Quantity Received");
      IF NOT PayTo THEN
        PurchLine.SETRANGE("Buy-from Vendor No.");
    END;

    LOCAL PROCEDURE CheckPrepmtInfo@119(VAR PurchLine@1000 : Record 39);
    BEGIN
      IF "Document Type" = "Document Type"::Order THEN BEGIN
        PurchLine.SETFILTER("Prepmt. Amt. Inv.",'<>0');
        IF PurchLine.FIND('-') THEN
          PurchLine.TESTFIELD("Prepmt. Amt. Inv.",0);
        PurchLine.SETRANGE("Prepmt. Amt. Inv.");
      END;
    END;

    LOCAL PROCEDURE CheckReturnInfo@121(VAR PurchLine@1000 : Record 39;PayTo@1001 : Boolean);
    BEGIN
      IF "Document Type" = "Document Type"::"Return Order" THEN
        PurchLine.SETFILTER("Return Qty. Shipped",'<>0')
      ELSE
        IF "Document Type" = "Document Type"::"Credit Memo" THEN BEGIN
          IF NOT PayTo THEN
            PurchLine.SETRANGE("Buy-from Vendor No.",xRec."Buy-from Vendor No.");
          PurchLine.SETFILTER("Return Shipment No.",'<>%1','');
        END;

      IF PurchLine.FINDFIRST THEN
        IF "Document Type" = "Document Type"::"Return Order" THEN
          PurchLine.TESTFIELD("Return Qty. Shipped",0)
        ELSE
          PurchLine.TESTFIELD("Return Shipment No.",'');
    END;

    LOCAL PROCEDURE UpdateBuyFromCont@24(VendorNo@1000 : Code[20]);
    VAR
      ContBusRel@1003 : Record 5054;
      Vend@1004 : Record 23;
      OfficeContact@1001 : Record 5050;
      OfficeMgt@1002 : Codeunit 1630;
    BEGIN
      IF OfficeMgt.GetContact(OfficeContact,VendorNo) THEN BEGIN
        SetHideValidationDialog(TRUE);
        UpdateBuyFromVend(OfficeContact."No.");
        SetHideValidationDialog(FALSE);
      END ELSE
        IF Vend.GET(VendorNo) THEN BEGIN
          IF Vend."Primary Contact No." <> '' THEN
            "Buy-from Contact No." := Vend."Primary Contact No."
          ELSE
            "Buy-from Contact No." := ContBusRel.GetContactNo(ContBusRel."Link to Table"::Vendor,"Buy-from Vendor No.");
          "Buy-from Contact" := Vend.Contact;
        END;

      IF "Buy-from Contact No." <> '' THEN
        IF OfficeContact.GET("Buy-from Contact No.") THEN
          OfficeContact.CheckIfPrivacyBlockedGeneric;

      OnAfterUpdateBuyFromCont(Rec,Vend,OfficeContact);
    END;

    LOCAL PROCEDURE UpdatePayToCont@27(VendorNo@1000 : Code[20]);
    VAR
      ContBusRel@1003 : Record 5054;
      Vend@1001 : Record 23;
      Contact@1002 : Record 5050;
    BEGIN
      IF Vend.GET(VendorNo) THEN BEGIN
        IF Vend."Primary Contact No." <> '' THEN
          "Pay-to Contact No." := Vend."Primary Contact No."
        ELSE
          "Pay-to Contact No." := ContBusRel.GetContactNo(ContBusRel."Link to Table"::Vendor,"Pay-to Vendor No.");
        "Pay-to Contact" := Vend.Contact;
      END;

      IF "Pay-to Contact No." <> '' THEN
        IF Contact.GET("Pay-to Contact No.") THEN
          Contact.CheckIfPrivacyBlockedGeneric;

      OnAfterUpdatePayToCont(Rec,Vend,Contact);
    END;

    LOCAL PROCEDURE UpdateBuyFromVend@25(ContactNo@1002 : Code[20]);
    VAR
      ContBusinessRelation@1007 : Record 5054;
      Vend@1006 : Record 23;
      Cont@1005 : Record 5050;
    BEGIN
      IF Cont.GET(ContactNo) THEN BEGIN
        "Buy-from Contact No." := Cont."No.";
        IF Cont.Type = Cont.Type::Person THEN
          "Buy-from Contact" := Cont.Name
        ELSE
          IF Vend.GET("Buy-from Vendor No.") THEN
            "Buy-from Contact" := Vend.Contact
          ELSE
            "Buy-from Contact" := ''
      END ELSE BEGIN
        "Buy-from Contact" := '';
        EXIT;
      END;

      IF ContBusinessRelation.FindByContact(ContBusinessRelation."Link to Table"::Vendor,Cont."Company No.") THEN BEGIN
        IF ("Buy-from Vendor No." <> '') AND
           ("Buy-from Vendor No." <> ContBusinessRelation."No.")
        THEN
          ERROR(Text037,Cont."No.",Cont.Name,"Buy-from Vendor No.");
        IF "Buy-from Vendor No." = '' THEN BEGIN
          SkipBuyFromContact := TRUE;
          VALIDATE("Buy-from Vendor No.",ContBusinessRelation."No.");
          SkipBuyFromContact := FALSE;
        END;
      END ELSE
        ERROR(Text039,Cont."No.",Cont.Name);

      IF ("Buy-from Vendor No." = "Pay-to Vendor No.") OR
         ("Pay-to Vendor No." = '')
      THEN
        VALIDATE("Pay-to Contact No.","Buy-from Contact No.");

      OnAfterUpdateBuyFromVend(Rec,Cont);
    END;

    LOCAL PROCEDURE UpdatePayToVend@26(ContactNo@1000 : Code[20]);
    VAR
      ContBusinessRelation@1005 : Record 5054;
      Vend@1004 : Record 23;
      Cont@1003 : Record 5050;
    BEGIN
      IF Cont.GET(ContactNo) THEN BEGIN
        "Pay-to Contact No." := Cont."No.";
        IF Cont.Type = Cont.Type::Person THEN
          "Pay-to Contact" := Cont.Name
        ELSE
          IF Vend.GET("Pay-to Vendor No.") THEN
            "Pay-to Contact" := Vend.Contact
          ELSE
            "Pay-to Contact" := '';
      END ELSE BEGIN
        "Pay-to Contact" := '';
        EXIT;
      END;

      IF ContBusinessRelation.FindByContact(ContBusinessRelation."Link to Table"::Vendor,Cont."Company No.") THEN BEGIN
        IF "Pay-to Vendor No." = '' THEN BEGIN
          SkipPayToContact := TRUE;
          VALIDATE("Pay-to Vendor No.",ContBusinessRelation."No.");
          SkipPayToContact := FALSE;
        END ELSE
          IF "Pay-to Vendor No." <> ContBusinessRelation."No." THEN
            ERROR(Text037,Cont."No.",Cont.Name,"Pay-to Vendor No.");
      END ELSE
        ERROR(Text039,Cont."No.",Cont.Name);

      OnAfterUpdatePayToVend(Rec,Cont);
    END;

    [External]
    PROCEDURE CreateInvtPutAwayPick@29();
    VAR
      WhseRequest@1000 : Record 5765;
    BEGIN
      TESTFIELD(Status,Status::Released);

      WhseRequest.RESET;
      WhseRequest.SETCURRENTKEY("Source Document","Source No.");
      CASE "Document Type" OF
        "Document Type"::Order:
          WhseRequest.SETRANGE("Source Document",WhseRequest."Source Document"::"Purchase Order");
        "Document Type"::"Return Order":
          WhseRequest.SETRANGE("Source Document",WhseRequest."Source Document"::"Purchase Return Order");
      END;
      WhseRequest.SETRANGE("Source No.","No.");
      REPORT.RUNMODAL(REPORT::"Create Invt Put-away/Pick/Mvmt",TRUE,FALSE,WhseRequest);
    END;

    [External]
    PROCEDURE ShowDocDim@32();
    VAR
      OldDimSetID@1000 : Integer;
    BEGIN
      OldDimSetID := "Dimension Set ID";
      "Dimension Set ID" :=
        DimMgt.EditDimensionSet2(
          "Dimension Set ID",STRSUBSTNO('%1 %2',"Document Type","No."),
          "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");

      IF OldDimSetID <> "Dimension Set ID" THEN BEGIN
        MODIFY;
        IF PurchLinesExist THEN
          UpdateAllLineDim("Dimension Set ID",OldDimSetID);
      END;
    END;

    [External]
    PROCEDURE UpdateAllLineDim@34(NewParentDimSetID@1000 : Integer;OldParentDimSetID@1001 : Integer);
    VAR
      ConfirmManagement@1004 : Codeunit 27;
      NewDimSetID@1002 : Integer;
      ReceivedShippedItemLineDimChangeConfirmed@1003 : Boolean;
      IsHandled@1005 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeUpdateAllLineDim(Rec,NewParentDimSetID,OldParentDimSetID,IsHandled);
      IF IsHandled THEN
        EXIT;

      IF NewParentDimSetID = OldParentDimSetID THEN
        EXIT;
      IF NOT ConfirmManagement.ConfirmProcess(Text051,TRUE) THEN
        EXIT;

      PurchLine.RESET;
      PurchLine.SETRANGE("Document Type","Document Type");
      PurchLine.SETRANGE("Document No.","No.");
      PurchLine.LOCKTABLE;
      IF PurchLine.FIND('-') THEN
        REPEAT
          NewDimSetID := DimMgt.GetDeltaDimSetID(PurchLine."Dimension Set ID",NewParentDimSetID,OldParentDimSetID);
          IF PurchLine."Dimension Set ID" <> NewDimSetID THEN BEGIN
            PurchLine."Dimension Set ID" := NewDimSetID;

            IF NOT GetHideValidationDialog AND GUIALLOWED THEN
              VerifyReceivedShippedItemLineDimChange(ReceivedShippedItemLineDimChangeConfirmed);

            DimMgt.UpdateGlobalDimFromDimSetID(
              PurchLine."Dimension Set ID",PurchLine."Shortcut Dimension 1 Code",PurchLine."Shortcut Dimension 2 Code");

            OnUpdateAllLineDimOnBeforePurchLineModify(PurchLine);
            PurchLine.MODIFY;
          END;
        UNTIL PurchLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyReceivedShippedItemLineDimChange@71(VAR ReceivedShippedItemLineDimChangeConfirmed@1000 : Boolean);
    BEGIN
      IF PurchLine.IsReceivedShippedItemDimChanged THEN
        IF NOT ReceivedShippedItemLineDimChangeConfirmed THEN
          ReceivedShippedItemLineDimChangeConfirmed := PurchLine.ConfirmReceivedShippedItemDimChange;
    END;

    [External]
    PROCEDURE SetAmountToApply@18(AppliesToDocNo@1000 : Code[20];VendorNo@1001 : Code[20]);
    VAR
      VendLedgEntry@1002 : Record 25;
    BEGIN
      VendLedgEntry.SETCURRENTKEY("Document No.");
      VendLedgEntry.SETRANGE("Document No.",AppliesToDocNo);
      VendLedgEntry.SETRANGE("Vendor No.",VendorNo);
      VendLedgEntry.SETRANGE(Open,TRUE);
      IF VendLedgEntry.FINDFIRST THEN BEGIN
        IF VendLedgEntry."Amount to Apply" = 0 THEN  BEGIN
          VendLedgEntry.CALCFIELDS("Remaining Amount");
          VendLedgEntry."Amount to Apply" := VendLedgEntry."Remaining Amount";
        END ELSE
          VendLedgEntry."Amount to Apply" := 0;
        VendLedgEntry."Accepted Payment Tolerance" := 0;
        VendLedgEntry."Accepted Pmt. Disc. Tolerance" := FALSE;
        CODEUNIT.RUN(CODEUNIT::"Vend. Entry-Edit",VendLedgEntry);
      END;
    END;

    [External]
    PROCEDURE SetShipToForSpecOrder@23();
    BEGIN
      IF Location.GET("Location Code") THEN BEGIN
        "Ship-to Code" := '';
        SetShipToAddress(
          Location.Name,Location."Name 2",Location.Address,Location."Address 2",
          Location.City,Location."Post Code",Location.County,Location."Country/Region Code");
        "Ship-to Contact" := Location.Contact;
        "Location Code" := Location.Code;
      END ELSE BEGIN
        CompanyInfo.GET;
        "Ship-to Code" := '';
        SetShipToAddress(
          CompanyInfo."Ship-to Name",CompanyInfo."Ship-to Name 2",CompanyInfo."Ship-to Address",CompanyInfo."Ship-to Address 2",
          CompanyInfo."Ship-to City",CompanyInfo."Ship-to Post Code",CompanyInfo."Ship-to County",
          CompanyInfo."Ship-to Country/Region Code");
        "Ship-to Contact" := CompanyInfo."Ship-to Contact";
        "Location Code" := '';
      END;

      OnAfterSetShipToForSpecOrder(Rec);
    END;

    LOCAL PROCEDURE JobUpdatePurchLines@28(SkipJobCurrFactorUpdate@1000 : Boolean);
    BEGIN
      WITH PurchLine DO BEGIN
        SETFILTER("Job No.",'<>%1','');
        SETFILTER("Job Task No.",'<>%1','');
        LOCKTABLE;
        IF FINDSET(TRUE,FALSE) THEN BEGIN
          SetPurchHeader(Rec);
          REPEAT
            IF NOT SkipJobCurrFactorUpdate THEN
              JobSetCurrencyFactor;
            CreateTempJobJnlLine(FALSE);
            UpdateJobPrices;
            MODIFY;
          UNTIL NEXT = 0;
        END;
      END
    END;

    PROCEDURE GetPstdDocLinesToRevere@47();
    VAR
      PurchPostedDocLines@1002 : Page 5855;
    BEGIN
      GetVend("Buy-from Vendor No.");
      PurchPostedDocLines.SetToPurchHeader(Rec);
      PurchPostedDocLines.SETRECORD(Vend);
      PurchPostedDocLines.LOOKUPMODE := TRUE;
      IF PurchPostedDocLines.RUNMODAL = ACTION::LookupOK THEN
        PurchPostedDocLines.CopyLineToDoc;

      CLEAR(PurchPostedDocLines);
    END;

    [External]
    PROCEDURE SetSecurityFilterOnRespCenter@43();
    VAR
      IsHandled@1000 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeSetSecurityFilterOnRespCenter(Rec,IsHandled);
      IF (NOT IsHandled) AND (UserSetupMgt.GetPurchasesFilter <> '') THEN BEGIN
        FILTERGROUP(2);
        SETRANGE("Responsibility Center",UserSetupMgt.GetPurchasesFilter);
        FILTERGROUP(0);
      END;

      SETRANGE("Date Filter",0D,WORKDATE);
    END;

    [External]
    PROCEDURE CalcInvDiscForHeader@45();
    VAR
      PurchaseInvDisc@1000 : Codeunit 70;
    BEGIN
      GetPurchSetup;
      IF PurchSetup."Calc. Inv. Discount" THEN
        PurchaseInvDisc.CalculateIncDiscForHeader(Rec);
    END;

    [External]
    PROCEDURE AddShipToAddress@46(SalesHeader@1000 : Record 36;ShowError@1001 : Boolean);
    VAR
      PurchLine2@1002 : Record 39;
    BEGIN
      IF ShowError THEN BEGIN
        PurchLine2.RESET;
        PurchLine2.SETRANGE("Document Type","Document Type"::Order);
        PurchLine2.SETRANGE("Document No.","No.");
        IF NOT PurchLine2.ISEMPTY THEN BEGIN
          IF "Ship-to Name" <> SalesHeader."Ship-to Name" THEN
            ERROR(Text052,FIELDCAPTION("Ship-to Name"),"No.",SalesHeader."No.");
          IF "Ship-to Name 2" <> SalesHeader."Ship-to Name 2" THEN
            ERROR(Text052,FIELDCAPTION("Ship-to Name 2"),"No.",SalesHeader."No.");
          IF "Ship-to Address" <> SalesHeader."Ship-to Address" THEN
            ERROR(Text052,FIELDCAPTION("Ship-to Address"),"No.",SalesHeader."No.");
          IF "Ship-to Address 2" <> SalesHeader."Ship-to Address 2" THEN
            ERROR(Text052,FIELDCAPTION("Ship-to Address 2"),"No.",SalesHeader."No.");
          IF "Ship-to Post Code" <> SalesHeader."Ship-to Post Code" THEN
            ERROR(Text052,FIELDCAPTION("Ship-to Post Code"),"No.",SalesHeader."No.");
          IF "Ship-to Country/Region Code" <> SalesHeader."Ship-to Country/Region Code" THEN
            ERROR(Text052,FIELDCAPTION("Ship-to Country/Region Code"),"No.",SalesHeader."No.");
          IF "Ship-to County" <> SalesHeader."Ship-to County" THEN
            ERROR(Text052,FIELDCAPTION("Ship-to County"),"No.",SalesHeader."No.");
          IF "Ship-to City" <> SalesHeader."Ship-to City" THEN
            ERROR(Text052,FIELDCAPTION("Ship-to City"),"No.",SalesHeader."No.");
          IF "Ship-to Contact" <> SalesHeader."Ship-to Contact" THEN
            ERROR(Text052,FIELDCAPTION("Ship-to Contact"),"No.",SalesHeader."No.");
        END ELSE BEGIN
          // no purchase line exists
          SetShipToAddress(
            SalesHeader."Ship-to Name",SalesHeader."Ship-to Name 2",SalesHeader."Ship-to Address",
            SalesHeader."Ship-to Address 2",SalesHeader."Ship-to City",SalesHeader."Ship-to Post Code",
            SalesHeader."Ship-to County",SalesHeader."Ship-to Country/Region Code");
          "Ship-to Contact" := SalesHeader."Ship-to Contact";
        END;
      END;

      OnAfterAddShipToAddress(Rec,SalesHeader);
    END;

    [External]
    PROCEDURE DropShptOrderExists@48(SalesHeader@1000 : Record 36) : Boolean;
    VAR
      SalesLine2@1001 : Record 37;
    BEGIN
      // returns TRUE if sales is either Drop Shipment of Special Order
      SalesLine2.RESET;
      SalesLine2.SETRANGE("Document Type",SalesLine2."Document Type"::Order);
      SalesLine2.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine2.SETRANGE("Drop Shipment",TRUE);
      EXIT(NOT SalesLine2.ISEMPTY);
    END;

    [External]
    PROCEDURE SpecialOrderExists@81(SalesHeader@1000 : Record 36) : Boolean;
    VAR
      SalesLine3@1001 : Record 37;
    BEGIN
      SalesLine3.RESET;
      SalesLine3.SETRANGE("Document Type",SalesLine3."Document Type"::Order);
      SalesLine3.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine3.SETRANGE("Special Order",TRUE);
      EXIT(NOT SalesLine3.ISEMPTY);
    END;

    LOCAL PROCEDURE CheckDropShipmentLineExists@153();
    VAR
      SalesShipmentLine@1000 : Record 111;
    BEGIN
      SalesShipmentLine.SETRANGE("Purchase Order No.","No.");
      SalesShipmentLine.SETRANGE("Drop Shipment",TRUE);
      IF NOT SalesShipmentLine.ISEMPTY THEN
        ERROR(YouCannotChangeFieldErr,FIELDCAPTION("Buy-from Vendor No."));
    END;

    [External]
    PROCEDURE QtyToReceiveIsZero@30() : Boolean;
    BEGIN
      PurchLine.RESET;
      PurchLine.SETRANGE("Document Type","Document Type");
      PurchLine.SETRANGE("Document No.","No.");
      PurchLine.SETFILTER("Qty. to Receive",'<>0');
      EXIT(PurchLine.ISEMPTY);
    END;

    LOCAL PROCEDURE IsApprovedForPosting@50() : Boolean;
    VAR
      PrepaymentMgt@1000 : Codeunit 441;
      ConfirmManagement@1001 : Codeunit 27;
    BEGIN
      IF ApprovalsMgmt.PrePostApprovalCheckPurch(Rec) THEN BEGIN
        IF PrepaymentMgt.TestPurchasePrepayment(Rec) THEN
          ERROR(PrepaymentInvoicesNotPaidErr,"Document Type","No.");
        IF PrepaymentMgt.TestPurchasePayment(Rec) THEN
          IF NOT ConfirmManagement.ConfirmProcess(STRSUBSTNO(Text054,"Document Type","No."),TRUE) THEN
            EXIT(FALSE);
        EXIT(TRUE);
      END;
    END;

    [External]
    PROCEDURE IsApprovedForPostingBatch@51() : Boolean;
    VAR
      PrepaymentMgt@1000 : Codeunit 441;
    BEGIN
      IF ApprovalsMgmt.PrePostApprovalCheckPurch(Rec) THEN BEGIN
        IF PrepaymentMgt.TestPurchasePrepayment(Rec) THEN
          EXIT(FALSE);
        IF PrepaymentMgt.TestPurchasePayment(Rec) THEN
          EXIT(FALSE);
        EXIT(TRUE);
      END;
    END;

    [External]
    PROCEDURE IsTotalValid@36() : Boolean;
    VAR
      IncomingDocument@1002 : Record 130;
      PurchaseLine@1001 : Record 39;
      TempTotalPurchaseLine@1000 : TEMPORARY Record 39;
      GeneralLedgerSetup@1005 : Record 98;
      DocumentTotals@1003 : Codeunit 57;
      VATAmount@1004 : Decimal;
      IsHandled@1006 : Boolean;
    BEGIN
      OnBeforeIsTotalValid(Rec,IsHandled);
      IF IsHandled THEN
        EXIT(TRUE);

      IF NOT IncomingDocument.GET("Incoming Document Entry No.") THEN
        EXIT(TRUE);

      IF IncomingDocument."Amount Incl. VAT" = 0 THEN
        EXIT(TRUE);

      PurchaseLine.SETRANGE("Document Type","Document Type");
      PurchaseLine.SETRANGE("Document No.","No.");
      IF NOT PurchaseLine.FINDFIRST THEN
        EXIT(TRUE);

      GeneralLedgerSetup.GET;
      IF (IncomingDocument."Currency Code" <> PurchaseLine."Currency Code") AND
         (IncomingDocument."Currency Code" <> GeneralLedgerSetup."LCY Code")
      THEN
        EXIT(TRUE);

      TempTotalPurchaseLine.INIT;
      DocumentTotals.PurchaseCalculateTotalsWithInvoiceRounding(PurchaseLine,VATAmount,TempTotalPurchaseLine);

      EXIT(IncomingDocument."Amount Incl. VAT" = TempTotalPurchaseLine."Amount Including VAT");
    END;

    [External]
    PROCEDURE SendToPosting@57(PostingCodeunitID@1000 : Integer) IsSuccess : Boolean;
    VAR
      ErrorMessageMgt@1001 : Codeunit 28;
      ErrorMessageHandler@1002 : Codeunit 29;
    BEGIN
      IF NOT IsApprovedForPosting THEN
        EXIT;

      COMMIT;
      ErrorMessageMgt.Activate(ErrorMessageHandler);
      IsSuccess := CODEUNIT.RUN(PostingCodeunitID,Rec);
      IF NOT IsSuccess THEN
        ErrorMessageHandler.ShowErrors;
    END;

    [External]
    PROCEDURE CancelBackgroundPosting@33();
    VAR
      PurchasePostViaJobQueue@1000 : Codeunit 98;
    BEGIN
      PurchasePostViaJobQueue.CancelQueueEntry(Rec);
    END;

    [External]
    PROCEDURE AddSpecialOrderToAddress@80(SalesHeader@1000 : Record 36;ShowError@1001 : Boolean);
    VAR
      PurchaseHeader@1002 : Record 38;
    BEGIN
      IF ShowError THEN
        IF PurchLinesExist THEN BEGIN
          PurchaseHeader := Rec;
          PurchaseHeader.SetShipToForSpecOrder;
          IF "Ship-to Name" <> PurchaseHeader."Ship-to Name" THEN
            ERROR(Text052,FIELDCAPTION("Ship-to Name"),"No.",SalesHeader."No.");
          IF "Ship-to Name 2" <> PurchaseHeader."Ship-to Name 2" THEN
            ERROR(Text052,FIELDCAPTION("Ship-to Name 2"),"No.",SalesHeader."No.");
          IF "Ship-to Address" <> PurchaseHeader."Ship-to Address" THEN
            ERROR(Text052,FIELDCAPTION("Ship-to Address"),"No.",SalesHeader."No.");
          IF "Ship-to Address 2" <> PurchaseHeader."Ship-to Address 2" THEN
            ERROR(Text052,FIELDCAPTION("Ship-to Address 2"),"No.",SalesHeader."No.");
          IF "Ship-to Post Code" <> PurchaseHeader."Ship-to Post Code" THEN
            ERROR(Text052,FIELDCAPTION("Ship-to Post Code"),"No.",SalesHeader."No.");
          IF "Ship-to City" <> PurchaseHeader."Ship-to City" THEN
            ERROR(Text052,FIELDCAPTION("Ship-to City"),"No.",SalesHeader."No.");
          IF "Ship-to Contact" <> PurchaseHeader."Ship-to Contact" THEN
            ERROR(Text052,FIELDCAPTION("Ship-to Contact"),"No.",SalesHeader."No.");
        END ELSE
          SetShipToForSpecOrder;
    END;

    [External]
    PROCEDURE InvoicedLineExists@56() : Boolean;
    VAR
      PurchLine@1000 : Record 39;
    BEGIN
      PurchLine.SETRANGE("Document Type","Document Type");
      PurchLine.SETRANGE("Document No.","No.");
      PurchLine.SETFILTER(Type,'<>%1',PurchLine.Type::" ");
      PurchLine.SETFILTER("Quantity Invoiced",'<>%1',0);
      EXIT(NOT PurchLine.ISEMPTY);
    END;

    [External]
    PROCEDURE CreateDimSetForPrepmtAccDefaultDim@44();
    VAR
      PurchaseLine@1001 : Record 39;
      TempPurchaseLine@1002 : TEMPORARY Record 39;
    BEGIN
      PurchaseLine.SETRANGE("Document Type","Document Type");
      PurchaseLine.SETRANGE("Document No.","No.");
      PurchaseLine.SETFILTER("Prepmt. Amt. Inv.",'<>%1',0);
      IF PurchaseLine.FINDSET THEN
        REPEAT
          CollectParamsInBufferForCreateDimSet(TempPurchaseLine,PurchaseLine);
        UNTIL PurchaseLine.NEXT = 0;
      TempPurchaseLine.RESET;
      TempPurchaseLine.MARKEDONLY(FALSE);
      IF TempPurchaseLine.FINDSET THEN
        REPEAT
          PurchaseLine.CreateDim(DATABASE::"G/L Account",TempPurchaseLine."No.",
            DATABASE::Job,TempPurchaseLine."Job No.",
            DATABASE::"Responsibility Center",TempPurchaseLine."Responsibility Center",
            DATABASE::"Work Center",TempPurchaseLine."Work Center No.");
        UNTIL TempPurchaseLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CollectParamsInBufferForCreateDimSet@49(VAR TempPurchaseLine@1000 : TEMPORARY Record 39;PurchaseLine@1001 : Record 39);
    VAR
      GenPostingSetup@1002 : Record 252;
      DefaultDimension@1003 : Record 352;
    BEGIN
      TempPurchaseLine.SETRANGE("Gen. Bus. Posting Group",PurchaseLine."Gen. Bus. Posting Group");
      TempPurchaseLine.SETRANGE("Gen. Prod. Posting Group",PurchaseLine."Gen. Prod. Posting Group");
      IF NOT TempPurchaseLine.FINDFIRST THEN BEGIN
        GenPostingSetup.GET(PurchaseLine."Gen. Bus. Posting Group",PurchaseLine."Gen. Prod. Posting Group");
        GenPostingSetup.TESTFIELD("Purch. Prepayments Account");
        DefaultDimension.SETRANGE("Table ID",DATABASE::"G/L Account");
        DefaultDimension.SETRANGE("No.",GenPostingSetup."Purch. Prepayments Account");
        InsertTempPurchaseLineInBuffer(TempPurchaseLine,PurchaseLine,
          GenPostingSetup."Purch. Prepayments Account",DefaultDimension.ISEMPTY);
      END ELSE
        IF NOT TempPurchaseLine.MARK THEN BEGIN
          TempPurchaseLine.SETRANGE("Job No.",PurchaseLine."Job No.");
          TempPurchaseLine.SETRANGE("Responsibility Center",PurchaseLine."Responsibility Center");
          TempPurchaseLine.SETRANGE("Work Center No.",PurchaseLine."Work Center No.");
          OnCollectParamsInBufferForCreateDimSetOnAfterSetTempPurchLineFilters(TempPurchaseLine,PurchaseLine);
          IF TempPurchaseLine.ISEMPTY THEN
            InsertTempPurchaseLineInBuffer(TempPurchaseLine,PurchaseLine,TempPurchaseLine."No.",FALSE)
        END;
    END;

    LOCAL PROCEDURE InsertTempPurchaseLineInBuffer@35(VAR TempPurchaseLine@1000 : TEMPORARY Record 39;PurchaseLine@1001 : Record 39;AccountNo@1002 : Code[20];DefaultDimenstionsNotExist@1003 : Boolean);
    BEGIN
      TempPurchaseLine.INIT;
      TempPurchaseLine."Line No." := PurchaseLine."Line No.";
      TempPurchaseLine."No." := AccountNo;
      TempPurchaseLine."Job No." := PurchaseLine."Job No.";
      TempPurchaseLine."Responsibility Center" := PurchaseLine."Responsibility Center";
      TempPurchaseLine."Work Center No." := PurchaseLine."Work Center No.";
      TempPurchaseLine."Gen. Bus. Posting Group" := PurchaseLine."Gen. Bus. Posting Group";
      TempPurchaseLine."Gen. Prod. Posting Group" := PurchaseLine."Gen. Prod. Posting Group";
      TempPurchaseLine.MARK := DefaultDimenstionsNotExist;
      OnInsertTempPurchLineInBufferOnBeforeTempPurchLineInsert(TempPurchaseLine,PurchaseLine);
      TempPurchaseLine.INSERT;
    END;

    LOCAL PROCEDURE TransferItemChargeAssgntPurchToTemp@170(VAR ItemChargeAssgntPurch@1000 : Record 5805;VAR TempItemChargeAssgntPurch@1001 : TEMPORARY Record 5805);
    BEGIN
      ItemChargeAssgntPurch.SETRANGE("Document Type","Document Type");
      ItemChargeAssgntPurch.SETRANGE("Document No.","No.");
      IF ItemChargeAssgntPurch.FINDSET THEN BEGIN
        REPEAT
          TempItemChargeAssgntPurch := ItemChargeAssgntPurch;
          TempItemChargeAssgntPurch.INSERT;
        UNTIL ItemChargeAssgntPurch.NEXT = 0;
        ItemChargeAssgntPurch.DELETEALL;
      END;
    END;

    [External]
    PROCEDURE OpenPurchaseOrderStatistics@60();
    BEGIN
      CalcInvDiscForHeader;
      CreateDimSetForPrepmtAccDefaultDim;
      COMMIT;
      PAGE.RUNMODAL(PAGE::"Purchase Order Statistics",Rec);
    END;

    [External]
    PROCEDURE GetCardpageID@58() : Integer;
    BEGIN
      CASE "Document Type" OF
        "Document Type"::Quote:
          EXIT(PAGE::"Purchase Quote");
        "Document Type"::Order:
          EXIT(PAGE::"Purchase Order");
        "Document Type"::Invoice:
          EXIT(PAGE::"Purchase Invoice");
        "Document Type"::"Credit Memo":
          EXIT(PAGE::"Purchase Credit Memo");
        "Document Type"::"Blanket Order":
          EXIT(PAGE::"Blanket Purchase Order");
        "Document Type"::"Return Order":
          EXIT(PAGE::"Purchase Return Order");
      END;
    END;

    [Integration(TRUE)]
    PROCEDURE OnCheckPurchasePostRestrictions@54();
    BEGIN
    END;

    [Integration(TRUE)]
    LOCAL PROCEDURE OnCheckPurchaseReleaseRestrictions@55();
    BEGIN
    END;

    [External]
    PROCEDURE CheckPurchaseReleaseRestrictions@105();
    VAR
      ApprovalsMgmt@1000 : Codeunit 1535;
    BEGIN
      OnCheckPurchaseReleaseRestrictions;
      ApprovalsMgmt.PrePostApprovalCheckPurch(Rec);
    END;

    [External]
    PROCEDURE SetStatus@53(NewStatus@1000 : Option);
    BEGIN
      Status := NewStatus;
      MODIFY;
    END;

    [External]
    PROCEDURE TriggerOnAfterPostPurchaseDoc@116(VAR GenJnlPostLine@1001 : Codeunit 12;PurchRcpHdrNo@1002 : Code[20];RetShptHdrNo@1003 : Code[20];PurchInvHdrNo@1004 : Code[20];PurchCrMemoHdrNo@1005 : Code[20]);
    VAR
      PurchPost@1000 : Codeunit 90;
    BEGIN
      PurchPost.OnAfterPostPurchaseDoc(Rec,GenJnlPostLine,PurchRcpHdrNo,RetShptHdrNo,PurchInvHdrNo,PurchCrMemoHdrNo,FALSE);
    END;

    [External]
    PROCEDURE DeferralHeadersExist@38() : Boolean;
    VAR
      DeferralHeader@1000 : Record 1701;
      DeferralUtilities@1001 : Codeunit 1720;
    BEGIN
      DeferralHeader.SETRANGE("Deferral Doc. Type",DeferralUtilities.GetPurchDeferralDocType);
      DeferralHeader.SETRANGE("Gen. Jnl. Template Name",'');
      DeferralHeader.SETRANGE("Gen. Jnl. Batch Name",'');
      DeferralHeader.SETRANGE("Document Type","Document Type");
      DeferralHeader.SETRANGE("Document No.","No.");
      EXIT(NOT DeferralHeader.ISEMPTY);
    END;

    LOCAL PROCEDURE ConfirmUpdateDeferralDate@85();
    BEGIN
      IF GetHideValidationDialog OR NOT GUIALLOWED THEN
        Confirmed := TRUE
      ELSE
        Confirmed := CONFIRM(DeferralLineQst,FALSE,FIELDCAPTION("Posting Date"));
      IF Confirmed THEN
        UpdatePurchLinesByFieldNo(PurchLine.FIELDNO("Deferral Code"),FALSE);
    END;

    [External]
    PROCEDURE IsCreditDocType@110() : Boolean;
    VAR
      CreditDocType@1000 : Boolean;
    BEGIN
      CreditDocType := "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"];
      OnBeforeIsCreditDocType(Rec,CreditDocType);
      EXIT(CreditDocType);
    END;

    [External]
    PROCEDURE SetBuyFromVendorFromFilter@186();
    VAR
      BuyFromVendorNo@1000 : Code[20];
    BEGIN
      BuyFromVendorNo := GetFilterVendNo;
      IF BuyFromVendorNo = '' THEN BEGIN
        FILTERGROUP(2);
        BuyFromVendorNo := GetFilterVendNo;
        FILTERGROUP(0);
      END;
      IF BuyFromVendorNo <> '' THEN
        VALIDATE("Buy-from Vendor No.",BuyFromVendorNo);
    END;

    [External]
    PROCEDURE CopyBuyFromVendorFilter@59();
    VAR
      BuyFromVendorFilter@1000 : Text;
    BEGIN
      BuyFromVendorFilter := GETFILTER("Buy-from Vendor No.");
      IF BuyFromVendorFilter <> '' THEN BEGIN
        FILTERGROUP(2);
        SETFILTER("Buy-from Vendor No.",BuyFromVendorFilter);
        FILTERGROUP(0)
      END;
    END;

    LOCAL PROCEDURE GetFilterVendNo@64() : Code[20];
    BEGIN
      IF GETFILTER("Buy-from Vendor No.") <> '' THEN
        IF GETRANGEMIN("Buy-from Vendor No.") = GETRANGEMAX("Buy-from Vendor No.") THEN
          EXIT(GETRANGEMAX("Buy-from Vendor No."));
    END;

    [External]
    PROCEDURE HasBuyFromAddress@65() : Boolean;
    BEGIN
      CASE TRUE OF
        "Buy-from Address" <> '':
          EXIT(TRUE);
        "Buy-from Address 2" <> '':
          EXIT(TRUE);
        "Buy-from City" <> '':
          EXIT(TRUE);
        "Buy-from Country/Region Code" <> '':
          EXIT(TRUE);
        "Buy-from County" <> '':
          EXIT(TRUE);
        "Buy-from Post Code" <> '':
          EXIT(TRUE);
        "Buy-from Contact" <> '':
          EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    [External]
    PROCEDURE HasShipToAddress@103() : Boolean;
    BEGIN
      CASE TRUE OF
        "Ship-to Address" <> '':
          EXIT(TRUE);
        "Ship-to Address 2" <> '':
          EXIT(TRUE);
        "Ship-to City" <> '':
          EXIT(TRUE);
        "Ship-to Country/Region Code" <> '':
          EXIT(TRUE);
        "Ship-to County" <> '':
          EXIT(TRUE);
        "Ship-to Post Code" <> '':
          EXIT(TRUE);
        "Ship-to Contact" <> '':
          EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    [External]
    PROCEDURE HasPayToAddress@66() : Boolean;
    BEGIN
      CASE TRUE OF
        "Pay-to Address" <> '':
          EXIT(TRUE);
        "Pay-to Address 2" <> '':
          EXIT(TRUE);
        "Pay-to City" <> '':
          EXIT(TRUE);
        "Pay-to Country/Region Code" <> '':
          EXIT(TRUE);
        "Pay-to County" <> '':
          EXIT(TRUE);
        "Pay-to Post Code" <> '':
          EXIT(TRUE);
        "Pay-to Contact" <> '':
          EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE HasItemChargeAssignment@171() : Boolean;
    VAR
      ItemChargeAssgntPurch@1000 : Record 5805;
    BEGIN
      ItemChargeAssgntPurch.SETRANGE("Document Type","Document Type");
      ItemChargeAssgntPurch.SETRANGE("Document No.","No.");
      ItemChargeAssgntPurch.SETFILTER("Amount to Assign",'<>%1',0);
      EXIT(NOT ItemChargeAssgntPurch.ISEMPTY);
    END;

    LOCAL PROCEDURE CopyBuyFromVendorAddressFieldsFromVendor@62(VAR BuyFromVendor@1000 : Record 23;ForceCopy@1001 : Boolean);
    BEGIN
      IF BuyFromVendorIsReplaced OR ShouldCopyAddressFromBuyFromVendor(BuyFromVendor) OR ForceCopy THEN BEGIN
        "Buy-from Address" := BuyFromVendor.Address;
        "Buy-from Address 2" := BuyFromVendor."Address 2";
        "Buy-from City" := BuyFromVendor.City;
        "Buy-from Post Code" := BuyFromVendor."Post Code";
        "Buy-from County" := BuyFromVendor.County;
        "Buy-from Country/Region Code" := BuyFromVendor."Country/Region Code";
        OnAfterCopyBuyFromVendorAddressFieldsFromVendor(Rec,BuyFromVendor);
      END;
    END;

    LOCAL PROCEDURE CopyShipToVendorAddressFieldsFromVendor@98(VAR BuyFromVendor@1000 : Record 23;ForceCopy@1001 : Boolean);
    BEGIN
      IF BuyFromVendorIsReplaced OR (NOT HasShipToAddress) OR ForceCopy THEN BEGIN
        "Ship-to Address" := BuyFromVendor.Address;
        "Ship-to Address 2" := BuyFromVendor."Address 2";
        "Ship-to City" := BuyFromVendor.City;
        "Ship-to Post Code" := BuyFromVendor."Post Code";
        "Ship-to County" := BuyFromVendor.County;
        VALIDATE("Ship-to Country/Region Code",BuyFromVendor."Country/Region Code");
        OnAfterCopyShipToVendorAddressFieldsFromVendor(Rec,BuyFromVendor);
      END;
    END;

    LOCAL PROCEDURE CopyPayToVendorAddressFieldsFromVendor@63(VAR PayToVendor@1000 : Record 23;ForceCopy@1001 : Boolean);
    BEGIN
      IF PayToVendorIsReplaced OR ShouldCopyAddressFromPayToVendor(PayToVendor) OR ForceCopy THEN BEGIN
        "Pay-to Address" := PayToVendor.Address;
        "Pay-to Address 2" := PayToVendor."Address 2";
        "Pay-to City" := PayToVendor.City;
        "Pay-to Post Code" := PayToVendor."Post Code";
        "Pay-to County" := PayToVendor.County;
        "Pay-to Country/Region Code" := PayToVendor."Country/Region Code";
        OnAfterCopyPayToVendorAddressFieldsFromVendor(Rec,PayToVendor);
      END;
    END;

    [External]
    PROCEDURE SetShipToAddress@117(ShipToName@1000 : Text[100];ShipToName2@1001 : Text[50];ShipToAddress@1002 : Text[100];ShipToAddress2@1003 : Text[50];ShipToCity@1004 : Text[30];ShipToPostCode@1005 : Code[20];ShipToCounty@1006 : Text[30];ShipToCountryRegionCode@1007 : Code[10]);
    BEGIN
      "Ship-to Name" := ShipToName;
      "Ship-to Name 2" := ShipToName2;
      "Ship-to Address" := ShipToAddress;
      "Ship-to Address 2" := ShipToAddress2;
      "Ship-to City" := ShipToCity;
      "Ship-to Post Code" := ShipToPostCode;
      "Ship-to County" := ShipToCounty;
      "Ship-to Country/Region Code" := ShipToCountryRegionCode;
    END;

    LOCAL PROCEDURE ShouldCopyAddressFromBuyFromVendor@101(BuyFromVendor@1000 : Record 23) : Boolean;
    BEGIN
      EXIT((NOT HasBuyFromAddress) AND BuyFromVendor.HasAddress);
    END;

    LOCAL PROCEDURE ShouldCopyAddressFromPayToVendor@102(PayToVendor@1000 : Record 23) : Boolean;
    BEGIN
      EXIT((NOT HasPayToAddress) AND PayToVendor.HasAddress);
    END;

    LOCAL PROCEDURE ShouldLookForVendorByName@182(VendorNo@1000 : Code[20]) : Boolean;
    VAR
      Vendor@1001 : Record 23;
    BEGIN
      IF VendorNo = '' THEN
        EXIT(TRUE);

      IF NOT Vendor.GET(VendorNo) THEN
        EXIT(TRUE);

      EXIT(NOT Vendor."Disable Search by Name");
    END;

    LOCAL PROCEDURE BuyFromVendorIsReplaced@96() : Boolean;
    BEGIN
      EXIT((xRec."Buy-from Vendor No." <> '') AND (xRec."Buy-from Vendor No." <> "Buy-from Vendor No."));
    END;

    LOCAL PROCEDURE PayToVendorIsReplaced@97() : Boolean;
    BEGIN
      EXIT((xRec."Pay-to Vendor No." <> '') AND (xRec."Pay-to Vendor No." <> "Pay-to Vendor No."));
    END;

    LOCAL PROCEDURE UpdatePayToAddressFromBuyFromAddress@61(FieldNumber@1000 : Integer);
    BEGIN
      IF ("Order Address Code" = '') AND PayToAddressEqualsOldBuyFromAddress THEN
        CASE FieldNumber OF
          FIELDNO("Pay-to Address"):
            IF xRec."Buy-from Address" = "Pay-to Address" THEN
              "Pay-to Address" := "Buy-from Address";
          FIELDNO("Pay-to Address 2"):
            IF xRec."Buy-from Address 2" = "Pay-to Address 2" THEN
              "Pay-to Address 2" := "Buy-from Address 2";
          FIELDNO("Pay-to City"), FIELDNO("Pay-to Post Code"):
            BEGIN
              IF xRec."Buy-from City" = "Pay-to City" THEN
                "Pay-to City" := "Buy-from City";
              IF xRec."Buy-from Post Code" = "Pay-to Post Code" THEN
                "Pay-to Post Code" := "Buy-from Post Code";
              IF xRec."Buy-from County" = "Pay-to County" THEN
                "Pay-to County" := "Buy-from County";
              IF xRec."Buy-from Country/Region Code" = "Pay-to Country/Region Code" THEN
                "Pay-to Country/Region Code" := "Buy-from Country/Region Code";
            END;
          FIELDNO("Pay-to County"):
            IF xRec."Buy-from County" = "Pay-to County" THEN
              "Pay-to County" := "Buy-from County";
          FIELDNO("Pay-to Country/Region Code"):
            IF  xRec."Buy-from Country/Region Code" = "Pay-to Country/Region Code" THEN
              "Pay-to Country/Region Code" := "Buy-from Country/Region Code";
        END;
    END;

    LOCAL PROCEDURE PayToAddressEqualsOldBuyFromAddress@67() : Boolean;
    BEGIN
      IF (xRec."Buy-from Address" = "Pay-to Address") AND
         (xRec."Buy-from Address 2" = "Pay-to Address 2") AND
         (xRec."Buy-from City" = "Pay-to City") AND
         (xRec."Buy-from County" = "Pay-to County") AND
         (xRec."Buy-from Post Code" = "Pay-to Post Code") AND
         (xRec."Buy-from Country/Region Code" = "Pay-to Country/Region Code")
      THEN
        EXIT(TRUE);
    END;

    [External]
    PROCEDURE ConfirmCloseUnposted@104() : Boolean;
    VAR
      InstructionMgt@1000 : Codeunit 1330;
    BEGIN
      IF PurchLinesExist THEN
        IF InstructionMgt.IsUnpostedEnabledForRecord(Rec) THEN
          EXIT(InstructionMgt.ShowConfirm(DocumentNotPostedClosePageQst,InstructionMgt.QueryPostOnCloseCode));
      EXIT(TRUE)
    END;

    [External]
    PROCEDURE InitFromPurchHeader@109(SourcePurchHeader@1000 : Record 38);
    BEGIN
      "Document Date" := SourcePurchHeader."Document Date";
      "Expected Receipt Date" := SourcePurchHeader."Expected Receipt Date";
      "Shortcut Dimension 1 Code" := SourcePurchHeader."Shortcut Dimension 1 Code";
      "Shortcut Dimension 2 Code" := SourcePurchHeader."Shortcut Dimension 2 Code";
      "Dimension Set ID" := SourcePurchHeader."Dimension Set ID";
      "Location Code" := SourcePurchHeader."Location Code";
      SetShipToAddress(
        SourcePurchHeader."Ship-to Name",SourcePurchHeader."Ship-to Name 2",SourcePurchHeader."Ship-to Address",
        SourcePurchHeader."Ship-to Address 2",SourcePurchHeader."Ship-to City",SourcePurchHeader."Ship-to Post Code",
        SourcePurchHeader."Ship-to County",SourcePurchHeader."Ship-to Country/Region Code");
      "Ship-to Contact" := SourcePurchHeader."Ship-to Contact";

      OnInitFromPurchHeader(Rec,SourcePurchHeader);
    END;

    LOCAL PROCEDURE InitFromVendor@68(VendorNo@1000 : Code[20];VendorCaption@1001 : Text) : Boolean;
    BEGIN
      PurchLine.SETRANGE("Document Type","Document Type");
      PurchLine.SETRANGE("Document No.","No.");
      IF VendorNo = '' THEN BEGIN
        IF NOT PurchLine.ISEMPTY THEN
          ERROR(Text005,VendorCaption);
        INIT;
        GetPurchSetup;
        "No. Series" := xRec."No. Series";
        OnInitFromVendorOnBeforeInitRecord(Rec,xRec);
        InitRecord;
        InitNoSeries;
        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE InitFromContact@69(ContactNo@1000 : Code[20];VendorNo@1001 : Code[20];ContactCaption@1002 : Text) : Boolean;
    BEGIN
      PurchLine.SETRANGE("Document Type","Document Type");
      PurchLine.SETRANGE("Document No.","No.");
      IF (ContactNo = '') AND (VendorNo = '') THEN BEGIN
        IF NOT PurchLine.ISEMPTY THEN
          ERROR(Text005,ContactCaption);
        INIT;
        GetPurchSetup;
        "No. Series" := xRec."No. Series";
        OnInitFromContactOnBeforeInitRecord(Rec,xRec);
        InitRecord;
        InitNoSeries;
        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE LookupContact@122(VendorNo@1000 : Code[20];ContactNo@1003 : Code[20];VAR Contact@1001 : Record 5050);
    VAR
      ContactBusinessRelation@1002 : Record 5054;
    BEGIN
      IF ContactBusinessRelation.FindByRelation(ContactBusinessRelation."Link to Table"::Vendor,VendorNo) THEN
        Contact.SETRANGE("Company No.",ContactBusinessRelation."Contact No.")
      ELSE
        Contact.SETRANGE("Company No.",'');
      IF ContactNo <> '' THEN
        IF Contact.GET(ContactNo) THEN ;
    END;

    [Internal]
    PROCEDURE SendRecords@75();
    VAR
      DocumentSendingProfile@1000 : Record 60;
      ReportSelections@1001 : Record 77;
      DocTxt@1002 : Text[150];
    BEGIN
      CheckMixedDropShipment;

      GetReportSelectionsUsageFromDocumentType(ReportSelections.Usage,DocTxt);

      DocumentSendingProfile.SendVendorRecords(
        ReportSelections.Usage,Rec,DocTxt,"Buy-from Vendor No.","No.",
        FIELDNO("Buy-from Vendor No."),FIELDNO("No."));
    END;

    [External]
    PROCEDURE PrintRecords@74(ShowRequestForm@1002 : Boolean);
    VAR
      DocumentSendingProfile@1001 : Record 60;
      DummyReportSelections@1000 : Record 77;
    BEGIN
      CheckMixedDropShipment;

      DocumentSendingProfile.TrySendToPrinterVendor(
        DummyReportSelections.Usage::"P.Order",Rec,FIELDNO("Buy-from Vendor No."),ShowRequestForm);
    END;

    [External]
    PROCEDURE SendProfile@73(VAR DocumentSendingProfile@1000 : Record 60);
    VAR
      DummyReportSelections@1001 : Record 77;
      ReportDistributionMgt@1002 : Codeunit 452;
    BEGIN
      CheckMixedDropShipment;

      DocumentSendingProfile.SendVendor(
        DummyReportSelections.Usage::"P.Order",Rec,"No.","Buy-from Vendor No.",
        ReportDistributionMgt.GetFullDocumentTypeText(Rec),FIELDNO("Buy-from Vendor No."),FIELDNO("No."));
    END;

    LOCAL PROCEDURE CheckMixedDropShipment@84();
    BEGIN
      IF HasMixedDropShipment THEN
        ERROR(MixedDropshipmentErr);
    END;

    LOCAL PROCEDURE HasMixedDropShipment@83() : Boolean;
    VAR
      PurchaseLine@1000 : Record 39;
      HasDropShipmentLines@1001 : Boolean;
    BEGIN
      PurchaseLine.SETRANGE("Document Type","Document Type");
      PurchaseLine.SETRANGE("Document No.","No.");
      PurchaseLine.SETFILTER("No.",'<>%1','');
      PurchaseLine.SETFILTER(Type,'%1|%2',PurchaseLine.Type::Item,PurchaseLine.Type::"Fixed Asset");
      PurchaseLine.SETRANGE("Drop Shipment",TRUE);

      HasDropShipmentLines := NOT PurchaseLine.ISEMPTY;

      PurchaseLine.SETRANGE("Drop Shipment",FALSE);

      EXIT(HasDropShipmentLines AND NOT PurchaseLine.ISEMPTY);
    END;

    LOCAL PROCEDURE SetDefaultPurchaser@76();
    VAR
      UserSetupPurchaserCode@1000 : Code[20];
    BEGIN
      UserSetupPurchaserCode := GetUserSetupPurchaserCode;
      IF UserSetupPurchaserCode <> '' THEN
        IF SalespersonPurchaser.GET(UserSetupPurchaserCode) THEN
          IF NOT SalespersonPurchaser.VerifySalesPersonPurchaserPrivacyBlocked(SalespersonPurchaser) THEN
            VALIDATE("Purchaser Code",UserSetupPurchaserCode);
    END;

    LOCAL PROCEDURE GetUserSetupPurchaserCode@203() : Code[20];
    VAR
      UserSetup@1000 : Record 91;
    BEGIN
      IF NOT UserSetup.GET(USERID) THEN
        EXIT;

      EXIT(UserSetup."Salespers./Purch. Code");
    END;

    [External]
    PROCEDURE OnAfterValidateBuyFromVendorNo@77(VAR PurchaseHeader@1000 : Record 38;VAR xPurchaseHeader@1001 : Record 38);
    BEGIN
      IF PurchaseHeader.GETFILTER("Buy-from Vendor No.") = xPurchaseHeader."Buy-from Vendor No." THEN
        IF PurchaseHeader."Buy-from Vendor No." <> xPurchaseHeader."Buy-from Vendor No." THEN
          PurchaseHeader.SETRANGE("Buy-from Vendor No.");
    END;

    [External]
    PROCEDURE BatchConfirmUpdateDeferralDate@78(VAR BatchConfirm@1000 : ' ,Skip,Update';ReplacePostingDate@1001 : Boolean;PostingDateReq@1002 : Date);
    BEGIN
      IF (NOT ReplacePostingDate) OR (PostingDateReq = "Posting Date") OR (BatchConfirm = BatchConfirm::Skip) THEN
        EXIT;

      IF NOT DeferralHeadersExist THEN
        EXIT;

      "Posting Date" := PostingDateReq;
      CASE BatchConfirm OF
        BatchConfirm::" ":
          BEGIN
            ConfirmUpdateDeferralDate;
            IF Confirmed THEN
              BatchConfirm := BatchConfirm::Update
            ELSE
              BatchConfirm := BatchConfirm::Skip;
          END;
        BatchConfirm::Update:
          UpdatePurchLinesByFieldNo(PurchLine.FIELDNO("Deferral Code"),FALSE);
      END;
      COMMIT;
    END;

    [External]
    PROCEDURE SetAllowSelectNoSeries@86();
    BEGIN
      SelectNoSeriesAllowed := TRUE;
    END;

    LOCAL PROCEDURE ModifyPayToVendorAddress@194();
    VAR
      Vendor@1000 : Record 23;
    BEGIN
      GetPurchSetup;
      IF PurchSetup."Ignore Updated Addresses" THEN
        EXIT;
      IF IsCreditDocType THEN
        EXIT;
      IF ("Pay-to Vendor No." <> "Buy-from Vendor No.") AND Vendor.GET("Pay-to Vendor No.") THEN
        IF HasPayToAddress AND HasDifferentPayToAddress(Vendor) THEN
          ShowModifyAddressNotification(GetModifyPayToVendorAddressNotificationId,
            ModifyVendorAddressNotificationLbl,ModifyVendorAddressNotificationMsg,
            'CopyPayToVendorAddressFieldsFromSalesDocument',"Pay-to Vendor No.",
            "Pay-to Name",FIELDNAME("Pay-to Vendor No."));
    END;

    LOCAL PROCEDURE ModifyVendorAddress@150();
    VAR
      Vendor@1000 : Record 23;
    BEGIN
      GetPurchSetup;
      IF PurchSetup."Ignore Updated Addresses" THEN
        EXIT;
      IF IsCreditDocType THEN
        EXIT;
      IF Vendor.GET("Buy-from Vendor No.") AND HasBuyFromAddress AND HasDifferentBuyFromAddress(Vendor) THEN
        ShowModifyAddressNotification(GetModifyVendorAddressNotificationId,
          ModifyVendorAddressNotificationLbl,ModifyVendorAddressNotificationMsg,
          'CopyBuyFromVendorAddressFieldsFromSalesDocument',"Buy-from Vendor No.",
          "Buy-from Vendor Name",FIELDNAME("Buy-from Vendor No."));
    END;

    LOCAL PROCEDURE ShowModifyAddressNotification@157(NotificationID@1001 : GUID;NotificationLbl@1004 : Text;NotificationMsg@1005 : Text;NotificationFunctionTok@1006 : Text;VendorNumber@1002 : Code[20];VendorName@1003 : Text[100];VendorNumberFieldName@1008 : Text);
    VAR
      MyNotifications@1009 : Record 1518;
      NotificationLifecycleMgt@1007 : Codeunit 1511;
      ModifyVendorAddressNotification@1000 : Notification;
    BEGIN
      IF NOT MyNotifications.IsEnabled(NotificationID) THEN
        EXIT;

      ModifyVendorAddressNotification.ID := NotificationID;
      ModifyVendorAddressNotification.MESSAGE := STRSUBSTNO(NotificationMsg,VendorName);
      ModifyVendorAddressNotification.ADDACTION(NotificationLbl,CODEUNIT::"Document Notifications",NotificationFunctionTok);
      ModifyVendorAddressNotification.ADDACTION(
        DontShowAgainActionLbl,CODEUNIT::"Document Notifications",'HidePurchaseNotificationForCurrentUser');
      ModifyVendorAddressNotification.SCOPE := NOTIFICATIONSCOPE::LocalScope;
      ModifyVendorAddressNotification.SETDATA(FIELDNAME("Document Type"),FORMAT("Document Type"));
      ModifyVendorAddressNotification.SETDATA(FIELDNAME("No."),"No.");
      ModifyVendorAddressNotification.SETDATA(VendorNumberFieldName,VendorNumber);
      NotificationLifecycleMgt.SendNotification(ModifyVendorAddressNotification,RECORDID);
    END;

    [External]
    PROCEDURE RecallModifyAddressNotification@148(NotificationID@1001 : GUID);
    VAR
      MyNotifications@1002 : Record 1518;
      ModifyVendorAddressNotification@1000 : Notification;
    BEGIN
      IF IsCreditDocType OR (NOT MyNotifications.IsEnabled(NotificationID)) THEN
        EXIT;
      ModifyVendorAddressNotification.ID := NotificationID;
      ModifyVendorAddressNotification.RECALL;
    END;

    [External]
    PROCEDURE GetModifyVendorAddressNotificationId@193() : GUID;
    BEGIN
      EXIT('CF3D0CD3-C54A-47D1-8A3F-57A6CCBA8DDE');
    END;

    [External]
    PROCEDURE GetModifyPayToVendorAddressNotificationId@191() : GUID;
    BEGIN
      EXIT('16E45B3A-CB9F-4B2C-9F08-2BCE39E9E980');
    END;

    [External]
    PROCEDURE GetShowExternalDocAlreadyExistNotificationId@92() : GUID;
    BEGIN
      EXIT('D87F624C-D3BE-4E6B-A369-D18AE269181A');
    END;

    [External]
    PROCEDURE GetLineInvoiceDiscountResetNotificationId@233() : GUID;
    BEGIN
      EXIT('3DC9C8BC-0512-4A49-B587-256C308EBCAA');
    END;

    [External]
    PROCEDURE SetModifyVendorAddressNotificationDefaultState@196();
    VAR
      MyNotifications@1000 : Record 1518;
    BEGIN
      MyNotifications.InsertDefault(GetModifyVendorAddressNotificationId,
        ModifyBuyFromVendorAddressNotificationNameTxt,ModifyBuyFromVendorAddressNotificationDescriptionTxt,TRUE);
    END;

    [External]
    PROCEDURE SetModifyPayToVendorAddressNotificationDefaultState@197();
    VAR
      MyNotifications@1000 : Record 1518;
    BEGIN
      MyNotifications.InsertDefault(GetModifyPayToVendorAddressNotificationId,
        ModifyPayToVendorAddressNotificationNameTxt,ModifyPayToVendorAddressNotificationDescriptionTxt,TRUE);
    END;

    [External]
    PROCEDURE SetShowExternalDocAlreadyExistNotificationDefaultState@87(DefaultState@1001 : Boolean);
    VAR
      MyNotifications@1000 : Record 1518;
    BEGIN
      MyNotifications.InsertDefault(GetShowExternalDocAlreadyExistNotificationId,
        ShowDocAlreadyExistNotificationNameTxt,ShowDocAlreadyExistNotificationDescriptionTxt,DefaultState);
    END;

    [External]
    PROCEDURE DontNotifyCurrentUserAgain@141(NotificationID@1001 : GUID);
    VAR
      MyNotifications@1000 : Record 1518;
    BEGIN
      IF NOT MyNotifications.Disable(NotificationID) THEN
        CASE NotificationID OF
          GetModifyVendorAddressNotificationId:
            MyNotifications.InsertDefault(NotificationID,ModifyBuyFromVendorAddressNotificationNameTxt,
              ModifyBuyFromVendorAddressNotificationDescriptionTxt,FALSE);
          GetModifyPayToVendorAddressNotificationId:
            MyNotifications.InsertDefault(NotificationID,ModifyPayToVendorAddressNotificationNameTxt,
              ModifyPayToVendorAddressNotificationDescriptionTxt,FALSE);
        END;
    END;

    LOCAL PROCEDURE HasDifferentBuyFromAddress@195(Vendor@1000 : Record 23) : Boolean;
    BEGIN
      EXIT(("Buy-from Address" <> Vendor.Address) OR
        ("Buy-from Address 2" <> Vendor."Address 2") OR
        ("Buy-from City" <> Vendor.City) OR
        ("Buy-from Country/Region Code" <> Vendor."Country/Region Code") OR
        ("Buy-from County" <> Vendor.County) OR
        ("Buy-from Post Code" <> Vendor."Post Code") OR
        ("Buy-from Contact" <> Vendor.Contact));
    END;

    LOCAL PROCEDURE HasDifferentPayToAddress@192(Vendor@1000 : Record 23) : Boolean;
    BEGIN
      EXIT(("Pay-to Address" <> Vendor.Address) OR
        ("Pay-to Address 2" <> Vendor."Address 2") OR
        ("Pay-to City" <> Vendor.City) OR
        ("Pay-to Country/Region Code" <> Vendor."Country/Region Code") OR
        ("Pay-to County" <> Vendor.County) OR
        ("Pay-to Post Code" <> Vendor."Post Code") OR
        ("Pay-to Contact" <> Vendor.Contact));
    END;

    LOCAL PROCEDURE FindPostedDocumentWithSameExternalDocNo@88(VAR VendorLedgerEntry@1000 : Record 25;ExternalDocumentNo@1001 : Code[35]) : Boolean;
    VAR
      VendorMgt@1002 : Codeunit 1312;
    BEGIN
      VendorMgt.SetFilterForExternalDocNo(
        VendorLedgerEntry,GetGenJnlDocumentType,ExternalDocumentNo,"Pay-to Vendor No.","Document Date");
      EXIT(VendorLedgerEntry.FINDFIRST);
    END;

    [External]
    PROCEDURE FilterPartialReceived@108();
    VAR
      PurchaseHeaderOriginal@1000 : Record 38;
      ReceiveFilter@1004 : Text;
      IsMarked@1003 : Boolean;
      ReceiveValue@1001 : Boolean;
    BEGIN
      ReceiveFilter := GETFILTER(Receive);
      SETRANGE(Receive);
      EVALUATE(ReceiveValue,ReceiveFilter);

      PurchaseHeaderOriginal := Rec;
      IF FINDSET THEN
        REPEAT
          IF NOT HasReceivedLines THEN
            IsMarked := NOT ReceiveValue
          ELSE
            IsMarked := ReceiveValue;
          MARK(IsMarked);
        UNTIL NEXT = 0;

      Rec := PurchaseHeaderOriginal;
      MARKEDONLY(TRUE);
    END;

    [External]
    PROCEDURE FilterPartialInvoiced@307();
    VAR
      PurchaseHeaderOriginal@1000 : Record 38;
      InvoiceFilter@1004 : Text;
      IsMarked@1003 : Boolean;
      InvoiceValue@1001 : Boolean;
    BEGIN
      InvoiceFilter := GETFILTER(Invoice);
      SETRANGE(Invoice);
      EVALUATE(InvoiceValue,InvoiceFilter);

      PurchaseHeaderOriginal := Rec;
      IF FINDSET THEN
        REPEAT
          IF NOT HasInvoicedLines THEN
            IsMarked := NOT InvoiceValue
          ELSE
            IsMarked := InvoiceValue;
          MARK(IsMarked);
        UNTIL NEXT = 0;

      Rec := PurchaseHeaderOriginal;
      MARKEDONLY(TRUE);
    END;

    LOCAL PROCEDURE HasReceivedLines@126() : Boolean;
    VAR
      PurchaseLine@1002 : Record 39;
    BEGIN
      PurchaseLine.SETRANGE("Document Type","Document Type");
      PurchaseLine.SETRANGE("Document No.","No.");
      PurchaseLine.SETFILTER("No.",'<>%1','');
      PurchaseLine.SETFILTER("Quantity Received",'<>%1',0);
      EXIT(NOT PurchaseLine.ISEMPTY);
    END;

    LOCAL PROCEDURE HasInvoicedLines@123() : Boolean;
    VAR
      PurchaseLine@1002 : Record 39;
    BEGIN
      PurchaseLine.SETRANGE("Document Type","Document Type");
      PurchaseLine.SETRANGE("Document No.","No.");
      PurchaseLine.SETFILTER("No.",'<>%1','');
      PurchaseLine.SETFILTER("Quantity Invoiced",'<>%1',0);
      EXIT(NOT PurchaseLine.ISEMPTY);
    END;

    LOCAL PROCEDURE ShowExternalDocAlreadyExistNotification@89(VendorLedgerEntry@1000 : Record 25);
    VAR
      NotificationLifecycleMgt@1002 : Codeunit 1511;
      DocAlreadyExistNotification@1001 : Notification;
    BEGIN
      IF NOT IsDocAlreadyExistNotificationEnabled THEN
        EXIT;

      DocAlreadyExistNotification.ID := GetShowExternalDocAlreadyExistNotificationId;
      DocAlreadyExistNotification.MESSAGE :=
        STRSUBSTNO(PurchaseAlreadyExistsTxt,VendorLedgerEntry."Document Type",VendorLedgerEntry."External Document No.");
      DocAlreadyExistNotification.ADDACTION(ShowVendLedgEntryTxt,CODEUNIT::"Document Notifications",'ShowVendorLedgerEntry');
      DocAlreadyExistNotification.SCOPE := NOTIFICATIONSCOPE::LocalScope;
      DocAlreadyExistNotification.SETDATA(FIELDNAME("Document Type"),FORMAT("Document Type"));
      DocAlreadyExistNotification.SETDATA(FIELDNAME("No."),"No.");
      DocAlreadyExistNotification.SETDATA(VendorLedgerEntry.FIELDNAME("Entry No."),FORMAT(VendorLedgerEntry."Entry No."));
      NotificationLifecycleMgt.SendNotificationWithAdditionalContext(
        DocAlreadyExistNotification,RECORDID,GetShowExternalDocAlreadyExistNotificationId);
    END;

    LOCAL PROCEDURE GetGenJnlDocumentType@90() : Integer;
    VAR
      RefGenJournalLine@1000 : Record 81;
    BEGIN
      CASE "Document Type" OF
        "Document Type"::"Blanket Order",
        "Document Type"::Quote,
        "Document Type"::Invoice,
        "Document Type"::Order:
          EXIT(RefGenJournalLine."Document Type"::Invoice);
        ELSE
          EXIT(RefGenJournalLine."Document Type"::"Credit Memo");
      END;
    END;

    LOCAL PROCEDURE RecallExternalDocAlreadyExistsNotification@39();
    VAR
      NotificationLifecycleMgt@1000 : Codeunit 1511;
    BEGIN
      IF NOT IsDocAlreadyExistNotificationEnabled THEN
        EXIT;

      NotificationLifecycleMgt.RecallNotificationsForRecordWithAdditionalContext(
        RECORDID,GetShowExternalDocAlreadyExistNotificationId,TRUE);
    END;

    LOCAL PROCEDURE IsDocAlreadyExistNotificationEnabled@91() : Boolean;
    VAR
      InstructionMgt@1000 : Codeunit 1330;
    BEGIN
      EXIT(InstructionMgt.IsMyNotificationEnabled(GetShowExternalDocAlreadyExistNotificationId));
    END;

    [External]
    PROCEDURE ShipToAddressEqualsCompanyShipToAddress@111() : Boolean;
    VAR
      CompanyInformation@1000 : Record 79;
    BEGIN
      CompanyInformation.GET;
      EXIT(IsShipToAddressEqualToCompanyShipToAddress(Rec,CompanyInformation));
    END;

    LOCAL PROCEDURE IsShipToAddressEqualToCompanyShipToAddress@113(PurchaseHeader@1000 : Record 38;CompanyInformation@1001 : Record 79) : Boolean;
    BEGIN
      EXIT(
        (PurchaseHeader."Ship-to Address" = CompanyInformation."Ship-to Address") AND
        (PurchaseHeader."Ship-to Address 2" = CompanyInformation."Ship-to Address 2") AND
        (PurchaseHeader."Ship-to City" = CompanyInformation."Ship-to City") AND
        (PurchaseHeader."Ship-to County" = CompanyInformation."Ship-to County") AND
        (PurchaseHeader."Ship-to Post Code" = CompanyInformation."Ship-to Post Code") AND
        (PurchaseHeader."Ship-to Country/Region Code" = CompanyInformation."Ship-to Country/Region Code") AND
        (PurchaseHeader."Ship-to Name" = CompanyInformation."Ship-to Name"));
    END;

    [External]
    PROCEDURE BuyFromAddressEqualsShipToAddress@94() : Boolean;
    BEGIN
      EXIT(
        ("Ship-to Address" = "Buy-from Address") AND
        ("Ship-to Address 2" = "Buy-from Address 2") AND
        ("Ship-to City" = "Buy-from City") AND
        ("Ship-to County" = "Buy-from County") AND
        ("Ship-to Post Code" = "Buy-from Post Code") AND
        ("Ship-to Country/Region Code" = "Buy-from Country/Region Code") AND
        ("Ship-to Name" = "Buy-from Vendor Name"));
    END;

    [External]
    PROCEDURE BuyFromAddressEqualsPayToAddress@163() : Boolean;
    BEGIN
      EXIT(
        ("Pay-to Address" = "Buy-from Address") AND
        ("Pay-to Address 2" = "Buy-from Address 2") AND
        ("Pay-to City" = "Buy-from City") AND
        ("Pay-to County" = "Buy-from County") AND
        ("Pay-to Post Code" = "Buy-from Post Code") AND
        ("Pay-to Country/Region Code" = "Buy-from Country/Region Code") AND
        ("Pay-to Contact No." = "Buy-from Contact No.") AND
        ("Pay-to Contact" = "Buy-from Contact"));
    END;

    LOCAL PROCEDURE SetPurchaserCode@933(PurchaserCodeToCheck@1000 : Code[20];VAR PurchaserCodeToAssign@1001 : Code[20]);
    VAR
      UserSetupPurchaserCode@1002 : Code[20];
    BEGIN
      UserSetupPurchaserCode := GetUserSetupPurchaserCode;
      IF PurchaserCodeToCheck <> '' THEN BEGIN
        IF SalespersonPurchaser.GET(PurchaserCodeToCheck) THEN
          IF SalespersonPurchaser.VerifySalesPersonPurchaserPrivacyBlocked(SalespersonPurchaser) THEN BEGIN
            IF UserSetupPurchaserCode = '' THEN
              PurchaserCodeToAssign := ''
          END ELSE
            PurchaserCodeToAssign := PurchaserCodeToCheck;
      END ELSE
        IF UserSetupPurchaserCode = '' THEN
          PurchaserCodeToAssign := '';
    END;

    [External]
    PROCEDURE ValidatePurchaserOnPurchHeader@912(PurchaseHeader2@1000 : Record 38;IsTransaction@1001 : Boolean;IsPostAction@1002 : Boolean);
    BEGIN
      IF PurchaseHeader2."Purchaser Code" <> '' THEN
        IF SalespersonPurchaser.GET(PurchaseHeader2."Purchaser Code") THEN
          IF SalespersonPurchaser.VerifySalesPersonPurchaserPrivacyBlocked(SalespersonPurchaser) THEN BEGIN
            IF IsTransaction THEN
              ERROR(SalespersonPurchaser.GetPrivacyBlockedTransactionText(SalespersonPurchaser,IsPostAction,FALSE));
            IF NOT IsTransaction THEN
              ERROR(SalespersonPurchaser.GetPrivacyBlockedGenericText(SalespersonPurchaser,FALSE));
          END;
    END;

    LOCAL PROCEDURE GetReportSelectionsUsageFromDocumentType@124(VAR ReportSelectionsUsage@1000 : Option;VAR DocTxt@1001 : Text[150]);
    VAR
      ReportSelections@1002 : Record 77;
      ReportDistributionMgt@1003 : Codeunit 452;
    BEGIN
      DocTxt := ReportDistributionMgt.GetFullDocumentTypeText(Rec);

      CASE "Document Type" OF
        "Document Type"::Order:
          ReportSelectionsUsage := ReportSelections.Usage::"P.Order";
        "Document Type"::Quote:
          ReportSelectionsUsage := ReportSelections.Usage::"P.Quote";
      END;
    END;

    LOCAL PROCEDURE RevertCurrencyCodeAndPostingDate@167();
    BEGIN
      "Currency Code" := xRec."Currency Code";
      "Posting Date" := xRec."Posting Date";
      MODIFY;
    END;

    LOCAL PROCEDURE ValidateEmptySellToCustomerAndLocation@42();
    VAR
      IsHandled@1000 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeValidateEmptySellToCustomerAndLocation(Rec,Vend,IsHandled);
      IF IsHandled THEN
        EXIT;

      VALIDATE("Sell-to Customer No.",'');
      IF "Buy-from Vendor No." <> '' THEN
        GetVend("Buy-from Vendor No.");
      UpdateLocationCode(Vend."Location Code");
    END;

    [External]
    PROCEDURE CheckForBlockedLines@220();
    VAR
      CurrentPurchLine@1001 : Record 39;
      Item@1000 : Record 27;
    BEGIN
      CurrentPurchLine.SETCURRENTKEY("Document Type","Document No.",Type);
      CurrentPurchLine.SETRANGE("Document Type","Document Type");
      CurrentPurchLine.SETRANGE("Document No.","No.");
      CurrentPurchLine.SETRANGE(Type,CurrentPurchLine.Type::Item);
      CurrentPurchLine.SETFILTER("No.",'<>''''');

      IF CurrentPurchLine.FINDSET THEN
        REPEAT
          Item.GET(CurrentPurchLine."No.");
          Item.TESTFIELD(Blocked,FALSE);
        UNTIL CurrentPurchLine.NEXT = 0;
    END;

    [External]
    PROCEDURE TestStatusOpen@134();
    BEGIN
      OnBeforeTestStatusOpen;

      IF StatusCheckSuspended THEN
        EXIT;

      TESTFIELD(Status,Status::Open);

      OnAfterTestStatusOpen;
    END;

    [External]
    PROCEDURE SuspendStatusCheck@133(Suspend@1000 : Boolean);
    BEGIN
      StatusCheckSuspended := Suspend;
    END;

    LOCAL PROCEDURE UpdateInboundWhseHandlingTime@169();
    BEGIN
      IF "Location Code" = '' THEN BEGIN
        IF InvtSetup.GET THEN
          "Inbound Whse. Handling Time" := InvtSetup."Inbound Whse. Handling Time";
      END ELSE BEGIN
        IF Location.GET("Location Code") THEN;
        "Inbound Whse. Handling Time" := Location."Inbound Whse. Handling Time";
      END;

      OnAfterUpdateInboundWhseHandlingTime(Rec,CurrFieldNo);
    END;

    PROCEDURE SetCalledFromWhseDoc@258(NewCalledFromWhseDoc@1000 : Boolean);
    BEGIN
      CalledFromWhseDoc := NewCalledFromWhseDoc;
    END;

    LOCAL PROCEDURE UpdatePrepmtAmounts@204(VAR PurchaseLine@1000 : Record 39);
    VAR
      Currency@1001 : Record 4;
    BEGIN
      Currency.Initialize("Currency Code");
      IF "Document Type" = "Document Type"::Order THEN BEGIN
        PurchaseLine."Prepmt. Line Amount" := ROUND(
            PurchaseLine."Line Amount" * PurchaseLine."Prepayment %" / 100,Currency."Amount Rounding Precision");
        IF ABS(PurchaseLine."Inv. Discount Amount" + PurchaseLine."Prepmt. Line Amount") > ABS(PurchaseLine."Line Amount") THEN
          PurchaseLine."Prepmt. Line Amount" := PurchaseLine."Line Amount" - PurchaseLine."Inv. Discount Amount";
      END;
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterAddShipToAddress@158(VAR PurchaseHeader@1000 : Record 38;SalesHeader@1001 : Record 36);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterInitRecord@138(VAR PurchHeader@1000 : Record 38);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterInitNoSeries@140(VAR PurchHeader@1000 : Record 38);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterChangePricesIncludingVAT@187(VAR PurchaseHeader@1000 : Record 38);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCheckBuyFromVendor@152(VAR PurchaseHeader@1000 : Record 38;xPurchaseHeader@1001 : Record 38;Vendor@1002 : Record 23);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCheckPayToVendor@156(VAR PurchaseHeader@1000 : Record 38;xPurchaseHeader@1001 : Record 38;Vendor@1002 : Record 23);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterConfirmPurchPrice@166(VAR PurchaseHeader@1000 : Record 38;VAR PurchaseLine@1001 : Record 39;VAR RecalculateLines@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCopyBuyFromVendorFieldsFromVendor@114(VAR PurchaseHeader@1000 : Record 38;Vendor@1001 : Record 23;xPurchaseHeader@1002 : Record 38);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCopyBuyFromVendorAddressFieldsFromVendor@130(VAR PurchaseHeader@1000 : Record 38;BuyFromVendor@1001 : Record 23);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCopyPayToVendorAddressFieldsFromVendor@132(VAR PurchaseHeader@1000 : Record 38;PayToVendor@1001 : Record 23);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCopyShipToVendorAddressFieldsFromVendor@131(VAR PurchaseHeader@1000 : Record 38;BuyFromVendor@1001 : Record 23);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterRecreatePurchLine@93(VAR PurchLine@1000 : Record 39;VAR TempPurchLine@1001 : TEMPORARY Record 39);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterDeleteAllTempPurchLines@155();
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterGetNoSeriesCode@107(VAR PurchHeader@1000 : Record 38;PurchSetup@1001 : Record 312;VAR NoSeriesCode@1002 : Code[20]);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterGetPostingNoSeriesCode@175(PurchaseHeader@1000 : Record 38;VAR PostingNos@1001 : Code[20]);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterGetPrepaymentPostingNoSeriesCode@178(PurchaseHeader@1000 : Record 38;VAR PostingNos@1001 : Code[20]);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterGetPurchSetup@177(PurchaseHeader@1000 : Record 38;VAR PurchasesPayablesSetup@1001 : Record 312;CalledByFieldNo@1002 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterSetShipToForSpecOrder@129(VAR PurchaseHeader@1000 : Record 38);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterTestNoSeries@136(VAR PurchHeader@1000 : Record 38);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterTransferSavedFields@181(VAR DestinationPurchaseLine@1000 : Record 39;SourcePurchaseLine@1001 : Record 39);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterUpdateBuyFromVend@128(VAR PurchaseHeader@1000 : Record 38;Contact@1001 : Record 5050);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterUpdateBuyFromCont@143(VAR PurchaseHeader@1000 : Record 38;Vendor@1001 : Record 23;Contact@1002 : Record 5050);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterUpdatePayToCont@144(VAR PurchaseHeader@1000 : Record 38;Vendor@1001 : Record 23;Contact@1002 : Record 5050);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterUpdatePayToVend@162(VAR PurchaseHeader@1000 : Record 38;Contact@1001 : Record 5050);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterUpdateShipToAddress@137(VAR PurchHeader@1000 : Record 38);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterUpdateCurrencyFactor@127(VAR PurchaseHeader@1000 : Record 38;HideValidationDialog@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterUpdateInboundWhseHandlingTime@202(VAR PurchaseHeader@1000 : Record 38;CurrentFieldNo@1001 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterAppliesToDocNoOnLookup@106(VAR PurchaseHeader@1000 : Record 38;VendorLedgerEntry@1001 : Record 25);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnUpdatePurchLinesByChangedFieldName@139(PurchHeader@1000 : Record 38;VAR PurchLine@1001 : Record 39;ChangedFieldName@1002 : Text[100];ChangedFieldNo@1003 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCreateDimTableIDs@164(VAR PurchaseHeader@1000 : Record 38;CallingFieldNo@1001 : Integer;VAR TableID@1003 : ARRAY [10] OF Integer;VAR No@1002 : ARRAY [10] OF Code[20]);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterValidateShortcutDimCode@125(VAR PurchHeader@1000 : Record 38;xPurchHeader@1001 : Record 38;FieldNumber@1003 : Integer;VAR ShortcutDimCode@1002 : Code[20]);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterTransferExtendedTextForPurchaseLineRecreation@165(VAR PurchLine@1000 : Record 39;VAR TempPurchaseLine@1001 : TEMPORARY Record 39);
    BEGIN
    END;

    [Integration(TRUE)]
    PROCEDURE OnValidatePurchaseHeaderPayToVendorNo@1215(Vendor@1214 : Record 23;VAR PurchaseHeader@1000 : Record 38);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeConfirmUpdateCurrencyFactor@184(PurchaseHeader@1000 : Record 38;VAR HideValidationDialog@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeInitInsert@168(VAR PurchaseHeader@1000 : Record 38;VAR xPurchaseHeader@1001 : Record 38;VAR IsHandled@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeInitRecord@151(VAR PurchaseHeader@1000 : Record 38;VAR IsHandled@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeIsCreditDocType@146(PurchaseHeader@1000 : Record 38;VAR CreditDocType@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeIsTotalValid@174(VAR PurchaseHeader@1000 : Record 38;VAR IsHandled@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeUpdateCurrencyFactor@95(VAR PurchaseHeader@1000 : Record 38;VAR Updated@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeRecreatePurchLines@199(VAR PurchHeader@1000 : Record 38);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeSetSecurityFilterOnRespCenter@147(VAR PurchaseHeader@1000 : Record 38;VAR IsHandled@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeTestNoSeries@149(VAR PurchaseHeader@1000 : Record 38;VAR IsHandled@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeUpdateAllLineDim@236(VAR PurchaseHeader@1000 : Record 38;NewParentDimSetID@1002 : Integer;OldParentDimSetID@1001 : Integer;VAR IsHandled@1003 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeUpdateLocationCode@161(VAR PurchaseHeader@1000 : Record 38;LocationCode@1001 : Code[10];VAR IsHandled@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeUpdatePurchLinesByFieldNo@173(VAR PurchaseHeader@1000 : Record 38;ChangedFieldNo@1001 : Integer;VAR AskQuestion@1002 : Boolean;VAR IsHandled@1003 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeUpdateShipToAddress@179(VAR PurchaseHeader@1000 : Record 38;VAR IsHandled@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeValidateEmptySellToCustomerAndLocation@190(VAR PurchaseHeader@1000 : Record 38;Vendor@1001 : Record 23;VAR IsHandled@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnCollectParamsInBufferForCreateDimSetOnAfterSetTempPurchLineFilters@255(VAR TempPurchaseLine@1000 : TEMPORARY Record 39;PurchaseLine@1001 : Record 39);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnInsertTempPurchLineInBufferOnBeforeTempPurchLineInsert@256(VAR TempPurchaseLine@1000 : TEMPORARY Record 39;PurchaseLine@1001 : Record 39);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnCreateDimOnBeforeUpdateLines@356(VAR PurchaseHeader@1000 : Record 38;xPurchaseHeader@1001 : Record 38;CurrentFieldNo@1002 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnRecreatePurchLinesOnAfterValidateType@344(VAR PurchaseLine@1000 : Record 39;TempPurchaseLine@1001 : TEMPORARY Record 39);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnRecreatePurchLinesOnBeforeInsertPurchLine@112(VAR PurchaseLine@1000 : Record 39;VAR TempPurchaseLine@1001 : TEMPORARY Record 39);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnRecreatePurchLinesOnBeforeTempPurchLineInsert@118(VAR TempPurchaseLine@1000 : TEMPORARY Record 39;PurchaseLine@1001 : Record 39);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnValidateBuyFromVendorNoBeforeRecreateLines@115(VAR PurchaseHeader@1000 : Record 38;CallingFieldNo@1001 : Integer);
    BEGIN
    END;

    [Integration(TRUE)]
    LOCAL PROCEDURE OnBeforeTestStatusOpen@135();
    BEGIN
    END;

    [Integration(TRUE)]
    LOCAL PROCEDURE OnAfterTestStatusOpen@142();
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterUpdatePurchLines@145(VAR PurchaseHeader@1000 : Record 38);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnInitFromPurchHeader@180(VAR PurchaseHeader@1000 : Record 38;SourcePurchaseHeader@1001 : Record 38);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnInitFromContactOnBeforeInitRecord@185(VAR PurchaseHeader@1000 : Record 38;xPurchaseHeader@1001 : Record 38);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnInitFromVendorOnBeforeInitRecord@183(VAR PurchaseHeader@1000 : Record 38;xPurchaseHeader@1001 : Record 38);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnInitInsertOnBeforeInitRecord@172(VAR PurchaseHeader@1000 : Record 38;VAR xPurchaseHeader@1001 : Record 38);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnRecreatePurchLinesOnBeforeConfirm@211(VAR PurchaseHeader@1000 : Record 38;xPurchaseHeader@1001 : Record 38;ChangedFieldName@1002 : Text[100];HideValidationDialog@1003 : Boolean;VAR Confirmed@1004 : Boolean;VAR IsHandled@1005 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnUpdateAllLineDimOnBeforePurchLineModify@188(VAR PurchaseLine@1000 : Record 39);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnUpdatePurchLinesByFieldNoOnBeforeValidateFields@201(VAR PurchaseLine@1000 : Record 39;xPurchaseLine@1001 : Record 39);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnValidatePaymentTermsCodeOnBeforeCalcDueDate@224(VAR PurchaseHeader@1000 : Record 38;VAR xPurchaseHeader@1001 : Record 38;CalledByFieldNo@1002 : Integer;CallingFieldNo@1003 : Integer;VAR IsHandled@1004 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnValidatePaymentTermsCodeOnBeforeCalcPmtDiscDate@225(VAR PurchaseHeader@1000 : Record 38;VAR xPurchaseHeader@1001 : Record 38;CalledByFieldNo@1002 : Integer;CallingFieldNo@1003 : Integer;VAR IsHandled@1004 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnValidatePaymentTermsCodeOnBeforeValidateDueDate@200(VAR PurchaseHeader@1000 : Record 38;xPurchaseHeader@1001 : Record 38;CurrentFieldNo@1002 : Integer;VAR IsHandled@1003 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnValidatePaymentTermsCodeOnBeforeValidateDueDateWhenBlank@189(VAR PurchaseHeader@1000 : Record 38;xPurchaseHeader@1001 : Record 38;CurrentFieldNo@1002 : Integer;VAR IsHandled@1003 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnValidatePaytoVendorNoBeforeRecreateLines@120(VAR PurchaseHeader@1001 : Record 38;CallingFieldNo@1000 : Integer);
    BEGIN
    END;

    BEGIN
    END.
  }
}

OBJECT Table 44 Sales Comment Line
{
  OBJECT-PROPERTIES
  {
    Date=02-10-21;
    Time=12:00:00;
    Modified=Yes;
    Version List=NAVW114.30;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Sales Comment Line;
               ENN=Sales Comment Line];
    LookupPageID=Page69;
    DrillDownPageID=Page69;
  }
  FIELDS
  {
    { 1   ;   ;Document Type       ;Option        ;CaptionML=[ENU=Document Type;
                                                              ENN=Document Type];
                                                   OptionCaptionML=[ENU=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order,Shipment,Posted Invoice,Posted Credit Memo,Posted Return Receipt;
                                                                    ENN=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order,Shipment,Posted Invoice,Posted Credit Memo,Posted Return Receipt];
                                                   OptionString=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order,Shipment,Posted Invoice,Posted Credit Memo,Posted Return Receipt }
    { 2   ;   ;No.                 ;Code20        ;CaptionML=[ENU=No.;
                                                              ENN=No.] }
    { 3   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              ENN=Line No.] }
    { 4   ;   ;Date                ;Date          ;CaptionML=[ENU=Date;
                                                              ENN=Date] }
    { 5   ;   ;Code                ;Code10        ;CaptionML=[ENU=Code;
                                                              ENN=Code] }
    { 6   ;   ;Comment             ;Text80        ;CaptionML=[ENU=Comment;
                                                              ENN=Comment] }
    { 7   ;   ;Document Line No.   ;Integer       ;CaptionML=[ENU=Document Line No.;
                                                              ENN=Document Line No.] }
    { 50000;  ;Type                ;Option        ;OptionCaptionML=ENU=" ,Partner,Leader,CA1,CA2,CA3,CA4,CA5,Assistants1,Assistants2,Assistants3,Assistants4,Assistants5,Assistants6,Assistants7,Assistants8,Assistants9,Assistants10,Assistants11,Assistants12,Assistants13,Assistants14,Assistants15,Assistants16,Assistants17,Assistants18,Assistants19,Assistants20,Associate1,Associate2,Associate3,Associate4,Expense to be billed";
                                                   OptionString=[ ,Partner,Leader,CA1,CA2,CA3,CA4,CA5,Assistants1,Assistants2,Assistants3,Assistants4,Assistants5,Assistants6,Assistants7,Assistants8,Assistants9,Assistants10,Assistants11,Assistants12,Assistants13,Assistants14,Assistants15,Assistants16,Assistants17,Assistants18,Assistants19,Assistants20,Associate1,Associate2,Associate3,Associate4,Expense to be billed];
                                                   Description=AD_SD }
    { 50001;  ;Type Code           ;Code20        ;TableRelation=IF (Type=CONST(Partner)) "Employee LOB"."Emp No."
                                                                 ELSE IF (Type=CONST(Leader)) Employee.No.
                                                                 ELSE IF (Type=CONST(CA1)) Employee.No.
                                                                 ELSE IF (Type=CONST(CA2)) Employee.No.
                                                                 ELSE IF (Type=CONST(CA3)) Employee.No.
                                                                 ELSE IF (Type=CONST(CA4)) Employee.No.
                                                                 ELSE IF (Type=CONST(CA5)) Employee.No.
                                                                 ELSE IF (Type=CONST(Associate1)) Vendor.No.
                                                                 ELSE IF (Type=CONST(Associate2)) Vendor.No.
                                                                 ELSE IF (Type=CONST(Associate3)) Vendor.No.
                                                                 ELSE IF (Type=CONST(Associate4)) Vendor.No.
                                                                 ELSE IF (Type=CONST(Assistants1)) Employee.No.
                                                                 ELSE IF (Type=CONST(Assistants2)) Employee.No.
                                                                 ELSE IF (Type=CONST(Assistants3)) Employee.No.
                                                                 ELSE IF (Type=CONST(Assistants4)) Employee.No.
                                                                 ELSE IF (Type=CONST(Assistants5)) Employee.No.
                                                                 ELSE IF (Type=CONST(Assistants6)) Employee.No.
                                                                 ELSE IF (Type=CONST(Assistants7)) Employee.No.
                                                                 ELSE IF (Type=CONST(Assistants8)) Employee.No.
                                                                 ELSE IF (Type=CONST(Assistants9)) Employee.No.
                                                                 ELSE IF (Type=CONST(Assistants10)) Employee.No.
                                                                 ELSE IF (Type=CONST(Assistants11)) Employee.No.
                                                                 ELSE IF (Type=CONST(Assistants12)) Employee.No.
                                                                 ELSE IF (Type=CONST(Assistants13)) Employee.No.
                                                                 ELSE IF (Type=CONST(Assistants14)) Employee.No.
                                                                 ELSE IF (Type=CONST(Assistants15)) Employee.No.
                                                                 ELSE IF (Type=CONST(Assistants16)) Employee.No.
                                                                 ELSE IF (Type=CONST(Assistants17)) Employee.No.
                                                                 ELSE IF (Type=CONST(Assistants18)) Employee.No.
                                                                 ELSE IF (Type=CONST(Assistants19)) Employee.No.
                                                                 ELSE IF (Type=CONST(Assistants20)) Employee.No.;
                                                   Description=AD_SD }
  }
  KEYS
  {
    {    ;Document Type,No.,Document Line No.,Line No.;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    [External]
    PROCEDURE SetUpNewLine@1();
    VAR
      SalesCommentLine@1000 : Record 44;
    BEGIN
      SalesCommentLine.SETRANGE("Document Type","Document Type");
      SalesCommentLine.SETRANGE("No.","No.");
      SalesCommentLine.SETRANGE("Document Line No.","Document Line No.");
      SalesCommentLine.SETRANGE(Date,WORKDATE);
      IF NOT SalesCommentLine.FINDFIRST THEN
        Date := WORKDATE;

      OnAfterSetUpNewLine(Rec,SalesCommentLine);
    END;

    [External]
    PROCEDURE CopyComments@22(FromDocumentType@1000 : Integer;ToDocumentType@1001 : Integer;FromNumber@1002 : Code[20];ToNumber@1003 : Code[20]);
    VAR
      SalesCommentLine@1004 : Record 44;
      SalesCommentLine2@1005 : Record 44;
      IsHandled@1006 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeCopyComments(SalesCommentLine,ToDocumentType,IsHandled,FromDocumentType,FromNumber,ToNumber);
      IF IsHandled THEN
        EXIT;

      SalesCommentLine.SETRANGE("Document Type",FromDocumentType);
      SalesCommentLine.SETRANGE("No.",FromNumber);
      IF SalesCommentLine.FINDSET THEN
        REPEAT
          SalesCommentLine2 := SalesCommentLine;
          SalesCommentLine2."Document Type" := ToDocumentType;
          SalesCommentLine2."No." := ToNumber;
          SalesCommentLine2.INSERT;
        UNTIL SalesCommentLine.NEXT = 0;
    END;

    [External]
    PROCEDURE CopyLineComments@6(FromDocumentType@1000 : Integer;ToDocumentType@1001 : Integer;FromNumber@1002 : Code[20];ToNumber@1003 : Code[20];FromDocumentLineNo@1008 : Integer;ToDocumentLineNo@1007 : Integer);
    VAR
      SalesCommentLineSource@1004 : Record 44;
      SalesCommentLineTarget@1005 : Record 44;
      IsHandled@1006 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeCopyLineComments(
        SalesCommentLineTarget,IsHandled,FromDocumentType,ToDocumentType,FromNumber,ToNumber,FromDocumentLineNo,ToDocumentLineNo);
      IF IsHandled THEN
        EXIT;

      SalesCommentLineSource.SETRANGE("Document Type",FromDocumentType);
      SalesCommentLineSource.SETRANGE("No.",FromNumber);
      SalesCommentLineSource.SETRANGE("Document Line No.",FromDocumentLineNo);
      IF SalesCommentLineSource.FINDSET THEN
        REPEAT
          SalesCommentLineTarget := SalesCommentLineSource;
          SalesCommentLineTarget."Document Type" := ToDocumentType;
          SalesCommentLineTarget."No." := ToNumber;
          SalesCommentLineTarget."Document Line No." := ToDocumentLineNo;
          SalesCommentLineTarget.INSERT;
        UNTIL SalesCommentLineSource.NEXT = 0;
    END;

    [External]
    PROCEDURE CopyLineCommentsFromSalesLines@10(FromDocumentType@1000 : Integer;ToDocumentType@1001 : Integer;FromNumber@1002 : Code[20];ToNumber@1003 : Code[20];VAR TempSalesLineSource@1008 : TEMPORARY Record 37);
    VAR
      SalesCommentLineSource@1004 : Record 44;
      SalesCommentLineTarget@1005 : Record 44;
      IsHandled@1006 : Boolean;
      NextLineNo@1007 : Integer;
    BEGIN
      IsHandled := FALSE;
      OnBeforeCopyLineCommentsFromSalesLines(
        SalesCommentLineTarget,IsHandled,FromDocumentType,ToDocumentType,FromNumber,ToNumber,TempSalesLineSource);
      IF IsHandled THEN
        EXIT;

      SalesCommentLineTarget.SETRANGE("Document Type",ToDocumentType);
      SalesCommentLineTarget.SETRANGE("No.",ToNumber);
      SalesCommentLineTarget.SETRANGE("Document Line No.",0);
      IF SalesCommentLineTarget.FINDLAST THEN;
      NextLineNo := SalesCommentLineTarget."Line No." + 10000;
      SalesCommentLineTarget.RESET;

      SalesCommentLineSource.SETRANGE("Document Type",FromDocumentType);
      SalesCommentLineSource.SETRANGE("No.",FromNumber);
      IF TempSalesLineSource.FINDSET THEN
        REPEAT
          SalesCommentLineSource.SETRANGE("Document Line No.",TempSalesLineSource."Line No.");
          IF SalesCommentLineSource.FINDSET THEN
            REPEAT
              SalesCommentLineTarget := SalesCommentLineSource;
              SalesCommentLineTarget."Document Type" := ToDocumentType;
              SalesCommentLineTarget."No." := ToNumber;
              SalesCommentLineTarget."Document Line No." := 0;
              SalesCommentLineTarget."Line No." := NextLineNo;
              SalesCommentLineTarget.INSERT;
              NextLineNo += 10000;
            UNTIL SalesCommentLineSource.NEXT = 0;
        UNTIL TempSalesLineSource.NEXT = 0;
    END;

    [External]
    PROCEDURE CopyHeaderComments@8(FromDocumentType@1000 : Integer;ToDocumentType@1001 : Integer;FromNumber@1002 : Code[20];ToNumber@1003 : Code[20]);
    VAR
      SalesCommentLineSource@1004 : Record 44;
      SalesCommentLineTarget@1005 : Record 44;
      IsHandled@1006 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeCopyHeaderComments(SalesCommentLineTarget,IsHandled,FromDocumentType,ToDocumentType,FromNumber,ToNumber);
      IF IsHandled THEN
        EXIT;

      SalesCommentLineSource.SETRANGE("Document Type",FromDocumentType);
      SalesCommentLineSource.SETRANGE("No.",FromNumber);
      SalesCommentLineSource.SETRANGE("Document Line No.",0);
      IF SalesCommentLineSource.FINDSET THEN
        REPEAT
          SalesCommentLineTarget := SalesCommentLineSource;
          SalesCommentLineTarget."Document Type" := ToDocumentType;
          SalesCommentLineTarget."No." := ToNumber;
          SalesCommentLineTarget.INSERT;
        UNTIL SalesCommentLineSource.NEXT = 0;
    END;

    [External]
    PROCEDURE DeleteComments@2(DocType@1000 : Option;DocNo@1001 : Code[20]);
    BEGIN
      SETRANGE("Document Type",DocType);
      SETRANGE("No.",DocNo);
      IF NOT ISEMPTY THEN
        DELETEALL;
    END;

    [External]
    PROCEDURE ShowComments@3(DocType@1001 : Option;DocNo@1002 : Code[20];DocLineNo@1003 : Integer);
    VAR
      SalesCommentSheet@1000 : Page 67;
    BEGIN
      SETRANGE("Document Type",DocType);
      SETRANGE("No.",DocNo);
      SETRANGE("Document Line No.",DocLineNo);
      CLEAR(SalesCommentSheet);
      SalesCommentSheet.SETTABLEVIEW(Rec);
      SalesCommentSheet.RUNMODAL;
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterSetUpNewLine@5(VAR SalesCommentLineRec@1000 : Record 44;VAR SalesCommentLineFilter@1001 : Record 44);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCopyComments@4(VAR SalesCommentLine@1000 : Record 44;ToDocumentType@1001 : Integer;VAR IsHandled@1002 : Boolean;FromDocumentType@1005 : Integer;FromNumber@1004 : Code[20];ToNumber@1003 : Code[20]);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCopyLineComments@7(VAR SalesCommentLine@1000 : Record 44;VAR IsHandled@1002 : Boolean;FromDocumentType@1005 : Integer;ToDocumentType@1001 : Integer;FromNumber@1004 : Code[20];ToNumber@1003 : Code[20];FromDocumentLineNo@1007 : Integer;ToDocumentLine@1006 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCopyLineCommentsFromSalesLines@11(VAR SalesCommentLine@1000 : Record 44;VAR IsHandled@1002 : Boolean;FromDocumentType@1006 : Integer;ToDocumentType@1005 : Integer;FromNumber@1004 : Code[20];ToNumber@1003 : Code[20];VAR TempSalesLineSource@1001 : TEMPORARY Record 37);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCopyHeaderComments@9(VAR SalesCommentLine@1000 : Record 44;VAR IsHandled@1002 : Boolean;FromDocumentType@1005 : Integer;ToDocumentType@1001 : Integer;FromNumber@1004 : Code[20];ToNumber@1003 : Code[20]);
    BEGIN
    END;

    BEGIN
    END.
  }
}

OBJECT Table 79 Company Information
{
  OBJECT-PROPERTIES
  {
    Date=02-10-21;
    Time=12:00:00;
    Modified=Yes;
    Version List=NAVW114.30;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               "Last Modified Date Time" := CURRENTDATETIME;
               IF PictureUpdated THEN
                 "Picture - Last Mod. Date Time" := "Last Modified Date Time";
             END;

    OnModify=BEGIN
               "Last Modified Date Time" := CURRENTDATETIME;
               IF PictureUpdated THEN
                 "Picture - Last Mod. Date Time" := "Last Modified Date Time";
             END;

    CaptionML=[ENU=Company Information;
               ENN=Company Information];
  }
  FIELDS
  {
    { 1   ;   ;Primary Key         ;Code10        ;CaptionML=[ENU=Primary Key;
                                                              ENN=Primary Key] }
    { 2   ;   ;Name                ;Text100       ;CaptionML=[ENU=Name;
                                                              ENN=Name] }
    { 3   ;   ;Name 2              ;Text50        ;CaptionML=[ENU=Name 2;
                                                              ENN=Name 2] }
    { 4   ;   ;Address             ;Text100       ;CaptionML=[ENU=Address;
                                                              ENN=Address] }
    { 5   ;   ;Address 2           ;Text50        ;CaptionML=[ENU=Address 2;
                                                              ENN=Address 2] }
    { 6   ;   ;City                ;Text30        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   OnLookup=BEGIN
                                                              PostCode.LookupPostCode(City,"Post Code",County,"Country/Region Code");
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=City;
                                                              ENN=City] }
    { 7   ;   ;Phone No.           ;Text30        ;ExtendedDatatype=Phone No.;
                                                   CaptionML=[ENU=Phone No.;
                                                              ENN=Phone No.] }
    { 8   ;   ;Phone No. 2         ;Text30        ;ExtendedDatatype=Phone No.;
                                                   CaptionML=[ENU=Phone No. 2;
                                                              ENN=Phone No. 2] }
    { 9   ;   ;Telex No.           ;Text30        ;CaptionML=[ENU=Telex No.;
                                                              ENN=Telex No.] }
    { 10  ;   ;Fax No.             ;Text30        ;CaptionML=[ENU=Fax No.;
                                                              ENN=Fax No.] }
    { 11  ;   ;Giro No.            ;Text20        ;CaptionML=[ENU=Giro No.;
                                                              ENN=Giro No.] }
    { 12  ;   ;Bank Name           ;Text100       ;CaptionML=[ENU=Bank Name;
                                                              ENN=Bank Name] }
    { 13  ;   ;Bank Branch No.     ;Text20        ;CaptionML=[ENU=Bank Branch No.;
                                                              ENN=Bank Sort Code] }
    { 14  ;   ;Bank Account No.    ;Text30        ;CaptionML=[ENU=Bank Account No.;
                                                              ENN=Bank Account No.] }
    { 15  ;   ;Payment Routing No. ;Text20        ;CaptionML=[ENU=Payment Routing No.;
                                                              ENN=Payment Routing No.] }
    { 17  ;   ;Customs Permit No.  ;Text10        ;CaptionML=[ENU=Customs Permit No.;
                                                              ENN=Customs Permit No.] }
    { 18  ;   ;Customs Permit Date ;Date          ;CaptionML=[ENU=Customs Permit Date;
                                                              ENN=Customs Permit Date] }
    { 19  ;   ;VAT Registration No.;Text20        ;OnValidate=VAR
                                                                VATRegNoFormat@1005 : Record 381;
                                                                VATRegistrationLog@1004 : Record 249;
                                                                VATRegNoSrvConfig@1002 : Record 248;
                                                                VATRegistrationLogMgt@1003 : Codeunit 249;
                                                                ResultRecordRef@1001 : RecordRef;
                                                              BEGIN
                                                                "VAT Registration No." := UPPERCASE("VAT Registration No.");
                                                                IF "VAT Registration No." = xRec."VAT Registration No." THEN
                                                                  EXIT;
                                                                IF NOT VATRegNoFormat.Test("VAT Registration No.","Country/Region Code",'',DATABASE::"Company Information") THEN
                                                                  EXIT;
                                                                IF "Country/Region Code" = '' THEN
                                                                  EXIT;
                                                                IF VATRegNoSrvConfig.VATRegNoSrvIsEnabled THEN BEGIN
                                                                  VATRegistrationLogMgt.ValidateVATRegNoWithVIES(ResultRecordRef,Rec,"Primary Key",
                                                                    VATRegistrationLog."Account Type"::"Company Information","Country/Region Code");
                                                                  ResultRecordRef.SETTABLE(Rec);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=VAT Registration No.;
                                                              ENN=VAT Registration No.] }
    { 20  ;   ;Registration No.    ;Text20        ;CaptionML=[ENU=Registration No.;
                                                              ENN=Registration No.] }
    { 21  ;   ;Telex Answer Back   ;Text20        ;CaptionML=[ENU=Telex Answer Back;
                                                              ENN=Telex Answer Back] }
    { 22  ;   ;Ship-to Name        ;Text100       ;CaptionML=[ENU=Ship-to Name;
                                                              ENN=Ship-to Name] }
    { 23  ;   ;Ship-to Name 2      ;Text50        ;CaptionML=[ENU=Ship-to Name 2;
                                                              ENN=Ship-to Name 2] }
    { 24  ;   ;Ship-to Address     ;Text100       ;CaptionML=[ENU=Ship-to Address;
                                                              ENN=Ship-to Address] }
    { 25  ;   ;Ship-to Address 2   ;Text50        ;CaptionML=[ENU=Ship-to Address 2;
                                                              ENN=Ship-to Address 2] }
    { 26  ;   ;Ship-to City        ;Text30        ;TableRelation=IF (Ship-to Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Ship-to Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Ship-to Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(
                                                                  "Ship-to City","Ship-to Post Code","Ship-to County","Ship-to Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Ship-to City;
                                                              ENN=Ship-to City] }
    { 27  ;   ;Ship-to Contact     ;Text100       ;CaptionML=[ENU=Ship-to Contact;
                                                              ENN=Ship-to Contact] }
    { 28  ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE (Use As In-Transit=CONST(No));
                                                   CaptionML=[ENU=Location Code;
                                                              ENN=Location Code] }
    { 29  ;   ;Picture             ;BLOB          ;OnValidate=BEGIN
                                                                PictureUpdated := TRUE;
                                                              END;

                                                   CaptionML=[ENU=Picture;
                                                              ENN=Picture];
                                                   SubType=Bitmap }
    { 30  ;   ;Post Code           ;Code20        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code".Code
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code".Code WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   OnLookup=BEGIN
                                                              PostCode.LookupPostCode(City,"Post Code",County,"Country/Region Code");
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Post Code;
                                                              ENN=Postcode] }
    { 31  ;   ;County              ;Text30        ;CaptionML=[ENU=County;
                                                              ENN=County];
                                                   CaptionClass='5,1,' + "Country/Region Code" }
    { 32  ;   ;Ship-to Post Code   ;Code20        ;TableRelation=IF (Ship-to Country/Region Code=CONST()) "Post Code".Code
                                                                 ELSE IF (Ship-to Country/Region Code=FILTER(<>'')) "Post Code".Code WHERE (Country/Region Code=FIELD(Ship-to Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(
                                                                  "Ship-to City","Ship-to Post Code","Ship-to County","Ship-to Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Ship-to Post Code;
                                                              ENN=Ship-to Postcode] }
    { 33  ;   ;Ship-to County      ;Text30        ;CaptionML=[ENU=Ship-to County;
                                                              ENN=Ship-to County];
                                                   CaptionClass='5,1,' + "Ship-to Country/Region Code" }
    { 34  ;   ;E-Mail              ;Text80        ;OnValidate=VAR
                                                                MailManagement@1000 : Codeunit 9520;
                                                              BEGIN
                                                                MailManagement.ValidateEmailAddressField("E-Mail");
                                                              END;

                                                   ExtendedDatatype=E-Mail;
                                                   CaptionML=[ENU=Email;
                                                              ENN=Email] }
    { 35  ;   ;Home Page           ;Text80        ;ExtendedDatatype=URL;
                                                   CaptionML=[ENU=Home Page;
                                                              ENN=Home Page] }
    { 36  ;   ;Country/Region Code ;Code10        ;TableRelation=Country/Region;
                                                   OnValidate=BEGIN
                                                                PostCode.CheckClearPostCodeCityCounty(City,"Post Code",County,"Country/Region Code",xRec."Country/Region Code");
                                                              END;

                                                   CaptionML=[ENU=Country/Region Code;
                                                              ENN=Country/Region Code] }
    { 37  ;   ;Ship-to Country/Region Code;Code10 ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=Ship-to Country/Region Code;
                                                              ENN=Ship-to Country/Region Code] }
    { 38  ;   ;IBAN                ;Code50        ;OnValidate=BEGIN
                                                                CheckIBAN(IBAN);
                                                              END;

                                                   CaptionML=[ENU=IBAN;
                                                              ENN=IBAN] }
    { 39  ;   ;SWIFT Code          ;Code20        ;TableRelation="SWIFT Code";
                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=SWIFT Code;
                                                              ENN=SWIFT Code] }
    { 40  ;   ;Industrial Classification;Text30   ;CaptionML=[ENU=Industrial Classification;
                                                              ENN=Industrial Classification] }
    { 41  ;   ;IC Partner Code     ;Code20        ;AccessByPermission=TableData 410=R;
                                                   CaptionML=[ENU=IC Partner Code;
                                                              ENN=IC Partner Code] }
    { 42  ;   ;IC Inbox Type       ;Option        ;InitValue=Database;
                                                   OnValidate=BEGIN
                                                                IF "IC Inbox Type" = "IC Inbox Type"::Database THEN
                                                                  "IC Inbox Details" := '';
                                                              END;

                                                   AccessByPermission=TableData 410=R;
                                                   CaptionML=[ENU=IC Inbox Type;
                                                              ENN=IC Inbox Type];
                                                   OptionCaptionML=[ENU=File Location,Database;
                                                                    ENN=File Location,Database];
                                                   OptionString=File Location,Database }
    { 43  ;   ;IC Inbox Details    ;Text250       ;OnLookup=VAR
                                                              FileMgt@1000 : Codeunit 419;
                                                              FileName@1002 : Text;
                                                              FileName2@1003 : Text;
                                                              Path@1004 : Text;
                                                            BEGIN
                                                              TESTFIELD("IC Partner Code");
                                                              CASE "IC Inbox Type" OF
                                                                "IC Inbox Type"::"File Location":
                                                                  BEGIN
                                                                    IF "IC Inbox Details" = '' THEN
                                                                      FileName := STRSUBSTNO('%1.xml',"IC Partner Code")
                                                                    ELSE
                                                                      FileName := "IC Inbox Details" + STRSUBSTNO('\%1.xml',"IC Partner Code");

                                                                    FileName2 := FileMgt.SaveFileDialog(Text001,FileName,'');
                                                                    IF FileName <> FileName2 THEN BEGIN
                                                                      Path := FileMgt.GetDirectoryName(FileName2);
                                                                      IF Path <> '' THEN
                                                                        "IC Inbox Details" := COPYSTR(Path,1,250);
                                                                    END;
                                                                  END;
                                                              END;
                                                            END;

                                                   AccessByPermission=TableData 410=R;
                                                   CaptionML=[ENU=IC Inbox Details;
                                                              ENN=IC Inbox Details] }
    { 44  ;   ;Auto. Send Transactions;Boolean    ;AccessByPermission=TableData 410=R;
                                                   CaptionML=[ENU=Auto. Send Transactions;
                                                              ENN=Auto. Send Transactions] }
    { 46  ;   ;System Indicator    ;Option        ;CaptionML=[ENU=System Indicator;
                                                              ENN=System Indicator];
                                                   OptionCaptionML=[ENU=None,Custom Text,Company Information,Company,Database,Company+Database;
                                                                    ENN=None,Custom Text,Company Information,Company,Database,Company+Database];
                                                   OptionString=None,Custom Text,Company Information,Company,Database,Company+Database }
    { 47  ;   ;Custom System Indicator Text;Text250;
                                                   CaptionML=[ENU=Custom System Indicator Text;
                                                              ENN=Custom System Indicator Text] }
    { 48  ;   ;System Indicator Style;Option      ;CaptionML=[ENU=System Indicator Style;
                                                              ENN=System Indicator Style];
                                                   OptionCaptionML=[ENU=Standard,Accent1,Accent2,Accent3,Accent4,Accent5,Accent6,Accent7,Accent8,Accent9;
                                                                    ENN=Standard,Accent1,Accent2,Accent3,Accent4,Accent5,Accent6,Accent7,Accent8,Accent9];
                                                   OptionString=Standard,Accent1,Accent2,Accent3,Accent4,Accent5,Accent6,Accent7,Accent8,Accent9 }
    { 50  ;   ;Allow Blank Payment Info.;Boolean  ;CaptionML=[ENU=Allow Blank Payment Info.;
                                                              ENN=Allow Blank Payment Info.] }
    { 51  ;   ;Contact Person      ;Text50        ;CaptionML=[ENU=Contact Person;
                                                              ENN=Contact Person] }
    { 90  ;   ;GLN                 ;Code13        ;OnValidate=VAR
                                                                GLNCalculator@1000 : Codeunit 1607;
                                                              BEGIN
                                                                IF GLN <> '' THEN
                                                                  IF NOT GLNCalculator.IsValidCheckDigit13(GLN) THEN
                                                                    ERROR(GLNCheckDigitErr,FIELDCAPTION(GLN));
                                                              END;

                                                   CaptionML=[ENU=GLN;
                                                              ENN=GLN];
                                                   Numeric=Yes }
    { 92  ;   ;EORI Number         ;Text40        ;CaptionML=[ENU=EORI Number;
                                                              ENN=EORI Number] }
    { 95  ;   ;Use GLN in Electronic Document;Boolean;
                                                   CaptionML=[ENU=Use GLN in Electronic Documents;
                                                              ENN=Use GLN in Electronic Documents] }
    { 96  ;   ;Picture - Last Mod. Date Time;DateTime;
                                                   CaptionML=[ENU=Picture - Last Mod. Date Time;
                                                              ENN=Picture - Last Mod. Date Time];
                                                   Editable=No }
    { 98  ;   ;Last Modified Date Time;DateTime   ;CaptionML=[ENU=Last Modified Date Time;
                                                              ENN=Last Modified Date Time];
                                                   Editable=No }
    { 99  ;   ;Created DateTime    ;DateTime      ;CaptionML=[ENU=Created DateTime;
                                                              ENN=Created DateTime];
                                                   Editable=No }
    { 100 ;   ;Demo Company        ;Boolean       ;CaptionML=[ENU=Demo Company;
                                                              ENN=Demo Company];
                                                   Editable=No }
    { 200 ;   ;Alternative Language Code;Code10   ;TableRelation=Language;
                                                   CaptionML=[ENU=Alternative Language Code;
                                                              ENN=Alternative Language Code] }
    { 300 ;   ;Brand Color Value   ;Code10        ;OnValidate=VAR
                                                                O365BrandColor@1000 : Record 2121;
                                                              BEGIN
                                                                O365BrandColor.FindColor(O365BrandColor,"Brand Color Value");
                                                                VALIDATE("Brand Color Code",O365BrandColor.Code);
                                                              END;

                                                   CaptionML=[ENU=Brand Color Value;
                                                              ENN=Brand Colour Value] }
    { 301 ;   ;Brand Color Code    ;Code20        ;TableRelation="O365 Brand Color";
                                                   OnValidate=BEGIN
                                                                SetBrandColorValue;
                                                              END;

                                                   CaptionML=[ENU=Brand Color Code;
                                                              ENN=Brand Colour Code] }
    { 5700;   ;Responsibility Center;Code10       ;TableRelation="Responsibility Center".Code;
                                                   ValidateTableRelation=Yes;
                                                   CaptionML=[ENU=Responsibility Center;
                                                              ENN=Responsibility Centre] }
    { 5791;   ;Check-Avail. Period Calc.;DateFormula;
                                                   AccessByPermission=TableData 27=R;
                                                   CaptionML=[ENU=Check-Avail. Period Calc.;
                                                              ENN=Check-Avail. Period Calc.] }
    { 5792;   ;Check-Avail. Time Bucket;Option    ;AccessByPermission=TableData 27=R;
                                                   CaptionML=[ENU=Check-Avail. Time Bucket;
                                                              ENN=Check-Avail. Time Bucket];
                                                   OptionCaptionML=[ENU=Day,Week,Month,Quarter,Year;
                                                                    ENN=Day,Week,Month,Quarter,Year];
                                                   OptionString=Day,Week,Month,Quarter,Year }
    { 7600;   ;Base Calendar Code  ;Code10        ;TableRelation="Base Calendar";
                                                   CaptionML=[ENU=Base Calendar Code;
                                                              ENN=Base Calendar Code] }
    { 7601;   ;Cal. Convergence Time Frame;DateFormula;
                                                   InitValue=1Y;
                                                   AccessByPermission=TableData 7600=R;
                                                   CaptionML=[ENU=Cal. Convergence Time Frame;
                                                              ENN=Cal. Convergence Time Frame] }
    { 7602;   ;Show Chart On RoleCenter;Boolean   ;CaptionML=[ENU=Show Chart On RoleCenter;
                                                              ENN=Show Chart On RoleCenter] }
    { 7603;   ;Sync with O365 Bus. profile;Boolean;OnValidate=VAR
                                                                GraphIntBusinessProfile@1001 : Codeunit 5442;
                                                              BEGIN
                                                                IF "Sync with O365 Bus. profile" THEN
                                                                  IF IsSyncEnabledForOtherCompany THEN
                                                                    ERROR(SyncAlreadyEnabledErr);

                                                                IF "Sync with O365 Bus. profile" THEN
                                                                  CODEUNIT.RUN(CODEUNIT::"Graph Data Setup")
                                                                ELSE
                                                                  GraphIntBusinessProfile.UpdateCompanyBusinessProfileId('');
                                                              END;

                                                   CaptionML=[ENU=Sync with O365 Bus. profile;
                                                              ENN=Sync with O365 Bus. profile] }
    { 8000;   ;Id                  ;GUID          ;CaptionML=[ENU=Id;
                                                              ENN=Id] }
    { 50000;  ;Bank Logo           ;BLOB          ;SubType=Bitmap }
  }
  KEYS
  {
    {    ;Primary Key                             ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      PostCode@1000 : Record 225;
      Text000@1001 : TextConst 'ENU=The number that you entered may not be a valid International Bank Account Number (IBAN). Do you want to continue?;ENN=The number that you entered may not be a valid International Bank Account Number (IBAN). Do you want to continue?';
      Text001@1002 : TextConst 'ENU=File Location for IC files;ENN=File Location for IC files';
      Text002@1003 : TextConst 'ENU=Before you can use Online Map, you must fill in the Online Map Setup window.\See Setting Up Online Map in Help.;ENN=Before you can use Online Map, you must fill in the Online Map Setup window.\See Setting Up Online Map in Help.';
      NoPaymentInfoQst@1005 : TextConst '@@@="%1 = Company Information";ENU=No payment information is provided in %1. Do you want to update it now?;ENN=No payment information is provided in %1. Do you want to update it now?';
      NoPaymentInfoMsg@1004 : TextConst 'ENU=No payment information is provided in %1. Review the report.;ENN=No payment information is provided in %1. Review the report.';
      GLNCheckDigitErr@1006 : TextConst 'ENU=The %1 is not valid.;ENN=The %1 is not valid.';
      DevBetaModeTxt@1007 : TextConst '@@@={Locked};ENU=DEV_BETA;ENN=DEV_BETA';
      SyncAlreadyEnabledErr@1008 : TextConst 'ENU=Office 365 Business profile synchronization is already enabled for another company in the system.;ENN=Office 365 Business profile synchronisation is already enabled for another company in the system.';
      ContactUsFullTxt@1010 : TextConst '@@@="%1 = phone number, %2 = email";ENU=Questions? Contact us at %1 or %2.;ENN=Questions? Contact us at %1 or %2.';
      ContactUsShortTxt@1009 : TextConst '@@@="%1 = phone number or email";ENU=Questions? Contact us at %1.;ENN=Questions? Contact us at %1.';
      PictureUpdated@1011 : Boolean;
      AlTelemetryCategoryTxt@1012 : TextConst '@@@={Locked};ENU=AL CompanyInfo;ENN=AL CompanyInfo';
      EmptyCountryRegionErr@1013 : TextConst '@@@={Locked};ENU=Country/Region code is not set, falling back to application default: %1.;ENN=Country/Region code is not set, falling back to application default: %1.';

    [External]
    PROCEDURE CheckIBAN@1(IBANCode@1000 : Code[100]);
    VAR
      Modulus97@1001 : Integer;
      I@1002 : Integer;
    BEGIN
      IF IBANCode = '' THEN
        EXIT;
      IBANCode := DELCHR(IBANCode);
      Modulus97 := 97;
      IF (STRLEN(IBANCode) <= 5) OR (STRLEN(IBANCode) > 34) THEN
        IBANError;
      IF IsDigit(IBANCode[1]) OR IsDigit(IBANCode[2]) THEN
        IBANError;
      ConvertIBAN(IBANCode);
      WHILE STRLEN(IBANCode) > 6 DO
        IBANCode := CalcModulus(COPYSTR(IBANCode,1,6),Modulus97) + COPYSTR(IBANCode,7);
      EVALUATE(I,IBANCode);
      IF (I MOD Modulus97) <> 1 THEN
        IBANError;
    END;

    LOCAL PROCEDURE ConvertIBAN@4(VAR IBANCode@1000 : Code[100]);
    VAR
      I@1002 : Integer;
    BEGIN
      IBANCode := COPYSTR(IBANCode,5) + COPYSTR(IBANCode,1,4);
      I := 0;
      WHILE I < STRLEN(IBANCode) DO BEGIN
        I := I + 1;
        IF ConvertLetter(IBANCode,COPYSTR(IBANCode,I,1),I) THEN
          I := 0;
      END;
    END;

    LOCAL PROCEDURE CalcModulus@3(Number@1000 : Code[10];Modulus97@1001 : Integer) : Code[10];
    VAR
      I@1002 : Integer;
    BEGIN
      EVALUATE(I,Number);
      I := I MOD Modulus97;
      IF I = 0 THEN
        EXIT('');
      EXIT(FORMAT(I));
    END;

    LOCAL PROCEDURE ConvertLetter@5(VAR IBANCode@1000 : Code[100];Letter@1001 : Code[1];LetterPlace@1002 : Integer) : Boolean;
    VAR
      Letter2@1003 : Code[2];
      LetterCharInt@1004 : Integer;
    BEGIN
      // CFR assumes letter to number conversion where A = 10, B = 11, ... , Y = 34, Z = 35
      // We must ignore country alphabet feature like Estonian
      LetterCharInt := Letter[1];
      IF LetterCharInt IN [65..90] THEN BEGIN
        Letter2 := FORMAT(LetterCharInt - 55,9);
        IF LetterPlace = 1 THEN
          IBANCode := Letter2 + COPYSTR(IBANCode,2)
        ELSE BEGIN
          IF LetterPlace = STRLEN(IBANCode) THEN
            IBANCode := COPYSTR(IBANCode,1,LetterPlace - 1) + Letter2
          ELSE
            IBANCode :=
              COPYSTR(IBANCode,1,LetterPlace - 1) + Letter2 + COPYSTR(IBANCode,LetterPlace + 1);
        END;
        EXIT(TRUE);
      END;
      IF IsDigit(Letter[1]) THEN
        EXIT(FALSE);

      IBANError;
    END;

    LOCAL PROCEDURE IsDigit@26(LetterChar@1000 : Char) : Boolean;
    VAR
      Letter@1001 : Code[1];
    BEGIN
      Letter[1] := LetterChar;
      EXIT((Letter >= '0') AND (Letter <= '9'))
    END;

    LOCAL PROCEDURE IBANError@12();
    VAR
      ConfirmManagement@1000 : Codeunit 27;
    BEGIN
      IF NOT ConfirmManagement.ConfirmProcess(Text000,TRUE) THEN
        ERROR('');
    END;

    [External]
    PROCEDURE DisplayMap@7();
    VAR
      MapPoint@1001 : Record 800;
      MapMgt@1000 : Codeunit 802;
    BEGIN
      IF MapPoint.FINDFIRST THEN
        MapMgt.MakeSelection(DATABASE::"Company Information",GETPOSITION)
      ELSE
        MESSAGE(Text002);
    END;

    LOCAL PROCEDURE IsPaymentInfoAvailble@10() : Boolean;
    BEGIN
      EXIT(
        (("Giro No." + IBAN + "Bank Name" + "Bank Branch No." + "Bank Account No." + "SWIFT Code") <> '') OR
        "Allow Blank Payment Info.");
    END;

    [External]
    PROCEDURE GetRegistrationNumber@14() : Text;
    BEGIN
      EXIT("Registration No.");
    END;

    [External]
    PROCEDURE GetRegistrationNumberLbl@15() : Text;
    BEGIN
      EXIT(FIELDCAPTION("Registration No."));
    END;

    [External]
    PROCEDURE GetVATRegistrationNumber@13() : Text;
    BEGIN
      EXIT("VAT Registration No.");
    END;

    [External]
    PROCEDURE GetVATRegistrationNumberLbl@11() : Text;
    BEGIN
      IF Name = '' THEN // Is the record loaded?
        GET;
      IF "VAT Registration No." = '' THEN
        EXIT('');
      EXIT(FIELDCAPTION("VAT Registration No."));
    END;

    [External]
    PROCEDURE GetLegalOffice@16() : Text;
    BEGIN
      EXIT('');
    END;

    [External]
    PROCEDURE GetLegalOfficeLbl@17() : Text;
    BEGIN
      EXIT('');
    END;

    [External]
    PROCEDURE GetCustomGiro@20() : Text;
    BEGIN
      EXIT('');
    END;

    [External]
    PROCEDURE GetCustomGiroLbl@19() : Text;
    BEGIN
      EXIT('');
    END;

    [External]
    PROCEDURE VerifyAndSetPaymentInfo@6();
    VAR
      ConfirmManagement@1001 : Codeunit 27;
      CompanyInformationPage@1000 : Page 1;
    BEGIN
      GET;
      IF IsPaymentInfoAvailble THEN
        EXIT;
      IF ConfirmManagement.ConfirmProcess(STRSUBSTNO(NoPaymentInfoQst,TABLECAPTION),TRUE) THEN BEGIN
        CompanyInformationPage.SETRECORD(Rec);
        CompanyInformationPage.EDITABLE(TRUE);
        IF CompanyInformationPage.RUNMODAL = ACTION::OK THEN
          CompanyInformationPage.GETRECORD(Rec);
      END;
      IF NOT IsPaymentInfoAvailble THEN
        MESSAGE(NoPaymentInfoMsg,TABLECAPTION);
    END;

    [External]
    PROCEDURE GetSystemIndicator@8(VAR Text@1000 : Text[250];VAR Style@1001 : 'Standard,Accent1,Accent2,Accent3,Accent4,Accent5,Accent6,Accent7,Accent8,Accent9');
    BEGIN
      Style := "System Indicator Style";
      CASE "System Indicator" OF
        "System Indicator"::None:
          Text := '';
        "System Indicator"::"Custom Text":
          Text := "Custom System Indicator Text";
        "System Indicator"::"Company Information":
          Text := Name;
        "System Indicator"::Company:
          Text := COMPANYNAME;
        "System Indicator"::Database:
          Text := GetDatabaseIndicatorText(FALSE);
        "System Indicator"::"Company+Database":
          Text := GetDatabaseIndicatorText(TRUE);
      END;
      OnAfterGetSystemIndicator(Text,Style)
    END;

    LOCAL PROCEDURE GetDatabaseIndicatorText@9(IncludeCompany@1003 : Boolean) : Text[250];
    VAR
      ActiveSession@1000 : Record 2000000110;
      Text@1002 : Text[1024];
    BEGIN
      ActiveSession.SETRANGE("Server Instance ID",SERVICEINSTANCEID);
      ActiveSession.SETRANGE("Session ID",SESSIONID);
      ActiveSession.FINDFIRST;
      Text := ActiveSession."Database Name" + ' - ' + ActiveSession."Server Computer Name";
      IF IncludeCompany THEN
        Text := COMPANYNAME + ' - ' + Text;
      IF STRLEN(Text) > 250 THEN
        EXIT(COPYSTR(Text,1,247) + '...');
      EXIT(Text)
    END;

    [External]
    PROCEDURE GetCountryRegionCode@2(CountryRegionCode@1000 : Code[10]) : Code[10];
    BEGIN
      CASE CountryRegionCode OF
        '',"Country/Region Code":
          EXIT("Country/Region Code");
        ELSE
          EXIT(CountryRegionCode);
      END;
    END;

    [External]
    PROCEDURE GetCompanyCountryRegionCode@25() : Code[10];
    VAR
      MediaResourcesMgt@1000 : Codeunit 9755;
      CountryRegionCode@1001 : Code[10];
    BEGIN
      IF "Country/Region Code" <> '' THEN
        EXIT("Country/Region Code");

      CountryRegionCode := UPPERCASE(MediaResourcesMgt.ReadTextFromMediaResource('ApplicationCountry'));

      SENDTRACETAG(
        '00007HP',
        AlTelemetryCategoryTxt,
        VERBOSITY::Normal,
        STRSUBSTNO(EmptyCountryRegionErr,CountryRegionCode),
        DATACLASSIFICATION::SystemMetadata);

      EXIT(CountryRegionCode);
    END;

    [External]
    PROCEDURE GetDevBetaModeTxt@18() : Text[250];
    BEGIN
      EXIT(DevBetaModeTxt);
    END;

    [External]
    PROCEDURE GetContactUsText@23() : Text;
    BEGIN
      IF ("Phone No." <> '') AND ("E-Mail" <> '') THEN
        EXIT(STRSUBSTNO(ContactUsFullTxt,"Phone No.","E-Mail"));

      IF "Phone No." <> '' THEN
        EXIT(STRSUBSTNO(ContactUsShortTxt,"Phone No."));

      IF "E-Mail" <> '' THEN
        EXIT(STRSUBSTNO(ContactUsShortTxt,"E-Mail"));

      EXIT('');
    END;

    [External]
    PROCEDURE IsSyncEnabledForOtherCompany@21() SyncEnabled : Boolean;
    VAR
      CompanyInformation@1000 : Record 79;
      Company@1001 : Record 2000000006;
    BEGIN
      Company.SETFILTER(Name,'<>%1',COMPANYNAME);
      IF Company.FINDSET THEN BEGIN
        REPEAT
          CompanyInformation.CHANGECOMPANY(Company.Name);
          IF CompanyInformation.GET THEN
            SyncEnabled := CompanyInformation."Sync with O365 Bus. profile";
        UNTIL (Company.NEXT = 0) OR SyncEnabled;
      END;
    END;

    LOCAL PROCEDURE SetBrandColorValue@22();
    VAR
      O365BrandColor@1000 : Record 2121;
    BEGIN
      IF "Brand Color Code" <> '' THEN BEGIN
        O365BrandColor.GET("Brand Color Code");
        "Brand Color Value" := O365BrandColor."Color Value";
      END ELSE
        "Brand Color Value" := '';
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterGetSystemIndicator@24(VAR Text@1000 : Text[250];VAR Style@1001 : 'Standard,Accent1,Accent2,Accent3,Accent4,Accent5,Accent6,Accent7,Accent8,Accent9');
    BEGIN
    END;

    BEGIN
    END.
  }
}

OBJECT Table 84 Acc. Schedule Name
{
  OBJECT-PROPERTIES
  {
    Date=02-10-21;
    Time=12:00:00;
    Modified=Yes;
    Version List=NAVW114.30;
  }
  PROPERTIES
  {
    DataCaptionFields=Name,Description;
    OnDelete=BEGIN
               AccSchedLine.SETRANGE("Schedule Name",Name);
               AccSchedLine.DELETEALL;
             END;

    CaptionML=[ENU=Acc. Schedule Name;
               ENN=Acc. Schedule Name];
    LookupPageID=Page103;
  }
  FIELDS
  {
    { 1   ;   ;Name                ;Code10        ;CaptionML=[ENU=Name;
                                                              ENN=Name];
                                                   NotBlank=Yes }
    { 2   ;   ;Description         ;Text80        ;CaptionML=[ENU=Description;
                                                              ENN=Description] }
    { 3   ;   ;Default Column Layout;Code10       ;TableRelation="Column Layout Name";
                                                   CaptionML=[ENU=Default Column Layout;
                                                              ENN=Default Column Layout] }
    { 4   ;   ;Analysis View Name  ;Code10        ;TableRelation="Analysis View";
                                                   OnValidate=VAR
                                                                AnalysisView@1000 : Record 363;
                                                                xAnalysisView@1001 : Record 363;
                                                                ConfirmManagement@1002 : Codeunit 27;
                                                                AskedUser@1003 : Boolean;
                                                                ClearTotaling@1004 : Boolean;
                                                                i@1005 : Integer;
                                                              BEGIN
                                                                IF xRec."Analysis View Name" <> "Analysis View Name" THEN BEGIN
                                                                  AnalysisViewGet(xAnalysisView,xRec."Analysis View Name");
                                                                  AnalysisViewGet(AnalysisView,"Analysis View Name");

                                                                  ClearTotaling := TRUE;
                                                                  AskedUser := FALSE;

                                                                  FOR i := 1 TO 4 DO
                                                                    IF (GetDimCodeByNum(xAnalysisView,i) <> GetDimCodeByNum(AnalysisView,i)) AND ClearTotaling THEN
                                                                      IF NOT DimTotalingLinesAreEmpty(i) THEN BEGIN
                                                                        IF NOT AskedUser THEN BEGIN
                                                                          ClearTotaling := ConfirmManagement.ConfirmProcess(ClearDimensionTotalingConfirmTxt,TRUE);
                                                                          AskedUser := TRUE;
                                                                        END;

                                                                        IF ClearTotaling THEN
                                                                          ClearDimTotalingLines(i);
                                                                      END;
                                                                  IF NOT ClearTotaling THEN
                                                                    "Analysis View Name" := xRec."Analysis View Name";
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Analysis View Name;
                                                              ENN=Analysis View Name] }
    { 50000;  ;Super User Show     ;Boolean       ;Description=AD_SD }
    { 50001;  ;Normal User Show    ;Boolean       ;Description=SDM BCS }
    { 50002;  ;MUM Show            ;Boolean       ;Description=SDM BCS }
    { 50003;  ;BLR Show            ;Boolean       ;Description=SDM BCS }
    { 50004;  ;DEL Show            ;Boolean       ;Description=SDM BCS }
    { 50005;  ;HYD Show            ;Boolean       ;Description=SDM BCS }
    { 50006;  ;AUDIT Show          ;Boolean       ;Description=SDM BCS }
  }
  KEYS
  {
    {    ;Name                                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      AccSchedLine@1000 : Record 85;
      ClearDimensionTotalingConfirmTxt@1001 : TextConst 'ENU=Changing Analysis View will clear differing dimension totaling columns of Account Schedule Lines. \Do you want to continue?;ENN=Changing Analysis View will clear differing dimension totalling columns of Account Schedule Lines. \Do you want to continue?';

    LOCAL PROCEDURE AnalysisViewGet@4(VAR AnalysisView@1000 : Record 363;AnalysisViewName@1001 : Code[10]);
    VAR
      GLSetup@1002 : Record 98;
    BEGIN
      IF NOT AnalysisView.GET(AnalysisViewName) THEN
        IF "Analysis View Name" = '' THEN BEGIN
          GLSetup.GET;
          AnalysisView."Dimension 1 Code" := GLSetup."Global Dimension 1 Code";
          AnalysisView."Dimension 2 Code" := GLSetup."Global Dimension 2 Code";
        END;
    END;

    PROCEDURE DimTotalingLinesAreEmpty@5(DimNumber@1000 : Integer) : Boolean;
    VAR
      RecRef@1002 : RecordRef;
      FieldRef@1001 : FieldRef;
    BEGIN
      AccSchedLine.RESET;
      AccSchedLine.SETRANGE("Schedule Name",Name);
      RecRef.GETTABLE(AccSchedLine);
      FieldRef := RecRef.FIELD(AccSchedLine.FIELDNO("Dimension 1 Totaling") + DimNumber - 1);
      FieldRef.SETFILTER('<>%1','');
      RecRef := FieldRef.RECORD;
      EXIT(RecRef.ISEMPTY);
    END;

    PROCEDURE ClearDimTotalingLines@6(DimNumber@1000 : Integer);
    VAR
      RecRef@1002 : RecordRef;
      FieldRef@1001 : FieldRef;
    BEGIN
      AccSchedLine.RESET;
      AccSchedLine.SETRANGE("Schedule Name",Name);
      RecRef.GETTABLE(AccSchedLine);
      IF RecRef.FINDSET THEN
        REPEAT
          FieldRef := RecRef.FIELD(AccSchedLine.FIELDNO("Dimension 1 Totaling") + DimNumber - 1);
          FieldRef.VALUE := '';
          RecRef.MODIFY;
        UNTIL RecRef.NEXT = 0;
    END;

    LOCAL PROCEDURE GetDimCodeByNum@7(AnalysisView@1000 : Record 363;DimNumber@1001 : Integer) DimensionCode : Code[20];
    VAR
      RecRef@1002 : RecordRef;
      FieldRef@1003 : FieldRef;
    BEGIN
      RecRef.GETTABLE(AnalysisView);
      FieldRef := RecRef.FIELD(AnalysisView.FIELDNO("Dimension 1 Code") + DimNumber - 1);
      EVALUATE(DimensionCode,FORMAT(FieldRef.VALUE));
    END;

    [External]
    PROCEDURE Print@1();
    VAR
      AccountSchedule@1000 : Report 25;
      IsHandled@1001 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforePrint(Rec,IsHandled);
      IF IsHandled THEN
        EXIT;

      AccountSchedule.SetAccSchedName(Name);
      AccountSchedule.SetColumnLayoutName("Default Column Layout");
      AccountSchedule.RUN;
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePrint@3(VAR AccScheduleName@1000 : Record 84;VAR IsHandled@1001 : Boolean);
    BEGIN
    END;

    BEGIN
    END.
  }
}

OBJECT Table 91 User Setup
{
  OBJECT-PROPERTIES
  {
    Date=02-10-21;
    Time=12:00:00;
    Modified=Yes;
    Version List=NAVW114.30;
  }
  PROPERTIES
  {
    OnInsert=VAR
               User@1000 : Record 2000000120;
             BEGIN
               IF "E-Mail" <> '' THEN
                 EXIT;
               IF "User ID" <> '' THEN
                 EXIT;
               User.SETRANGE("User Name","User ID");
               IF User.FINDFIRST THEN
                 "E-Mail" := COPYSTR(User."Contact Email",1,MAXSTRLEN("E-Mail"));
             END;

    OnDelete=VAR
               NotificationSetup@1000 : Record 1512;
             BEGIN
               NotificationSetup.SETRANGE("User ID","User ID");
               NotificationSetup.DELETEALL(TRUE);
             END;

    ReplicateData=No;
    CaptionML=[ENU=User Setup;
               ENN=User Setup];
    LookupPageID=Page119;
    DrillDownPageID=Page119;
  }
  FIELDS
  {
    { 1   ;   ;User ID             ;Code50        ;TableRelation=User."User Name";
                                                   OnValidate=VAR
                                                                UserMgt@1000 : Codeunit 418;
                                                              BEGIN
                                                                UserMgt.ValidateUserID("User ID");
                                                              END;

                                                   OnLookup=VAR
                                                              UserMgt@1000 : Codeunit 418;
                                                            BEGIN
                                                              UserMgt.LookupUserID("User ID");
                                                            END;

                                                   ValidateTableRelation=No;
                                                   DataClassification=EndUserIdentifiableInformation;
                                                   CaptionML=[ENU=User ID;
                                                              ENN=User ID];
                                                   NotBlank=Yes }
    { 2   ;   ;Allow Posting From  ;Date          ;OnValidate=BEGIN
                                                                CheckAllowedPostingDates(0);
                                                              END;

                                                   CaptionML=[ENU=Allow Posting From;
                                                              ENN=Allow Posting From] }
    { 3   ;   ;Allow Posting To    ;Date          ;OnValidate=BEGIN
                                                                CheckAllowedPostingDates(0);
                                                              END;

                                                   CaptionML=[ENU=Allow Posting To;
                                                              ENN=Allow Posting To] }
    { 4   ;   ;Register Time       ;Boolean       ;CaptionML=[ENU=Register Time;
                                                              ENN=Register Time] }
    { 10  ;   ;Salespers./Purch. Code;Code20      ;TableRelation=Salesperson/Purchaser;
                                                   OnValidate=VAR
                                                                UserSetup@1000 : Record 91;
                                                              BEGIN
                                                                IF "Salespers./Purch. Code" <> '' THEN BEGIN
                                                                  ValidateSalesPersonPurchOnUserSetup(Rec);
                                                                  UserSetup.SETCURRENTKEY("Salespers./Purch. Code");
                                                                  UserSetup.SETRANGE("Salespers./Purch. Code","Salespers./Purch. Code");
                                                                  IF UserSetup.FINDFIRST THEN
                                                                    ERROR(Text001,"Salespers./Purch. Code",UserSetup."User ID");
                                                                  UpdateSalesPerson;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Salespers./Purch. Code;
                                                              ENN=Salespers./Purch. Code] }
    { 11  ;   ;Approver ID         ;Code50        ;TableRelation="User Setup"."User ID";
                                                   OnValidate=BEGIN
                                                                IF "Approver ID" = "User ID" THEN
                                                                  FIELDERROR("Approver ID");
                                                              END;

                                                   OnLookup=VAR
                                                              UserSetup@1000 : Record 91;
                                                            BEGIN
                                                              UserSetup.SETFILTER("User ID",'<>%1',"User ID");
                                                              IF PAGE.RUNMODAL(PAGE::"Approval User Setup",UserSetup) = ACTION::LookupOK THEN
                                                                VALIDATE("Approver ID",UserSetup."User ID");
                                                            END;

                                                   DataClassification=EndUserIdentifiableInformation;
                                                   CaptionML=[ENU=Approver ID;
                                                              ENN=Approver ID] }
    { 12  ;   ;Sales Amount Approval Limit;Integer;OnValidate=BEGIN
                                                                IF "Unlimited Sales Approval" AND ("Sales Amount Approval Limit" <> 0) THEN
                                                                  ERROR(Text003,FIELDCAPTION("Sales Amount Approval Limit"),FIELDCAPTION("Unlimited Sales Approval"));
                                                                IF "Sales Amount Approval Limit" < 0 THEN
                                                                  ERROR(Text005);
                                                              END;

                                                   CaptionML=[ENU=Sales Amount Approval Limit;
                                                              ENN=Sales Amount Approval Limit];
                                                   BlankZero=Yes }
    { 13  ;   ;Purchase Amount Approval Limit;Integer;
                                                   OnValidate=BEGIN
                                                                IF "Unlimited Purchase Approval" AND ("Purchase Amount Approval Limit" <> 0) THEN
                                                                  ERROR(Text003,FIELDCAPTION("Purchase Amount Approval Limit"),FIELDCAPTION("Unlimited Purchase Approval"));
                                                                IF "Purchase Amount Approval Limit" < 0 THEN
                                                                  ERROR(Text005);
                                                              END;

                                                   CaptionML=[ENU=Purchase Amount Approval Limit;
                                                              ENN=Purchase Amount Approval Limit];
                                                   BlankZero=Yes }
    { 14  ;   ;Unlimited Sales Approval;Boolean   ;OnValidate=BEGIN
                                                                IF "Unlimited Sales Approval" THEN
                                                                  "Sales Amount Approval Limit" := 0;
                                                              END;

                                                   CaptionML=[ENU=Unlimited Sales Approval;
                                                              ENN=Unlimited Sales Approval] }
    { 15  ;   ;Unlimited Purchase Approval;Boolean;OnValidate=BEGIN
                                                                IF "Unlimited Purchase Approval" THEN
                                                                  "Purchase Amount Approval Limit" := 0;
                                                              END;

                                                   CaptionML=[ENU=Unlimited Purchase Approval;
                                                              ENN=Unlimited Purchase Approval] }
    { 16  ;   ;Substitute          ;Code50        ;TableRelation="User Setup"."User ID";
                                                   OnValidate=BEGIN
                                                                IF Substitute = "User ID" THEN
                                                                  FIELDERROR(Substitute);
                                                              END;

                                                   OnLookup=VAR
                                                              UserSetup@1000 : Record 91;
                                                            BEGIN
                                                              UserSetup.SETFILTER("User ID",'<>%1',"User ID");
                                                              IF PAGE.RUNMODAL(PAGE::"Approval User Setup",UserSetup) = ACTION::LookupOK THEN
                                                                VALIDATE(Substitute,UserSetup."User ID");
                                                            END;

                                                   DataClassification=EndUserIdentifiableInformation;
                                                   CaptionML=[ENU=Substitute;
                                                              ENN=Substitute] }
    { 17  ;   ;E-Mail              ;Text100       ;OnValidate=VAR
                                                                MailManagement@1000 : Codeunit 9520;
                                                              BEGIN
                                                                UpdateSalesPerson;
                                                                MailManagement.ValidateEmailAddressField("E-Mail");
                                                              END;

                                                   ExtendedDatatype=E-Mail;
                                                   CaptionML=[ENU=E-Mail;
                                                              ENN=E-Mail] }
    { 19  ;   ;Request Amount Approval Limit;Integer;
                                                   OnValidate=BEGIN
                                                                IF "Unlimited Request Approval" AND ("Request Amount Approval Limit" <> 0) THEN
                                                                  ERROR(Text003,FIELDCAPTION("Request Amount Approval Limit"),FIELDCAPTION("Unlimited Request Approval"));
                                                                IF "Request Amount Approval Limit" < 0 THEN
                                                                  ERROR(Text005);
                                                              END;

                                                   CaptionML=[ENU=Request Amount Approval Limit;
                                                              ENN=Request Amount Approval Limit];
                                                   BlankZero=Yes }
    { 20  ;   ;Unlimited Request Approval;Boolean ;OnValidate=BEGIN
                                                                IF "Unlimited Request Approval" THEN
                                                                  "Request Amount Approval Limit" := 0;
                                                              END;

                                                   CaptionML=[ENU=Unlimited Request Approval;
                                                              ENN=Unlimited Request Approval] }
    { 21  ;   ;Approval Administrator;Boolean     ;OnValidate=VAR
                                                                UserSetup@1000 : Record 91;
                                                              BEGIN
                                                                IF "Approval Administrator" THEN BEGIN
                                                                  UserSetup.SETRANGE("Approval Administrator",TRUE);
                                                                  IF NOT UserSetup.ISEMPTY THEN
                                                                    FIELDERROR("Approval Administrator");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Approval Administrator;
                                                              ENN=Approval Administrator] }
    { 31  ;   ;License Type        ;Option        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(User."License Type" WHERE (User Name=FIELD(User ID)));
                                                   CaptionML=[ENU=License Type;
                                                              ENN=Licence Type];
                                                   OptionCaptionML=[ENU=Full User,Limited User,Device Only User,Windows Group,External User;
                                                                    ENN=Full User,Limited User,Device Only User,Windows Group,External User];
                                                   OptionString=Full User,Limited User,Device Only User,Windows Group,External User }
    { 950 ;   ;Time Sheet Admin.   ;Boolean       ;CaptionML=[ENU=Time Sheet Admin.;
                                                              ENN=Time Sheet Admin.] }
    { 5600;   ;Allow FA Posting From;Date         ;CaptionML=[ENU=Allow FA Posting From;
                                                              ENN=Allow FA Posting From] }
    { 5601;   ;Allow FA Posting To ;Date          ;CaptionML=[ENU=Allow FA Posting To;
                                                              ENN=Allow FA Posting To] }
    { 5700;   ;Sales Resp. Ctr. Filter;Code10     ;TableRelation="Responsibility Center".Code;
                                                   CaptionML=[ENU=Sales Resp. Ctr. Filter;
                                                              ENN=Sales Resp. Ctr. Filter] }
    { 5701;   ;Purchase Resp. Ctr. Filter;Code10  ;TableRelation="Responsibility Center";
                                                   CaptionML=[ENU=Purchase Resp. Ctr. Filter;
                                                              ENN=Purchase Resp. Ctr. Filter] }
    { 5900;   ;Service Resp. Ctr. Filter;Code10   ;TableRelation="Responsibility Center";
                                                   CaptionML=[ENU=Service Resp. Ctr. Filter;
                                                              ENN=Service Resp. Ctr. Filter] }
    { 50003;  ;Super User          ;Boolean        }
    { 50004;  ;Super Super User    ;Boolean        }
  }
  KEYS
  {
    {    ;User ID                                 ;Clustered=Yes }
    {    ;Salespers./Purch. Code                   }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1000 : TextConst 'ENU=The %1 Salesperson/Purchaser code is already assigned to another User ID %2.;ENN=The %1 Salesperson/Purchaser code is already assigned to another User ID %2.';
      Text003@1002 : TextConst 'ENU="You cannot have both a %1 and %2. ";ENN="You cannot have both a %1 and %2. "';
      Text005@1004 : TextConst 'ENU=You cannot have approval limits less than zero.;ENN=You cannot have approval limits less than zero.';
      SalesPersonPurchaser@1011 : Record 13;
      PrivacyBlockedGenericErr@1013 : TextConst '@@@="%1 = salesperson / purchaser code.";ENU=Privacy Blocked must not be true for Salesperson / Purchaser %1.;ENN=Privacy Blocked must not be true for Salesperson / Purchaser %1.';
      UserSetupManagement@1001 : Codeunit 5700;

    [External]
    PROCEDURE CreateApprovalUserSetup@3(User@1000 : Record 2000000120);
    VAR
      UserSetup@1001 : Record 91;
      ApprovalUserSetup@1002 : Record 91;
    BEGIN
      ApprovalUserSetup.INIT;
      ApprovalUserSetup.VALIDATE("User ID",User."User Name");
      ApprovalUserSetup.VALIDATE("Sales Amount Approval Limit",GetDefaultSalesAmountApprovalLimit);
      ApprovalUserSetup.VALIDATE("Purchase Amount Approval Limit",GetDefaultPurchaseAmountApprovalLimit);
      ApprovalUserSetup.VALIDATE("E-Mail",User."Contact Email");
      UserSetup.SETRANGE("Sales Amount Approval Limit",UserSetup.GetDefaultSalesAmountApprovalLimit);
      IF UserSetup.FINDFIRST THEN
        ApprovalUserSetup.VALIDATE("Approver ID",UserSetup."Approver ID");
      IF ApprovalUserSetup.INSERT THEN;
    END;

    [External]
    PROCEDURE GetDefaultSalesAmountApprovalLimit@1() : Integer;
    VAR
      UserSetup@1001 : Record 91;
      DefaultApprovalLimit@1000 : Integer;
      LimitedApprovers@1002 : Integer;
    BEGIN
      UserSetup.SETRANGE("Unlimited Sales Approval",FALSE);

      IF UserSetup.FINDFIRST THEN BEGIN
        DefaultApprovalLimit := UserSetup."Sales Amount Approval Limit";
        LimitedApprovers := UserSetup.COUNT;
        UserSetup.SETRANGE("Sales Amount Approval Limit",DefaultApprovalLimit);
        IF LimitedApprovers = UserSetup.COUNT THEN
          EXIT(DefaultApprovalLimit);
      END;

      // Return 0 if no user setup exists or no default value is found
      EXIT(0);
    END;

    [External]
    PROCEDURE GetDefaultPurchaseAmountApprovalLimit@2() : Integer;
    VAR
      UserSetup@1002 : Record 91;
      DefaultApprovalLimit@1001 : Integer;
      LimitedApprovers@1000 : Integer;
    BEGIN
      UserSetup.SETRANGE("Unlimited Purchase Approval",FALSE);

      IF UserSetup.FINDFIRST THEN BEGIN
        DefaultApprovalLimit := UserSetup."Purchase Amount Approval Limit";
        LimitedApprovers := UserSetup.COUNT;
        UserSetup.SETRANGE("Purchase Amount Approval Limit",DefaultApprovalLimit);
        IF LimitedApprovers = UserSetup.COUNT THEN
          EXIT(DefaultApprovalLimit);
      END;

      // Return 0 if no user setup exists or no default value is found
      EXIT(0);
    END;

    [External]
    PROCEDURE HideExternalUsers@5();
    VAR
      PermissionManager@1001 : Codeunit 9002;
      OriginalFilterGroup@1000 : Integer;
    BEGIN
      IF NOT PermissionManager.SoftwareAsAService THEN
        EXIT;

      OriginalFilterGroup := FILTERGROUP;
      FILTERGROUP := 2;
      CALCFIELDS("License Type");
      SETFILTER("License Type",'<>%1',"License Type"::"External User");
      FILTERGROUP := OriginalFilterGroup;
    END;

    LOCAL PROCEDURE UpdateSalesPerson@4();
    VAR
      SalespersonPurchaser@1000 : Record 13;
    BEGIN
      IF ("E-Mail" <> '') AND SalespersonPurchaser.GET("Salespers./Purch. Code") THEN BEGIN
        SalespersonPurchaser."E-Mail" := COPYSTR("E-Mail",1,MAXSTRLEN(SalespersonPurchaser."E-Mail"));
        SalespersonPurchaser.MODIFY;
      END;
    END;

    LOCAL PROCEDURE ValidateSalesPersonPurchOnUserSetup@298(UserSetup2@1000 : Record 91);
    BEGIN
      IF UserSetup2."Salespers./Purch. Code" <> '' THEN
        IF SalesPersonPurchaser.GET(UserSetup2."Salespers./Purch. Code") THEN
          IF SalesPersonPurchaser.VerifySalesPersonPurchaserPrivacyBlocked(SalesPersonPurchaser) THEN
            ERROR(PrivacyBlockedGenericErr,UserSetup2."Salespers./Purch. Code")
    END;

    [External]
    PROCEDURE CheckAllowedPostingDates@6(NotificationType@1000 : 'Error,Notification');
    BEGIN
      UserSetupManagement.CheckAllowedPostingDatesRange(
        "Allow Posting From","Allow Posting To",NotificationType,DATABASE::"User Setup");
    END;

    BEGIN
    END.
  }
}

OBJECT Table 98 General Ledger Setup
{
  OBJECT-PROPERTIES
  {
    Date=02-10-21;
    Time=12:00:00;
    Modified=Yes;
    Version List=NAVW114.30;
  }
  PROPERTIES
  {
  }
  FIELDS
  {
    { 1   ;   ;Primary Key         ;Code10         }
    { 2   ;   ;Allow Posting From  ;Date          ;OnValidate=BEGIN
                                                                CheckAllowedPostingDates(0);
                                                              END;
                                                               }
    { 3   ;   ;Allow Posting To    ;Date          ;OnValidate=BEGIN
                                                                CheckAllowedPostingDates(0);
                                                              END;
                                                               }
    { 4   ;   ;Register Time       ;Boolean        }
    { 28  ;   ;Pmt. Disc. Excl. VAT;Boolean       ;OnValidate=BEGIN
                                                                IF "Pmt. Disc. Excl. VAT" THEN
                                                                  TESTFIELD("Adjust for Payment Disc.",FALSE)
                                                                ELSE
                                                                  TESTFIELD("VAT Tolerance %",0);
                                                              END;
                                                               }
    { 41  ;   ;Date Filter         ;Date          ;FieldClass=FlowFilter }
    { 42  ;   ;Global Dimension 1 Filter;Code20   ;FieldClass=FlowFilter;
                                                   TableRelation="Dimension Value".Code WHERE (Dimension Code=FIELD(Global Dimension 1 Code));
                                                   CaptionClass='1,3,1' }
    { 43  ;   ;Global Dimension 2 Filter;Code20   ;FieldClass=FlowFilter;
                                                   TableRelation="Dimension Value".Code WHERE (Dimension Code=FIELD(Global Dimension 2 Code));
                                                   CaptionClass='1,3,2' }
    { 44  ;   ;Cust. Balances Due  ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry"."Amount (LCY)" WHERE (Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                      Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                      Initial Entry Due Date=FIELD(Date Filter)));
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 45  ;   ;Vendor Balances Due ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Detailed Vendor Ledg. Entry"."Amount (LCY)" WHERE (Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                        Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                        Initial Entry Due Date=FIELD(Date Filter)));
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 48  ;   ;Unrealized VAT      ;Boolean       ;OnValidate=BEGIN
                                                                IF NOT "Unrealized VAT" THEN BEGIN
                                                                  VATPostingSetup.SETFILTER(
                                                                    "Unrealized VAT Type",'>=%1',VATPostingSetup."Unrealized VAT Type"::Percentage);
                                                                  IF VATPostingSetup.FINDFIRST THEN
                                                                    ERROR(
                                                                      Text000,VATPostingSetup.TABLECAPTION,
                                                                      VATPostingSetup."VAT Bus. Posting Group",VATPostingSetup."VAT Prod. Posting Group",
                                                                      VATPostingSetup.FIELDCAPTION("Unrealized VAT Type"),VATPostingSetup."Unrealized VAT Type");
                                                                  TaxJurisdiction.SETFILTER(
                                                                    "Unrealized VAT Type",'>=%1',TaxJurisdiction."Unrealized VAT Type"::Percentage);
                                                                  IF TaxJurisdiction.FINDFIRST THEN
                                                                    ERROR(
                                                                      Text001,TaxJurisdiction.TABLECAPTION,
                                                                      TaxJurisdiction.Code,TaxJurisdiction.FIELDCAPTION("Unrealized VAT Type"),
                                                                      TaxJurisdiction."Unrealized VAT Type");
                                                                END;
                                                                IF "Unrealized VAT" THEN
                                                                  "Prepayment Unrealized VAT" := TRUE
                                                                ELSE
                                                                  "Prepayment Unrealized VAT" := FALSE;
                                                              END;

                                                   CaptionML=[ENU=Unrealized VAT;
                                                              ENN=Unrealised VAT] }
    { 49  ;   ;Adjust for Payment Disc.;Boolean   ;OnValidate=BEGIN
                                                                IF "Adjust for Payment Disc." THEN BEGIN
                                                                  TESTFIELD("Pmt. Disc. Excl. VAT",FALSE);
                                                                  TESTFIELD("VAT Tolerance %",0);
                                                                END ELSE BEGIN
                                                                  VATPostingSetup.SETRANGE("Adjust for Payment Discount",TRUE);
                                                                  IF VATPostingSetup.FINDFIRST THEN
                                                                    ERROR(
                                                                      Text002,VATPostingSetup.TABLECAPTION,
                                                                      VATPostingSetup."VAT Bus. Posting Group",VATPostingSetup."VAT Prod. Posting Group",
                                                                      VATPostingSetup.FIELDCAPTION("Adjust for Payment Discount"));
                                                                  TaxJurisdiction.SETRANGE("Adjust for Payment Discount",TRUE);
                                                                  IF TaxJurisdiction.FINDFIRST THEN
                                                                    ERROR(
                                                                      Text003,TaxJurisdiction.TABLECAPTION,
                                                                      TaxJurisdiction.Code,TaxJurisdiction.FIELDCAPTION("Adjust for Payment Discount"));
                                                                END;
                                                              END;
                                                               }
    { 56  ;   ;Mark Cr. Memos as Corrections;Boolean }
    { 57  ;   ;Local Address Format;Option        ;OptionString=Post Code+City,City+Post Code,City+County+Post Code,Blank Line+Post Code+City }
    { 58  ;   ;Inv. Rounding Precision (LCY);Decimal;
                                                   OnValidate=BEGIN
                                                                IF "Amount Rounding Precision" <> 0 THEN
                                                                  IF "Inv. Rounding Precision (LCY)" <> ROUND("Inv. Rounding Precision (LCY)","Amount Rounding Precision") THEN
                                                                    ERROR(
                                                                      Text004,
                                                                      FIELDCAPTION("Inv. Rounding Precision (LCY)"),"Amount Rounding Precision");
                                                              END;

                                                   AutoFormatType=1 }
    { 59  ;   ;Inv. Rounding Type (LCY);Option    ;OptionString=Nearest,Up,Down }
    { 60  ;   ;Local Cont. Addr. Format;Option    ;InitValue=After Company Name;
                                                   OptionString=First,After Company Name,Last }
    { 63  ;   ;Bank Account Nos.   ;Code20        ;TableRelation="No. Series";
                                                   AccessByPermission=TableData 270=R }
    { 65  ;   ;Summarize G/L Entries;Boolean      ;CaptionML=[ENU=Summarize G/L Entries;
                                                              ENN=Summarise G/L Entries] }
    { 66  ;   ;Amount Decimal Places;Text5        ;InitValue=2:2;
                                                   OnValidate=BEGIN
                                                                CheckDecimalPlacesFormat("Amount Decimal Places");
                                                              END;
                                                               }
    { 67  ;   ;Unit-Amount Decimal Places;Text5   ;InitValue=2:5;
                                                   OnValidate=BEGIN
                                                                CheckDecimalPlacesFormat("Unit-Amount Decimal Places");
                                                              END;
                                                               }
    { 68  ;   ;Additional Reporting Currency;Code10;
                                                   TableRelation=Currency;
                                                   OnValidate=BEGIN
                                                                IF ("Additional Reporting Currency" <> xRec."Additional Reporting Currency") AND
                                                                   ("Additional Reporting Currency" <> '')
                                                                THEN BEGIN
                                                                  AdjAddReportingCurr.SetAddCurr("Additional Reporting Currency");
                                                                  AdjAddReportingCurr.RUNMODAL;
                                                                  IF NOT AdjAddReportingCurr.IsExecuted THEN
                                                                    "Additional Reporting Currency" := xRec."Additional Reporting Currency";
                                                                END;
                                                                IF ("Additional Reporting Currency" <> xRec."Additional Reporting Currency") AND
                                                                   AdjAddReportingCurr.IsExecuted
                                                                THEN
                                                                  DeleteIntrastatJnl;
                                                                IF ("Additional Reporting Currency" <> xRec."Additional Reporting Currency") AND
                                                                   ("Additional Reporting Currency" <> '') AND
                                                                   AdjAddReportingCurr.IsExecuted
                                                                THEN
                                                                  DeleteAnalysisView;
                                                              END;
                                                               }
    { 69  ;   ;VAT Tolerance %     ;Decimal       ;OnValidate=BEGIN
                                                                IF "VAT Tolerance %" <> 0 THEN BEGIN
                                                                  TESTFIELD("Adjust for Payment Disc.",FALSE);
                                                                  TESTFIELD("Pmt. Disc. Excl. VAT",TRUE);
                                                                END;
                                                              END;

                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 70  ;   ;EMU Currency        ;Boolean        }
    { 71  ;   ;LCY Code            ;Code10        ;OnValidate=VAR
                                                                Currency@1000 : Record 4;
                                                              BEGIN
                                                                IF "Local Currency Symbol" = '' THEN
                                                                  "Local Currency Symbol" := Currency.ResolveCurrencySymbol("LCY Code");

                                                                IF "Local Currency Description" = '' THEN
                                                                  "Local Currency Description" := COPYSTR(Currency.ResolveCurrencyDescription("LCY Code"),1,MAXSTRLEN("Local Currency Description"));
                                                              END;
                                                               }
    { 72  ;   ;VAT Exchange Rate Adjustment;Option;OptionString=No Adjustment,Adjust Amount,Adjust Additional-Currency Amount }
    { 73  ;   ;Amount Rounding Precision;Decimal  ;InitValue=0.01;
                                                   OnValidate=BEGIN
                                                                IF "Amount Rounding Precision" <> 0 THEN
                                                                  "Inv. Rounding Precision (LCY)" := ROUND("Inv. Rounding Precision (LCY)","Amount Rounding Precision");

                                                                RoundingErrorCheck(FIELDCAPTION("Amount Rounding Precision"));

                                                                IF HideDialog THEN
                                                                  MESSAGE(Text021);
                                                              END;

                                                   DecimalPlaces=0:5 }
    { 74  ;   ;Unit-Amount Rounding Precision;Decimal;
                                                   InitValue=0.00001;
                                                   OnValidate=BEGIN
                                                                IF HideDialog THEN
                                                                  MESSAGE(Text022);
                                                              END;

                                                   DecimalPlaces=0:9 }
    { 75  ;   ;Appln. Rounding Precision;Decimal  ;MinValue=0;
                                                   AutoFormatType=1 }
    { 79  ;   ;Global Dimension 1 Code;Code20     ;TableRelation=Dimension;
                                                   OnValidate=BEGIN
                                                                "Shortcut Dimension 1 Code" := "Global Dimension 1 Code";
                                                              END;

                                                   Editable=No }
    { 80  ;   ;Global Dimension 2 Code;Code20     ;TableRelation=Dimension;
                                                   OnValidate=BEGIN
                                                                "Shortcut Dimension 2 Code" := "Global Dimension 2 Code";
                                                              END;

                                                   Editable=No }
    { 81  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation=Dimension;
                                                   Editable=No }
    { 82  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation=Dimension;
                                                   Editable=No }
    { 83  ;   ;Shortcut Dimension 3 Code;Code20   ;TableRelation=Dimension;
                                                   OnValidate=BEGIN
                                                                UpdateDimValueGlobalDimNo(xRec."Shortcut Dimension 3 Code","Shortcut Dimension 3 Code",3);
                                                              END;

                                                   AccessByPermission=TableData 350=R }
    { 84  ;   ;Shortcut Dimension 4 Code;Code20   ;TableRelation=Dimension;
                                                   OnValidate=BEGIN
                                                                UpdateDimValueGlobalDimNo(xRec."Shortcut Dimension 4 Code","Shortcut Dimension 4 Code",4);
                                                              END;

                                                   AccessByPermission=TableData 350=R }
    { 85  ;   ;Shortcut Dimension 5 Code;Code20   ;TableRelation=Dimension;
                                                   OnValidate=BEGIN
                                                                UpdateDimValueGlobalDimNo(xRec."Shortcut Dimension 5 Code","Shortcut Dimension 5 Code",5);
                                                              END;

                                                   AccessByPermission=TableData 350=R }
    { 86  ;   ;Shortcut Dimension 6 Code;Code20   ;TableRelation=Dimension;
                                                   OnValidate=BEGIN
                                                                UpdateDimValueGlobalDimNo(xRec."Shortcut Dimension 6 Code","Shortcut Dimension 6 Code",6);
                                                              END;

                                                   AccessByPermission=TableData 350=R }
    { 87  ;   ;Shortcut Dimension 7 Code;Code20   ;TableRelation=Dimension;
                                                   OnValidate=BEGIN
                                                                UpdateDimValueGlobalDimNo(xRec."Shortcut Dimension 7 Code","Shortcut Dimension 7 Code",7);
                                                              END;

                                                   AccessByPermission=TableData 350=R }
    { 88  ;   ;Shortcut Dimension 8 Code;Code20   ;TableRelation=Dimension;
                                                   OnValidate=BEGIN
                                                                UpdateDimValueGlobalDimNo(xRec."Shortcut Dimension 8 Code","Shortcut Dimension 8 Code",8);
                                                              END;

                                                   AccessByPermission=TableData 350=R }
    { 89  ;   ;Max. VAT Difference Allowed;Decimal;OnValidate=BEGIN
                                                                IF "Max. VAT Difference Allowed" <> ROUND("Max. VAT Difference Allowed") THEN
                                                                  ERROR(
                                                                    Text004,
                                                                    FIELDCAPTION("Max. VAT Difference Allowed"),"Amount Rounding Precision");

                                                                "Max. VAT Difference Allowed" := ABS("Max. VAT Difference Allowed");
                                                              END;

                                                   AutoFormatType=1 }
    { 90  ;   ;VAT Rounding Type   ;Option        ;OptionString=Nearest,Up,Down }
    { 92  ;   ;Pmt. Disc. Tolerance Posting;Option;OptionString=Payment Tolerance Accounts,Payment Discount Accounts }
    { 93  ;   ;Payment Discount Grace Period;DateFormula }
    { 94  ;   ;Payment Tolerance % ;Decimal       ;DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100;
                                                   Editable=No }
    { 95  ;   ;Max. Payment Tolerance Amount;Decimal;
                                                   MinValue=0;
                                                   Editable=No }
    { 96  ;   ;Adapt Main Menu to Permissions;Boolean;
                                                   InitValue=Yes }
    { 97  ;   ;Allow G/L Acc. Deletion Before;Date;CaptionML=[ENU=Check G/L Acc. Deletion After;
                                                              ENN=Check G/L Acc. Deletion After] }
    { 98  ;   ;Check G/L Account Usage;Boolean     }
    { 99  ;   ;Payment Tolerance Posting;Option   ;OptionString=Payment Tolerance Accounts,Payment Discount Accounts }
    { 100 ;   ;Pmt. Disc. Tolerance Warning;Boolean }
    { 101 ;   ;Payment Tolerance Warning;Boolean   }
    { 102 ;   ;Last IC Transaction No.;Integer     }
    { 103 ;   ;Bill-to/Sell-to VAT Calc.;Option   ;OptionString=Bill-to/Pay-to No.,Sell-to/Buy-from No. }
    { 110 ;   ;Acc. Sched. for Balance Sheet;Code10;
                                                   TableRelation="Acc. Schedule Name";
                                                   CaptionML=[ENU=Acc. Sched. for Balance Sheet;
                                                              ENN=Acc. Sched. for Balance Sheet] }
    { 111 ;   ;Acc. Sched. for Income Stmt.;Code10;TableRelation="Acc. Schedule Name";
                                                   CaptionML=[ENU=Acc. Sched. for Income Stmt.;
                                                              ENN=Acc. Sched. for Income Stmt.] }
    { 112 ;   ;Acc. Sched. for Cash Flow Stmt;Code10;
                                                   TableRelation="Acc. Schedule Name";
                                                   CaptionML=[ENU=Acc. Sched. for Cash Flow Stmt;
                                                              ENN=Acc. Sched. for Cash Flow Stmt] }
    { 113 ;   ;Acc. Sched. for Retained Earn.;Code10;
                                                   TableRelation="Acc. Schedule Name";
                                                   CaptionML=[ENU=Acc. Sched. for Retained Earn.;
                                                              ENN=Acc. Sched. for Retained Earn.] }
    { 120 ;   ;Tax Invoice Renaming Threshold;Decimal;
                                                   DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Tax Invoice Renaming Threshold;
                                                              ENN=Tax Invoice Renaming Threshold] }
    { 150 ;   ;Print VAT specification in LCY;Boolean }
    { 151 ;   ;Prepayment Unrealized VAT;Boolean  ;OnValidate=BEGIN
                                                                IF "Unrealized VAT" AND xRec."Prepayment Unrealized VAT" THEN
                                                                  ERROR(DependentFieldActivatedErr,FIELDCAPTION("Prepayment Unrealized VAT"),FIELDCAPTION("Unrealized VAT"));

                                                                IF NOT "Prepayment Unrealized VAT" THEN BEGIN
                                                                  VATPostingSetup.SETFILTER(
                                                                    "Unrealized VAT Type",'>=%1',VATPostingSetup."Unrealized VAT Type"::Percentage);
                                                                  IF VATPostingSetup.FINDFIRST THEN
                                                                    ERROR(
                                                                      Text000,VATPostingSetup.TABLECAPTION,
                                                                      VATPostingSetup."VAT Bus. Posting Group",VATPostingSetup."VAT Prod. Posting Group",
                                                                      VATPostingSetup.FIELDCAPTION("Unrealized VAT Type"),VATPostingSetup."Unrealized VAT Type");
                                                                  TaxJurisdiction.SETFILTER(
                                                                    "Unrealized VAT Type",'>=%1',TaxJurisdiction."Unrealized VAT Type"::Percentage);
                                                                  IF TaxJurisdiction.FINDFIRST THEN
                                                                    ERROR(
                                                                      Text001,TaxJurisdiction.TABLECAPTION,
                                                                      TaxJurisdiction.Code,TaxJurisdiction.FIELDCAPTION("Unrealized VAT Type"),
                                                                      TaxJurisdiction."Unrealized VAT Type");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Prepayment Unrealized VAT;
                                                              ENN=Prepayment Unrealised VAT] }
    { 152 ;   ;Use Legacy G/L Entry Locking;Boolean;
                                                   OnValidate=VAR
                                                                InventorySetup@1000 : Record 313;
                                                              BEGIN
                                                                IF NOT "Use Legacy G/L Entry Locking" THEN BEGIN
                                                                  IF InventorySetup.GET THEN
                                                                    IF InventorySetup."Automatic Cost Posting" THEN
                                                                      ERROR(Text025,
                                                                        FIELDCAPTION("Use Legacy G/L Entry Locking"),
                                                                        "Use Legacy G/L Entry Locking",
                                                                        InventorySetup.FIELDCAPTION("Automatic Cost Posting"),
                                                                        InventorySetup.TABLECAPTION,
                                                                        InventorySetup."Automatic Cost Posting");
                                                                END;
                                                              END;
                                                               }
    { 160 ;   ;Payroll Trans. Import Format;Code20;TableRelation="Data Exch. Def" WHERE (Type=CONST(Payroll Import)) }
    { 161 ;   ;VAT Reg. No. Validation URL;Text250;OnValidate=BEGIN
                                                                ERROR(ObsoleteErr);
                                                              END;

                                                   ObsoleteState=Pending;
                                                   ObsoleteReason=This field is obsolete, it has been replaced by Table 248 VAT Reg. No. Srv Config. }
    { 162 ;   ;Local Currency Symbol;Text10       ;CaptionML=[ENU=Local Currency Symbol;
                                                              ENN=Local Currency Symbol] }
    { 163 ;   ;Local Currency Description;Text60  ;CaptionML=[ENU=Local Currency Description;
                                                              ENN=Local Currency Description] }
    { 164 ;   ;Show Amounts        ;Option        ;CaptionML=[ENU=Show Amounts;
                                                              ENN=Show Amounts];
                                                   OptionCaptionML=[ENU=Amount Only,Debit/Credit Only,All Amounts;
                                                                    ENN=Amount Only,Debit/Credit Only,All Amounts];
                                                   OptionString=Amount Only,Debit/Credit Only,All Amounts }
    { 170 ;   ;SEPA Non-Euro Export;Boolean       ;CaptionML=[ENU=SEPA Non-Euro Export;
                                                              ENN=SEPA Non-Euro Export] }
    { 171 ;   ;SEPA Export w/o Bank Acc. Data;Boolean;
                                                   CaptionML=[ENU=SEPA DD Export Without IBAN And SWIFT;
                                                              ENN=SEPA DD Export Without IBAN And SWIFT] }
    { 50000;  ;Reminder Nos.       ;Code10        ;TableRelation="No. Series";
                                                   DataClassification=ToBeClassified;
                                                   Description=SDM.REM.00.01 }
  }
  KEYS
  {
    {    ;Primary Key                             ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=%1 %2 %3 have %4 to %5.';
      Text001@1001 : TextConst 'ENU=%1 %2 have %3 to %4.';
      Text002@1002 : TextConst 'ENU=%1 %2 %3 use %4.';
      Text003@1003 : TextConst 'ENU=%1 %2 use %3.';
      Text004@1004 : TextConst 'ENU=%1 must be rounded to the nearest %2.';
      Text016@1013 : TextConst 'ENU="Enter one number or two numbers separated by a colon. "';
      Text017@1014 : TextConst 'ENU=The online Help for this field describes how you can fill in the field.';
      Text018@1015 : TextConst 'ENU=You cannot change the contents of the %1 field because there are posted ledger entries.';
      Text021@1018 : TextConst 'ENU=You must close the program and start again in order to activate the amount-rounding feature.';
      Text022@1019 : TextConst 'ENU=You must close the program and start again in order to activate the unit-amount rounding feature.';
      Text023@1020 : TextConst 'ENU=%1\You cannot use the same dimension twice in the same setup.';
      Dim@1021 : Record 348;
      GLEntry@1022 : Record 17;
      ItemLedgerEntry@1023 : Record 32;
      JobLedgEntry@1024 : Record 169;
      ResLedgEntry@1025 : Record 203;
      FALedgerEntry@1026 : Record 5601;
      MaintenanceLedgerEntry@1027 : Record 5625;
      InsCoverageLedgerEntry@1028 : Record 5629;
      VATPostingSetup@1029 : Record 325;
      TaxJurisdiction@1030 : Record 320;
      AnalysisView@1032 : Record 363;
      AnalysisViewEntry@1033 : Record 365;
      AnalysisViewBudgetEntry@1034 : Record 366;
      AdjAddReportingCurr@1005 : Report 86;
      UserSetupManagement@1007 : Codeunit 5700;
      ErrorMessage@1036 : Boolean;
      DependentFieldActivatedErr@1009 : TextConst 'ENU=You cannot change %1 because %2 is selected.';
      Text025@1016 : TextConst 'ENU=The field %1 should not be set to %2 if field %3 in %4 table is set to %5 because deadlocks can occur.';
      ObsoleteErr@1617 : TextConst 'ENU=This field is obsolete, it has been replaced by Table 248 VAT Reg. No. Srv Config.;ENN=This field is obsolete, it has been replaced by Table 248 VAT Reg. No. Srv Config.';
      RecordHasBeenRead@1006 : Boolean;

    [External]
    PROCEDURE CheckDecimalPlacesFormat@1(VAR DecimalPlaces@1000 : Text[5]);
    VAR
      OK@1001 : Boolean;
      ColonPlace@1002 : Integer;
      DecimalPlacesPart1@1003 : Integer;
      DecimalPlacesPart2@1004 : Integer;
      Check@1005 : Text[5];
    BEGIN
      OK := TRUE;
      ColonPlace := STRPOS(DecimalPlaces,':');

      IF ColonPlace = 0 THEN BEGIN
        IF NOT EVALUATE(DecimalPlacesPart1,DecimalPlaces) THEN
          OK := FALSE;
        IF (DecimalPlacesPart1 < 0) OR (DecimalPlacesPart1 > 9) THEN
          OK := FALSE;
      END ELSE BEGIN
        Check := COPYSTR(DecimalPlaces,1,ColonPlace - 1);
        IF Check = '' THEN
          OK := FALSE;
        IF NOT EVALUATE(DecimalPlacesPart1,Check) THEN
          OK := FALSE;
        Check := COPYSTR(DecimalPlaces,ColonPlace + 1,STRLEN(DecimalPlaces));
        IF Check = '' THEN
          OK := FALSE;
        IF NOT EVALUATE(DecimalPlacesPart2,Check) THEN
          OK := FALSE;
        IF DecimalPlacesPart1 > DecimalPlacesPart2 THEN
          OK := FALSE;
        IF (DecimalPlacesPart1 < 0) OR (DecimalPlacesPart1 > 9) THEN
          OK := FALSE;
        IF (DecimalPlacesPart2 < 0) OR (DecimalPlacesPart2 > 9) THEN
          OK := FALSE;
      END;

      IF NOT OK THEN
        ERROR(
          Text016 +
          Text017);

      IF ColonPlace = 0 THEN
        DecimalPlaces := FORMAT(DecimalPlacesPart1)
      ELSE
        DecimalPlaces := STRSUBSTNO('%1:%2',DecimalPlacesPart1,DecimalPlacesPart2);
    END;

    [External]
    PROCEDURE GetCurrencyCode@6(CurrencyCode@1000 : Code[10]) : Code[10];
    BEGIN
      CASE CurrencyCode OF
        '':
          EXIT("LCY Code");
        "LCY Code":
          EXIT('');
        ELSE
          EXIT(CurrencyCode);
      END;
    END;

    [External]
    PROCEDURE GetCurrencySymbol@8() : Text[10];
    BEGIN
      IF "Local Currency Symbol" <> '' THEN
        EXIT("Local Currency Symbol");

      EXIT("LCY Code");
    END;

    [External]
    PROCEDURE GetRecordOnce@11();
    BEGIN
      IF RecordHasBeenRead THEN
        EXIT;
      GET;
      RecordHasBeenRead := TRUE;
    END;

    LOCAL PROCEDURE RoundingErrorCheck@2(NameOfField@1000 : Text[100]);
    BEGIN
      ErrorMessage := FALSE;
      IF GLEntry.FINDFIRST THEN
        ErrorMessage := TRUE;
      IF ItemLedgerEntry.FINDFIRST THEN
        ErrorMessage := TRUE;
      IF JobLedgEntry.FINDFIRST THEN
        ErrorMessage := TRUE;
      IF ResLedgEntry.FINDFIRST THEN
        ErrorMessage := TRUE;
      IF FALedgerEntry.FINDFIRST THEN
        ErrorMessage := TRUE;
      IF MaintenanceLedgerEntry.FINDFIRST THEN
        ErrorMessage := TRUE;
      IF InsCoverageLedgerEntry.FINDFIRST THEN
        ErrorMessage := TRUE;
      IF ErrorMessage THEN
        ERROR(
          Text018,
          NameOfField);
    END;

    LOCAL PROCEDURE DeleteIntrastatJnl@3();
    VAR
      IntrastatJnlBatch@1000 : Record 262;
      IntrastatJnlLine@1001 : Record 263;
    BEGIN
      IntrastatJnlBatch.SETRANGE(Reported,FALSE);
      IntrastatJnlBatch.SETRANGE("Amounts in Add. Currency",TRUE);
      IF IntrastatJnlBatch.FIND('-') THEN
        REPEAT
          IntrastatJnlLine.SETRANGE("Journal Template Name",IntrastatJnlBatch."Journal Template Name");
          IntrastatJnlLine.SETRANGE("Journal Batch Name",IntrastatJnlBatch.Name);
          IntrastatJnlLine.DELETEALL;
        UNTIL IntrastatJnlBatch.NEXT = 0;
    END;

    LOCAL PROCEDURE DeleteAnalysisView@33();
    BEGIN
      IF AnalysisView.FIND('-') THEN
        REPEAT
          IF AnalysisView.Blocked = FALSE THEN BEGIN
            AnalysisViewEntry.SETRANGE("Analysis View Code",AnalysisView.Code);
            AnalysisViewEntry.DELETEALL;
            AnalysisViewBudgetEntry.SETRANGE("Analysis View Code",AnalysisView.Code);
            AnalysisViewBudgetEntry.DELETEALL;
            AnalysisView."Last Entry No." := 0;
            AnalysisView."Last Budget Entry No." := 0;
            AnalysisView."Last Date Updated" := 0D;
            AnalysisView.MODIFY;
          END ELSE BEGIN
            AnalysisView."Refresh When Unblocked" := TRUE;
            AnalysisView.MODIFY;
          END;
        UNTIL AnalysisView.NEXT = 0;
    END;

    [External]
    PROCEDURE IsPostingAllowed@22(PostingDate@1000 : Date) : Boolean;
    BEGIN
      EXIT(PostingDate >= "Allow Posting From");
    END;

    [External]
    PROCEDURE OptimGLEntLockForMultiuserEnv@4() : Boolean;
    VAR
      InventorySetup@1000 : Record 313;
    BEGIN
      IF "Use Legacy G/L Entry Locking" THEN
        EXIT(FALSE);

      IF InventorySetup.GET THEN
        IF InventorySetup."Automatic Cost Posting" THEN
          EXIT(FALSE);

      EXIT(TRUE);
    END;

    [External]
    PROCEDURE FirstAllowedPostingDate@78() AllowedPostingDate : Date;
    VAR
      InvtPeriod@1000 : Record 5814;
    BEGIN
      AllowedPostingDate := "Allow Posting From";
      IF NOT InvtPeriod.IsValidDate(AllowedPostingDate) THEN
        AllowedPostingDate := CALCDATE('<+1D>',AllowedPostingDate);
    END;

    [External]
    PROCEDURE UpdateDimValueGlobalDimNo@7(xDimCode@1001 : Code[20];DimCode@1002 : Code[20];ShortcutDimNo@1003 : Integer);
    VAR
      DimensionValue@1000 : Record 349;
    BEGIN
      IF Dim.CheckIfDimUsed(DimCode,ShortcutDimNo,'','',0) THEN
        ERROR(Text023,Dim.GetCheckDimErr);
      IF xDimCode <> '' THEN BEGIN
        DimensionValue.SETRANGE("Dimension Code",xDimCode);
        DimensionValue.MODIFYALL("Global Dimension No.",0);
      END;
      IF DimCode <> '' THEN BEGIN
        DimensionValue.SETRANGE("Dimension Code",DimCode);
        DimensionValue.MODIFYALL("Global Dimension No.",ShortcutDimNo);
      END;
      MODIFY;
    END;

    LOCAL PROCEDURE HideDialog@5() : Boolean;
    BEGIN
      EXIT((CurrFieldNo = 0) OR NOT GUIALLOWED);
    END;

    [External]
    PROCEDURE UseVat@9() : Boolean;
    VAR
      GeneralLedgerSetupRecordRef@1000 : RecordRef;
      UseVATFieldRef@1001 : FieldRef;
      UseVATFieldNo@1002 : Integer;
    BEGIN
      GeneralLedgerSetupRecordRef.OPEN(DATABASE::"General Ledger Setup",FALSE);

      UseVATFieldNo := 10001;

      IF NOT GeneralLedgerSetupRecordRef.FIELDEXIST(UseVATFieldNo) THEN
        EXIT(TRUE);

      IF NOT GeneralLedgerSetupRecordRef.FINDFIRST THEN
        EXIT(FALSE);

      UseVATFieldRef := GeneralLedgerSetupRecordRef.FIELD(UseVATFieldNo);
      EXIT(UseVATFieldRef.VALUE);
    END;

    [External]
    PROCEDURE CheckAllowedPostingDates@10(NotificationType@1000 : 'Error,Notification');
    BEGIN
      UserSetupManagement.CheckAllowedPostingDatesRange("Allow Posting From",
        "Allow Posting To",NotificationType,DATABASE::"General Ledger Setup");
    END;

    [External]
    PROCEDURE GetPmtToleranceVisible@12() : Boolean;
    BEGIN
      EXIT(("Payment Tolerance %" > 0) OR ("Max. Payment Tolerance Amount" <> 0));
    END;

    BEGIN
    {
      Added new field to generate reminder no. series
      Field ID 5000  Created By SDM_RSF_26032022
    }
    END.
  }
}

OBJECT Table 110 Sales Shipment Header
{
  OBJECT-PROPERTIES
  {
    Date=02-10-21;
    Time=12:00:00;
    Modified=Yes;
    Version List=NAVW114.30;
  }
  PROPERTIES
  {
    DataCaptionFields=No.,Sell-to Customer Name;
    OnDelete=VAR
               CertificateOfSupply@1000 : Record 780;
               PostSalesDelete@1001 : Codeunit 363;
             BEGIN
               TESTFIELD("No. Printed");
               LOCKTABLE;
               PostSalesDelete.DeleteSalesShptLines(Rec);

               SalesCommentLine.SETRANGE("Document Type",SalesCommentLine."Document Type"::Shipment);
               SalesCommentLine.SETRANGE("No.","No.");
               SalesCommentLine.DELETEALL;

               ApprovalsMgmt.DeletePostedApprovalEntries(RECORDID);

               IF CertificateOfSupply.GET(CertificateOfSupply."Document Type"::"Sales Shipment","No.") THEN
                 CertificateOfSupply.DELETE(TRUE);
             END;

    CaptionML=[ENU=Sales Shipment Header;
               ENN=Sales Shipment Header];
    LookupPageID=Page142;
    DrillDownPageID=Page142;
  }
  FIELDS
  {
    { 2   ;   ;Sell-to Customer No.;Code20        ;TableRelation=Customer;
                                                   CaptionML=[ENU=Sell-to Customer No.;
                                                              ENN=Sell-to Customer No.];
                                                   NotBlank=Yes }
    { 3   ;   ;No.                 ;Code20        ;CaptionML=[ENU=No.;
                                                              ENN=No.] }
    { 4   ;   ;Bill-to Customer No.;Code20        ;TableRelation=Customer;
                                                   CaptionML=[ENU=Bill-to Customer No.;
                                                              ENN=Bill-to Customer No.];
                                                   NotBlank=Yes }
    { 5   ;   ;Bill-to Name        ;Text100       ;CaptionML=[ENU=Bill-to Name;
                                                              ENN=Bill-to Name];
                                                   Description=AD_SD }
    { 6   ;   ;Bill-to Name 2      ;Text50        ;CaptionML=[ENU=Bill-to Name 2;
                                                              ENN=Bill-to Name 2] }
    { 7   ;   ;Bill-to Address     ;Text100       ;CaptionML=[ENU=Bill-to Address;
                                                              ENN=Bill-to Address];
                                                   Description=AD_SD }
    { 8   ;   ;Bill-to Address 2   ;Text60        ;CaptionML=[ENU=Bill-to Address 2;
                                                              ENN=Bill-to Address 2];
                                                   Description=AD_SD }
    { 9   ;   ;Bill-to City        ;Text30        ;TableRelation="Post Code".City;
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Bill-to City;
                                                              ENN=Bill-to City] }
    { 10  ;   ;Bill-to Contact     ;Text100       ;CaptionML=[ENU=Bill-to Contact;
                                                              ENN=Bill-to Contact] }
    { 11  ;   ;Your Reference      ;Text35        ;CaptionML=[ENU=Your Reference;
                                                              ENN=Your Reference] }
    { 12  ;   ;Ship-to Code        ;Code10        ;TableRelation="Ship-to Address".Code WHERE (Customer No.=FIELD(Sell-to Customer No.));
                                                   CaptionML=[ENU=Ship-to Code;
                                                              ENN=Ship-to Code] }
    { 13  ;   ;Ship-to Name        ;Text100       ;CaptionML=[ENU=Ship-to Name;
                                                              ENN=Ship-to Name];
                                                   Description=AD_SD }
    { 14  ;   ;Ship-to Name 2      ;Text50        ;CaptionML=[ENU=Ship-to Name 2;
                                                              ENN=Ship-to Name 2] }
    { 15  ;   ;Ship-to Address     ;Text100       ;CaptionML=[ENU=Ship-to Address;
                                                              ENN=Ship-to Address];
                                                   Description=AD_SD }
    { 16  ;   ;Ship-to Address 2   ;Text60        ;CaptionML=[ENU=Ship-to Address 2;
                                                              ENN=Ship-to Address 2];
                                                   Description=AD_SD }
    { 17  ;   ;Ship-to City        ;Text30        ;TableRelation="Post Code".City;
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Ship-to City;
                                                              ENN=Ship-to City] }
    { 18  ;   ;Ship-to Contact     ;Text100       ;CaptionML=[ENU=Ship-to Contact;
                                                              ENN=Ship-to Contact] }
    { 19  ;   ;Order Date          ;Date          ;CaptionML=[ENU=Order Date;
                                                              ENN=Order Date] }
    { 20  ;   ;Posting Date        ;Date          ;CaptionML=[ENU=Posting Date;
                                                              ENN=Posting Date] }
    { 21  ;   ;Shipment Date       ;Date          ;CaptionML=[ENU=Shipment Date;
                                                              ENN=Shipment Date] }
    { 22  ;   ;Posting Description ;Text100       ;CaptionML=[ENU=Posting Description;
                                                              ENN=Posting Description] }
    { 23  ;   ;Payment Terms Code  ;Code10        ;TableRelation="Payment Terms";
                                                   CaptionML=[ENU=Payment Terms Code;
                                                              ENN=Payment Terms Code] }
    { 24  ;   ;Due Date            ;Date          ;CaptionML=[ENU=Due Date;
                                                              ENN=Due Date] }
    { 25  ;   ;Payment Discount %  ;Decimal       ;CaptionML=[ENU=Payment Discount %;
                                                              ENN=Payment Discount %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 26  ;   ;Pmt. Discount Date  ;Date          ;CaptionML=[ENU=Pmt. Discount Date;
                                                              ENN=Pmt. Discount Date] }
    { 27  ;   ;Shipment Method Code;Code10        ;TableRelation="Shipment Method";
                                                   CaptionML=[ENU=Shipment Method Code;
                                                              ENN=Shipment Method Code] }
    { 28  ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE (Use As In-Transit=CONST(No));
                                                   CaptionML=[ENU=Location Code;
                                                              ENN=Location Code] }
    { 29  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   CaptionML=[ENU=Shortcut Dimension 1 Code;
                                                              ENN=Shortcut Dimension 1 Code];
                                                   CaptionClass='1,2,1' }
    { 30  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   CaptionML=[ENU=Shortcut Dimension 2 Code;
                                                              ENN=Shortcut Dimension 2 Code];
                                                   CaptionClass='1,2,2' }
    { 31  ;   ;Customer Posting Group;Code20      ;TableRelation="Customer Posting Group";
                                                   CaptionML=[ENU=Customer Posting Group;
                                                              ENN=Customer Posting Group];
                                                   Editable=No }
    { 32  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   CaptionML=[ENU=Currency Code;
                                                              ENN=Currency Code];
                                                   Editable=No }
    { 33  ;   ;Currency Factor     ;Decimal       ;CaptionML=[ENU=Currency Factor;
                                                              ENN=Currency Factor];
                                                   DecimalPlaces=0:15;
                                                   MinValue=0 }
    { 34  ;   ;Customer Price Group;Code10        ;TableRelation="Customer Price Group";
                                                   CaptionML=[ENU=Customer Price Group;
                                                              ENN=Customer Price Group] }
    { 35  ;   ;Prices Including VAT;Boolean       ;CaptionML=[ENU=Prices Including VAT;
                                                              ENN=Prices Including VAT] }
    { 37  ;   ;Invoice Disc. Code  ;Code20        ;CaptionML=[ENU=Invoice Disc. Code;
                                                              ENN=Invoice Disc. Code] }
    { 40  ;   ;Customer Disc. Group;Code20        ;TableRelation="Customer Discount Group";
                                                   CaptionML=[ENU=Customer Disc. Group;
                                                              ENN=Customer Disc. Group] }
    { 41  ;   ;Language Code       ;Code10        ;TableRelation=Language;
                                                   CaptionML=[ENU=Language Code;
                                                              ENN=Language Code] }
    { 43  ;   ;Salesperson Code    ;Code20        ;TableRelation="Employee LOB"."Emp No." WHERE (LOB=FIELD(LOB),
                                                                                                 Segment=FIELD(Segment));
                                                   CaptionML=[ENU=Salesperson Code;
                                                              ENN=Salesperson Code];
                                                   Description=AD Changed Lookup from Salesperson/Purchaser to "Employee LOB" }
    { 44  ;   ;Order No.           ;Code20        ;CaptionML=[ENU=Order No.;
                                                              ENN=Order No.] }
    { 46  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Sales Comment Line" WHERE (Document Type=CONST(Shipment),
                                                                                                 No.=FIELD(No.),
                                                                                                 Document Line No.=CONST(0)));
                                                   CaptionML=[ENU=Comment;
                                                              ENN=Comment];
                                                   Editable=No }
    { 47  ;   ;No. Printed         ;Integer       ;CaptionML=[ENU=No. Printed;
                                                              ENN=No. Printed];
                                                   Editable=No }
    { 51  ;   ;On Hold             ;Code3         ;CaptionML=[ENU=On Hold;
                                                              ENN=On Hold] }
    { 52  ;   ;Applies-to Doc. Type;Option        ;CaptionML=[ENU=Applies-to Doc. Type;
                                                              ENN=Applies-to Doc. Type];
                                                   OptionCaptionML=[ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund";
                                                                    ENN=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund"];
                                                   OptionString=[ ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund] }
    { 53  ;   ;Applies-to Doc. No. ;Code20        ;OnLookup=BEGIN
                                                              CustLedgEntry.SETCURRENTKEY("Document No.");
                                                              CustLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
                                                              CustLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
                                                              PAGE.RUN(0,CustLedgEntry);
                                                            END;

                                                   CaptionML=[ENU=Applies-to Doc. No.;
                                                              ENN=Applies-to Doc. No.] }
    { 55  ;   ;Bal. Account No.    ;Code20        ;TableRelation=IF (Bal. Account Type=CONST(G/L Account)) "G/L Account"
                                                                 ELSE IF (Bal. Account Type=CONST(Bank Account)) "Bank Account";
                                                   CaptionML=[ENU=Bal. Account No.;
                                                              ENN=Bal. Account No.] }
    { 70  ;   ;VAT Registration No.;Text20        ;CaptionML=[ENU=VAT Registration No.;
                                                              ENN=VAT Registration No.] }
    { 73  ;   ;Reason Code         ;Code10        ;TableRelation="Reason Code";
                                                   CaptionML=[ENU=Reason Code;
                                                              ENN=Reason Code] }
    { 74  ;   ;Gen. Bus. Posting Group;Code20     ;TableRelation="Gen. Business Posting Group";
                                                   CaptionML=[ENU=Gen. Bus. Posting Group;
                                                              ENN=Gen. Bus. Posting Group] }
    { 75  ;   ;EU 3-Party Trade    ;Boolean       ;CaptionML=[ENU=EU 3-Party Trade;
                                                              ENN=EU 3-Party Trade] }
    { 76  ;   ;Transaction Type    ;Code10        ;TableRelation="Transaction Type";
                                                   CaptionML=[ENU=Transaction Type;
                                                              ENN=Transaction Nature Code] }
    { 77  ;   ;Transport Method    ;Code10        ;TableRelation="Transport Method";
                                                   CaptionML=[ENU=Transport Method;
                                                              ENN=Transport Method] }
    { 78  ;   ;VAT Country/Region Code;Code10     ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=VAT Country/Region Code;
                                                              ENN=VAT Country/Region Code] }
    { 79  ;   ;Sell-to Customer Name;Text100      ;CaptionML=[ENU=Sell-to Customer Name;
                                                              ENN=Sell-to Customer Name];
                                                   Description=AD_SD }
    { 80  ;   ;Sell-to Customer Name 2;Text50     ;CaptionML=[ENU=Sell-to Customer Name 2;
                                                              ENN=Sell-to Customer Name 2] }
    { 81  ;   ;Sell-to Address     ;Text100       ;CaptionML=[ENU=Sell-to Address;
                                                              ENN=Sell-to Address];
                                                   Description=AD_SD }
    { 82  ;   ;Sell-to Address 2   ;Text60        ;CaptionML=[ENU=Sell-to Address 2;
                                                              ENN=Sell-to Address 2];
                                                   Description=AD_SD }
    { 83  ;   ;Sell-to City        ;Text30        ;TableRelation="Post Code".City;
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Sell-to City;
                                                              ENN=Sell-to City] }
    { 84  ;   ;Sell-to Contact     ;Text100       ;CaptionML=[ENU=Sell-to Contact;
                                                              ENN=Sell-to Contact] }
    { 85  ;   ;Bill-to Post Code   ;Code20        ;TableRelation="Post Code";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Bill-to Post Code;
                                                              ENN=Bill-to Postcode] }
    { 86  ;   ;Bill-to County      ;Text30        ;CaptionML=[ENU=Bill-to County;
                                                              ENN=Bill-to County];
                                                   CaptionClass='5,1,' + "Bill-to Country/Region Code" }
    { 87  ;   ;Bill-to Country/Region Code;Code10 ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=Bill-to Country/Region Code;
                                                              ENN=Bill-to Country/Region Code] }
    { 88  ;   ;Sell-to Post Code   ;Code20        ;TableRelation="Post Code";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Sell-to Post Code;
                                                              ENN=Sell-to Postcode] }
    { 89  ;   ;Sell-to County      ;Text30        ;CaptionML=[ENU=Sell-to County;
                                                              ENN=Sell-to County];
                                                   CaptionClass='5,1,' + "Sell-to Country/Region Code" }
    { 90  ;   ;Sell-to Country/Region Code;Code10 ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=Sell-to Country/Region Code;
                                                              ENN=Sell-to Country/Region Code] }
    { 91  ;   ;Ship-to Post Code   ;Code20        ;TableRelation="Post Code";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Ship-to Post Code;
                                                              ENN=Ship-to Postcode] }
    { 92  ;   ;Ship-to County      ;Text30        ;CaptionML=[ENU=Ship-to County;
                                                              ENN=Ship-to County];
                                                   CaptionClass='5,1,' + "Ship-to Country/Region Code" }
    { 93  ;   ;Ship-to Country/Region Code;Code10 ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=Ship-to Country/Region Code;
                                                              ENN=Ship-to Country/Region Code] }
    { 94  ;   ;Bal. Account Type   ;Option        ;CaptionML=[ENU=Bal. Account Type;
                                                              ENN=Bal. Account Type];
                                                   OptionCaptionML=[ENU=G/L Account,Bank Account;
                                                                    ENN=G/L Account,Bank Account];
                                                   OptionString=G/L Account,Bank Account }
    { 97  ;   ;Exit Point          ;Code10        ;TableRelation="Entry/Exit Point";
                                                   CaptionML=[ENU=Exit Point;
                                                              ENN=Exit Point] }
    { 98  ;   ;Correction          ;Boolean       ;CaptionML=[ENU=Correction;
                                                              ENN=Correction] }
    { 99  ;   ;Document Date       ;Date          ;CaptionML=[ENU=Document Date;
                                                              ENN=Document Date] }
    { 100 ;   ;External Document No.;Code35       ;CaptionML=[ENU=External Document No.;
                                                              ENN=External Document No.] }
    { 101 ;   ;Area                ;Code10        ;TableRelation=Area;
                                                   CaptionML=[ENU=Area;
                                                              ENN=Area] }
    { 102 ;   ;Transaction Specification;Code10   ;TableRelation="Transaction Specification";
                                                   CaptionML=[ENU=Transaction Specification;
                                                              ENN=Transaction Specification] }
    { 104 ;   ;Payment Method Code ;Code10        ;TableRelation="Payment Method";
                                                   CaptionML=[ENU=Payment Method Code;
                                                              ENN=Payment Method Code] }
    { 105 ;   ;Shipping Agent Code ;Code10        ;TableRelation="Shipping Agent";
                                                   OnValidate=BEGIN
                                                                IF "Shipping Agent Code" <> xRec."Shipping Agent Code" THEN
                                                                  VALIDATE("Shipping Agent Service Code",'');
                                                              END;

                                                   AccessByPermission=TableData 5790=R;
                                                   CaptionML=[ENU=Shipping Agent Code;
                                                              ENN=Shipping Agent Code] }
    { 106 ;   ;Package Tracking No.;Text30        ;CaptionML=[ENU=Package Tracking No.;
                                                              ENN=Package Tracking No.] }
    { 109 ;   ;No. Series          ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=[ENU=No. Series;
                                                              ENN=No. Series];
                                                   Editable=No }
    { 110 ;   ;Order No. Series    ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=[ENU=Order No. Series;
                                                              ENN=Order No. Series] }
    { 112 ;   ;User ID             ;Code50        ;TableRelation=User."User Name";
                                                   OnLookup=VAR
                                                              UserMgt@1000 : Codeunit 418;
                                                            BEGIN
                                                              UserMgt.LookupUserID("User ID");
                                                            END;

                                                   TestTableRelation=No;
                                                   DataClassification=EndUserIdentifiableInformation;
                                                   CaptionML=[ENU=User ID;
                                                              ENN=User ID] }
    { 113 ;   ;Source Code         ;Code10        ;TableRelation="Source Code";
                                                   CaptionML=[ENU=Source Code;
                                                              ENN=Source Code] }
    { 114 ;   ;Tax Area Code       ;Code20        ;TableRelation="Tax Area";
                                                   CaptionML=[ENU=Tax Area Code;
                                                              ENN=VAT Area Code] }
    { 115 ;   ;Tax Liable          ;Boolean       ;CaptionML=[ENU=Tax Liable;
                                                              ENN=VAT Liable] }
    { 116 ;   ;VAT Bus. Posting Group;Code20      ;TableRelation="VAT Business Posting Group";
                                                   CaptionML=[ENU=VAT Bus. Posting Group;
                                                              ENN=VAT Bus. Posting Group] }
    { 119 ;   ;VAT Base Discount % ;Decimal       ;CaptionML=[ENU=VAT Base Discount %;
                                                              ENN=VAT Base Discount %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 151 ;   ;Quote No.           ;Code20        ;CaptionML=[ENU=Quote No.;
                                                              ENN=Quote No.];
                                                   Editable=No }
    { 171 ;   ;Sell-to Phone No.   ;Text30        ;ExtendedDatatype=Phone No.;
                                                   CaptionML=[ENU=Sell-to Phone No.;
                                                              ENN=Sell-to Phone No.] }
    { 172 ;   ;Sell-to E-Mail      ;Text80        ;ExtendedDatatype=E-Mail;
                                                   CaptionML=[ENU=Email;
                                                              ENN=Email] }
    { 200 ;   ;Work Description    ;BLOB          ;DataClassification=CustomerContent;
                                                   CaptionML=[ENU=Work Description;
                                                              ENN=Work Description] }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnLookup=BEGIN
                                                              ShowDimensions;
                                                            END;

                                                   CaptionML=[ENU=Dimension Set ID;
                                                              ENN=Dimension Set ID];
                                                   Editable=No }
    { 5050;   ;Campaign No.        ;Code20        ;TableRelation=Campaign;
                                                   CaptionML=[ENU=Campaign No.;
                                                              ENN=Campaign No.] }
    { 5052;   ;Sell-to Contact No. ;Code20        ;TableRelation=Contact;
                                                   CaptionML=[ENU=Sell-to Contact No.;
                                                              ENN=Sell-to Contact No.] }
    { 5053;   ;Bill-to Contact No. ;Code20        ;TableRelation=Contact;
                                                   CaptionML=[ENU=Bill-to Contact No.;
                                                              ENN=Bill-to Contact No.] }
    { 5055;   ;Opportunity No.     ;Code20        ;TableRelation=Opportunity;
                                                   CaptionML=[ENU=Opportunity No.;
                                                              ENN=Opportunity No.] }
    { 5700;   ;Responsibility Center;Code10       ;TableRelation="Responsibility Center";
                                                   CaptionML=[ENU=Responsibility Center;
                                                              ENN=Responsibility Centre] }
    { 5790;   ;Requested Delivery Date;Date       ;CaptionML=[ENU=Requested Delivery Date;
                                                              ENN=Requested Delivery Date] }
    { 5791;   ;Promised Delivery Date;Date        ;CaptionML=[ENU=Promised Delivery Date;
                                                              ENN=Promised Delivery Date] }
    { 5792;   ;Shipping Time       ;DateFormula   ;AccessByPermission=TableData 5790=R;
                                                   CaptionML=[ENU=Shipping Time;
                                                              ENN=Shipping Time] }
    { 5793;   ;Outbound Whse. Handling Time;DateFormula;
                                                   AccessByPermission=TableData 14=R;
                                                   CaptionML=[ENU=Outbound Whse. Handling Time;
                                                              ENN=Outbound Whse. Handling Time] }
    { 5794;   ;Shipping Agent Service Code;Code10 ;TableRelation="Shipping Agent Services".Code WHERE (Shipping Agent Code=FIELD(Shipping Agent Code));
                                                   CaptionML=[ENU=Shipping Agent Service Code;
                                                              ENN=Shipping Agent Service Code] }
    { 7001;   ;Allow Line Disc.    ;Boolean       ;CaptionML=[ENU=Allow Line Disc.;
                                                              ENN=Allow Line Disc.] }
    { 50000;  ;LOB                 ;Text40        ;TableRelation="Segment Master";
                                                   Description=AD_SD }
    { 50001;  ;Segment             ;Text100       ;TableRelation="Segment Master" WHERE (LOB=FIELD(LOB));
                                                   Description=AD_SD }
    { 50014;  ;Work Order No.      ;Code20        ;Description=AD_SD }
    { 50020;  ;Remarks             ;Text250       ;Description=AD_SD }
    { 50023;  ;Type of Invoice     ;Option        ;OptionCaptionML=ENU=" ,Settlement";
                                                   OptionString=[ ,Settlement];
                                                   Description=AD_SD }
    { 50025;  ;Invoice Types       ;Option        ;OptionCaptionML=ENU=" ,Fees,Expenses";
                                                   OptionString=[ ,Fees,Expenses];
                                                   Description=AD_SD }
    { 50033;  ;Team Leader         ;Code30        ;TableRelation=Employee WHERE (Type=FILTER(Partner|Others));
                                                   Description=AD_SD }
    { 50050;  ;Sales Currency      ;Option        ;OptionCaptionML=ENU=" ,USD,EURO,GBP,AED,BDT,AUD";
                                                   OptionString=[ ,USD,EURO,GBP,AED,BDT,AUD];
                                                   Description=AD_SD }
    { 50051;  ;Resp. Name          ;Text80        ;Description=AD_SD }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Order No.                                }
    {    ;Bill-to Customer No.                     }
    {    ;Sell-to Customer No.                     }
    {    ;Posting Date                             }
    {    ;Location Code                            }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;No.,Sell-to Customer No.,Sell-to Customer Name,Posting Date,Posting Description }
  }
  CODE
  {
    VAR
      SalesShptHeader@1000 : Record 110;
      SalesCommentLine@1001 : Record 44;
      CustLedgEntry@1002 : Record 21;
      ShippingAgent@1004 : Record 291;
      DimMgt@1006 : Codeunit 408;
      ApprovalsMgmt@1011 : Codeunit 1535;
      UserSetupMgt@1008 : Codeunit 5700;
      TrackingInternetAddr@1007 : Text;

    [External]
    PROCEDURE SendProfile@12(VAR DocumentSendingProfile@1000 : Record 60);
    VAR
      DummyReportSelections@1003 : Record 77;
      ReportDistributionMgt@1002 : Codeunit 452;
      IsHandled@1001 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeSendProfile(DocumentSendingProfile,Rec,IsHandled);
      IF IsHandled THEN
        EXIT;

      DocumentSendingProfile.Send(
        DummyReportSelections.Usage::"S.Shipment",Rec,"No.","Sell-to Customer No.",
        ReportDistributionMgt.GetFullDocumentTypeText(Rec),FIELDNO("Sell-to Customer No."),FIELDNO("No."));
    END;

    [External]
    PROCEDURE PrintRecords@3(ShowRequestForm@1000 : Boolean);
    VAR
      ReportSelection@1001 : Record 77;
      IsHandled@1002 : Boolean;
    BEGIN
      WITH SalesShptHeader DO BEGIN
        COPY(Rec);
        OnBeforePrintRecords(SalesShptHeader,ShowRequestForm,IsHandled);
        IF IsHandled THEN
          EXIT;

        ReportSelection.PrintWithGUIYesNo(
          ReportSelection.Usage::"S.Shipment",SalesShptHeader,ShowRequestForm,FIELDNO("Bill-to Customer No."));
      END;
    END;

    [Internal]
    PROCEDURE EmailRecords@17(ShowDialog@1000 : Boolean);
    VAR
      DocumentSendingProfile@1003 : Record 60;
      DummyReportSelections@1001 : Record 77;
      ReportDistributionMgt@1004 : Codeunit 452;
      IsHandled@1002 : Boolean;
    BEGIN
      OnBeforeEmailRecords(Rec,ShowDialog,IsHandled);
      IF IsHandled THEN
        EXIT;

      DocumentSendingProfile.TrySendToEMail(
        DummyReportSelections.Usage::"S.Shipment",Rec,FIELDNO("No."),
        ReportDistributionMgt.GetFullDocumentTypeText(Rec),FIELDNO("Bill-to Customer No."),ShowDialog);
    END;

    [External]
    PROCEDURE Navigate@2();
    VAR
      NavigateForm@1000 : Page 344;
    BEGIN
      NavigateForm.SetDoc("Posting Date","No.");
      NavigateForm.RUN;
    END;

    [External]
    PROCEDURE StartTrackingSite@1();
    BEGIN
      HYPERLINK(GetTrackingInternetAddr);
    END;

    [External]
    PROCEDURE ShowDimensions@4();
    BEGIN
      DimMgt.ShowDimensionSet("Dimension Set ID",STRSUBSTNO('%1 %2',TABLECAPTION,"No."));
    END;

    [External]
    PROCEDURE IsCompletlyInvoiced@5() : Boolean;
    VAR
      SalesShipmentLine@1008 : Record 111;
    BEGIN
      SalesShipmentLine.SETRANGE("Document No.","No.");
      SalesShipmentLine.SETFILTER("Qty. Shipped Not Invoiced",'<>0');
      IF SalesShipmentLine.ISEMPTY THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    [External]
    PROCEDURE SetSecurityFilterOnRespCenter@6();
    BEGIN
      IF UserSetupMgt.GetSalesFilter <> '' THEN BEGIN
        FILTERGROUP(2);
        SETRANGE("Responsibility Center",UserSetupMgt.GetSalesFilter);
        FILTERGROUP(0);
      END;
    END;

    [External]
    PROCEDURE GetTrackingInternetAddr@7() : Text;
    VAR
      HttpStr@1001 : Text;
      IsHandled@1000 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeGetTrackingInternetAddr(Rec,TrackingInternetAddr,IsHandled);
      IF IsHandled THEN
        EXIT;

      HttpStr := 'http://';
      TESTFIELD("Shipping Agent Code");
      ShippingAgent.GET("Shipping Agent Code");
      TrackingInternetAddr := STRSUBSTNO(ShippingAgent."Internet Address","Package Tracking No.");

      IF STRPOS(TrackingInternetAddr,HttpStr) = 0 THEN
        TrackingInternetAddr := HttpStr + TrackingInternetAddr;
      EXIT(TrackingInternetAddr);
    END;

    [External]
    PROCEDURE GetWorkDescription@9() : Text;
    VAR
      TempBlob@1000 : TEMPORARY Record 99008535;
      CR@1004 : Text[1];
    BEGIN
      CALCFIELDS("Work Description");
      IF NOT "Work Description".HASVALUE THEN
        EXIT('');

      CR[1] := 10;
      TempBlob.Blob := "Work Description";
      EXIT(TempBlob.ReadAsText(CR,TEXTENCODING::UTF8));
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeEmailRecords@8(VAR SalesShipmentHeader@1000 : Record 110;SendDialog@1001 : Boolean;VAR IsHandled@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePrintRecords@10(VAR SalesShipmentHeader@1000 : Record 110;ShowDialog@1001 : Boolean;VAR IsHandled@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeSendProfile@11(VAR DocumentSendingProfile@1000 : Record 60;VAR SalesShipmentHeader@1001 : Record 110;VAR IsHandled@1003 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeGetTrackingInternetAddr@13(VAR SalesShipmentHeader@1000 : Record 110;VAR TrackingInternetAddr@1003 : Text;VAR IsHandled@1001 : Boolean);
    BEGIN
    END;

    BEGIN
    END.
  }
}

OBJECT Table 111 Sales Shipment Line
{
  OBJECT-PROPERTIES
  {
    Date=02-10-21;
    Time=12:00:00;
    Modified=Yes;
    Version List=NAVW114.30;
  }
  PROPERTIES
  {
    Permissions=TableData 32=r,
                TableData 5802=r;
    OnDelete=VAR
               ServItem@1000 : Record 5940;
               SalesDocLineComments@1001 : Record 44;
             BEGIN
               ServItem.RESET;
               ServItem.SETCURRENTKEY("Sales/Serv. Shpt. Document No.","Sales/Serv. Shpt. Line No.");
               ServItem.SETRANGE("Sales/Serv. Shpt. Document No.","Document No.");
               ServItem.SETRANGE("Sales/Serv. Shpt. Line No.","Line No.");
               ServItem.SETRANGE("Shipment Type",ServItem."Shipment Type"::Sales);
               IF ServItem.FIND('-') THEN
                 REPEAT
                   ServItem.VALIDATE("Sales/Serv. Shpt. Document No.",'');
                   ServItem.VALIDATE("Sales/Serv. Shpt. Line No.",0);
                   ServItem.MODIFY(TRUE);
                 UNTIL ServItem.NEXT = 0;

               SalesDocLineComments.SETRANGE("Document Type",SalesDocLineComments."Document Type"::Shipment);
               SalesDocLineComments.SETRANGE("No.","Document No.");
               SalesDocLineComments.SETRANGE("Document Line No.","Line No.");
               IF NOT SalesDocLineComments.ISEMPTY THEN
                 SalesDocLineComments.DELETEALL;

               PostedATOLink.DeleteAsmFromSalesShptLine(Rec);
             END;

    CaptionML=[ENU=Sales Shipment Line;
               ENN=Sales Shipment Line];
    LookupPageID=Page525;
    DrillDownPageID=Page525;
  }
  FIELDS
  {
    { 2   ;   ;Sell-to Customer No.;Code20        ;TableRelation=Customer;
                                                   CaptionML=[ENU=Sell-to Customer No.;
                                                              ENN=Sell-to Customer No.];
                                                   Editable=No }
    { 3   ;   ;Document No.        ;Code20        ;TableRelation="Sales Shipment Header";
                                                   CaptionML=[ENU=Document No.;
                                                              ENN=Document No.] }
    { 4   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              ENN=Line No.] }
    { 5   ;   ;Type                ;Option        ;CaptionML=[ENU=Type;
                                                              ENN=Type];
                                                   OptionCaptionML=[ENU=" ,G/L Account,Item,Resource,Fixed Asset,Charge (Item)";
                                                                    ENN=" ,G/L Account,Item,Resource,Fixed Asset,Charge (Item)"];
                                                   OptionString=[ ,G/L Account,Item,Resource,Fixed Asset,Charge (Item)] }
    { 6   ;   ;No.                 ;Code20        ;TableRelation=IF (Type=CONST(G/L Account)) "G/L Account"
                                                                 ELSE IF (Type=CONST(Item)) Item
                                                                 ELSE IF (Type=CONST(Resource)) Resource
                                                                 ELSE IF (Type=CONST(Fixed Asset)) "Fixed Asset"
                                                                 ELSE IF (Type=CONST("Charge (Item)")) "Item Charge";
                                                   CaptionML=[ENU=No.;
                                                              ENN=No.];
                                                   CaptionClass=GetCaptionClass(FIELDNO("No.")) }
    { 7   ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE (Use As In-Transit=CONST(No));
                                                   CaptionML=[ENU=Location Code;
                                                              ENN=Location Code] }
    { 8   ;   ;Posting Group       ;Code20        ;TableRelation=IF (Type=CONST(Item)) "Inventory Posting Group"
                                                                 ELSE IF (Type=CONST(Fixed Asset)) "FA Posting Group";
                                                   CaptionML=[ENU=Posting Group;
                                                              ENN=Posting Group];
                                                   Editable=No }
    { 10  ;   ;Shipment Date       ;Date          ;CaptionML=[ENU=Shipment Date;
                                                              ENN=Shipment Date] }
    { 11  ;   ;Description         ;Text100       ;CaptionML=[ENU=Description;
                                                              ENN=Description];
                                                   Description=AD_SD }
    { 12  ;   ;Description 2       ;Text50        ;CaptionML=[ENU=Description 2;
                                                              ENN=Description 2] }
    { 13  ;   ;Unit of Measure     ;Text50        ;CaptionML=[ENU=Unit of Measure;
                                                              ENN=Unit of Measure] }
    { 15  ;   ;Quantity            ;Decimal       ;CaptionML=[ENU=Quantity;
                                                              ENN=Quantity];
                                                   DecimalPlaces=0:5 }
    { 22  ;   ;Unit Price          ;Decimal       ;CaptionML=[ENU=Unit Price;
                                                              ENN=Unit Price];
                                                   AutoFormatType=2;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 23  ;   ;Unit Cost (LCY)     ;Decimal       ;CaptionML=[ENU=Unit Cost (LCY);
                                                              ENN=Unit Cost (LCY)];
                                                   AutoFormatType=2 }
    { 25  ;   ;VAT %               ;Decimal       ;CaptionML=[ENU=VAT %;
                                                              ENN=VAT %];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 27  ;   ;Line Discount %     ;Decimal       ;CaptionML=[ENU=Line Discount %;
                                                              ENN=Line Discount %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 32  ;   ;Allow Invoice Disc. ;Boolean       ;InitValue=Yes;
                                                   CaptionML=[ENU=Allow Invoice Disc.;
                                                              ENN=Allow Invoice Disc.] }
    { 34  ;   ;Gross Weight        ;Decimal       ;CaptionML=[ENU=Gross Weight;
                                                              ENN=Gross Weight];
                                                   DecimalPlaces=0:5 }
    { 35  ;   ;Net Weight          ;Decimal       ;CaptionML=[ENU=Net Weight;
                                                              ENN=Net Weight];
                                                   DecimalPlaces=0:5 }
    { 36  ;   ;Units per Parcel    ;Decimal       ;CaptionML=[ENU=Units per Parcel;
                                                              ENN=Units per Parcel];
                                                   DecimalPlaces=0:5 }
    { 37  ;   ;Unit Volume         ;Decimal       ;CaptionML=[ENU=Unit Volume;
                                                              ENN=Unit Volume];
                                                   DecimalPlaces=0:5 }
    { 38  ;   ;Appl.-to Item Entry ;Integer       ;AccessByPermission=TableData 27=R;
                                                   CaptionML=[ENU=Appl.-to Item Entry;
                                                              ENN=Appl.-to Item Entry] }
    { 39  ;   ;Item Shpt. Entry No.;Integer       ;CaptionML=[ENU=Item Shpt. Entry No.;
                                                              ENN=Item Shpt. Entry No.] }
    { 40  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   CaptionML=[ENU=Shortcut Dimension 1 Code;
                                                              ENN=Shortcut Dimension 1 Code];
                                                   CaptionClass='1,2,1' }
    { 41  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   CaptionML=[ENU=Shortcut Dimension 2 Code;
                                                              ENN=Shortcut Dimension 2 Code];
                                                   CaptionClass='1,2,2' }
    { 42  ;   ;Customer Price Group;Code10        ;TableRelation="Customer Price Group";
                                                   CaptionML=[ENU=Customer Price Group;
                                                              ENN=Customer Price Group] }
    { 45  ;   ;Job No.             ;Code20        ;TableRelation=Job;
                                                   CaptionML=[ENU=Job No.;
                                                              ENN=Job No.] }
    { 52  ;   ;Work Type Code      ;Code10        ;TableRelation="Work Type";
                                                   CaptionML=[ENU=Work Type Code;
                                                              ENN=Work Type Code] }
    { 58  ;   ;Qty. Shipped Not Invoiced;Decimal  ;AccessByPermission=TableData 110=R;
                                                   CaptionML=[ENU=Qty. Shipped Not Invoiced;
                                                              ENN=Qty. Shipped Not Invoiced];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 61  ;   ;Quantity Invoiced   ;Decimal       ;CaptionML=[ENU=Quantity Invoiced;
                                                              ENN=Quantity Invoiced];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 65  ;   ;Order No.           ;Code20        ;CaptionML=[ENU=Order No.;
                                                              ENN=Order No.] }
    { 66  ;   ;Order Line No.      ;Integer       ;CaptionML=[ENU=Order Line No.;
                                                              ENN=Order Line No.] }
    { 68  ;   ;Bill-to Customer No.;Code20        ;TableRelation=Customer;
                                                   CaptionML=[ENU=Bill-to Customer No.;
                                                              ENN=Bill-to Customer No.];
                                                   Editable=No }
    { 71  ;   ;Purchase Order No.  ;Code20        ;CaptionML=[ENU=Purchase Order No.;
                                                              ENN=Purchase Order No.] }
    { 72  ;   ;Purch. Order Line No.;Integer      ;CaptionML=[ENU=Purch. Order Line No.;
                                                              ENN=Purch. Order Line No.] }
    { 73  ;   ;Drop Shipment       ;Boolean       ;AccessByPermission=TableData 223=R;
                                                   CaptionML=[ENU=Drop Shipment;
                                                              ENN=Drop Shipment] }
    { 74  ;   ;Gen. Bus. Posting Group;Code20     ;TableRelation="Gen. Business Posting Group";
                                                   CaptionML=[ENU=Gen. Bus. Posting Group;
                                                              ENN=Gen. Bus. Posting Group] }
    { 75  ;   ;Gen. Prod. Posting Group;Code20    ;TableRelation="Gen. Product Posting Group";
                                                   CaptionML=[ENU=Gen. Prod. Posting Group;
                                                              ENN=Gen. Prod. Posting Group] }
    { 77  ;   ;VAT Calculation Type;Option        ;CaptionML=[ENU=VAT Calculation Type;
                                                              ENN=VAT Calculation Type];
                                                   OptionCaptionML=[ENU=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                                    ENN=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax];
                                                   OptionString=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax }
    { 78  ;   ;Transaction Type    ;Code10        ;TableRelation="Transaction Type";
                                                   CaptionML=[ENU=Transaction Type;
                                                              ENN=Transaction Nature Code] }
    { 79  ;   ;Transport Method    ;Code10        ;TableRelation="Transport Method";
                                                   CaptionML=[ENU=Transport Method;
                                                              ENN=Transport Method] }
    { 80  ;   ;Attached to Line No.;Integer       ;TableRelation="Sales Shipment Line"."Line No." WHERE (Document No.=FIELD(Document No.));
                                                   CaptionML=[ENU=Attached to Line No.;
                                                              ENN=Attached to Line No.] }
    { 81  ;   ;Exit Point          ;Code10        ;TableRelation="Entry/Exit Point";
                                                   CaptionML=[ENU=Exit Point;
                                                              ENN=Exit Point] }
    { 82  ;   ;Area                ;Code10        ;TableRelation=Area;
                                                   CaptionML=[ENU=Area;
                                                              ENN=Area] }
    { 83  ;   ;Transaction Specification;Code10   ;TableRelation="Transaction Specification";
                                                   CaptionML=[ENU=Transaction Specification;
                                                              ENN=Transaction Specification] }
    { 85  ;   ;Tax Area Code       ;Code20        ;TableRelation="Tax Area";
                                                   CaptionML=[ENU=Tax Area Code;
                                                              ENN=VAT Area Code] }
    { 86  ;   ;Tax Liable          ;Boolean       ;CaptionML=[ENU=Tax Liable;
                                                              ENN=VAT Liable] }
    { 87  ;   ;Tax Group Code      ;Code20        ;TableRelation="Tax Group";
                                                   CaptionML=[ENU=Tax Group Code;
                                                              ENN=VAT Group Code] }
    { 89  ;   ;VAT Bus. Posting Group;Code20      ;TableRelation="VAT Business Posting Group";
                                                   CaptionML=[ENU=VAT Bus. Posting Group;
                                                              ENN=VAT Bus. Posting Group] }
    { 90  ;   ;VAT Prod. Posting Group;Code20     ;TableRelation="VAT Product Posting Group";
                                                   CaptionML=[ENU=VAT Prod. Posting Group;
                                                              ENN=VAT Prod. Posting Group] }
    { 91  ;   ;Currency Code       ;Code10        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Sales Shipment Header"."Currency Code" WHERE (No.=FIELD(Document No.)));
                                                   CaptionML=[ENU=Currency Code;
                                                              ENN=Currency Code];
                                                   Editable=No }
    { 97  ;   ;Blanket Order No.   ;Code20        ;TableRelation="Sales Header".No. WHERE (Document Type=CONST(Blanket Order));
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Blanket Order No.;
                                                              ENN=Blanket Order No.] }
    { 98  ;   ;Blanket Order Line No.;Integer     ;TableRelation="Sales Line"."Line No." WHERE (Document Type=CONST(Blanket Order),
                                                                                                Document No.=FIELD(Blanket Order No.));
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Blanket Order Line No.;
                                                              ENN=Blanket Order Line No.] }
    { 99  ;   ;VAT Base Amount     ;Decimal       ;CaptionML=[ENU=VAT Base Amount;
                                                              ENN=VAT Base Amount];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 100 ;   ;Unit Cost           ;Decimal       ;CaptionML=[ENU=Unit Cost;
                                                              ENN=Unit Cost];
                                                   Editable=No;
                                                   AutoFormatType=2;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 107 ;   ;IC Partner Ref. Type;Option        ;DataClassification=CustomerContent;
                                                   CaptionML=[ENU=IC Partner Ref. Type;
                                                              ENN=IC Partner Ref. Type];
                                                   OptionCaptionML=[ENU=" ,G/L Account,Item,,,Charge (Item),Cross reference,Common Item No.";
                                                                    ENN=" ,G/L Account,Item,,,Charge (Item),Cross reference,Common Item No."];
                                                   OptionString=[ ,G/L Account,Item,,,Charge (Item),Cross reference,Common Item No.] }
    { 108 ;   ;IC Partner Reference;Code20        ;DataClassification=CustomerContent;
                                                   CaptionML=[ENU=IC Partner Reference;
                                                              ENN=IC Partner Reference] }
    { 131 ;   ;Posting Date        ;Date          ;CaptionML=[ENU=Posting Date;
                                                              ENN=Posting Date] }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnLookup=BEGIN
                                                              ShowDimensions;
                                                            END;

                                                   CaptionML=[ENU=Dimension Set ID;
                                                              ENN=Dimension Set ID];
                                                   Editable=No }
    { 826 ;   ;Authorized for Credit Card;Boolean ;CaptionML=[ENU=Authorized for Credit Card;
                                                              ENN=Authorised for Credit Card] }
    { 1001;   ;Job Task No.        ;Code20        ;TableRelation="Job Task"."Job Task No." WHERE (Job No.=FIELD(Job No.));
                                                   CaptionML=[ENU=Job Task No.;
                                                              ENN=Job Task No.];
                                                   Editable=No }
    { 1002;   ;Job Contract Entry No.;Integer     ;CaptionML=[ENU=Job Contract Entry No.;
                                                              ENN=Job Contract Entry No.];
                                                   Editable=No }
    { 5402;   ;Variant Code        ;Code10        ;TableRelation=IF (Type=CONST(Item)) "Item Variant".Code WHERE (Item No.=FIELD(No.));
                                                   CaptionML=[ENU=Variant Code;
                                                              ENN=Variant Code] }
    { 5403;   ;Bin Code            ;Code20        ;TableRelation=Bin.Code WHERE (Location Code=FIELD(Location Code),
                                                                                 Item Filter=FIELD(No.),
                                                                                 Variant Filter=FIELD(Variant Code));
                                                   CaptionML=[ENU=Bin Code;
                                                              ENN=Bin Code] }
    { 5404;   ;Qty. per Unit of Measure;Decimal   ;CaptionML=[ENU=Qty. per Unit of Measure;
                                                              ENN=Qty. per Unit of Measure];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5407;   ;Unit of Measure Code;Code10        ;TableRelation=IF (Type=CONST(Item)) "Item Unit of Measure".Code WHERE (Item No.=FIELD(No.))
                                                                 ELSE "Unit of Measure";
                                                   CaptionML=[ENU=Unit of Measure Code;
                                                              ENN=Unit of Measure Code] }
    { 5415;   ;Quantity (Base)     ;Decimal       ;CaptionML=[ENU=Quantity (Base);
                                                              ENN=Quantity (Base)];
                                                   DecimalPlaces=0:5 }
    { 5461;   ;Qty. Invoiced (Base);Decimal       ;CaptionML=[ENU=Qty. Invoiced (Base);
                                                              ENN=Qty. Invoiced (Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5600;   ;FA Posting Date     ;Date          ;CaptionML=[ENU=FA Posting Date;
                                                              ENN=FA Posting Date] }
    { 5602;   ;Depreciation Book Code;Code10      ;TableRelation="Depreciation Book";
                                                   CaptionML=[ENU=Depreciation Book Code;
                                                              ENN=Depreciation Book Code] }
    { 5605;   ;Depr. until FA Posting Date;Boolean;CaptionML=[ENU=Depr. until FA Posting Date;
                                                              ENN=Depr. until FA Posting Date] }
    { 5612;   ;Duplicate in Depreciation Book;Code10;
                                                   TableRelation="Depreciation Book";
                                                   CaptionML=[ENU=Duplicate in Depreciation Book;
                                                              ENN=Duplicate in Depreciation Book] }
    { 5613;   ;Use Duplication List;Boolean       ;CaptionML=[ENU=Use Duplication List;
                                                              ENN=Use Duplication List] }
    { 5700;   ;Responsibility Center;Code10       ;TableRelation="Responsibility Center";
                                                   CaptionML=[ENU=Responsibility Center;
                                                              ENN=Responsibility Centre] }
    { 5705;   ;Cross-Reference No. ;Code20        ;AccessByPermission=TableData 5717=R;
                                                   CaptionML=[ENU=Cross-Reference No.;
                                                              ENN=Cross-Reference No.] }
    { 5706;   ;Unit of Measure (Cross Ref.);Code10;TableRelation=IF (Type=CONST(Item)) "Item Unit of Measure".Code WHERE (Item No.=FIELD(No.));
                                                   CaptionML=[ENU=Unit of Measure (Cross Ref.);
                                                              ENN=Unit of Measure (Cross Ref.)] }
    { 5707;   ;Cross-Reference Type;Option        ;CaptionML=[ENU=Cross-Reference Type;
                                                              ENN=Cross-Reference Type];
                                                   OptionCaptionML=[ENU=" ,Customer,Vendor,Bar Code";
                                                                    ENN=" ,Customer,Vendor,Bar Code"];
                                                   OptionString=[ ,Customer,Vendor,Bar Code] }
    { 5708;   ;Cross-Reference Type No.;Code30    ;CaptionML=[ENU=Cross-Reference Type No.;
                                                              ENN=Cross-Reference Type No.] }
    { 5709;   ;Item Category Code  ;Code20        ;TableRelation=IF (Type=CONST(Item)) "Item Category";
                                                   CaptionML=[ENU=Item Category Code;
                                                              ENN=Item Category Code] }
    { 5710;   ;Nonstock            ;Boolean       ;CaptionML=[ENU=Catalog;
                                                              ENN=Catalogue] }
    { 5711;   ;Purchasing Code     ;Code10        ;TableRelation=Purchasing;
                                                   CaptionML=[ENU=Purchasing Code;
                                                              ENN=Purchasing Code] }
    { 5712;   ;Product Group Code  ;Code10        ;TableRelation="Product Group".Code WHERE (Item Category Code=FIELD(Item Category Code));
                                                   ValidateTableRelation=No;
                                                   ObsoleteState=Removed;
                                                   ObsoleteReason=Product Groups became first level children of Item Categories.;
                                                   CaptionML=[ENU=Product Group Code;
                                                              ENN=Product Group Code] }
    { 5790;   ;Requested Delivery Date;Date       ;CaptionML=[ENU=Requested Delivery Date;
                                                              ENN=Requested Delivery Date];
                                                   Editable=No }
    { 5791;   ;Promised Delivery Date;Date        ;CaptionML=[ENU=Promised Delivery Date;
                                                              ENN=Promised Delivery Date];
                                                   Editable=No }
    { 5792;   ;Shipping Time       ;DateFormula   ;AccessByPermission=TableData 5790=R;
                                                   CaptionML=[ENU=Shipping Time;
                                                              ENN=Shipping Time] }
    { 5793;   ;Outbound Whse. Handling Time;DateFormula;
                                                   AccessByPermission=TableData 14=R;
                                                   CaptionML=[ENU=Outbound Whse. Handling Time;
                                                              ENN=Outbound Whse. Handling Time] }
    { 5794;   ;Planned Delivery Date;Date         ;CaptionML=[ENU=Planned Delivery Date;
                                                              ENN=Planned Delivery Date];
                                                   Editable=No }
    { 5795;   ;Planned Shipment Date;Date         ;CaptionML=[ENU=Planned Shipment Date;
                                                              ENN=Planned Shipment Date];
                                                   Editable=No }
    { 5811;   ;Appl.-from Item Entry;Integer      ;AccessByPermission=TableData 27=R;
                                                   CaptionML=[ENU=Appl.-from Item Entry;
                                                              ENN=Appl.-from Item Entry];
                                                   MinValue=0 }
    { 5812;   ;Item Charge Base Amount;Decimal    ;CaptionML=[ENU=Item Charge Base Amount;
                                                              ENN=Item Charge Base Amount];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 5817;   ;Correction          ;Boolean       ;CaptionML=[ENU=Correction;
                                                              ENN=Correction];
                                                   Editable=No }
    { 6608;   ;Return Reason Code  ;Code10        ;TableRelation="Return Reason";
                                                   CaptionML=[ENU=Return Reason Code;
                                                              ENN=Return Reason Code] }
    { 7001;   ;Allow Line Disc.    ;Boolean       ;InitValue=Yes;
                                                   CaptionML=[ENU=Allow Line Disc.;
                                                              ENN=Allow Line Disc.] }
    { 7002;   ;Customer Disc. Group;Code20        ;TableRelation="Customer Discount Group";
                                                   CaptionML=[ENU=Customer Disc. Group;
                                                              ENN=Customer Disc. Group] }
    { 50001;  ;Billing Type        ;Option        ;OptionCaptionML=ENU=" ,Event Driven,Date Driven,Time Sheet Driven,Completion Driven";
                                                   OptionString=[ ,Event Driven,Date Driven,Time Sheet Driven,Completion Driven];
                                                   Description=AD_SD }
    { 50004;  ;Scope1              ;Text150       ;Description=AD_SD }
    { 50005;  ;Scope2              ;Text150       ;Description=AD_SD }
    { 50006;  ;Scope3              ;Text150       ;Description=AD_SD }
    { 50007;  ;Scope4              ;Text150       ;Description=AD_SD }
  }
  KEYS
  {
    {    ;Document No.,Line No.                   ;Clustered=Yes }
    {    ;Order No.,Order Line No.,Posting Date    }
    {    ;Blanket Order No.,Blanket Order Line No. }
    {    ;Item Shpt. Entry No.                     }
    {    ;Sell-to Customer No.                     }
    {    ;Bill-to Customer No.                     }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;Document No.,Line No.,Sell-to Customer No.,Type,No.,Shipment Date }
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Shipment No. %1:;ENN=Shipment No. %1:';
      Text001@1001 : TextConst 'ENU=The program cannot find this Sales line.;ENN=The program cannot find this Sales line.';
      Currency@1002 : Record 4;
      SalesShptHeader@1005 : Record 110;
      PostedATOLink@1006 : Record 914;
      DimMgt@1003 : Codeunit 408;
      UOMMgt@1007 : Codeunit 5402;
      CurrencyRead@1004 : Boolean;

    [External]
    PROCEDURE GetCurrencyCode@1() : Code[10];
    BEGIN
      IF "Document No." = SalesShptHeader."No." THEN
        EXIT(SalesShptHeader."Currency Code");
      IF SalesShptHeader.GET("Document No.") THEN
        EXIT(SalesShptHeader."Currency Code");
      EXIT('');
    END;

    [External]
    PROCEDURE ShowDimensions@25();
    BEGIN
      DimMgt.ShowDimensionSet("Dimension Set ID",STRSUBSTNO('%1 %2 %3',TABLECAPTION,"Document No.","Line No."));
    END;

    [External]
    PROCEDURE ShowItemTrackingLines@6500();
    VAR
      ItemTrackingDocMgt@1000 : Codeunit 6503;
    BEGIN
      ItemTrackingDocMgt.ShowItemTrackingForShptRcptLine(DATABASE::"Sales Shipment Line",0,"Document No.",'',0,"Line No.");
    END;

    [External]
    PROCEDURE InsertInvLineFromShptLine@2(VAR SalesLine@1000 : Record 37);
    VAR
      SalesInvHeader@1011 : Record 36;
      SalesOrderHeader@1008 : Record 36;
      SalesOrderLine@1005 : Record 37;
      TempSalesLine@1002 : TEMPORARY Record 37;
      TransferOldExtLines@1007 : Codeunit 379;
      ItemTrackingMgt@1009 : Codeunit 6500;
      LanguageManagement@1010 : Codeunit 43;
      ExtTextLine@1006 : Boolean;
      NextLineNo@1001 : Integer;
      IsHandled@1003 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeCodeInsertInvLineFromShptLine(Rec,SalesLine,IsHandled);
      IF IsHandled THEN
        EXIT;

      SETRANGE("Document No.","Document No.");

      TempSalesLine := SalesLine;
      IF SalesLine.FIND('+') THEN
        NextLineNo := SalesLine."Line No." + 10000
      ELSE
        NextLineNo := 10000;

      IF SalesInvHeader."No." <> TempSalesLine."Document No." THEN
        SalesInvHeader.GET(TempSalesLine."Document Type",TempSalesLine."Document No.");

      IF SalesLine."Shipment No." <> "Document No." THEN BEGIN
        SalesLine.INIT;
        SalesLine."Line No." := NextLineNo;
        SalesLine."Document Type" := TempSalesLine."Document Type";
        SalesLine."Document No." := TempSalesLine."Document No.";
        LanguageManagement.SetGlobalLanguageByCode(SalesInvHeader."Language Code");
        SalesLine.Description := STRSUBSTNO(Text000,"Document No.");
        LanguageManagement.RestoreGlobalLanguage;
        IsHandled := FALSE;
        OnBeforeInsertInvLineFromShptLineBeforeInsertTextLine(Rec,SalesLine,NextLineNo,IsHandled);
        IF NOT IsHandled THEN BEGIN
          SalesLine.INSERT;
          OnAfterDescriptionSalesLineInsert(SalesLine,Rec,NextLineNo);
          NextLineNo := NextLineNo + 10000;
        END;
      END;

      TransferOldExtLines.ClearLineNumbers;

      REPEAT
        ExtTextLine := (TransferOldExtLines.GetNewLineNumber("Attached to Line No.") <> 0);

        IF (Type <> Type::" ") AND SalesOrderLine.GET(SalesOrderLine."Document Type"::Order,"Order No.","Order Line No.")
        THEN BEGIN
          IF (SalesOrderHeader."Document Type" <> SalesOrderLine."Document Type"::Order) OR
             (SalesOrderHeader."No." <> SalesOrderLine."Document No.")
          THEN
            SalesOrderHeader.GET(SalesOrderLine."Document Type"::Order,"Order No.");

          InitCurrency("Currency Code");

          IF SalesInvHeader."Prices Including VAT" THEN BEGIN
            IF NOT SalesOrderHeader."Prices Including VAT" THEN
              SalesOrderLine."Unit Price" :=
                ROUND(
                  SalesOrderLine."Unit Price" * (1 + SalesOrderLine."VAT %" / 100),
                  Currency."Unit-Amount Rounding Precision");
          END ELSE BEGIN
            IF SalesOrderHeader."Prices Including VAT" THEN
              SalesOrderLine."Unit Price" :=
                ROUND(
                  SalesOrderLine."Unit Price" / (1 + SalesOrderLine."VAT %" / 100),
                  Currency."Unit-Amount Rounding Precision");
          END;
        END ELSE BEGIN
          SalesOrderHeader.INIT;
          IF ExtTextLine OR (Type = Type::" ") THEN BEGIN
            SalesOrderLine.INIT;
            SalesOrderLine."Line No." := "Order Line No.";
            SalesOrderLine.Description := Description;
            SalesOrderLine."Description 2" := "Description 2";
            OnInsertInvLineFromShptLineOnAfterAssignDescription(Rec,SalesOrderLine);
          END ELSE
            ERROR(Text001);
        END;

        SalesLine := SalesOrderLine;
        SalesLine."Line No." := NextLineNo;
        SalesLine."Document Type" := TempSalesLine."Document Type";
        SalesLine."Document No." := TempSalesLine."Document No.";
        SalesLine."Variant Code" := "Variant Code";
        SalesLine."Location Code" := "Location Code";
        SalesLine."Drop Shipment" := "Drop Shipment";
        SalesLine."Shipment No." := "Document No.";
        SalesLine."Shipment Line No." := "Line No.";
        ClearSalesLineValues(SalesLine);
        IF NOT ExtTextLine AND (SalesLine.Type <> 0) THEN BEGIN
          IsHandled := FALSE;
          OnInsertInvLineFromShptLineOnBeforeValidateQuantity(Rec,SalesLine,IsHandled);
          IF NOT IsHandled THEN
            SalesLine.VALIDATE(Quantity,Quantity - "Quantity Invoiced");
          CalcBaseQuantities(SalesLine,"Quantity (Base)" / Quantity);

          OnInsertInvLineFromShptLineOnAfterCalcQuantities(SalesLine,SalesOrderLine);

          SalesLine.VALIDATE("Unit Price",SalesOrderLine."Unit Price");
          SalesLine."Allow Line Disc." := SalesOrderLine."Allow Line Disc.";
          SalesLine."Allow Invoice Disc." := SalesOrderLine."Allow Invoice Disc.";
          SalesOrderLine."Line Discount Amount" :=
            ROUND(
              SalesOrderLine."Line Discount Amount" * SalesLine.Quantity / SalesOrderLine.Quantity,
              Currency."Amount Rounding Precision");
          IF SalesInvHeader."Prices Including VAT" THEN BEGIN
            IF NOT SalesOrderHeader."Prices Including VAT" THEN
              SalesOrderLine."Line Discount Amount" :=
                ROUND(
                  SalesOrderLine."Line Discount Amount" *
                  (1 + SalesOrderLine."VAT %" / 100),Currency."Amount Rounding Precision");
          END ELSE BEGIN
            IF SalesOrderHeader."Prices Including VAT" THEN
              SalesOrderLine."Line Discount Amount" :=
                ROUND(
                  SalesOrderLine."Line Discount Amount" /
                  (1 + SalesOrderLine."VAT %" / 100),Currency."Amount Rounding Precision");
          END;
          SalesLine.VALIDATE("Line Discount Amount",SalesOrderLine."Line Discount Amount");
          SalesLine."Line Discount %" := SalesOrderLine."Line Discount %";
          SalesLine.UpdatePrePaymentAmounts;
          OnInsertInvLineFromShptLineOnAfterUpdatePrepaymentsAmounts(SalesLine,SalesOrderLine,Rec);

          IF SalesOrderLine.Quantity = 0 THEN
            SalesLine.VALIDATE("Inv. Discount Amount",0)
          ELSE
            SalesLine.VALIDATE(
              "Inv. Discount Amount",
              ROUND(
                SalesOrderLine."Inv. Discount Amount" * SalesLine.Quantity / SalesOrderLine.Quantity,
                Currency."Amount Rounding Precision"));
        END;

        SalesLine."Attached to Line No." :=
          TransferOldExtLines.TransferExtendedText(
            SalesOrderLine."Line No.",
            NextLineNo,
            "Attached to Line No.");
        SalesLine."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
        SalesLine."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
        SalesLine."Dimension Set ID" := "Dimension Set ID";
        OnBeforeInsertInvLineFromShptLine(Rec,SalesLine,SalesOrderLine);
        SalesLine.INSERT;
        OnAfterInsertInvLineFromShptLine(SalesLine,SalesOrderLine,NextLineNo,Rec);

        ItemTrackingMgt.CopyHandledItemTrkgToInvLine(SalesOrderLine,SalesLine);

        NextLineNo := NextLineNo + 10000;
        IF "Attached to Line No." = 0 THEN
          SETRANGE("Attached to Line No.","Line No.");
      UNTIL (NEXT = 0) OR ("Attached to Line No." = 0);

      IF SalesOrderHeader.GET(SalesOrderHeader."Document Type"::Order,"Order No.") THEN BEGIN
        SalesOrderHeader."Get Shipment Used" := TRUE;
        SalesOrderHeader.MODIFY;
      END;
    END;

    LOCAL PROCEDURE GetSalesInvLines@4(VAR TempSalesInvLine@1000 : TEMPORARY Record 113);
    VAR
      SalesInvLine@1003 : Record 113;
      ItemLedgEntry@1002 : Record 32;
      ValueEntry@1001 : Record 5802;
    BEGIN
      TempSalesInvLine.RESET;
      TempSalesInvLine.DELETEALL;

      IF Type <> Type::Item THEN
        EXIT;

      FilterPstdDocLnItemLedgEntries(ItemLedgEntry);
      ItemLedgEntry.SETFILTER("Invoiced Quantity",'<>0');
      IF ItemLedgEntry.FINDSET THEN BEGIN
        ValueEntry.SETCURRENTKEY("Item Ledger Entry No.","Entry Type");
        ValueEntry.SETRANGE("Entry Type",ValueEntry."Entry Type"::"Direct Cost");
        ValueEntry.SETFILTER("Invoiced Quantity",'<>0');
        REPEAT
          ValueEntry.SETRANGE("Item Ledger Entry No.",ItemLedgEntry."Entry No.");
          IF ValueEntry.FINDSET THEN
            REPEAT
              IF ValueEntry."Document Type" = ValueEntry."Document Type"::"Sales Invoice" THEN
                IF SalesInvLine.GET(ValueEntry."Document No.",ValueEntry."Document Line No.") THEN BEGIN
                  TempSalesInvLine.INIT;
                  TempSalesInvLine := SalesInvLine;
                  IF TempSalesInvLine.INSERT THEN;
                END;
            UNTIL ValueEntry.NEXT = 0;
        UNTIL ItemLedgEntry.NEXT = 0;
      END;
    END;

    [External]
    PROCEDURE CalcShippedSaleNotReturned@3(VAR ShippedQtyNotReturned@1003 : Decimal;VAR RevUnitCostLCY@1005 : Decimal;ExactCostReverse@1006 : Boolean);
    VAR
      ItemLedgEntry@1000 : Record 32;
      TotalCostLCY@1007 : Decimal;
      TotalQtyBase@1002 : Decimal;
    BEGIN
      ShippedQtyNotReturned := 0;
      IF (Type <> Type::Item) OR (Quantity <= 0) THEN BEGIN
        RevUnitCostLCY := "Unit Cost (LCY)";
        EXIT;
      END;

      RevUnitCostLCY := 0;
      FilterPstdDocLnItemLedgEntries(ItemLedgEntry);
      IF ItemLedgEntry.FINDSET THEN
        REPEAT
          ShippedQtyNotReturned := ShippedQtyNotReturned - ItemLedgEntry."Shipped Qty. Not Returned";
          IF ExactCostReverse THEN BEGIN
            ItemLedgEntry.CALCFIELDS("Cost Amount (Expected)","Cost Amount (Actual)");
            TotalCostLCY :=
              TotalCostLCY + ItemLedgEntry."Cost Amount (Expected)" + ItemLedgEntry."Cost Amount (Actual)";
            TotalQtyBase := TotalQtyBase + ItemLedgEntry.Quantity;
          END;
        UNTIL ItemLedgEntry.NEXT = 0;

      IF ExactCostReverse AND (ShippedQtyNotReturned <> 0) AND (TotalQtyBase <> 0) THEN
        RevUnitCostLCY := ABS(TotalCostLCY / TotalQtyBase) * "Qty. per Unit of Measure"
      ELSE
        RevUnitCostLCY := "Unit Cost (LCY)";

      ShippedQtyNotReturned := CalcQty(ShippedQtyNotReturned);
    END;

    LOCAL PROCEDURE CalcQty@9(QtyBase@1000 : Decimal) : Decimal;
    BEGIN
      IF "Qty. per Unit of Measure" = 0 THEN
        EXIT(QtyBase);
      EXIT(ROUND(QtyBase / "Qty. per Unit of Measure",UOMMgt.QtyRndPrecision));
    END;

    [External]
    PROCEDURE FilterPstdDocLnItemLedgEntries@5(VAR ItemLedgEntry@1000 : Record 32);
    BEGIN
      ItemLedgEntry.RESET;
      ItemLedgEntry.SETCURRENTKEY("Document No.");
      ItemLedgEntry.SETRANGE("Document No.","Document No.");
      ItemLedgEntry.SETRANGE("Document Type",ItemLedgEntry."Document Type"::"Sales Shipment");
      ItemLedgEntry.SETRANGE("Document Line No.","Line No.");
    END;

    [External]
    PROCEDURE ShowItemSalesInvLines@8();
    VAR
      TempSalesInvLine@1001 : TEMPORARY Record 113;
    BEGIN
      IF Type = Type::Item THEN BEGIN
        GetSalesInvLines(TempSalesInvLine);
        PAGE.RUNMODAL(PAGE::"Posted Sales Invoice Lines",TempSalesInvLine);
      END;
    END;

    LOCAL PROCEDURE InitCurrency@6(CurrencyCode@1001 : Code[10]);
    BEGIN
      IF (Currency.Code = CurrencyCode) AND CurrencyRead THEN
        EXIT;

      IF CurrencyCode <> '' THEN
        Currency.GET(CurrencyCode)
      ELSE
        Currency.InitRoundingPrecision;
      CurrencyRead := TRUE;
    END;

    [External]
    PROCEDURE ShowLineComments@10();
    VAR
      SalesCommentLine@1000 : Record 44;
    BEGIN
      SalesCommentLine.ShowComments(SalesCommentLine."Document Type"::Shipment,"Document No.","Line No.");
    END;

    [External]
    PROCEDURE ShowAsmToOrder@11();
    BEGIN
      PostedATOLink.ShowPostedAsm(Rec);
    END;

    [External]
    PROCEDURE ShowShortcutDimCode@27(VAR ShortcutDimCode@1000 : ARRAY [8] OF Code[20]);
    BEGIN
      DimMgt.GetShortcutDimensions("Dimension Set ID",ShortcutDimCode);
    END;

    [External]
    PROCEDURE AsmToShipmentExists@72(VAR PostedAsmHeader@1000 : Record 910) : Boolean;
    VAR
      PostedAssembleToOrderLink@1001 : Record 914;
    BEGIN
      IF NOT PostedAssembleToOrderLink.AsmExistsForPostedShipmentLine(Rec) THEN
        EXIT(FALSE);
      EXIT(PostedAsmHeader.GET(PostedAssembleToOrderLink."Assembly Document No."));
    END;

    [External]
    PROCEDURE InitFromSalesLine@12(SalesShptHeader@1001 : Record 110;SalesLine@1002 : Record 37);
    BEGIN
      INIT;
      TRANSFERFIELDS(SalesLine);
      IF ("No." = '') AND (Type IN [Type::"G/L Account"..Type::"Charge (Item)"]) THEN
        Type := Type::" ";
      "Posting Date" := SalesShptHeader."Posting Date";
      "Document No." := SalesShptHeader."No.";
      Quantity := SalesLine."Qty. to Ship";
      "Quantity (Base)" := SalesLine."Qty. to Ship (Base)";
      IF ABS(SalesLine."Qty. to Invoice") > ABS(SalesLine."Qty. to Ship") THEN BEGIN
        "Quantity Invoiced" := SalesLine."Qty. to Ship";
        "Qty. Invoiced (Base)" := SalesLine."Qty. to Ship (Base)";
      END ELSE BEGIN
        "Quantity Invoiced" := SalesLine."Qty. to Invoice";
        "Qty. Invoiced (Base)" := SalesLine."Qty. to Invoice (Base)";
      END;
      "Qty. Shipped Not Invoiced" := Quantity - "Quantity Invoiced";
      IF SalesLine."Document Type" = SalesLine."Document Type"::Order THEN BEGIN
        "Order No." := SalesLine."Document No.";
        "Order Line No." := SalesLine."Line No.";
      END;

      OnAfterInitFromSalesLine(SalesShptHeader,SalesLine,Rec);
    END;

    LOCAL PROCEDURE ClearSalesLineValues@16(VAR SalesLine@1000 : Record 37);
    BEGIN
      SalesLine."Quantity (Base)" := 0;
      SalesLine.Quantity := 0;
      SalesLine."Outstanding Qty. (Base)" := 0;
      SalesLine."Outstanding Quantity" := 0;
      SalesLine."Quantity Shipped" := 0;
      SalesLine."Qty. Shipped (Base)" := 0;
      SalesLine."Quantity Invoiced" := 0;
      SalesLine."Qty. Invoiced (Base)" := 0;
      SalesLine.Amount := 0;
      SalesLine."Amount Including VAT" := 0;
      SalesLine."Purchase Order No." := '';
      SalesLine."Purch. Order Line No." := 0;
      SalesLine."Special Order Purchase No." := '';
      SalesLine."Special Order Purch. Line No." := 0;
      SalesLine."Special Order" := FALSE;
      SalesLine."Appl.-to Item Entry" := 0;
      SalesLine."Appl.-from Item Entry" := 0;

      OnAfterClearSalesLineValues(Rec,SalesLine);
    END;

    [External]
    PROCEDURE FormatType@144() : Text;
    VAR
      SalesLine@1000 : Record 37;
    BEGIN
      IF Type = Type::" " THEN
        EXIT(SalesLine.FormatType);

      EXIT(FORMAT(Type));
    END;

    LOCAL PROCEDURE CalcBaseQuantities@13(VAR SalesLine@1000 : Record 37;QtyFactor@1001 : Decimal);
    BEGIN
      SalesLine."Quantity (Base)" :=
        ROUND(SalesLine.Quantity * QtyFactor,UOMMgt.QtyRndPrecision);
      SalesLine."Qty. to Asm. to Order (Base)" :=
        ROUND(SalesLine."Qty. to Assemble to Order" * QtyFactor,UOMMgt.QtyRndPrecision);
      SalesLine."Outstanding Qty. (Base)" :=
        ROUND(SalesLine."Outstanding Quantity" * QtyFactor,UOMMgt.QtyRndPrecision);
      SalesLine."Qty. to Ship (Base)" :=
        ROUND(SalesLine."Qty. to Ship" * QtyFactor,UOMMgt.QtyRndPrecision);
      SalesLine."Qty. Shipped (Base)" :=
        ROUND(SalesLine."Quantity Shipped" * QtyFactor,UOMMgt.QtyRndPrecision);
      SalesLine."Qty. Shipped Not Invd. (Base)" :=
        ROUND(SalesLine."Qty. Shipped Not Invoiced" * QtyFactor,UOMMgt.QtyRndPrecision);
      SalesLine."Qty. to Invoice (Base)" :=
        ROUND(SalesLine."Qty. to Invoice" * QtyFactor,UOMMgt.QtyRndPrecision);
      SalesLine."Qty. Invoiced (Base)" :=
        ROUND(SalesLine."Quantity Invoiced" * QtyFactor,UOMMgt.QtyRndPrecision);
      SalesLine."Return Qty. to Receive (Base)" :=
        ROUND(SalesLine."Return Qty. to Receive" * QtyFactor,UOMMgt.QtyRndPrecision);
      SalesLine."Return Qty. Received (Base)" :=
        ROUND(SalesLine."Return Qty. Received" * QtyFactor,UOMMgt.QtyRndPrecision);
      SalesLine."Ret. Qty. Rcd. Not Invd.(Base)" :=
        ROUND(SalesLine."Return Qty. Rcd. Not Invd." * QtyFactor,UOMMgt.QtyRndPrecision);
    END;

    LOCAL PROCEDURE GetFieldCaption@31(FieldNumber@1000 : Integer) : Text[100];
    VAR
      Field@1001 : Record 2000000041;
    BEGIN
      Field.GET(DATABASE::"Sales Shipment Line",FieldNumber);
      EXIT(Field."Field Caption");
    END;

    [External]
    PROCEDURE GetCaptionClass@34(FieldNumber@1000 : Integer) : Text[80];
    BEGIN
      CASE FieldNumber OF
        FIELDNO("No."):
          EXIT(STRSUBSTNO('3,%1',GetFieldCaption(FieldNumber)));
      END;
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterClearSalesLineValues@19(VAR SalesShipmentLine@1000 : Record 111;VAR SalesLine@1001 : Record 37);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterDescriptionSalesLineInsert@24(VAR SalesLine@1000 : Record 37;SalesShipmentLine@1001 : Record 111;VAR NextLineNo@1002 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterInitFromSalesLine@7(SalesShptHeader@1000 : Record 110;SalesLine@1001 : Record 37;VAR SalesShptLine@1002 : Record 111);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterInsertInvLineFromShptLine@18(VAR SalesLine@1000 : Record 37;SalesOrderLine@1001 : Record 37;NextLineNo@1002 : Integer;SalesShipmentLine@1003 : Record 111);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeInsertInvLineFromShptLine@17(VAR SalesShptLine@1000 : Record 111;VAR SalesLine@1001 : Record 37;SalesOrderLine@1002 : Record 37);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeInsertInvLineFromShptLineBeforeInsertTextLine@14(VAR SalesShptLine@1000 : Record 111;VAR SalesLine@1001 : Record 37;VAR NextLineNo@1002 : Integer;VAR Handled@1003 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCodeInsertInvLineFromShptLine@15(VAR SalesShipmentLine@1000 : Record 111;VAR SalesLine@1001 : Record 37;VAR IsHandled@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnInsertInvLineFromShptLineOnAfterAssignDescription@21(VAR SalesShipmentLine@1000 : Record 111;VAR SalesOrderLine@1001 : Record 37);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnInsertInvLineFromShptLineOnAfterCalcQuantities@22(VAR SalesLine@1000 : Record 37;SalesOrderLine@1001 : Record 37);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnInsertInvLineFromShptLineOnAfterUpdatePrepaymentsAmounts@20(VAR SalesLine@1000 : Record 37;VAR SalesOrderLine@1001 : Record 37;VAR SalesShipmentLine@1002 : Record 111);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnInsertInvLineFromShptLineOnBeforeValidateQuantity@23(SalesShipmentLine@1000 : Record 111;VAR SalesLine@1001 : Record 37;VAR IsHandled@1002 : Boolean);
    BEGIN
    END;

    BEGIN
    END.
  }
}

OBJECT Table 112 Sales Invoice Header
{
  OBJECT-PROPERTIES
  {
    Date=02-10-21;
    Time=12:00:00;
    Modified=Yes;
    Version List=NAVW114.30;
  }
  PROPERTIES
  {
    DataCaptionFields=No.,Sell-to Customer Name;
    OnDelete=VAR
               PostedDeferralHeader@1002 : Record 1704;
               PostSalesDelete@1003 : Codeunit 363;
               DeferralUtilities@1001 : Codeunit 1720;
             BEGIN
               PostSalesDelete.IsDocumentDeletionAllowed("Posting Date");
               TESTFIELD("No. Printed");
               LOCKTABLE;
               PostSalesDelete.DeleteSalesInvLines(Rec);

               SalesCommentLine.SETRANGE("Document Type",SalesCommentLine."Document Type"::"Posted Invoice");
               SalesCommentLine.SETRANGE("No.","No.");
               SalesCommentLine.DELETEALL;

               ApprovalsMgmt.DeletePostedApprovalEntries(RECORDID);
               PostedDeferralHeader.DeleteForDoc(DeferralUtilities.GetSalesDeferralDocType,'','',
                 SalesCommentLine."Document Type"::"Posted Invoice","No.");
             END;

    CaptionML=[ENU=Sales Invoice Header;
               ENN=Sales Invoice Header];
    LookupPageID=Page143;
    DrillDownPageID=Page143;
  }
  FIELDS
  {
    { 2   ;   ;Sell-to Customer No.;Code20        ;TableRelation=Customer;
                                                   CaptionML=[ENU=Sell-to Customer No.;
                                                              ENN=Sell-to Customer No.];
                                                   NotBlank=Yes }
    { 3   ;   ;No.                 ;Code20        ;CaptionML=[ENU=No.;
                                                              ENN=No.] }
    { 4   ;   ;Bill-to Customer No.;Code20        ;TableRelation=Customer;
                                                   CaptionML=[ENU=Bill-to Customer No.;
                                                              ENN=Bill-to Customer No.];
                                                   NotBlank=Yes }
    { 5   ;   ;Bill-to Name        ;Text100       ;CaptionML=[ENU=Bill-to Name;
                                                              ENN=Bill-to Name];
                                                   Description=AD_SD }
    { 6   ;   ;Bill-to Name 2      ;Text50        ;CaptionML=[ENU=Bill-to Name 2;
                                                              ENN=Bill-to Name 2] }
    { 7   ;   ;Bill-to Address     ;Text100       ;CaptionML=[ENU=Bill-to Address;
                                                              ENN=Bill-to Address];
                                                   Description=AD_SD }
    { 8   ;   ;Bill-to Address 2   ;Text60        ;CaptionML=[ENU=Bill-to Address 2;
                                                              ENN=Bill-to Address 2];
                                                   Description=AD_SD }
    { 9   ;   ;Bill-to City        ;Text30        ;TableRelation="Post Code".City;
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Bill-to City;
                                                              ENN=Bill-to City] }
    { 10  ;   ;Bill-to Contact     ;Text100       ;CaptionML=[ENU=Bill-to Contact;
                                                              ENN=Bill-to Contact] }
    { 11  ;   ;Your Reference      ;Text35        ;CaptionML=[ENU=Your Reference;
                                                              ENN=Your Reference] }
    { 12  ;   ;Ship-to Code        ;Code10        ;TableRelation="Ship-to Address".Code WHERE (Customer No.=FIELD(Sell-to Customer No.));
                                                   CaptionML=[ENU=Ship-to Code;
                                                              ENN=Ship-to Code] }
    { 13  ;   ;Ship-to Name        ;Text100       ;CaptionML=[ENU=Ship-to Name;
                                                              ENN=Ship-to Name];
                                                   Description=AD_SD }
    { 14  ;   ;Ship-to Name 2      ;Text50        ;CaptionML=[ENU=Ship-to Name 2;
                                                              ENN=Ship-to Name 2] }
    { 15  ;   ;Ship-to Address     ;Text100       ;CaptionML=[ENU=Ship-to Address;
                                                              ENN=Ship-to Address];
                                                   Description=AD_SD }
    { 16  ;   ;Ship-to Address 2   ;Text60        ;CaptionML=[ENU=Ship-to Address 2;
                                                              ENN=Ship-to Address 2];
                                                   Description=AD_SD }
    { 17  ;   ;Ship-to City        ;Text30        ;TableRelation="Post Code".City;
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Ship-to City;
                                                              ENN=Ship-to City] }
    { 18  ;   ;Ship-to Contact     ;Text100       ;CaptionML=[ENU=Ship-to Contact;
                                                              ENN=Ship-to Contact] }
    { 19  ;   ;Order Date          ;Date          ;CaptionML=[ENU=Order Date;
                                                              ENN=Order Date] }
    { 20  ;   ;Posting Date        ;Date          ;CaptionML=[ENU=Posting Date;
                                                              ENN=Posting Date] }
    { 21  ;   ;Shipment Date       ;Date          ;CaptionML=[ENU=Shipment Date;
                                                              ENN=Shipment Date] }
    { 22  ;   ;Posting Description ;Text100       ;CaptionML=[ENU=Posting Description;
                                                              ENN=Posting Description] }
    { 23  ;   ;Payment Terms Code  ;Code10        ;TableRelation="Payment Terms";
                                                   CaptionML=[ENU=Payment Terms Code;
                                                              ENN=Payment Terms Code] }
    { 24  ;   ;Due Date            ;Date          ;CaptionML=[ENU=Due Date;
                                                              ENN=Due Date] }
    { 25  ;   ;Payment Discount %  ;Decimal       ;CaptionML=[ENU=Payment Discount %;
                                                              ENN=Payment Discount %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 26  ;   ;Pmt. Discount Date  ;Date          ;CaptionML=[ENU=Pmt. Discount Date;
                                                              ENN=Pmt. Discount Date] }
    { 27  ;   ;Shipment Method Code;Code10        ;TableRelation="Shipment Method";
                                                   CaptionML=[ENU=Shipment Method Code;
                                                              ENN=Shipment Method Code] }
    { 28  ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE (Use As In-Transit=CONST(No));
                                                   CaptionML=[ENU=Location Code;
                                                              ENN=Location Code] }
    { 29  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   CaptionML=[ENU=Shortcut Dimension 1 Code;
                                                              ENN=Shortcut Dimension 1 Code];
                                                   CaptionClass='1,2,1' }
    { 30  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   CaptionML=[ENU=Shortcut Dimension 2 Code;
                                                              ENN=Shortcut Dimension 2 Code];
                                                   CaptionClass='1,2,2' }
    { 31  ;   ;Customer Posting Group;Code20      ;TableRelation="Customer Posting Group";
                                                   CaptionML=[ENU=Customer Posting Group;
                                                              ENN=Customer Posting Group];
                                                   Editable=No }
    { 32  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   CaptionML=[ENU=Currency Code;
                                                              ENN=Currency Code];
                                                   Editable=No }
    { 33  ;   ;Currency Factor     ;Decimal       ;CaptionML=[ENU=Currency Factor;
                                                              ENN=Currency Factor];
                                                   DecimalPlaces=0:15;
                                                   MinValue=0 }
    { 34  ;   ;Customer Price Group;Code10        ;TableRelation="Customer Price Group";
                                                   CaptionML=[ENU=Customer Price Group;
                                                              ENN=Customer Price Group] }
    { 35  ;   ;Prices Including VAT;Boolean       ;CaptionML=[ENU=Prices Including VAT;
                                                              ENN=Prices Including VAT] }
    { 37  ;   ;Invoice Disc. Code  ;Code20        ;CaptionML=[ENU=Invoice Disc. Code;
                                                              ENN=Invoice Disc. Code] }
    { 40  ;   ;Customer Disc. Group;Code20        ;TableRelation="Customer Discount Group";
                                                   CaptionML=[ENU=Customer Disc. Group;
                                                              ENN=Customer Disc. Group] }
    { 41  ;   ;Language Code       ;Code10        ;TableRelation=Language;
                                                   CaptionML=[ENU=Language Code;
                                                              ENN=Language Code] }
    { 43  ;   ;Salesperson Code    ;Code20        ;TableRelation="Employee LOB"."Emp No." WHERE (LOB=FIELD(LOB),
                                                                                                 Segment=FIELD(Segment));
                                                   CaptionML=[ENU=Salesperson Code;
                                                              ENN=Salesperson Code];
                                                   Description=AD Changed Lookup from Salesperson/Purchaser to "Employee LOB" }
    { 44  ;   ;Order No.           ;Code20        ;AccessByPermission=TableData 110=R;
                                                   CaptionML=[ENU=Order No.;
                                                              ENN=Order No.] }
    { 46  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Sales Comment Line" WHERE (Document Type=CONST(Posted Invoice),
                                                                                                 No.=FIELD(No.),
                                                                                                 Document Line No.=CONST(0)));
                                                   CaptionML=[ENU=Comment;
                                                              ENN=Comment];
                                                   Editable=No }
    { 47  ;   ;No. Printed         ;Integer       ;CaptionML=[ENU=No. Printed;
                                                              ENN=No. Printed];
                                                   Editable=Yes }
    { 51  ;   ;On Hold             ;Code3         ;CaptionML=[ENU=On Hold;
                                                              ENN=On Hold] }
    { 52  ;   ;Applies-to Doc. Type;Option        ;CaptionML=[ENU=Applies-to Doc. Type;
                                                              ENN=Applies-to Doc. Type];
                                                   OptionCaptionML=[ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund";
                                                                    ENN=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund"];
                                                   OptionString=[ ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund] }
    { 53  ;   ;Applies-to Doc. No. ;Code20        ;OnLookup=BEGIN
                                                              CustLedgEntry.SETCURRENTKEY("Document No.");
                                                              CustLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
                                                              CustLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
                                                              PAGE.RUN(0,CustLedgEntry);
                                                            END;

                                                   CaptionML=[ENU=Applies-to Doc. No.;
                                                              ENN=Applies-to Doc. No.] }
    { 55  ;   ;Bal. Account No.    ;Code20        ;TableRelation=IF (Bal. Account Type=CONST(G/L Account)) "G/L Account"
                                                                 ELSE IF (Bal. Account Type=CONST(Bank Account)) "Bank Account";
                                                   CaptionML=[ENU=Bal. Account No.;
                                                              ENN=Bal. Account No.] }
    { 60  ;   ;Amount              ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Invoice Line".Amount WHERE (Document No.=FIELD(No.)));
                                                   CaptionML=[ENU=Amount;
                                                              ENN=Amount];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 61  ;   ;Amount Including VAT;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Invoice Line"."Amount Including VAT" WHERE (Document No.=FIELD(No.)));
                                                   CaptionML=[ENU=Amount Including VAT;
                                                              ENN=Amount Including VAT];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 70  ;   ;VAT Registration No.;Text20        ;CaptionML=[ENU=VAT Registration No.;
                                                              ENN=VAT Registration No.] }
    { 73  ;   ;Reason Code         ;Code10        ;TableRelation="Reason Code";
                                                   CaptionML=[ENU=Reason Code;
                                                              ENN=Reason Code] }
    { 74  ;   ;Gen. Bus. Posting Group;Code20     ;TableRelation="Gen. Business Posting Group";
                                                   CaptionML=[ENU=Gen. Bus. Posting Group;
                                                              ENN=Gen. Bus. Posting Group] }
    { 75  ;   ;EU 3-Party Trade    ;Boolean       ;CaptionML=[ENU=EU 3-Party Trade;
                                                              ENN=EU 3-Party Trade] }
    { 76  ;   ;Transaction Type    ;Code10        ;TableRelation="Transaction Type";
                                                   CaptionML=[ENU=Transaction Type;
                                                              ENN=Transaction Nature Code] }
    { 77  ;   ;Transport Method    ;Code10        ;TableRelation="Transport Method";
                                                   CaptionML=[ENU=Transport Method;
                                                              ENN=Transport Method] }
    { 78  ;   ;VAT Country/Region Code;Code10     ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=VAT Country/Region Code;
                                                              ENN=VAT Country/Region Code] }
    { 79  ;   ;Sell-to Customer Name;Text100      ;CaptionML=[ENU=Sell-to Customer Name;
                                                              ENN=Sell-to Customer Name];
                                                   Description=AD_SD }
    { 80  ;   ;Sell-to Customer Name 2;Text50     ;CaptionML=[ENU=Sell-to Customer Name 2;
                                                              ENN=Sell-to Customer Name 2] }
    { 81  ;   ;Sell-to Address     ;Text100       ;CaptionML=[ENU=Sell-to Address;
                                                              ENN=Sell-to Address];
                                                   Description=AD_SD }
    { 82  ;   ;Sell-to Address 2   ;Text60        ;CaptionML=[ENU=Sell-to Address 2;
                                                              ENN=Sell-to Address 2];
                                                   Description=AD_SD }
    { 83  ;   ;Sell-to City        ;Text30        ;TableRelation="Post Code".City;
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Sell-to City;
                                                              ENN=Sell-to City] }
    { 84  ;   ;Sell-to Contact     ;Text100       ;CaptionML=[ENU=Sell-to Contact;
                                                              ENN=Sell-to Contact] }
    { 85  ;   ;Bill-to Post Code   ;Code20        ;TableRelation="Post Code";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Bill-to Post Code;
                                                              ENN=Bill-to Postcode] }
    { 86  ;   ;Bill-to County      ;Text30        ;CaptionML=[ENU=Bill-to County;
                                                              ENN=Bill-to County];
                                                   CaptionClass='5,1,' + "Bill-to Country/Region Code" }
    { 87  ;   ;Bill-to Country/Region Code;Code10 ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=Bill-to Country/Region Code;
                                                              ENN=Bill-to Country/Region Code] }
    { 88  ;   ;Sell-to Post Code   ;Code20        ;TableRelation="Post Code";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Sell-to Post Code;
                                                              ENN=Sell-to Postcode] }
    { 89  ;   ;Sell-to County      ;Text30        ;CaptionML=[ENU=Sell-to County;
                                                              ENN=Sell-to County];
                                                   CaptionClass='5,1,' + "Sell-to Country/Region Code" }
    { 90  ;   ;Sell-to Country/Region Code;Code10 ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=Sell-to Country/Region Code;
                                                              ENN=Sell-to Country/Region Code] }
    { 91  ;   ;Ship-to Post Code   ;Code20        ;TableRelation="Post Code";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Ship-to Post Code;
                                                              ENN=Ship-to Postcode] }
    { 92  ;   ;Ship-to County      ;Text30        ;CaptionML=[ENU=Ship-to County;
                                                              ENN=Ship-to County];
                                                   CaptionClass='5,1,' + "Ship-to Country/Region Code" }
    { 93  ;   ;Ship-to Country/Region Code;Code10 ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=Ship-to Country/Region Code;
                                                              ENN=Ship-to Country/Region Code] }
    { 94  ;   ;Bal. Account Type   ;Option        ;CaptionML=[ENU=Bal. Account Type;
                                                              ENN=Bal. Account Type];
                                                   OptionCaptionML=[ENU=G/L Account,Bank Account;
                                                                    ENN=G/L Account,Bank Account];
                                                   OptionString=G/L Account,Bank Account }
    { 97  ;   ;Exit Point          ;Code10        ;TableRelation="Entry/Exit Point";
                                                   CaptionML=[ENU=Exit Point;
                                                              ENN=Exit Point] }
    { 98  ;   ;Correction          ;Boolean       ;CaptionML=[ENU=Correction;
                                                              ENN=Correction] }
    { 99  ;   ;Document Date       ;Date          ;CaptionML=[ENU=Document Date;
                                                              ENN=Document Date] }
    { 100 ;   ;External Document No.;Code35       ;CaptionML=[ENU=External Document No.;
                                                              ENN=External Document No.] }
    { 101 ;   ;Area                ;Code10        ;TableRelation=Area;
                                                   CaptionML=[ENU=Area;
                                                              ENN=Area] }
    { 102 ;   ;Transaction Specification;Code10   ;TableRelation="Transaction Specification";
                                                   CaptionML=[ENU=Transaction Specification;
                                                              ENN=Transaction Specification] }
    { 104 ;   ;Payment Method Code ;Code10        ;TableRelation="Payment Method";
                                                   CaptionML=[ENU=Payment Method Code;
                                                              ENN=Payment Method Code] }
    { 105 ;   ;Shipping Agent Code ;Code10        ;TableRelation="Shipping Agent";
                                                   AccessByPermission=TableData 5790=R;
                                                   CaptionML=[ENU=Shipping Agent Code;
                                                              ENN=Shipping Agent Code] }
    { 106 ;   ;Package Tracking No.;Text30        ;CaptionML=[ENU=Package Tracking No.;
                                                              ENN=Package Tracking No.] }
    { 107 ;   ;Pre-Assigned No. Series;Code20     ;TableRelation="No. Series";
                                                   CaptionML=[ENU=Pre-Assigned No. Series;
                                                              ENN=Pre-Assigned No. Series] }
    { 108 ;   ;No. Series          ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=[ENU=No. Series;
                                                              ENN=No. Series];
                                                   Editable=No }
    { 110 ;   ;Order No. Series    ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=[ENU=Order No. Series;
                                                              ENN=Order No. Series] }
    { 111 ;   ;Pre-Assigned No.    ;Code20        ;CaptionML=[ENU=Pre-Assigned No.;
                                                              ENN=Pre-Assigned No.] }
    { 112 ;   ;User ID             ;Code50        ;TableRelation=User."User Name";
                                                   OnLookup=VAR
                                                              UserMgt@1000 : Codeunit 418;
                                                            BEGIN
                                                              UserMgt.LookupUserID("User ID");
                                                            END;

                                                   TestTableRelation=No;
                                                   DataClassification=EndUserIdentifiableInformation;
                                                   CaptionML=[ENU=User ID;
                                                              ENN=User ID] }
    { 113 ;   ;Source Code         ;Code10        ;TableRelation="Source Code";
                                                   CaptionML=[ENU=Source Code;
                                                              ENN=Source Code] }
    { 114 ;   ;Tax Area Code       ;Code20        ;TableRelation="Tax Area";
                                                   CaptionML=[ENU=Tax Area Code;
                                                              ENN=VAT Area Code] }
    { 115 ;   ;Tax Liable          ;Boolean       ;CaptionML=[ENU=Tax Liable;
                                                              ENN=VAT Liable] }
    { 116 ;   ;VAT Bus. Posting Group;Code20      ;TableRelation="VAT Business Posting Group";
                                                   CaptionML=[ENU=VAT Bus. Posting Group;
                                                              ENN=VAT Bus. Posting Group] }
    { 119 ;   ;VAT Base Discount % ;Decimal       ;CaptionML=[ENU=VAT Base Discount %;
                                                              ENN=VAT Base Discount %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 121 ;   ;Invoice Discount Calculation;Option;CaptionML=[ENU=Invoice Discount Calculation;
                                                              ENN=Invoice Discount Calculation];
                                                   OptionCaptionML=[ENU=None,%,Amount;
                                                                    ENN=None,%,Amount];
                                                   OptionString=None,%,Amount }
    { 122 ;   ;Invoice Discount Value;Decimal     ;CaptionML=[ENU=Invoice Discount Value;
                                                              ENN=Invoice Discount Value];
                                                   AutoFormatType=1 }
    { 131 ;   ;Prepayment No. Series;Code20       ;TableRelation="No. Series";
                                                   CaptionML=[ENU=Prepayment No. Series;
                                                              ENN=Prepayment No. Series] }
    { 136 ;   ;Prepayment Invoice  ;Boolean       ;CaptionML=[ENU=Prepayment Invoice;
                                                              ENN=Prepayment Invoice] }
    { 137 ;   ;Prepayment Order No.;Code20        ;CaptionML=[ENU=Prepayment Order No.;
                                                              ENN=Prepayment Order No.] }
    { 151 ;   ;Quote No.           ;Code20        ;CaptionML=[ENU=Quote No.;
                                                              ENN=Quote No.];
                                                   Editable=No }
    { 166 ;   ;Last Email Sent Time;DateTime      ;FieldClass=FlowField;
                                                   CalcFormula=Max("O365 Document Sent History"."Created Date-Time" WHERE (Document Type=CONST(Invoice),
                                                                                                                           Document No.=FIELD(No.),
                                                                                                                           Posted=CONST(Yes)));
                                                   CaptionML=[ENU=Last Email Sent Time;
                                                              ENN=Last Email Sent Time] }
    { 167 ;   ;Last Email Sent Status;Option      ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("O365 Document Sent History"."Job Last Status" WHERE (Document Type=CONST(Invoice),
                                                                                                                            Document No.=FIELD(No.),
                                                                                                                            Posted=CONST(Yes),
                                                                                                                            Created Date-Time=FIELD(Last Email Sent Time)));
                                                   CaptionML=[ENU=Last Email Sent Status;
                                                              ENN=Last Email Sent Status];
                                                   OptionCaptionML=[ENU=Not Sent,In Process,Finished,Error;
                                                                    ENN=Not Sent,In Process,Finished,Error];
                                                   OptionString=Not Sent,In Process,Finished,Error }
    { 168 ;   ;Sent as Email       ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("O365 Document Sent History" WHERE (Document Type=CONST(Invoice),
                                                                                                         Document No.=FIELD(No.),
                                                                                                         Posted=CONST(Yes),
                                                                                                         Job Last Status=CONST(Finished)));
                                                   CaptionML=[ENU=Sent as Email;
                                                              ENN=Sent as Email] }
    { 169 ;   ;Last Email Notif Cleared;Boolean   ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("O365 Document Sent History".NotificationCleared WHERE (Document Type=CONST(Invoice),
                                                                                                                              Document No.=FIELD(No.),
                                                                                                                              Posted=CONST(Yes),
                                                                                                                              Created Date-Time=FIELD(Last Email Sent Time)));
                                                   CaptionML=[ENU=Last Email Notif Cleared;
                                                              ENN=Last Email Notif Cleared] }
    { 171 ;   ;Sell-to Phone No.   ;Text30        ;ExtendedDatatype=Phone No.;
                                                   CaptionML=[ENU=Sell-to Phone No.;
                                                              ENN=Sell-to Phone No.] }
    { 172 ;   ;Sell-to E-Mail      ;Text80        ;ExtendedDatatype=E-Mail;
                                                   CaptionML=[ENU=Email;
                                                              ENN=Email] }
    { 176 ;   ;Payment Instructions;BLOB          ;CaptionML=[ENU=Payment Instructions;
                                                              ENN=Payment Instructions] }
    { 177 ;   ;Payment Instructions Name;Text20   ;DataClassification=CustomerContent;
                                                   CaptionML=[ENU=Payment Instructions Name;
                                                              ENN=Payment Instructions Name] }
    { 180 ;   ;Payment Reference   ;Code50        ;CaptionML=[ENU=Payment Reference;
                                                              ENN=Payment Reference] }
    { 200 ;   ;Work Description    ;BLOB          ;CaptionML=[ENU=Work Description;
                                                              ENN=Work Description] }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnLookup=BEGIN
                                                              ShowDimensions;
                                                            END;

                                                   CaptionML=[ENU=Dimension Set ID;
                                                              ENN=Dimension Set ID];
                                                   Editable=Yes }
    { 600 ;   ;Payment Service Set ID;Integer     ;CaptionML=[ENU=Payment Service Set ID;
                                                              ENN=Payment Service Set ID] }
    { 710 ;   ;Document Exchange Identifier;Text50;CaptionML=[ENU=Document Exchange Identifier;
                                                              ENN=Document Exchange Identifier] }
    { 711 ;   ;Document Exchange Status;Option    ;CaptionML=[ENU=Document Exchange Status;
                                                              ENN=Document Exchange Status];
                                                   OptionCaptionML=[ENU=Not Sent,Sent to Document Exchange Service,Delivered to Recipient,Delivery Failed,Pending Connection to Recipient;
                                                                    ENN=Not Sent,Sent to Document Exchange Service,Delivered to Recipient,Delivery Failed,Pending Connection to Recipient];
                                                   OptionString=Not Sent,Sent to Document Exchange Service,Delivered to Recipient,Delivery Failed,Pending Connection to Recipient }
    { 712 ;   ;Doc. Exch. Original Identifier;Text50;
                                                   CaptionML=[ENU=Doc. Exch. Original Identifier;
                                                              ENN=Doc. Exch. Original Identifier] }
    { 720 ;   ;Coupled to CRM      ;Boolean       ;CaptionML=[ENU=Coupled to Dynamics 365 for Sales;
                                                              ENN=Coupled to Dynamics 365 for Sales] }
    { 1200;   ;Direct Debit Mandate ID;Code35     ;TableRelation="SEPA Direct Debit Mandate" WHERE (Customer No.=FIELD(Bill-to Customer No.));
                                                   CaptionML=[ENU=Direct Debit Mandate ID;
                                                              ENN=Direct Debit Mandate ID] }
    { 1302;   ;Closed              ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=-Exist("Cust. Ledger Entry" WHERE (Entry No.=FIELD(Cust. Ledger Entry No.),
                                                                                                  Open=FILTER(Yes)));
                                                   CaptionML=[ENU=Closed;
                                                              ENN=Closed];
                                                   Editable=No }
    { 1303;   ;Remaining Amount    ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry".Amount WHERE (Cust. Ledger Entry No.=FIELD(Cust. Ledger Entry No.)));
                                                   CaptionML=[ENU=Remaining Amount;
                                                              ENN=Remaining Amount];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 1304;   ;Cust. Ledger Entry No.;Integer     ;TableRelation="Cust. Ledger Entry"."Entry No.";
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Cust. Ledger Entry No.;
                                                              ENN=Cust. Ledger Entry No.];
                                                   Editable=No }
    { 1305;   ;Invoice Discount Amount;Decimal    ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Invoice Line"."Inv. Discount Amount" WHERE (Document No.=FIELD(No.)));
                                                   CaptionML=[ENU=Invoice Discount Amount;
                                                              ENN=Invoice Discount Amount];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1310;   ;Cancelled           ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Cancelled Document" WHERE (Source ID=CONST(112),
                                                                                                 Cancelled Doc. No.=FIELD(No.)));
                                                   CaptionML=[ENU=Cancelled;
                                                              ENN=Cancelled];
                                                   Editable=No }
    { 1311;   ;Corrective          ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Cancelled Document" WHERE (Source ID=CONST(114),
                                                                                                 Cancelled By Doc. No.=FIELD(No.)));
                                                   CaptionML=[ENU=Corrective;
                                                              ENN=Corrective];
                                                   Editable=No }
    { 1312;   ;Reversed            ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Cust. Ledger Entry".Reversed WHERE (Entry No.=FIELD(Cust. Ledger Entry No.)));
                                                   CaptionML=[ENU=Reversed;
                                                              ENN=Reversed];
                                                   Editable=No }
    { 5050;   ;Campaign No.        ;Code20        ;TableRelation=Campaign;
                                                   CaptionML=[ENU=Campaign No.;
                                                              ENN=Campaign No.] }
    { 5052;   ;Sell-to Contact No. ;Code20        ;TableRelation=Contact;
                                                   CaptionML=[ENU=Sell-to Contact No.;
                                                              ENN=Sell-to Contact No.] }
    { 5053;   ;Bill-to Contact No. ;Code20        ;TableRelation=Contact;
                                                   CaptionML=[ENU=Bill-to Contact No.;
                                                              ENN=Bill-to Contact No.] }
    { 5055;   ;Opportunity No.     ;Code20        ;TableRelation=Opportunity;
                                                   CaptionML=[ENU=Opportunity No.;
                                                              ENN=Opportunity No.] }
    { 5700;   ;Responsibility Center;Code10       ;TableRelation="Responsibility Center";
                                                   CaptionML=[ENU=Responsibility Center;
                                                              ENN=Responsibility Centre] }
    { 7001;   ;Allow Line Disc.    ;Boolean       ;CaptionML=[ENU=Allow Line Disc.;
                                                              ENN=Allow Line Disc.] }
    { 7200;   ;Get Shipment Used   ;Boolean       ;CaptionML=[ENU=Get Shipment Used;
                                                              ENN=Get Shipment Used] }
    { 8000;   ;Id                  ;GUID          ;CaptionML=[ENU=Id;
                                                              ENN=Id] }
    { 50000;  ;LOB                 ;Text40        ;TableRelation="Segment Master".LOB;
                                                   Description=AD_SD }
    { 50001;  ;Segment             ;Text100       ;TableRelation="Segment Master".Segment WHERE (LOB=FIELD(LOB));
                                                   Description=AD_SD }
    { 50014;  ;Work Order No.      ;Code20        ;Description=AD_SD }
    { 50020;  ;Remarks             ;Text250       ;Description=AD_SD }
    { 50023;  ;Type of Invoice     ;Option        ;OptionCaptionML=ENU=" ,Settlement";
                                                   OptionString=[ ,Settlement];
                                                   Description=AD_SD }
    { 50025;  ;Invoice Types       ;Option        ;OptionCaptionML=ENU=" ,Fees,Expenses";
                                                   OptionString=[ ,Fees,Expenses];
                                                   Description=AD_SD }
    { 50033;  ;Team Leader         ;Code30        ;TableRelation=Employee WHERE (Type=FILTER(Partner|Others));
                                                   Description=AD_SD }
    { 50050;  ;Sales Currency      ;Option        ;OptionCaptionML=ENU=" ,USD,EURO,GBP,AED,BDT,AUD,INR";
                                                   OptionString=[ ,USD,EURO,GBP,AED,BDT,AUD,INR];
                                                   Description=AD_SD }
    { 50051;  ;Resp. Name          ;Text80        ;Description=AD_SD }
    { 50052;  ;Bank Selection For Report;Option   ;DataClassification=ToBeClassified;
                                                   OptionCaptionML=ENU=" ,ICICI,HDFC,INDIAN,ICICI2,HDFC2";
                                                   OptionString=[ ,ICICI,HDFC,INDIAN,ICICI2,HDFC2];
                                                   Description=ZOHO_1471 }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Order No.                                }
    {    ;Pre-Assigned No.                         }
    {    ;Sell-to Customer No.,External Document No.;
                                                   MaintainSQLIndex=No }
    {    ;Sell-to Customer No.,Order Date         ;MaintainSQLIndex=No }
    {    ;Sell-to Customer No.                     }
    {    ;Prepayment Order No.,Prepayment Invoice  }
    {    ;Bill-to Customer No.                     }
    {    ;Posting Date                             }
    {    ;Document Exchange Status                 }
    {    ;Due Date                                 }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;No.,Sell-to Customer No.,Bill-to Customer No.,Posting Date,Posting Description }
    { 2   ;Brick               ;No.,Sell-to Customer Name,Amount,Due Date,Amount Including VAT }
  }
  CODE
  {
    VAR
      SalesCommentLine@1001 : Record 44;
      SalesSetup@1007 : Record 311;
      CustLedgEntry@1003 : Record 21;
      DimMgt@1005 : Codeunit 408;
      ApprovalsMgmt@1008 : Codeunit 1535;
      UserSetupMgt@1002 : Codeunit 5700;
      DocTxt@1000 : TextConst 'ENU=Invoice;ENN=Invoice';
      PaymentReference@1214 : Text;
      PaymentReferenceLbl@1215 : Text;

    [External]
    PROCEDURE IsFullyOpen@26() : Boolean;
    BEGIN
      CALCFIELDS("Amount Including VAT","Remaining Amount");
      EXIT("Amount Including VAT" = "Remaining Amount");
    END;

    [Internal]
    PROCEDURE SendRecords@12();
    VAR
      DocumentSendingProfile@1001 : Record 60;
      DummyReportSelections@1000 : Record 77;
      ReportDistributionMgt@1003 : Codeunit 452;
      DocumentTypeTxt@1004 : Text[50];
      IsHandled@1002 : Boolean;
    BEGIN
      DocumentTypeTxt := ReportDistributionMgt.GetFullDocumentTypeText(Rec);

      IsHandled := FALSE;
      OnBeforeSendRecords(DummyReportSelections,Rec,DocumentTypeTxt,IsHandled);
      IF NOT IsHandled THEN
        DocumentSendingProfile.SendCustomerRecords(
          DummyReportSelections.Usage::"S.Invoice",Rec,DocumentTypeTxt,"Bill-to Customer No.","No.",
          FIELDNO("Bill-to Customer No."),FIELDNO("No."));
    END;

    [External]
    PROCEDURE SendProfile@72(VAR DocumentSendingProfile@1000 : Record 60);
    VAR
      DummyReportSelections@1003 : Record 77;
      ReportDistributionMgt@1004 : Codeunit 452;
      DocumentTypeTxt@1002 : Text[50];
      IsHandled@1001 : Boolean;
    BEGIN
      DocumentTypeTxt := ReportDistributionMgt.GetFullDocumentTypeText(Rec);

      IsHandled := FALSE;
      OnBeforeSendProfile(DummyReportSelections,Rec,DocumentTypeTxt,IsHandled,DocumentSendingProfile);
      IF NOT IsHandled THEN
        DocumentSendingProfile.Send(
          DummyReportSelections.Usage::"S.Invoice",Rec,"No.","Bill-to Customer No.",
          DocumentTypeTxt,FIELDNO("Bill-to Customer No."),FIELDNO("No."));
    END;

    [External]
    PROCEDURE PrintRecords@1(ShowRequestPage@1000 : Boolean);
    VAR
      DocumentSendingProfile@1002 : Record 60;
      DummyReportSelections@1001 : Record 77;
      IsHandled@1003 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforePrintRecords(DummyReportSelections,Rec,ShowRequestPage,IsHandled);
      IF NOT IsHandled THEN
        DocumentSendingProfile.TrySendToPrinter(
          DummyReportSelections.Usage::"S.Invoice",Rec,FIELDNO("Bill-to Customer No."),ShowRequestPage);
    END;

    [External]
    PROCEDURE EmailRecords@17(ShowDialog@1000 : Boolean);
    VAR
      DocumentSendingProfile@1003 : Record 60;
      DummyReportSelections@1001 : Record 77;
      ReportDistributionMgt@1005 : Codeunit 452;
      DocumentTypeTxt@1004 : Text[50];
      IsHandled@1002 : Boolean;
    BEGIN
      DocumentTypeTxt := ReportDistributionMgt.GetFullDocumentTypeText(Rec);

      IsHandled := FALSE;
      OnBeforeEmailRecords(DummyReportSelections,Rec,DocumentTypeTxt,ShowDialog,IsHandled);
      IF NOT IsHandled THEN
        DocumentSendingProfile.TrySendToEMail(
          DummyReportSelections.Usage::"S.Invoice",Rec,FIELDNO("No."),DocumentTypeTxt,
          FIELDNO("Bill-to Customer No."),ShowDialog);
    END;

    [External]
    PROCEDURE GetDocTypeTxt@140() : Text[50];
    VAR
      ReportDistributionMgt@1000 : Codeunit 452;
    BEGIN
      EXIT(ReportDistributionMgt.GetFullDocumentTypeText(Rec));
    END;

    [External]
    PROCEDURE Navigate@2();
    VAR
      NavigateForm@1000 : Page 344;
    BEGIN
      NavigateForm.SetDoc("Posting Date","No.");
      NavigateForm.RUN;
    END;

    [External]
    PROCEDURE LookupAdjmtValueEntries@3();
    VAR
      ValueEntry@1000 : Record 5802;
    BEGIN
      ValueEntry.SETCURRENTKEY("Document No.");
      ValueEntry.SETRANGE("Document No.","No.");
      ValueEntry.SETRANGE("Document Type",ValueEntry."Document Type"::"Sales Invoice");
      ValueEntry.SETRANGE(Adjustment,TRUE);
      PAGE.RUNMODAL(0,ValueEntry);
    END;

    [External]
    PROCEDURE GetCustomerVATRegistrationNumber@14() : Text;
    BEGIN
      EXIT("VAT Registration No.");
    END;

    [External]
    PROCEDURE GetCustomerVATRegistrationNumberLbl@15() : Text;
    BEGIN
      IF "VAT Registration No." = '' THEN
        EXIT('');
      EXIT(FIELDCAPTION("VAT Registration No."));
    END;

    [External]
    PROCEDURE GetCustomerGlobalLocationNumber@8() : Text;
    VAR
      Customer@1000 : Record 18;
    BEGIN
      IF Customer.GET("Sell-to Customer No.") THEN
        EXIT(Customer.GLN);
      EXIT('');
    END;

    [External]
    PROCEDURE GetCustomerGlobalLocationNumberLbl@10() : Text;
    VAR
      Customer@1000 : Record 18;
    BEGIN
      IF Customer.GET("Sell-to Customer No.") THEN
        EXIT(Customer.FIELDCAPTION(GLN));
      EXIT('');
    END;

    PROCEDURE GetSellToCustomerFaxNo@209() : Text;
    VAR
      Customer@1000 : Record 18;
    BEGIN
      IF Customer.GET("Sell-to Customer No.") THEN
        EXIT(Customer."Fax No.");
    END;

    [External]
    PROCEDURE GetPaymentReference@9() : Text;
    BEGIN
      OnGetPaymentReference(PaymentReference);
      EXIT(PaymentReference);
    END;

    [External]
    PROCEDURE GetPaymentReferenceLbl@11() : Text;
    BEGIN
      OnGetPaymentReferenceLbl(PaymentReferenceLbl);
      EXIT(PaymentReferenceLbl);
    END;

    [External]
    PROCEDURE GetLegalStatement@60() : Text;
    BEGIN
      SalesSetup.GET;
      EXIT(SalesSetup.GetLegalStatement);
    END;

    [External]
    PROCEDURE GetRemainingAmount@6() : Decimal;
    VAR
      CustLedgerEntry@1000 : Record 21;
    BEGIN
      CustLedgerEntry.SETRANGE("Customer No.","Bill-to Customer No.");
      CustLedgerEntry.SETRANGE("Posting Date","Posting Date");
      CustLedgerEntry.SETRANGE("Document Type",CustLedgerEntry."Document Type"::Invoice);
      CustLedgerEntry.SETRANGE("Document No.","No.");
      CustLedgerEntry.SETAUTOCALCFIELDS("Remaining Amount");

      IF NOT CustLedgerEntry.FINDFIRST THEN
        EXIT(0);

      EXIT(CustLedgerEntry."Remaining Amount");
    END;

    [External]
    PROCEDURE ShowDimensions@4();
    BEGIN
      DimMgt.ShowDimensionSet("Dimension Set ID",STRSUBSTNO('%1 %2',TABLECAPTION,"No."));
    END;

    [External]
    PROCEDURE SetSecurityFilterOnRespCenter@5();
    BEGIN
      IF UserSetupMgt.GetSalesFilter <> '' THEN BEGIN
        FILTERGROUP(2);
        SETRANGE("Responsibility Center",UserSetupMgt.GetSalesFilter);
        FILTERGROUP(0);
      END;
    END;

    [External]
    PROCEDURE GetDocExchStatusStyle@13() : Text;
    BEGIN
      CASE "Document Exchange Status" OF
        "Document Exchange Status"::"Not Sent":
          EXIT('Standard');
        "Document Exchange Status"::"Sent to Document Exchange Service":
          EXIT('Ambiguous');
        "Document Exchange Status"::"Delivered to Recipient":
          EXIT('Favorable');
        ELSE
          EXIT('Unfavorable');
      END;
    END;

    [External]
    PROCEDURE ShowActivityLog@116();
    VAR
      ActivityLog@1000 : Record 710;
    BEGIN
      ActivityLog.ShowEntries(RECORDID);
    END;

    [External]
    PROCEDURE GetSelectedPaymentsText@84() : Text;
    VAR
      PaymentServiceSetup@1000 : Record 1060;
    BEGIN
      EXIT(PaymentServiceSetup.GetSelectedPaymentsText("Payment Service Set ID"));
    END;

    [External]
    PROCEDURE GetWorkDescription@113() : Text;
    BEGIN
      CALCFIELDS("Work Description");
      EXIT(GetWorkDescriptionWorkDescriptionCalculated);
    END;

    [External]
    PROCEDURE GetWorkDescriptionWorkDescriptionCalculated@7() : Text;
    VAR
      TempBlob@1000 : TEMPORARY Record 99008535;
      CR@1004 : Text[1];
    BEGIN
      IF NOT "Work Description".HASVALUE THEN
        EXIT('');

      CR[1] := 10;
      TempBlob.Blob := "Work Description";
      EXIT(TempBlob.ReadAsText(CR,TEXTENCODING::UTF8));
    END;

    [External]
    PROCEDURE GetCurrencySymbol@145() : Text[10];
    VAR
      GeneralLedgerSetup@1000 : Record 98;
      Currency@1001 : Record 4;
    BEGIN
      IF GeneralLedgerSetup.GET THEN
        IF ("Currency Code" = '') OR ("Currency Code" = GeneralLedgerSetup."LCY Code") THEN
          EXIT(GeneralLedgerSetup.GetCurrencySymbol);

      IF Currency.GET("Currency Code") THEN
        EXIT(Currency.GetCurrencySymbol);

      EXIT("Currency Code");
    END;

    [External]
    PROCEDURE DocExchangeStatusIsSent@18() : Boolean;
    BEGIN
      EXIT("Document Exchange Status" <> "Document Exchange Status"::"Not Sent");
    END;

    [External]
    PROCEDURE ShowCanceledOrCorrCrMemo@22();
    BEGIN
      CALCFIELDS(Cancelled,Corrective);
      CASE TRUE OF
        Cancelled:
          ShowCorrectiveCreditMemo;
        Corrective:
          ShowCancelledCreditMemo;
      END;
    END;

    [External]
    PROCEDURE ShowCorrectiveCreditMemo@19();
    VAR
      CancelledDocument@1000 : Record 1900;
      SalesCrMemoHeader@1001 : Record 114;
    BEGIN
      CALCFIELDS(Cancelled);
      IF NOT Cancelled THEN
        EXIT;

      IF CancelledDocument.FindSalesCancelledInvoice("No.") THEN BEGIN
        SalesCrMemoHeader.GET(CancelledDocument."Cancelled By Doc. No.");
        PAGE.RUN(PAGE::"Posted Sales Credit Memo",SalesCrMemoHeader);
      END;
    END;

    [External]
    PROCEDURE ShowCancelledCreditMemo@20();
    VAR
      CancelledDocument@1000 : Record 1900;
      SalesCrMemoHeader@1001 : Record 114;
    BEGIN
      CALCFIELDS(Corrective);
      IF NOT Corrective THEN
        EXIT;

      IF CancelledDocument.FindSalesCorrectiveInvoice("No.") THEN BEGIN
        SalesCrMemoHeader.GET(CancelledDocument."Cancelled Doc. No.");
        PAGE.RUN(PAGE::"Posted Sales Credit Memo",SalesCrMemoHeader);
      END;
    END;

    [External]
    PROCEDURE GetDefaultEmailDocumentName@21() : Text[150];
    BEGIN
      EXIT(DocTxt);
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeEmailRecords@25(VAR ReportSelections@1003 : Record 77;VAR SalesInvoiceHeader@1002 : Record 112;DocTxt@1004 : Text;ShowDialog@1001 : Boolean;VAR IsHandled@1000 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePrintRecords@24(VAR ReportSelections@1003 : Record 77;VAR SalesInvoiceHeader@1002 : Record 112;ShowRequestPage@1001 : Boolean;VAR IsHandled@1000 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeSendProfile@23(VAR ReportSelections@1003 : Record 77;VAR SalesInvoiceHeader@1002 : Record 112;DocTxt@1001 : Text;VAR IsHandled@1000 : Boolean;VAR DocumentSendingProfile@1004 : Record 60);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeSendRecords@16(VAR ReportSelections@1000 : Record 77;VAR SalesInvoiceHeader@1001 : Record 112;DocTxt@1002 : Text;VAR IsHandled@1003 : Boolean);
    BEGIN
    END;

    [Integration(TRUE)]
    LOCAL PROCEDURE OnGetPaymentReference@1214(VAR PaymentReference@1213 : Text);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnGetPaymentReferenceLbl@1213(VAR PaymentReferenceLbl@1213 : Text);
    BEGIN
    END;

    BEGIN
    END.
  }
}

OBJECT Table 113 Sales Invoice Line
{
  OBJECT-PROPERTIES
  {
    Date=02-10-21;
    Time=12:00:00;
    Modified=Yes;
    Version List=NAVW114.30;
  }
  PROPERTIES
  {
    Permissions=TableData 32=r,
                TableData 5802=r;
    OnDelete=VAR
               SalesDocLineComments@1000 : Record 44;
               PostedDeferralHeader@1001 : Record 1704;
             BEGIN
               SalesDocLineComments.SETRANGE("Document Type",SalesDocLineComments."Document Type"::"Posted Invoice");
               SalesDocLineComments.SETRANGE("No.","Document No.");
               SalesDocLineComments.SETRANGE("Document Line No.","Line No.");
               IF NOT SalesDocLineComments.ISEMPTY THEN
                 SalesDocLineComments.DELETEALL;

               PostedDeferralHeader.DeleteHeader(DeferralUtilities.GetSalesDeferralDocType,'','',
                 SalesDocLineComments."Document Type"::"Posted Invoice","Document No.","Line No.");
             END;

    CaptionML=[ENU=Sales Invoice Line;
               ENN=Sales Invoice Line];
    LookupPageID=Page526;
    DrillDownPageID=Page526;
  }
  FIELDS
  {
    { 2   ;   ;Sell-to Customer No.;Code20        ;TableRelation=Customer;
                                                   CaptionML=[ENU=Sell-to Customer No.;
                                                              ENN=Sell-to Customer No.];
                                                   Editable=No }
    { 3   ;   ;Document No.        ;Code20        ;TableRelation="Sales Invoice Header";
                                                   CaptionML=[ENU=Document No.;
                                                              ENN=Document No.] }
    { 4   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              ENN=Line No.] }
    { 5   ;   ;Type                ;Option        ;CaptionML=[ENU=Type;
                                                              ENN=Type];
                                                   OptionCaptionML=[ENU=" ,G/L Account,Item,Resource,Fixed Asset,Charge (Item)";
                                                                    ENN=" ,G/L Account,Item,Resource,Fixed Asset,Charge (Item)"];
                                                   OptionString=[ ,G/L Account,Item,Resource,Fixed Asset,Charge (Item)] }
    { 6   ;   ;No.                 ;Code20        ;TableRelation=IF (Type=CONST(G/L Account)) "G/L Account"
                                                                 ELSE IF (Type=CONST(Item)) Item
                                                                 ELSE IF (Type=CONST(Resource)) Resource
                                                                 ELSE IF (Type=CONST(Fixed Asset)) "Fixed Asset"
                                                                 ELSE IF (Type=CONST("Charge (Item)")) "Item Charge";
                                                   CaptionML=[ENU=No.;
                                                              ENN=No.];
                                                   CaptionClass=GetCaptionClass(FIELDNO("No.")) }
    { 7   ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE (Use As In-Transit=CONST(No));
                                                   CaptionML=[ENU=Location Code;
                                                              ENN=Location Code] }
    { 8   ;   ;Posting Group       ;Code20        ;TableRelation=IF (Type=CONST(Item)) "Inventory Posting Group"
                                                                 ELSE IF (Type=CONST(Fixed Asset)) "FA Posting Group";
                                                   CaptionML=[ENU=Posting Group;
                                                              ENN=Posting Group];
                                                   Editable=No }
    { 10  ;   ;Shipment Date       ;Date          ;CaptionML=[ENU=Shipment Date;
                                                              ENN=Shipment Date] }
    { 11  ;   ;Description         ;Text100       ;CaptionML=[ENU=Description;
                                                              ENN=Description];
                                                   Description=AD_SD }
    { 12  ;   ;Description 2       ;Text50        ;CaptionML=[ENU=Description 2;
                                                              ENN=Description 2] }
    { 13  ;   ;Unit of Measure     ;Text50        ;CaptionML=[ENU=Unit of Measure;
                                                              ENN=Unit of Measure] }
    { 15  ;   ;Quantity            ;Decimal       ;CaptionML=[ENU=Quantity;
                                                              ENN=Quantity];
                                                   DecimalPlaces=0:5 }
    { 22  ;   ;Unit Price          ;Decimal       ;CaptionML=[ENU=Unit Price;
                                                              ENN=Unit Price];
                                                   AutoFormatType=2;
                                                   AutoFormatExpr=GetCurrencyCode;
                                                   CaptionClass=GetCaptionClass(FIELDNO("Unit Price")) }
    { 23  ;   ;Unit Cost (LCY)     ;Decimal       ;CaptionML=[ENU=Unit Cost (LCY);
                                                              ENN=Unit Cost (LCY)];
                                                   AutoFormatType=2 }
    { 25  ;   ;VAT %               ;Decimal       ;CaptionML=[ENU=VAT %;
                                                              ENN=VAT %];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 27  ;   ;Line Discount %     ;Decimal       ;CaptionML=[ENU=Line Discount %;
                                                              ENN=Line Discount %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 28  ;   ;Line Discount Amount;Decimal       ;CaptionML=[ENU=Line Discount Amount;
                                                              ENN=Line Discount Amount];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 29  ;   ;Amount              ;Decimal       ;CaptionML=[ENU=Amount;
                                                              ENN=Amount];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 30  ;   ;Amount Including VAT;Decimal       ;CaptionML=[ENU=Amount Including VAT;
                                                              ENN=Amount Including VAT];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 32  ;   ;Allow Invoice Disc. ;Boolean       ;InitValue=Yes;
                                                   CaptionML=[ENU=Allow Invoice Disc.;
                                                              ENN=Allow Invoice Disc.] }
    { 34  ;   ;Gross Weight        ;Decimal       ;CaptionML=[ENU=Gross Weight;
                                                              ENN=Gross Weight];
                                                   DecimalPlaces=0:5 }
    { 35  ;   ;Net Weight          ;Decimal       ;CaptionML=[ENU=Net Weight;
                                                              ENN=Net Weight];
                                                   DecimalPlaces=0:5 }
    { 36  ;   ;Units per Parcel    ;Decimal       ;CaptionML=[ENU=Units per Parcel;
                                                              ENN=Units per Parcel];
                                                   DecimalPlaces=0:5 }
    { 37  ;   ;Unit Volume         ;Decimal       ;CaptionML=[ENU=Unit Volume;
                                                              ENN=Unit Volume];
                                                   DecimalPlaces=0:5 }
    { 38  ;   ;Appl.-to Item Entry ;Integer       ;AccessByPermission=TableData 27=R;
                                                   CaptionML=[ENU=Appl.-to Item Entry;
                                                              ENN=Appl.-to Item Entry] }
    { 40  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   CaptionML=[ENU=Shortcut Dimension 1 Code;
                                                              ENN=Shortcut Dimension 1 Code];
                                                   CaptionClass='1,2,1' }
    { 41  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   CaptionML=[ENU=Shortcut Dimension 2 Code;
                                                              ENN=Shortcut Dimension 2 Code];
                                                   CaptionClass='1,2,2' }
    { 42  ;   ;Customer Price Group;Code10        ;TableRelation="Customer Price Group";
                                                   CaptionML=[ENU=Customer Price Group;
                                                              ENN=Customer Price Group] }
    { 45  ;   ;Job No.             ;Code20        ;TableRelation=Job;
                                                   CaptionML=[ENU=Job No.;
                                                              ENN=Job No.] }
    { 52  ;   ;Work Type Code      ;Code10        ;TableRelation="Work Type";
                                                   CaptionML=[ENU=Work Type Code;
                                                              ENN=Work Type Code] }
    { 63  ;   ;Shipment No.        ;Code20        ;CaptionML=[ENU=Shipment No.;
                                                              ENN=Shipment No.];
                                                   Editable=No }
    { 64  ;   ;Shipment Line No.   ;Integer       ;CaptionML=[ENU=Shipment Line No.;
                                                              ENN=Shipment Line No.];
                                                   Editable=No }
    { 65  ;   ;Order No.           ;Code20        ;CaptionML=[ENU=Order No.;
                                                              ENN=Order No.] }
    { 66  ;   ;Order Line No.      ;Integer       ;CaptionML=[ENU=Order Line No.;
                                                              ENN=Order Line No.] }
    { 68  ;   ;Bill-to Customer No.;Code20        ;TableRelation=Customer;
                                                   CaptionML=[ENU=Bill-to Customer No.;
                                                              ENN=Bill-to Customer No.];
                                                   Editable=No }
    { 69  ;   ;Inv. Discount Amount;Decimal       ;CaptionML=[ENU=Inv. Discount Amount;
                                                              ENN=Inv. Discount Amount];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 73  ;   ;Drop Shipment       ;Boolean       ;AccessByPermission=TableData 223=R;
                                                   CaptionML=[ENU=Drop Shipment;
                                                              ENN=Drop Shipment] }
    { 74  ;   ;Gen. Bus. Posting Group;Code20     ;TableRelation="Gen. Business Posting Group";
                                                   CaptionML=[ENU=Gen. Bus. Posting Group;
                                                              ENN=Gen. Bus. Posting Group] }
    { 75  ;   ;Gen. Prod. Posting Group;Code20    ;TableRelation="Gen. Product Posting Group";
                                                   CaptionML=[ENU=Gen. Prod. Posting Group;
                                                              ENN=Gen. Prod. Posting Group] }
    { 77  ;   ;VAT Calculation Type;Option        ;CaptionML=[ENU=VAT Calculation Type;
                                                              ENN=VAT Calculation Type];
                                                   OptionCaptionML=[ENU=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                                    ENN=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax];
                                                   OptionString=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax }
    { 78  ;   ;Transaction Type    ;Code10        ;TableRelation="Transaction Type";
                                                   CaptionML=[ENU=Transaction Type;
                                                              ENN=Transaction Nature Code] }
    { 79  ;   ;Transport Method    ;Code10        ;TableRelation="Transport Method";
                                                   CaptionML=[ENU=Transport Method;
                                                              ENN=Transport Method] }
    { 80  ;   ;Attached to Line No.;Integer       ;TableRelation="Sales Invoice Line"."Line No." WHERE (Document No.=FIELD(Document No.));
                                                   CaptionML=[ENU=Attached to Line No.;
                                                              ENN=Attached to Line No.] }
    { 81  ;   ;Exit Point          ;Code10        ;TableRelation="Entry/Exit Point";
                                                   CaptionML=[ENU=Exit Point;
                                                              ENN=Exit Point] }
    { 82  ;   ;Area                ;Code10        ;TableRelation=Area;
                                                   CaptionML=[ENU=Area;
                                                              ENN=Area] }
    { 83  ;   ;Transaction Specification;Code10   ;TableRelation="Transaction Specification";
                                                   CaptionML=[ENU=Transaction Specification;
                                                              ENN=Transaction Specification] }
    { 84  ;   ;Tax Category        ;Code10        ;CaptionML=[ENU=Tax Category;
                                                              ENN=Tax Category] }
    { 85  ;   ;Tax Area Code       ;Code20        ;TableRelation="Tax Area";
                                                   CaptionML=[ENU=Tax Area Code;
                                                              ENN=VAT Area Code] }
    { 86  ;   ;Tax Liable          ;Boolean       ;CaptionML=[ENU=Tax Liable;
                                                              ENN=VAT Liable] }
    { 87  ;   ;Tax Group Code      ;Code20        ;TableRelation="Tax Group";
                                                   CaptionML=[ENU=Tax Group Code;
                                                              ENN=VAT Group Code] }
    { 88  ;   ;VAT Clause Code     ;Code20        ;TableRelation="VAT Clause";
                                                   CaptionML=[ENU=VAT Clause Code;
                                                              ENN=VAT Clause Code] }
    { 89  ;   ;VAT Bus. Posting Group;Code20      ;TableRelation="VAT Business Posting Group";
                                                   CaptionML=[ENU=VAT Bus. Posting Group;
                                                              ENN=VAT Bus. Posting Group] }
    { 90  ;   ;VAT Prod. Posting Group;Code20     ;TableRelation="VAT Product Posting Group";
                                                   CaptionML=[ENU=VAT Prod. Posting Group;
                                                              ENN=VAT Prod. Posting Group] }
    { 97  ;   ;Blanket Order No.   ;Code20        ;TableRelation="Sales Header".No. WHERE (Document Type=CONST(Blanket Order));
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Blanket Order No.;
                                                              ENN=Blanket Order No.] }
    { 98  ;   ;Blanket Order Line No.;Integer     ;TableRelation="Sales Line"."Line No." WHERE (Document Type=CONST(Blanket Order),
                                                                                                Document No.=FIELD(Blanket Order No.));
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Blanket Order Line No.;
                                                              ENN=Blanket Order Line No.] }
    { 99  ;   ;VAT Base Amount     ;Decimal       ;CaptionML=[ENU=VAT Base Amount;
                                                              ENN=VAT Base Amount];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 100 ;   ;Unit Cost           ;Decimal       ;CaptionML=[ENU=Unit Cost;
                                                              ENN=Unit Cost];
                                                   Editable=No;
                                                   AutoFormatType=2;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 101 ;   ;System-Created Entry;Boolean       ;CaptionML=[ENU=System-Created Entry;
                                                              ENN=System-Created Entry];
                                                   Editable=No }
    { 103 ;   ;Line Amount         ;Decimal       ;CaptionML=[ENU=Line Amount;
                                                              ENN=Line Amount];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode;
                                                   CaptionClass=GetCaptionClass(FIELDNO("Line Amount")) }
    { 104 ;   ;VAT Difference      ;Decimal       ;CaptionML=[ENU=VAT Difference;
                                                              ENN=VAT Difference];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 106 ;   ;VAT Identifier      ;Code20        ;CaptionML=[ENU=VAT Identifier;
                                                              ENN=VAT Identifier];
                                                   Editable=No }
    { 107 ;   ;IC Partner Ref. Type;Option        ;CaptionML=[ENU=IC Partner Ref. Type;
                                                              ENN=IC Partner Ref. Type];
                                                   OptionCaptionML=[ENU=" ,G/L Account,Item,,,Charge (Item),Cross reference,Common Item No.";
                                                                    ENN=" ,G/L Account,Item,,,Charge (Item),Cross reference,Common Item No."];
                                                   OptionString=[ ,G/L Account,Item,,,Charge (Item),Cross reference,Common Item No.] }
    { 108 ;   ;IC Partner Reference;Code20        ;CaptionML=[ENU=IC Partner Reference;
                                                              ENN=IC Partner Reference] }
    { 123 ;   ;Prepayment Line     ;Boolean       ;CaptionML=[ENU=Prepayment Line;
                                                              ENN=Prepayment Line];
                                                   Editable=No }
    { 130 ;   ;IC Partner Code     ;Code20        ;TableRelation="IC Partner";
                                                   CaptionML=[ENU=IC Partner Code;
                                                              ENN=IC Partner Code] }
    { 131 ;   ;Posting Date        ;Date          ;CaptionML=[ENU=Posting Date;
                                                              ENN=Posting Date] }
    { 145 ;   ;Pmt. Discount Amount;Decimal       ;CaptionML=[ENU=Pmt. Discount Amount;
                                                              ENN=Pmt. Discount Amount];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 180 ;   ;Line Discount Calculation;Option   ;CaptionML=[ENU=Line Discount Calculation;
                                                              ENN=Line Discount Calculation];
                                                   OptionCaptionML=[ENU=None,%,Amount;
                                                                    ENN=None,%,Amount];
                                                   OptionString=None,%,Amount }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnLookup=BEGIN
                                                              ShowDimensions;
                                                            END;

                                                   CaptionML=[ENU=Dimension Set ID;
                                                              ENN=Dimension Set ID];
                                                   Editable=Yes }
    { 1001;   ;Job Task No.        ;Code20        ;TableRelation="Job Task"."Job Task No." WHERE (Job No.=FIELD(Job No.));
                                                   CaptionML=[ENU=Job Task No.;
                                                              ENN=Job Task No.];
                                                   Editable=No }
    { 1002;   ;Job Contract Entry No.;Integer     ;CaptionML=[ENU=Job Contract Entry No.;
                                                              ENN=Job Contract Entry No.];
                                                   Editable=No }
    { 1700;   ;Deferral Code       ;Code10        ;TableRelation="Deferral Template"."Deferral Code";
                                                   CaptionML=[ENU=Deferral Code;
                                                              ENN=Deferral Code] }
    { 5402;   ;Variant Code        ;Code10        ;TableRelation=IF (Type=CONST(Item)) "Item Variant".Code WHERE (Item No.=FIELD(No.));
                                                   CaptionML=[ENU=Variant Code;
                                                              ENN=Variant Code] }
    { 5403;   ;Bin Code            ;Code20        ;TableRelation=Bin.Code WHERE (Location Code=FIELD(Location Code),
                                                                                 Item Filter=FIELD(No.),
                                                                                 Variant Filter=FIELD(Variant Code));
                                                   CaptionML=[ENU=Bin Code;
                                                              ENN=Bin Code] }
    { 5404;   ;Qty. per Unit of Measure;Decimal   ;CaptionML=[ENU=Qty. per Unit of Measure;
                                                              ENN=Qty. per Unit of Measure];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5407;   ;Unit of Measure Code;Code10        ;TableRelation=IF (Type=CONST(Item)) "Item Unit of Measure".Code WHERE (Item No.=FIELD(No.))
                                                                 ELSE "Unit of Measure";
                                                   CaptionML=[ENU=Unit of Measure Code;
                                                              ENN=Unit of Measure Code] }
    { 5415;   ;Quantity (Base)     ;Decimal       ;CaptionML=[ENU=Quantity (Base);
                                                              ENN=Quantity (Base)];
                                                   DecimalPlaces=0:5 }
    { 5600;   ;FA Posting Date     ;Date          ;CaptionML=[ENU=FA Posting Date;
                                                              ENN=FA Posting Date] }
    { 5602;   ;Depreciation Book Code;Code10      ;TableRelation="Depreciation Book";
                                                   CaptionML=[ENU=Depreciation Book Code;
                                                              ENN=Depreciation Book Code] }
    { 5605;   ;Depr. until FA Posting Date;Boolean;CaptionML=[ENU=Depr. until FA Posting Date;
                                                              ENN=Depr. until FA Posting Date] }
    { 5612;   ;Duplicate in Depreciation Book;Code10;
                                                   TableRelation="Depreciation Book";
                                                   CaptionML=[ENU=Duplicate in Depreciation Book;
                                                              ENN=Duplicate in Depreciation Book] }
    { 5613;   ;Use Duplication List;Boolean       ;CaptionML=[ENU=Use Duplication List;
                                                              ENN=Use Duplication List] }
    { 5700;   ;Responsibility Center;Code10       ;TableRelation="Responsibility Center";
                                                   CaptionML=[ENU=Responsibility Center;
                                                              ENN=Responsibility Centre] }
    { 5705;   ;Cross-Reference No. ;Code20        ;AccessByPermission=TableData 5717=R;
                                                   CaptionML=[ENU=Cross-Reference No.;
                                                              ENN=Cross-Reference No.] }
    { 5706;   ;Unit of Measure (Cross Ref.);Code10;TableRelation=IF (Type=CONST(Item)) "Item Unit of Measure".Code WHERE (Item No.=FIELD(No.));
                                                   CaptionML=[ENU=Unit of Measure (Cross Ref.);
                                                              ENN=Unit of Measure (Cross Ref.)] }
    { 5707;   ;Cross-Reference Type;Option        ;CaptionML=[ENU=Cross-Reference Type;
                                                              ENN=Cross-Reference Type];
                                                   OptionCaptionML=[ENU=" ,Customer,Vendor,Bar Code";
                                                                    ENN=" ,Customer,Vendor,Bar Code"];
                                                   OptionString=[ ,Customer,Vendor,Bar Code] }
    { 5708;   ;Cross-Reference Type No.;Code30    ;CaptionML=[ENU=Cross-Reference Type No.;
                                                              ENN=Cross-Reference Type No.] }
    { 5709;   ;Item Category Code  ;Code20        ;TableRelation=IF (Type=CONST(Item)) "Item Category";
                                                   CaptionML=[ENU=Item Category Code;
                                                              ENN=Item Category Code] }
    { 5710;   ;Nonstock            ;Boolean       ;CaptionML=[ENU=Catalog;
                                                              ENN=Catalogue] }
    { 5711;   ;Purchasing Code     ;Code10        ;TableRelation=Purchasing;
                                                   CaptionML=[ENU=Purchasing Code;
                                                              ENN=Purchasing Code] }
    { 5712;   ;Product Group Code  ;Code10        ;TableRelation="Product Group".Code WHERE (Item Category Code=FIELD(Item Category Code));
                                                   ValidateTableRelation=No;
                                                   ObsoleteState=Removed;
                                                   ObsoleteReason=Product Groups became first level children of Item Categories.;
                                                   CaptionML=[ENU=Product Group Code;
                                                              ENN=Product Group Code] }
    { 5811;   ;Appl.-from Item Entry;Integer      ;AccessByPermission=TableData 27=R;
                                                   CaptionML=[ENU=Appl.-from Item Entry;
                                                              ENN=Appl.-from Item Entry];
                                                   MinValue=0 }
    { 6608;   ;Return Reason Code  ;Code10        ;TableRelation="Return Reason";
                                                   CaptionML=[ENU=Return Reason Code;
                                                              ENN=Return Reason Code] }
    { 7001;   ;Allow Line Disc.    ;Boolean       ;InitValue=Yes;
                                                   CaptionML=[ENU=Allow Line Disc.;
                                                              ENN=Allow Line Disc.] }
    { 7002;   ;Customer Disc. Group;Code20        ;TableRelation="Customer Discount Group";
                                                   CaptionML=[ENU=Customer Disc. Group;
                                                              ENN=Customer Disc. Group] }
    { 7004;   ;Price description   ;Text80        ;CaptionML=[ENU=Price description;
                                                              ENN=Price description] }
    { 50001;  ;Billing Type        ;Option        ;OptionCaptionML=ENU=" ,Event Driven,Date Driven,Time Sheet Driven,Completion Driven";
                                                   OptionString=[ ,Event Driven,Date Driven,Time Sheet Driven,Completion Driven];
                                                   Description=AD_SD }
    { 50004;  ;Scope1              ;Text150       ;Description=AD_SD }
    { 50005;  ;Scope2              ;Text150       ;Description=AD_SD }
    { 50006;  ;Scope3              ;Text150       ;Description=AD_SD }
    { 50007;  ;Scope4              ;Text150       ;Description=AD_SD }
  }
  KEYS
  {
    {    ;Document No.,Line No.                   ;Clustered=Yes }
    {    ;Blanket Order No.,Blanket Order Line No. }
    {    ;Sell-to Customer No.                     }
    { No ;Sell-to Customer No.,Type,Document No.  ;MaintainSQLIndex=No }
    {    ;Shipment No.,Shipment Line No.           }
    {    ;Job Contract Entry No.                   }
    {    ;Bill-to Customer No.                     }
    {    ;Order No.,Order Line No.,Posting Date    }
    {    ;Document No.,Location Code              ;SumIndexFields=Amount,Amount Including VAT;
                                                   MaintainSQLIndex=No }
  }
  FIELDGROUPS
  {
    { 1   ;Brick               ;No.,Description,Line Amount,Price description,Quantity,Unit of Measure Code }
  }
  CODE
  {
    VAR
      SalesInvoiceHeader@1002 : Record 112;
      Currency@1003 : Record 4;
      DimMgt@1001 : Codeunit 408;
      UOMMgt@1005 : Codeunit 5402;
      DeferralUtilities@1000 : Codeunit 1720;
      PriceDescriptionTxt@1004 : TextConst '@@@={Locked};ENU=x%1 (%2%3/%4);ENN=x%1 (%2%3/%4)';
      PriceDescriptionWithLineDiscountTxt@1066 : TextConst '@@@={Locked};ENU=x%1 (%2%3/%4) - %5%;ENN=x%1 (%2%3/%4) - %5%';

    [External]
    PROCEDURE GetCurrencyCode@1() : Code[10];
    BEGIN
      GetHeader;
      EXIT(SalesInvoiceHeader."Currency Code");
    END;

    [External]
    PROCEDURE ShowDimensions@25();
    BEGIN
      DimMgt.ShowDimensionSet("Dimension Set ID",STRSUBSTNO('%1 %2 %3',TABLECAPTION,"Document No.","Line No."));
    END;

    [External]
    PROCEDURE ShowItemTrackingLines@3();
    VAR
      ItemTrackingDocMgt@1000 : Codeunit 6503;
    BEGIN
      ItemTrackingDocMgt.ShowItemTrackingForInvoiceLine(RowID1);
    END;

    [External]
    PROCEDURE CalcVATAmountLines@2(SalesInvHeader@1000 : Record 112;VAR TempVATAmountLine@1001 : TEMPORARY Record 290);
    BEGIN
      TempVATAmountLine.DELETEALL;
      SETRANGE("Document No.",SalesInvHeader."No.");
      IF FIND('-') THEN
        REPEAT
          TempVATAmountLine.INIT;
          TempVATAmountLine.CopyFromSalesInvLine(Rec);
          TempVATAmountLine.InsertLine;
        UNTIL NEXT = 0;
    END;

    [External]
    PROCEDURE GetLineAmountExclVAT@149() : Decimal;
    BEGIN
      GetHeader;
      IF NOT SalesInvoiceHeader."Prices Including VAT" THEN
        EXIT("Line Amount");

      EXIT(ROUND("Line Amount" / (1 + "VAT %" / 100),Currency."Amount Rounding Precision"));
    END;

    [External]
    PROCEDURE GetLineAmountInclVAT@151() : Decimal;
    BEGIN
      GetHeader;
      IF SalesInvoiceHeader."Prices Including VAT" THEN
        EXIT("Line Amount");

      EXIT(ROUND("Line Amount" * (1 + "VAT %" / 100),Currency."Amount Rounding Precision"));
    END;

    LOCAL PROCEDURE GetHeader@15();
    BEGIN
      IF SalesInvoiceHeader."No." = "Document No." THEN
        EXIT;
      IF NOT SalesInvoiceHeader.GET("Document No.") THEN
        SalesInvoiceHeader.INIT;

      IF SalesInvoiceHeader."Currency Code" = '' THEN
        Currency.InitRoundingPrecision
      ELSE
        IF NOT Currency.GET(SalesInvoiceHeader."Currency Code") THEN
          Currency.InitRoundingPrecision;
    END;

    LOCAL PROCEDURE GetFieldCaption@31(FieldNumber@1000 : Integer) : Text[100];
    VAR
      Field@1001 : Record 2000000041;
    BEGIN
      Field.GET(DATABASE::"Sales Invoice Line",FieldNumber);
      EXIT(Field."Field Caption");
    END;

    [External]
    PROCEDURE GetCaptionClass@34(FieldNumber@1000 : Integer) : Text[80];
    BEGIN
      GetHeader;
      CASE FieldNumber OF
        FIELDNO("No."):
          EXIT(STRSUBSTNO('3,%1',GetFieldCaption(FieldNumber)));
        ELSE BEGIN
          IF SalesInvoiceHeader."Prices Including VAT" THEN
            EXIT('2,1,' + GetFieldCaption(FieldNumber));
          EXIT('2,0,' + GetFieldCaption(FieldNumber));
        END
      END;
    END;

    [External]
    PROCEDURE RowID1@44() : Text[250];
    VAR
      ItemTrackingMgt@1000 : Codeunit 6500;
    BEGIN
      EXIT(ItemTrackingMgt.ComposeRowID(DATABASE::"Sales Invoice Line",
          0,"Document No.",'',0,"Line No."));
    END;

    [External]
    PROCEDURE GetSalesShptLines@4(VAR TempSalesShptLine@1000 : TEMPORARY Record 111);
    VAR
      SalesShptLine@1003 : Record 111;
      ItemLedgEntry@1002 : Record 32;
      ValueEntry@1001 : Record 5802;
    BEGIN
      TempSalesShptLine.RESET;
      TempSalesShptLine.DELETEALL;

      IF Type <> Type::Item THEN
        EXIT;

      FilterPstdDocLineValueEntries(ValueEntry);
      IF ValueEntry.FINDSET THEN
        REPEAT
          ItemLedgEntry.GET(ValueEntry."Item Ledger Entry No.");
          IF ItemLedgEntry."Document Type" = ItemLedgEntry."Document Type"::"Sales Shipment" THEN
            IF SalesShptLine.GET(ItemLedgEntry."Document No.",ItemLedgEntry."Document Line No.") THEN BEGIN
              TempSalesShptLine.INIT;
              TempSalesShptLine := SalesShptLine;
              IF TempSalesShptLine.INSERT THEN;
            END;
        UNTIL ValueEntry.NEXT = 0;
    END;

    [External]
    PROCEDURE CalcShippedSaleNotReturned@5(VAR ShippedQtyNotReturned@1006 : Decimal;VAR RevUnitCostLCY@1004 : Decimal;ExactCostReverse@1003 : Boolean);
    VAR
      TempItemLedgEntry@1002 : TEMPORARY Record 32;
      TotalCostLCY@1009 : Decimal;
      TotalQtyBase@1007 : Decimal;
    BEGIN
      ShippedQtyNotReturned := 0;
      IF (Type <> Type::Item) OR (Quantity <= 0) THEN BEGIN
        RevUnitCostLCY := "Unit Cost (LCY)";
        EXIT;
      END;

      RevUnitCostLCY := 0;
      GetItemLedgEntries(TempItemLedgEntry,FALSE);
      IF TempItemLedgEntry.FINDSET THEN
        REPEAT
          ShippedQtyNotReturned := ShippedQtyNotReturned - TempItemLedgEntry."Shipped Qty. Not Returned";
          IF ExactCostReverse THEN BEGIN
            TempItemLedgEntry.CALCFIELDS("Cost Amount (Expected)","Cost Amount (Actual)");
            TotalCostLCY :=
              TotalCostLCY + TempItemLedgEntry."Cost Amount (Expected)" + TempItemLedgEntry."Cost Amount (Actual)";
            TotalQtyBase := TotalQtyBase + TempItemLedgEntry.Quantity;
          END;
        UNTIL TempItemLedgEntry.NEXT = 0;

      IF ExactCostReverse AND (ShippedQtyNotReturned <> 0) AND (TotalQtyBase <> 0) THEN
        RevUnitCostLCY := ABS(TotalCostLCY / TotalQtyBase) * "Qty. per Unit of Measure"
      ELSE
        RevUnitCostLCY := "Unit Cost (LCY)";
      ShippedQtyNotReturned := CalcQty(ShippedQtyNotReturned);

      IF ShippedQtyNotReturned > Quantity THEN
        ShippedQtyNotReturned := Quantity;
    END;

    LOCAL PROCEDURE CalcQty@11(QtyBase@1000 : Decimal) : Decimal;
    BEGIN
      IF "Qty. per Unit of Measure" = 0 THEN
        EXIT(QtyBase);
      EXIT(ROUND(QtyBase / "Qty. per Unit of Measure",UOMMgt.QtyRndPrecision));
    END;

    [External]
    PROCEDURE GetItemLedgEntries@6(VAR TempItemLedgEntry@1000 : TEMPORARY Record 32;SetQuantity@1003 : Boolean);
    VAR
      ItemLedgEntry@1002 : Record 32;
      ValueEntry@1001 : Record 5802;
    BEGIN
      IF SetQuantity THEN BEGIN
        TempItemLedgEntry.RESET;
        TempItemLedgEntry.DELETEALL;

        IF Type <> Type::Item THEN
          EXIT;
      END;

      FilterPstdDocLineValueEntries(ValueEntry);
      ValueEntry.SETFILTER("Invoiced Quantity",'<>0');
      IF ValueEntry.FINDSET THEN
        REPEAT
          ItemLedgEntry.GET(ValueEntry."Item Ledger Entry No.");
          TempItemLedgEntry := ItemLedgEntry;
          IF SetQuantity THEN BEGIN
            TempItemLedgEntry.Quantity := ValueEntry."Invoiced Quantity";
            IF ABS(TempItemLedgEntry."Shipped Qty. Not Returned") > ABS(TempItemLedgEntry.Quantity) THEN
              TempItemLedgEntry."Shipped Qty. Not Returned" := TempItemLedgEntry.Quantity;
          END;
          OnGetItemLedgEntriesOnBeforeTempItemLedgEntryInsert(TempItemLedgEntry,ValueEntry,SetQuantity);
          IF TempItemLedgEntry.INSERT THEN;
        UNTIL ValueEntry.NEXT = 0;
    END;

    [External]
    PROCEDURE FilterPstdDocLineValueEntries@7(VAR ValueEntry@1000 : Record 5802);
    BEGIN
      ValueEntry.RESET;
      ValueEntry.SETCURRENTKEY("Document No.");
      ValueEntry.SETRANGE("Document No.","Document No.");
      ValueEntry.SETRANGE("Document Type",ValueEntry."Document Type"::"Sales Invoice");
      ValueEntry.SETRANGE("Document Line No.","Line No.");
    END;

    [External]
    PROCEDURE ShowItemShipmentLines@9();
    VAR
      TempSalesShptLine@1000 : TEMPORARY Record 111;
    BEGIN
      IF Type = Type::Item THEN BEGIN
        GetSalesShptLines(TempSalesShptLine);
        PAGE.RUNMODAL(0,TempSalesShptLine);
      END;
    END;

    [External]
    PROCEDURE ShowLineComments@8();
    VAR
      SalesCommentLine@1000 : Record 44;
    BEGIN
      SalesCommentLine.ShowComments(SalesCommentLine."Document Type"::"Posted Invoice","Document No.","Line No.");
    END;

    [External]
    PROCEDURE ShowShortcutDimCode@27(VAR ShortcutDimCode@1000 : ARRAY [8] OF Code[20]);
    BEGIN
      DimMgt.GetShortcutDimensions("Dimension Set ID",ShortcutDimCode);
    END;

    [External]
    PROCEDURE InitFromSalesLine@12(SalesInvHeader@1002 : Record 112;SalesLine@1001 : Record 37);
    BEGIN
      INIT;
      TRANSFERFIELDS(SalesLine);
      IF ("No." = '') AND (Type IN [Type::"G/L Account"..Type::"Charge (Item)"]) THEN
        Type := Type::" ";
      "Posting Date" := SalesInvHeader."Posting Date";
      "Document No." := SalesInvHeader."No.";
      Quantity := SalesLine."Qty. to Invoice";
      "Quantity (Base)" := SalesLine."Qty. to Invoice (Base)";

      OnAfterInitFromSalesLine(Rec,SalesInvHeader,SalesLine);
    END;

    [External]
    PROCEDURE ShowDeferrals@13();
    BEGIN
      DeferralUtilities.OpenLineScheduleView(
        "Deferral Code",DeferralUtilities.GetSalesDeferralDocType,'','',
        GetDocumentType,"Document No.","Line No.");
    END;

    [External]
    PROCEDURE UpdatePriceDescription@143();
    VAR
      Currency@1000 : Record 4;
    BEGIN
      "Price description" := '';
      IF Type IN [Type::"Charge (Item)",Type::"Fixed Asset",Type::Item,Type::Resource] THEN BEGIN
        IF "Line Discount %" = 0 THEN
          "Price description" := STRSUBSTNO(
              PriceDescriptionTxt,Quantity,Currency.ResolveGLCurrencySymbol(GetCurrencyCode),
              "Unit Price","Unit of Measure")
        ELSE
          "Price description" := STRSUBSTNO(
              PriceDescriptionWithLineDiscountTxt,Quantity,Currency.ResolveGLCurrencySymbol(GetCurrencyCode),
              "Unit Price","Unit of Measure","Line Discount %")
      END;
    END;

    [External]
    PROCEDURE FormatType@144() : Text;
    VAR
      SalesLine@1000 : Record 37;
    BEGIN
      IF Type = Type::" " THEN
        EXIT(SalesLine.FormatType);

      EXIT(FORMAT(Type));
    END;

    [External]
    PROCEDURE GetDocumentType@14() : Integer;
    VAR
      SalesCommentLine@1000 : Record 44;
    BEGIN
      EXIT(SalesCommentLine."Document Type"::"Posted Invoice")
    END;

    [External]
    PROCEDURE HasTypeToFillMandatoryFields@103() : Boolean;
    BEGIN
      EXIT(Type <> Type::" ");
    END;

    [External]
    PROCEDURE IsCancellationSupported@29() : Boolean;
    BEGIN
      EXIT(Type IN [Type::" ",Type::Item,Type::"G/L Account",Type::"Charge (Item)"]);
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterInitFromSalesLine@10(VAR SalesInvLine@1002 : Record 113;SalesInvHeader@1000 : Record 112;SalesLine@1001 : Record 37);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnGetItemLedgEntriesOnBeforeTempItemLedgEntryInsert@16(VAR TempItemLedgerEntry@1000 : TEMPORARY Record 32;ValueEntry@1001 : Record 5802;SetQuantity@1002 : Boolean);
    BEGIN
    END;

    BEGIN
    END.
  }
}

OBJECT Table 114 Sales Cr.Memo Header
{
  OBJECT-PROPERTIES
  {
    Date=02-10-21;
    Time=12:00:00;
    Modified=Yes;
    Version List=NAVW114.30;
  }
  PROPERTIES
  {
    DataCaptionFields=No.,Sell-to Customer Name;
    OnDelete=VAR
               PostedDeferralHeader@1002 : Record 1704;
               PostSalesDelete@1000 : Codeunit 363;
               DeferralUtilities@1001 : Codeunit 1720;
             BEGIN
               PostSalesDelete.IsDocumentDeletionAllowed("Posting Date");
               TESTFIELD("No. Printed");
               LOCKTABLE;
               PostSalesDelete.DeleteSalesCrMemoLines(Rec);

               SalesCommentLine.SETRANGE("Document Type",SalesCommentLine."Document Type"::"Posted Credit Memo");
               SalesCommentLine.SETRANGE("No.","No.");
               SalesCommentLine.DELETEALL;

               ApprovalsMgmt.DeletePostedApprovalEntries(RECORDID);
               PostedDeferralHeader.DeleteForDoc(DeferralUtilities.GetSalesDeferralDocType,'','',
                 SalesCommentLine."Document Type"::"Posted Credit Memo","No.");
             END;

    CaptionML=[ENU=Sales Cr.Memo Header;
               ENN=Sales Cr.Memo Header];
    LookupPageID=Page144;
    DrillDownPageID=Page144;
  }
  FIELDS
  {
    { 2   ;   ;Sell-to Customer No.;Code20        ;TableRelation=Customer;
                                                   CaptionML=[ENU=Sell-to Customer No.;
                                                              ENN=Sell-to Customer No.];
                                                   NotBlank=Yes }
    { 3   ;   ;No.                 ;Code20        ;CaptionML=[ENU=No.;
                                                              ENN=No.] }
    { 4   ;   ;Bill-to Customer No.;Code20        ;TableRelation=Customer;
                                                   CaptionML=[ENU=Bill-to Customer No.;
                                                              ENN=Bill-to Customer No.];
                                                   NotBlank=Yes }
    { 5   ;   ;Bill-to Name        ;Text100       ;CaptionML=[ENU=Bill-to Name;
                                                              ENN=Bill-to Name];
                                                   Description=AD_SD }
    { 6   ;   ;Bill-to Name 2      ;Text50        ;CaptionML=[ENU=Bill-to Name 2;
                                                              ENN=Bill-to Name 2] }
    { 7   ;   ;Bill-to Address     ;Text100       ;CaptionML=[ENU=Bill-to Address;
                                                              ENN=Bill-to Address];
                                                   Description=AD_SD }
    { 8   ;   ;Bill-to Address 2   ;Text60        ;CaptionML=[ENU=Bill-to Address 2;
                                                              ENN=Bill-to Address 2];
                                                   Description=AD_SD }
    { 9   ;   ;Bill-to City        ;Text30        ;TableRelation="Post Code".City;
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Bill-to City;
                                                              ENN=Bill-to City] }
    { 10  ;   ;Bill-to Contact     ;Text100       ;CaptionML=[ENU=Bill-to Contact;
                                                              ENN=Bill-to Contact] }
    { 11  ;   ;Your Reference      ;Text35        ;CaptionML=[ENU=Your Reference;
                                                              ENN=Your Reference] }
    { 12  ;   ;Ship-to Code        ;Code10        ;TableRelation="Ship-to Address".Code WHERE (Customer No.=FIELD(Sell-to Customer No.));
                                                   CaptionML=[ENU=Ship-to Code;
                                                              ENN=Ship-to Code] }
    { 13  ;   ;Ship-to Name        ;Text100       ;CaptionML=[ENU=Ship-to Name;
                                                              ENN=Ship-to Name];
                                                   Description=AD_SD }
    { 14  ;   ;Ship-to Name 2      ;Text50        ;CaptionML=[ENU=Ship-to Name 2;
                                                              ENN=Ship-to Name 2] }
    { 15  ;   ;Ship-to Address     ;Text100       ;CaptionML=[ENU=Ship-to Address;
                                                              ENN=Ship-to Address];
                                                   Description=AD_SD }
    { 16  ;   ;Ship-to Address 2   ;Text60        ;CaptionML=[ENU=Ship-to Address 2;
                                                              ENN=Ship-to Address 2];
                                                   Description=AD_SD }
    { 17  ;   ;Ship-to City        ;Text30        ;TableRelation="Post Code".City;
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Ship-to City;
                                                              ENN=Ship-to City] }
    { 18  ;   ;Ship-to Contact     ;Text100       ;CaptionML=[ENU=Ship-to Contact;
                                                              ENN=Ship-to Contact] }
    { 20  ;   ;Posting Date        ;Date          ;CaptionML=[ENU=Posting Date;
                                                              ENN=Posting Date] }
    { 21  ;   ;Shipment Date       ;Date          ;CaptionML=[ENU=Shipment Date;
                                                              ENN=Shipment Date] }
    { 22  ;   ;Posting Description ;Text100       ;CaptionML=[ENU=Posting Description;
                                                              ENN=Posting Description] }
    { 23  ;   ;Payment Terms Code  ;Code10        ;TableRelation="Payment Terms";
                                                   CaptionML=[ENU=Payment Terms Code;
                                                              ENN=Payment Terms Code] }
    { 24  ;   ;Due Date            ;Date          ;CaptionML=[ENU=Due Date;
                                                              ENN=Due Date] }
    { 25  ;   ;Payment Discount %  ;Decimal       ;CaptionML=[ENU=Payment Discount %;
                                                              ENN=Payment Discount %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 26  ;   ;Pmt. Discount Date  ;Date          ;CaptionML=[ENU=Pmt. Discount Date;
                                                              ENN=Pmt. Discount Date] }
    { 27  ;   ;Shipment Method Code;Code10        ;TableRelation="Shipment Method";
                                                   CaptionML=[ENU=Shipment Method Code;
                                                              ENN=Shipment Method Code] }
    { 28  ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE (Use As In-Transit=CONST(No));
                                                   CaptionML=[ENU=Location Code;
                                                              ENN=Location Code] }
    { 29  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   CaptionML=[ENU=Shortcut Dimension 1 Code;
                                                              ENN=Shortcut Dimension 1 Code];
                                                   CaptionClass='1,2,1' }
    { 30  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   CaptionML=[ENU=Shortcut Dimension 2 Code;
                                                              ENN=Shortcut Dimension 2 Code];
                                                   CaptionClass='1,2,2' }
    { 31  ;   ;Customer Posting Group;Code20      ;TableRelation="Customer Posting Group";
                                                   CaptionML=[ENU=Customer Posting Group;
                                                              ENN=Customer Posting Group];
                                                   Editable=No }
    { 32  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   CaptionML=[ENU=Currency Code;
                                                              ENN=Currency Code];
                                                   Editable=No }
    { 33  ;   ;Currency Factor     ;Decimal       ;CaptionML=[ENU=Currency Factor;
                                                              ENN=Currency Factor];
                                                   DecimalPlaces=0:15;
                                                   MinValue=0 }
    { 34  ;   ;Customer Price Group;Code10        ;TableRelation="Customer Price Group";
                                                   CaptionML=[ENU=Customer Price Group;
                                                              ENN=Customer Price Group] }
    { 35  ;   ;Prices Including VAT;Boolean       ;CaptionML=[ENU=Prices Including VAT;
                                                              ENN=Prices Including VAT] }
    { 37  ;   ;Invoice Disc. Code  ;Code20        ;CaptionML=[ENU=Invoice Disc. Code;
                                                              ENN=Invoice Disc. Code] }
    { 40  ;   ;Customer Disc. Group;Code20        ;TableRelation="Customer Discount Group";
                                                   CaptionML=[ENU=Customer Disc. Group;
                                                              ENN=Customer Disc. Group] }
    { 41  ;   ;Language Code       ;Code10        ;TableRelation=Language;
                                                   CaptionML=[ENU=Language Code;
                                                              ENN=Language Code] }
    { 43  ;   ;Salesperson Code    ;Code20        ;TableRelation="Employee LOB"."Emp No." WHERE (LOB=FIELD(LOB),
                                                                                                 Segment=FIELD(Segment));
                                                   CaptionML=[ENU=Salesperson Code;
                                                              ENN=Salesperson Code];
                                                   Description=AD Changed Lookup from Salesperson/Purchaser to "Employee LOB" }
    { 46  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Sales Comment Line" WHERE (Document Type=CONST(Posted Credit Memo),
                                                                                                 No.=FIELD(No.),
                                                                                                 Document Line No.=CONST(0)));
                                                   CaptionML=[ENU=Comment;
                                                              ENN=Comment];
                                                   Editable=No }
    { 47  ;   ;No. Printed         ;Integer       ;CaptionML=[ENU=No. Printed;
                                                              ENN=No. Printed];
                                                   Editable=Yes }
    { 51  ;   ;On Hold             ;Code3         ;CaptionML=[ENU=On Hold;
                                                              ENN=On Hold] }
    { 52  ;   ;Applies-to Doc. Type;Option        ;CaptionML=[ENU=Applies-to Doc. Type;
                                                              ENN=Applies-to Doc. Type];
                                                   OptionCaptionML=[ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund";
                                                                    ENN=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund"];
                                                   OptionString=[ ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund] }
    { 53  ;   ;Applies-to Doc. No. ;Code20        ;OnLookup=BEGIN
                                                              CustLedgEntry.SETCURRENTKEY("Document No.");
                                                              CustLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
                                                              CustLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
                                                              PAGE.RUN(0,CustLedgEntry);
                                                            END;

                                                   CaptionML=[ENU=Applies-to Doc. No.;
                                                              ENN=Applies-to Doc. No.] }
    { 55  ;   ;Bal. Account No.    ;Code20        ;TableRelation=IF (Bal. Account Type=CONST(G/L Account)) "G/L Account"
                                                                 ELSE IF (Bal. Account Type=CONST(Bank Account)) "Bank Account";
                                                   CaptionML=[ENU=Bal. Account No.;
                                                              ENN=Bal. Account No.] }
    { 60  ;   ;Amount              ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Cr.Memo Line".Amount WHERE (Document No.=FIELD(No.)));
                                                   CaptionML=[ENU=Amount;
                                                              ENN=Amount];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 61  ;   ;Amount Including VAT;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Cr.Memo Line"."Amount Including VAT" WHERE (Document No.=FIELD(No.)));
                                                   CaptionML=[ENU=Amount Including VAT;
                                                              ENN=Amount Including VAT];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 70  ;   ;VAT Registration No.;Text20        ;CaptionML=[ENU=VAT Registration No.;
                                                              ENN=VAT Registration No.] }
    { 73  ;   ;Reason Code         ;Code10        ;TableRelation="Reason Code";
                                                   CaptionML=[ENU=Reason Code;
                                                              ENN=Reason Code] }
    { 74  ;   ;Gen. Bus. Posting Group;Code20     ;TableRelation="Gen. Business Posting Group";
                                                   CaptionML=[ENU=Gen. Bus. Posting Group;
                                                              ENN=Gen. Bus. Posting Group] }
    { 75  ;   ;EU 3-Party Trade    ;Boolean       ;CaptionML=[ENU=EU 3-Party Trade;
                                                              ENN=EU 3-Party Trade] }
    { 76  ;   ;Transaction Type    ;Code10        ;TableRelation="Transaction Type";
                                                   CaptionML=[ENU=Transaction Type;
                                                              ENN=Transaction Nature Code] }
    { 77  ;   ;Transport Method    ;Code10        ;TableRelation="Transport Method";
                                                   CaptionML=[ENU=Transport Method;
                                                              ENN=Transport Method] }
    { 78  ;   ;VAT Country/Region Code;Code10     ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=VAT Country/Region Code;
                                                              ENN=VAT Country/Region Code] }
    { 79  ;   ;Sell-to Customer Name;Text100      ;CaptionML=[ENU=Sell-to Customer Name;
                                                              ENN=Sell-to Customer Name];
                                                   Description=AD_SD }
    { 80  ;   ;Sell-to Customer Name 2;Text50     ;CaptionML=[ENU=Sell-to Customer Name 2;
                                                              ENN=Sell-to Customer Name 2] }
    { 81  ;   ;Sell-to Address     ;Text100       ;CaptionML=[ENU=Sell-to Address;
                                                              ENN=Sell-to Address];
                                                   Description=AD_SD }
    { 82  ;   ;Sell-to Address 2   ;Text60        ;CaptionML=[ENU=Sell-to Address 2;
                                                              ENN=Sell-to Address 2];
                                                   Description=AD_SD }
    { 83  ;   ;Sell-to City        ;Text30        ;TableRelation="Post Code".City;
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Sell-to City;
                                                              ENN=Sell-to City] }
    { 84  ;   ;Sell-to Contact     ;Text100       ;CaptionML=[ENU=Sell-to Contact;
                                                              ENN=Sell-to Contact] }
    { 85  ;   ;Bill-to Post Code   ;Code20        ;TableRelation="Post Code";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Bill-to Post Code;
                                                              ENN=Bill-to Postcode] }
    { 86  ;   ;Bill-to County      ;Text30        ;CaptionML=[ENU=Bill-to County;
                                                              ENN=Bill-to County];
                                                   CaptionClass='5,1,' + "Bill-to Country/Region Code" }
    { 87  ;   ;Bill-to Country/Region Code;Code10 ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=Bill-to Country/Region Code;
                                                              ENN=Bill-to Country/Region Code] }
    { 88  ;   ;Sell-to Post Code   ;Code20        ;TableRelation="Post Code";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Sell-to Post Code;
                                                              ENN=Sell-to Postcode] }
    { 89  ;   ;Sell-to County      ;Text30        ;CaptionML=[ENU=Sell-to County;
                                                              ENN=Sell-to County];
                                                   CaptionClass='5,1,' + "Sell-to Country/Region Code" }
    { 90  ;   ;Sell-to Country/Region Code;Code10 ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=Sell-to Country/Region Code;
                                                              ENN=Sell-to Country/Region Code] }
    { 91  ;   ;Ship-to Post Code   ;Code20        ;TableRelation="Post Code";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Ship-to Post Code;
                                                              ENN=Ship-to Postcode] }
    { 92  ;   ;Ship-to County      ;Text30        ;CaptionML=[ENU=Ship-to County;
                                                              ENN=Ship-to County];
                                                   CaptionClass='5,1,' + "Ship-to Country/Region Code" }
    { 93  ;   ;Ship-to Country/Region Code;Code10 ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=Ship-to Country/Region Code;
                                                              ENN=Ship-to Country/Region Code] }
    { 94  ;   ;Bal. Account Type   ;Option        ;CaptionML=[ENU=Bal. Account Type;
                                                              ENN=Bal. Account Type];
                                                   OptionCaptionML=[ENU=G/L Account,Bank Account;
                                                                    ENN=G/L Account,Bank Account];
                                                   OptionString=G/L Account,Bank Account }
    { 97  ;   ;Exit Point          ;Code10        ;TableRelation="Entry/Exit Point";
                                                   CaptionML=[ENU=Exit Point;
                                                              ENN=Exit Point] }
    { 98  ;   ;Correction          ;Boolean       ;CaptionML=[ENU=Correction;
                                                              ENN=Correction] }
    { 99  ;   ;Document Date       ;Date          ;CaptionML=[ENU=Document Date;
                                                              ENN=Document Date] }
    { 100 ;   ;External Document No.;Code35       ;CaptionML=[ENU=External Document No.;
                                                              ENN=External Document No.] }
    { 101 ;   ;Area                ;Code10        ;TableRelation=Area;
                                                   CaptionML=[ENU=Area;
                                                              ENN=Area] }
    { 102 ;   ;Transaction Specification;Code10   ;TableRelation="Transaction Specification";
                                                   CaptionML=[ENU=Transaction Specification;
                                                              ENN=Transaction Specification] }
    { 104 ;   ;Payment Method Code ;Code10        ;TableRelation="Payment Method";
                                                   CaptionML=[ENU=Payment Method Code;
                                                              ENN=Payment Method Code] }
    { 107 ;   ;Pre-Assigned No. Series;Code20     ;TableRelation="No. Series";
                                                   CaptionML=[ENU=Pre-Assigned No. Series;
                                                              ENN=Pre-Assigned No. Series] }
    { 108 ;   ;No. Series          ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=[ENU=No. Series;
                                                              ENN=No. Series];
                                                   Editable=No }
    { 111 ;   ;Pre-Assigned No.    ;Code20        ;CaptionML=[ENU=Pre-Assigned No.;
                                                              ENN=Pre-Assigned No.] }
    { 112 ;   ;User ID             ;Code50        ;TableRelation=User."User Name";
                                                   OnLookup=VAR
                                                              UserMgt@1000 : Codeunit 418;
                                                            BEGIN
                                                              UserMgt.LookupUserID("User ID");
                                                            END;

                                                   TestTableRelation=No;
                                                   DataClassification=EndUserIdentifiableInformation;
                                                   CaptionML=[ENU=User ID;
                                                              ENN=User ID] }
    { 113 ;   ;Source Code         ;Code10        ;TableRelation="Source Code";
                                                   CaptionML=[ENU=Source Code;
                                                              ENN=Source Code] }
    { 114 ;   ;Tax Area Code       ;Code20        ;TableRelation="Tax Area";
                                                   CaptionML=[ENU=Tax Area Code;
                                                              ENN=VAT Area Code] }
    { 115 ;   ;Tax Liable          ;Boolean       ;CaptionML=[ENU=Tax Liable;
                                                              ENN=VAT Liable] }
    { 116 ;   ;VAT Bus. Posting Group;Code20      ;TableRelation="VAT Business Posting Group";
                                                   CaptionML=[ENU=VAT Bus. Posting Group;
                                                              ENN=VAT Bus. Posting Group] }
    { 119 ;   ;VAT Base Discount % ;Decimal       ;CaptionML=[ENU=VAT Base Discount %;
                                                              ENN=VAT Base Discount %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 134 ;   ;Prepmt. Cr. Memo No. Series;Code20 ;TableRelation="No. Series";
                                                   CaptionML=[ENU=Prepmt. Cr. Memo No. Series;
                                                              ENN=Prepmt. Cr. Memo No. Series] }
    { 136 ;   ;Prepayment Credit Memo;Boolean     ;CaptionML=[ENU=Prepayment Credit Memo;
                                                              ENN=Prepayment Credit Memo] }
    { 137 ;   ;Prepayment Order No.;Code20        ;CaptionML=[ENU=Prepayment Order No.;
                                                              ENN=Prepayment Order No.] }
    { 171 ;   ;Sell-to Phone No.   ;Text30        ;ExtendedDatatype=Phone No.;
                                                   CaptionML=[ENU=Sell-to Phone No.;
                                                              ENN=Sell-to Phone No.] }
    { 172 ;   ;Sell-to E-Mail      ;Text80        ;ExtendedDatatype=E-Mail;
                                                   CaptionML=[ENU=Email;
                                                              ENN=Email] }
    { 200 ;   ;Work Description    ;BLOB          ;DataClassification=CustomerContent;
                                                   CaptionML=[ENU=Work Description;
                                                              ENN=Work Description] }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnLookup=BEGIN
                                                              ShowDimensions;
                                                            END;

                                                   CaptionML=[ENU=Dimension Set ID;
                                                              ENN=Dimension Set ID];
                                                   Editable=No }
    { 710 ;   ;Document Exchange Identifier;Text50;CaptionML=[ENU=Document Exchange Identifier;
                                                              ENN=Document Exchange Identifier] }
    { 711 ;   ;Document Exchange Status;Option    ;CaptionML=[ENU=Document Exchange Status;
                                                              ENN=Document Exchange Status];
                                                   OptionCaptionML=[ENU=Not Sent,Sent to Document Exchange Service,Delivered to Recipient,Delivery Failed,Pending Connection to Recipient;
                                                                    ENN=Not Sent,Sent to Document Exchange Service,Delivered to Recipient,Delivery Failed,Pending Connection to Recipient];
                                                   OptionString=Not Sent,Sent to Document Exchange Service,Delivered to Recipient,Delivery Failed,Pending Connection to Recipient }
    { 712 ;   ;Doc. Exch. Original Identifier;Text50;
                                                   CaptionML=[ENU=Doc. Exch. Original Identifier;
                                                              ENN=Doc. Exch. Original Identifier] }
    { 1302;   ;Paid                ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=-Exist("Cust. Ledger Entry" WHERE (Entry No.=FIELD(Cust. Ledger Entry No.),
                                                                                                  Open=FILTER(Yes)));
                                                   CaptionML=[ENU=Paid;
                                                              ENN=Paid];
                                                   Editable=No }
    { 1303;   ;Remaining Amount    ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry".Amount WHERE (Cust. Ledger Entry No.=FIELD(Cust. Ledger Entry No.)));
                                                   CaptionML=[ENU=Remaining Amount;
                                                              ENN=Remaining Amount];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 1304;   ;Cust. Ledger Entry No.;Integer     ;TableRelation="Cust. Ledger Entry"."Entry No.";
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Cust. Ledger Entry No.;
                                                              ENN=Cust. Ledger Entry No.];
                                                   Editable=No }
    { 1305;   ;Invoice Discount Amount;Decimal    ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Cr.Memo Line"."Inv. Discount Amount" WHERE (Document No.=FIELD(No.)));
                                                   CaptionML=[ENU=Invoice Discount Amount;
                                                              ENN=Invoice Discount Amount];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1310;   ;Cancelled           ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Cancelled Document" WHERE (Source ID=CONST(114),
                                                                                                 Cancelled Doc. No.=FIELD(No.)));
                                                   CaptionML=[ENU=Cancelled;
                                                              ENN=Cancelled];
                                                   Editable=No }
    { 1311;   ;Corrective          ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Cancelled Document" WHERE (Source ID=CONST(112),
                                                                                                 Cancelled By Doc. No.=FIELD(No.)));
                                                   CaptionML=[ENU=Corrective;
                                                              ENN=Corrective];
                                                   Editable=No }
    { 5050;   ;Campaign No.        ;Code20        ;TableRelation=Campaign;
                                                   CaptionML=[ENU=Campaign No.;
                                                              ENN=Campaign No.] }
    { 5052;   ;Sell-to Contact No. ;Code20        ;TableRelation=Contact;
                                                   CaptionML=[ENU=Sell-to Contact No.;
                                                              ENN=Sell-to Contact No.] }
    { 5053;   ;Bill-to Contact No. ;Code20        ;TableRelation=Contact;
                                                   CaptionML=[ENU=Bill-to Contact No.;
                                                              ENN=Bill-to Contact No.] }
    { 5055;   ;Opportunity No.     ;Code20        ;TableRelation=Opportunity;
                                                   CaptionML=[ENU=Opportunity No.;
                                                              ENN=Opportunity No.] }
    { 5700;   ;Responsibility Center;Code10       ;TableRelation="Responsibility Center";
                                                   CaptionML=[ENU=Responsibility Center;
                                                              ENN=Responsibility Centre] }
    { 6601;   ;Return Order No.    ;Code20        ;AccessByPermission=TableData 6660=R;
                                                   CaptionML=[ENU=Return Order No.;
                                                              ENN=Return Order No.] }
    { 6602;   ;Return Order No. Series;Code20     ;TableRelation="No. Series";
                                                   CaptionML=[ENU=Return Order No. Series;
                                                              ENN=Return Order No. Series] }
    { 7001;   ;Allow Line Disc.    ;Boolean       ;CaptionML=[ENU=Allow Line Disc.;
                                                              ENN=Allow Line Disc.] }
    { 7200;   ;Get Return Receipt Used;Boolean    ;CaptionML=[ENU=Get Return Receipt Used;
                                                              ENN=Get Return Receipt Used] }
    { 8000;   ;Id                  ;GUID          ;CaptionML=[ENU=Id;
                                                              ENN=Id] }
    { 50000;  ;LOB                 ;Text40        ;TableRelation="Segment Master";
                                                   Description=AD_SD }
    { 50001;  ;Segment             ;Text100       ;TableRelation="Segment Master" WHERE (LOB=FIELD(LOB));
                                                   Description=AD_SD }
    { 50014;  ;Work Order No.      ;Code20        ;Description=AD_SD }
    { 50020;  ;Remarks             ;Text250       ;Description=AD_SD }
    { 50023;  ;Type of Invoice     ;Option        ;OptionCaptionML=ENU=" ,Settlement";
                                                   OptionString=[ ,Settlement];
                                                   Description=AD_SD }
    { 50025;  ;Invoice Types       ;Option        ;OptionCaptionML=ENU=" ,Fees,Expenses";
                                                   OptionString=[ ,Fees,Expenses];
                                                   Description=AD_SD }
    { 50033;  ;Team Leader         ;Code30        ;TableRelation=Employee WHERE (Type=FILTER(Partner|Others));
                                                   Description=AD_SD }
    { 50050;  ;Sales Currency      ;Option        ;OptionCaptionML=ENU=" ,USD,EURO,GBP,AED,BDT,AUD";
                                                   OptionString=[ ,USD,EURO,GBP,AED,BDT,AUD];
                                                   Description=AD_SD }
    { 50051;  ;Resp. Name          ;Text80        ;Description=AD_SD }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Pre-Assigned No.                         }
    {    ;Return Order No.                         }
    {    ;Sell-to Customer No.                     }
    {    ;Prepayment Order No.                     }
    {    ;Bill-to Customer No.                     }
    {    ;Posting Date                             }
    {    ;Document Exchange Status                 }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;No.,Sell-to Customer No.,Bill-to Customer No.,Posting Date,Posting Description }
    { 2   ;Brick               ;No.,Sell-to Customer Name,Amount,Due Date,Amount Including VAT }
  }
  CODE
  {
    VAR
      SalesCommentLine@1001 : Record 44;
      CustLedgEntry@1002 : Record 21;
      ApprovalsMgmt@1004 : Codeunit 1535;
      DimMgt@1005 : Codeunit 408;
      UserSetupMgt@1006 : Codeunit 5700;

    [Internal]
    PROCEDURE SendRecords@12();
    VAR
      DocumentSendingProfile@1001 : Record 60;
      DummyReportSelections@1000 : Record 77;
      ReportDistributionMgt@1003 : Codeunit 452;
      DocumentTypeTxt@1004 : Text[50];
      IsHandled@1002 : Boolean;
    BEGIN
      DocumentTypeTxt := ReportDistributionMgt.GetFullDocumentTypeText(Rec);

      IsHandled := FALSE;
      OnBeforeSendRecords(DummyReportSelections,Rec,DocumentTypeTxt,IsHandled);
      IF IsHandled THEN
        EXIT;

      DocumentSendingProfile.SendCustomerRecords(
        DummyReportSelections.Usage::"S.Cr.Memo",Rec,DocumentTypeTxt,"Bill-to Customer No.","No.",
        FIELDNO("Bill-to Customer No."),FIELDNO("No."));
    END;

    [External]
    PROCEDURE SendProfile@6(VAR DocumentSendingProfile@1000 : Record 60);
    VAR
      DummyReportSelections@1002 : Record 77;
      ReportDistributionMgt@1004 : Codeunit 452;
      DocumentTypeTxt@1003 : Text[50];
      IsHandled@1001 : Boolean;
    BEGIN
      DocumentTypeTxt := ReportDistributionMgt.GetFullDocumentTypeText(Rec);

      IsHandled := FALSE;
      OnBeforeSendProfile(DummyReportSelections,Rec,DocumentTypeTxt,IsHandled,DocumentSendingProfile);
      IF IsHandled THEN
        EXIT;

      DocumentSendingProfile.Send(
        DummyReportSelections.Usage::"S.Cr.Memo",Rec,"No.","Bill-to Customer No.",
        DocumentTypeTxt,FIELDNO("Bill-to Customer No."),FIELDNO("No."));
    END;

    [External]
    PROCEDURE PrintRecords@1(ShowRequestPage@1000 : Boolean);
    VAR
      DocumentSendingProfile@1002 : Record 60;
      DummyReportSelections@1001 : Record 77;
      IsHandled@1003 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforePrintRecords(DummyReportSelections,Rec,ShowRequestPage,IsHandled);
      IF IsHandled THEN
        EXIT;

      DocumentSendingProfile.TrySendToPrinter(
        DummyReportSelections.Usage::"S.Cr.Memo",Rec,FIELDNO("Bill-to Customer No."),ShowRequestPage);
    END;

    [External]
    PROCEDURE EmailRecords@17(ShowRequestPage@1000 : Boolean);
    VAR
      DocumentSendingProfile@1002 : Record 60;
      DummyReportSelections@1001 : Record 77;
      ReportDistributionMgt@1005 : Codeunit 452;
      DocumentTypeTxt@1004 : Text[50];
      IsHandled@1003 : Boolean;
    BEGIN
      DocumentTypeTxt := ReportDistributionMgt.GetFullDocumentTypeText(Rec);

      IsHandled := FALSE;
      OnBeforeEmailRecords(DummyReportSelections,Rec,DocumentTypeTxt,ShowRequestPage,IsHandled);
      IF IsHandled THEN
        EXIT;

      DocumentSendingProfile.TrySendToEMail(
        DummyReportSelections.Usage::"S.Cr.Memo",Rec,FIELDNO("No."),DocumentTypeTxt,
        FIELDNO("Bill-to Customer No."),ShowRequestPage);
    END;

    [External]
    PROCEDURE Navigate@2();
    VAR
      NavigateForm@1000 : Page 344;
    BEGIN
      NavigateForm.SetDoc("Posting Date","No.");
      NavigateForm.RUN;
    END;

    [External]
    PROCEDURE LookupAdjmtValueEntries@3();
    VAR
      ValueEntry@1000 : Record 5802;
    BEGIN
      ValueEntry.SETCURRENTKEY("Document No.");
      ValueEntry.SETRANGE("Document No.","No.");
      ValueEntry.SETRANGE("Document Type",ValueEntry."Document Type"::"Sales Credit Memo");
      ValueEntry.SETRANGE(Adjustment,TRUE);
      PAGE.RUNMODAL(0,ValueEntry);
    END;

    [External]
    PROCEDURE GetCustomerVATRegistrationNumber@14() : Text;
    BEGIN
      EXIT("VAT Registration No.");
    END;

    [External]
    PROCEDURE GetCustomerVATRegistrationNumberLbl@15() : Text;
    BEGIN
      EXIT(FIELDCAPTION("VAT Registration No."));
    END;

    [External]
    PROCEDURE GetCustomerGlobalLocationNumber@8() : Text;
    BEGIN
      EXIT('');
    END;

    [External]
    PROCEDURE GetCustomerGlobalLocationNumberLbl@10() : Text;
    BEGIN
      EXIT('');
    END;

    [External]
    PROCEDURE GetLegalStatement@60() : Text;
    VAR
      SalesSetup@1000 : Record 311;
    BEGIN
      SalesSetup.GET;
      EXIT(SalesSetup.GetLegalStatement);
    END;

    [External]
    PROCEDURE ShowDimensions@4();
    BEGIN
      DimMgt.ShowDimensionSet("Dimension Set ID",STRSUBSTNO('%1 %2',TABLECAPTION,"No."));
    END;

    [External]
    PROCEDURE SetSecurityFilterOnRespCenter@5();
    BEGIN
      IF UserSetupMgt.GetSalesFilter <> '' THEN BEGIN
        FILTERGROUP(2);
        SETRANGE("Responsibility Center",UserSetupMgt.GetSalesFilter);
        FILTERGROUP(0);
      END;
    END;

    [External]
    PROCEDURE GetDocExchStatusStyle@13() : Text;
    BEGIN
      CASE "Document Exchange Status" OF
        "Document Exchange Status"::"Not Sent":
          EXIT('Standard');
        "Document Exchange Status"::"Sent to Document Exchange Service":
          EXIT('Ambiguous');
        "Document Exchange Status"::"Delivered to Recipient":
          EXIT('Favorable');
        ELSE
          EXIT('Unfavorable');
      END;
    END;

    [External]
    PROCEDURE ShowActivityLog@116();
    VAR
      ActivityLog@1000 : Record 710;
    BEGIN
      ActivityLog.ShowEntries(RECORDID);
    END;

    [External]
    PROCEDURE DocExchangeStatusIsSent@112() : Boolean;
    BEGIN
      EXIT("Document Exchange Status" <> "Document Exchange Status"::"Not Sent");
    END;

    [External]
    PROCEDURE ShowCanceledOrCorrInvoice@18();
    BEGIN
      CALCFIELDS(Cancelled,Corrective);
      CASE TRUE OF
        Cancelled:
          ShowCorrectiveInvoice;
        Corrective:
          ShowCancelledInvoice;
      END;
    END;

    [External]
    PROCEDURE ShowCorrectiveInvoice@16();
    VAR
      CancelledDocument@1000 : Record 1900;
      SalesInvHeader@1001 : Record 112;
    BEGIN
      CALCFIELDS(Cancelled);
      IF NOT Cancelled THEN
        EXIT;

      IF CancelledDocument.FindSalesCancelledCrMemo("No.") THEN BEGIN
        SalesInvHeader.GET(CancelledDocument."Cancelled By Doc. No.");
        PAGE.RUN(PAGE::"Posted Sales Invoice",SalesInvHeader);
      END;
    END;

    [External]
    PROCEDURE ShowCancelledInvoice@37();
    VAR
      CancelledDocument@1000 : Record 1900;
      SalesInvHeader@1001 : Record 112;
    BEGIN
      CALCFIELDS(Corrective);
      IF NOT Corrective THEN
        EXIT;

      IF CancelledDocument.FindSalesCorrectiveCrMemo("No.") THEN BEGIN
        SalesInvHeader.GET(CancelledDocument."Cancelled Doc. No.");
        PAGE.RUN(PAGE::"Posted Sales Invoice",SalesInvHeader);
      END;
    END;

    [External]
    PROCEDURE GetWorkDescription@9() : Text;
    VAR
      TempBlob@1000 : TEMPORARY Record 99008535;
      CR@1004 : Text[1];
    BEGIN
      CALCFIELDS("Work Description");
      IF NOT "Work Description".HASVALUE THEN
        EXIT('');

      CR[1] := 10;
      TempBlob.Blob := "Work Description";
      EXIT(TempBlob.ReadAsText(CR,TEXTENCODING::UTF8));
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeEmailRecords@25(VAR ReportSelections@1003 : Record 77;VAR SalesCrMemoHeader@1002 : Record 114;DocTxt@1004 : Text;ShowDialog@1001 : Boolean;VAR IsHandled@1000 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePrintRecords@24(VAR ReportSelections@1003 : Record 77;VAR SalesCrMemoHeader@1002 : Record 114;ShowRequestPage@1001 : Boolean;VAR IsHandled@1000 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeSendProfile@23(VAR ReportSelections@1003 : Record 77;VAR SalesCrMemoHeader@1002 : Record 114;DocTxt@1001 : Text;VAR IsHandled@1000 : Boolean;VAR DocumentSendingProfile@1004 : Record 60);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeSendRecords@7(VAR ReportSelections@1000 : Record 77;VAR SalesCrMemoHeader@1001 : Record 114;DocTxt@1002 : Text;VAR IsHandled@1003 : Boolean);
    BEGIN
    END;

    BEGIN
    END.
  }
}

OBJECT Table 115 Sales Cr.Memo Line
{
  OBJECT-PROPERTIES
  {
    Date=02-10-21;
    Time=12:00:00;
    Modified=Yes;
    Version List=NAVW114.30;
  }
  PROPERTIES
  {
    Permissions=TableData 32=r,
                TableData 5802=r;
    OnDelete=VAR
               SalesDocLineComments@1000 : Record 44;
               PostedDeferralHeader@1001 : Record 1704;
             BEGIN
               SalesDocLineComments.SETRANGE("Document Type",SalesDocLineComments."Document Type"::"Posted Credit Memo");
               SalesDocLineComments.SETRANGE("No.","Document No.");
               SalesDocLineComments.SETRANGE("Document Line No.","Line No.");
               IF NOT SalesDocLineComments.ISEMPTY THEN
                 SalesDocLineComments.DELETEALL;

               PostedDeferralHeader.DeleteHeader(DeferralUtilities.GetSalesDeferralDocType,'','',
                 SalesDocLineComments."Document Type"::"Posted Credit Memo","Document No.","Line No.");
             END;

    CaptionML=[ENU=Sales Cr.Memo Line;
               ENN=Sales Cr.Memo Line];
    LookupPageID=Page527;
    DrillDownPageID=Page527;
  }
  FIELDS
  {
    { 2   ;   ;Sell-to Customer No.;Code20        ;TableRelation=Customer;
                                                   CaptionML=[ENU=Sell-to Customer No.;
                                                              ENN=Sell-to Customer No.];
                                                   Editable=No }
    { 3   ;   ;Document No.        ;Code20        ;TableRelation="Sales Cr.Memo Header";
                                                   CaptionML=[ENU=Document No.;
                                                              ENN=Document No.] }
    { 4   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              ENN=Line No.] }
    { 5   ;   ;Type                ;Option        ;CaptionML=[ENU=Type;
                                                              ENN=Type];
                                                   OptionCaptionML=[ENU=" ,G/L Account,Item,Resource,Fixed Asset,Charge (Item)";
                                                                    ENN=" ,G/L Account,Item,Resource,Fixed Asset,Charge (Item)"];
                                                   OptionString=[ ,G/L Account,Item,Resource,Fixed Asset,Charge (Item)] }
    { 6   ;   ;No.                 ;Code20        ;TableRelation=IF (Type=CONST(G/L Account)) "G/L Account"
                                                                 ELSE IF (Type=CONST(Item)) Item
                                                                 ELSE IF (Type=CONST(Resource)) Resource
                                                                 ELSE IF (Type=CONST(Fixed Asset)) "Fixed Asset"
                                                                 ELSE IF (Type=CONST("Charge (Item)")) "Item Charge";
                                                   CaptionML=[ENU=No.;
                                                              ENN=No.];
                                                   CaptionClass=GetCaptionClass(FIELDNO("No.")) }
    { 7   ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE (Use As In-Transit=CONST(No));
                                                   CaptionML=[ENU=Location Code;
                                                              ENN=Location Code] }
    { 8   ;   ;Posting Group       ;Code20        ;TableRelation=IF (Type=CONST(Item)) "Inventory Posting Group"
                                                                 ELSE IF (Type=CONST(Fixed Asset)) "FA Posting Group";
                                                   CaptionML=[ENU=Posting Group;
                                                              ENN=Posting Group];
                                                   Editable=No }
    { 10  ;   ;Shipment Date       ;Date          ;CaptionML=[ENU=Shipment Date;
                                                              ENN=Shipment Date] }
    { 11  ;   ;Description         ;Text100       ;CaptionML=[ENU=Description;
                                                              ENN=Description];
                                                   Description=AD_SD }
    { 12  ;   ;Description 2       ;Text50        ;CaptionML=[ENU=Description 2;
                                                              ENN=Description 2] }
    { 13  ;   ;Unit of Measure     ;Text50        ;CaptionML=[ENU=Unit of Measure;
                                                              ENN=Unit of Measure] }
    { 15  ;   ;Quantity            ;Decimal       ;CaptionML=[ENU=Quantity;
                                                              ENN=Quantity];
                                                   DecimalPlaces=0:5 }
    { 22  ;   ;Unit Price          ;Decimal       ;CaptionML=[ENU=Unit Price;
                                                              ENN=Unit Price];
                                                   AutoFormatType=2;
                                                   AutoFormatExpr=GetCurrencyCode;
                                                   CaptionClass=GetCaptionClass(FIELDNO("Unit Price")) }
    { 23  ;   ;Unit Cost (LCY)     ;Decimal       ;CaptionML=[ENU=Unit Cost (LCY);
                                                              ENN=Unit Cost (LCY)];
                                                   AutoFormatType=2 }
    { 25  ;   ;VAT %               ;Decimal       ;CaptionML=[ENU=VAT %;
                                                              ENN=VAT %];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 27  ;   ;Line Discount %     ;Decimal       ;CaptionML=[ENU=Line Discount %;
                                                              ENN=Line Discount %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 28  ;   ;Line Discount Amount;Decimal       ;CaptionML=[ENU=Line Discount Amount;
                                                              ENN=Line Discount Amount];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 29  ;   ;Amount              ;Decimal       ;CaptionML=[ENU=Amount;
                                                              ENN=Amount];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 30  ;   ;Amount Including VAT;Decimal       ;CaptionML=[ENU=Amount Including VAT;
                                                              ENN=Amount Including VAT];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 32  ;   ;Allow Invoice Disc. ;Boolean       ;InitValue=Yes;
                                                   CaptionML=[ENU=Allow Invoice Disc.;
                                                              ENN=Allow Invoice Disc.] }
    { 34  ;   ;Gross Weight        ;Decimal       ;CaptionML=[ENU=Gross Weight;
                                                              ENN=Gross Weight];
                                                   DecimalPlaces=0:5 }
    { 35  ;   ;Net Weight          ;Decimal       ;CaptionML=[ENU=Net Weight;
                                                              ENN=Net Weight];
                                                   DecimalPlaces=0:5 }
    { 36  ;   ;Units per Parcel    ;Decimal       ;CaptionML=[ENU=Units per Parcel;
                                                              ENN=Units per Parcel];
                                                   DecimalPlaces=0:5 }
    { 37  ;   ;Unit Volume         ;Decimal       ;CaptionML=[ENU=Unit Volume;
                                                              ENN=Unit Volume];
                                                   DecimalPlaces=0:5 }
    { 38  ;   ;Appl.-to Item Entry ;Integer       ;AccessByPermission=TableData 27=R;
                                                   CaptionML=[ENU=Appl.-to Item Entry;
                                                              ENN=Appl.-to Item Entry] }
    { 40  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   CaptionML=[ENU=Shortcut Dimension 1 Code;
                                                              ENN=Shortcut Dimension 1 Code];
                                                   CaptionClass='1,2,1' }
    { 41  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   CaptionML=[ENU=Shortcut Dimension 2 Code;
                                                              ENN=Shortcut Dimension 2 Code];
                                                   CaptionClass='1,2,2' }
    { 42  ;   ;Customer Price Group;Code10        ;TableRelation="Customer Price Group";
                                                   CaptionML=[ENU=Customer Price Group;
                                                              ENN=Customer Price Group] }
    { 45  ;   ;Job No.             ;Code20        ;TableRelation=Job;
                                                   CaptionML=[ENU=Job No.;
                                                              ENN=Job No.] }
    { 52  ;   ;Work Type Code      ;Code10        ;TableRelation="Work Type";
                                                   CaptionML=[ENU=Work Type Code;
                                                              ENN=Work Type Code] }
    { 65  ;   ;Order No.           ;Code20        ;CaptionML=[ENU=Order No.;
                                                              ENN=Order No.] }
    { 66  ;   ;Order Line No.      ;Integer       ;CaptionML=[ENU=Order Line No.;
                                                              ENN=Order Line No.] }
    { 68  ;   ;Bill-to Customer No.;Code20        ;TableRelation=Customer;
                                                   CaptionML=[ENU=Bill-to Customer No.;
                                                              ENN=Bill-to Customer No.];
                                                   Editable=No }
    { 69  ;   ;Inv. Discount Amount;Decimal       ;CaptionML=[ENU=Inv. Discount Amount;
                                                              ENN=Inv. Discount Amount];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 74  ;   ;Gen. Bus. Posting Group;Code20     ;TableRelation="Gen. Business Posting Group";
                                                   CaptionML=[ENU=Gen. Bus. Posting Group;
                                                              ENN=Gen. Bus. Posting Group] }
    { 75  ;   ;Gen. Prod. Posting Group;Code20    ;TableRelation="Gen. Product Posting Group";
                                                   CaptionML=[ENU=Gen. Prod. Posting Group;
                                                              ENN=Gen. Prod. Posting Group] }
    { 77  ;   ;VAT Calculation Type;Option        ;CaptionML=[ENU=VAT Calculation Type;
                                                              ENN=VAT Calculation Type];
                                                   OptionCaptionML=[ENU=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                                    ENN=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax];
                                                   OptionString=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax }
    { 78  ;   ;Transaction Type    ;Code10        ;TableRelation="Transaction Type";
                                                   CaptionML=[ENU=Transaction Type;
                                                              ENN=Transaction Nature Code] }
    { 79  ;   ;Transport Method    ;Code10        ;TableRelation="Transport Method";
                                                   CaptionML=[ENU=Transport Method;
                                                              ENN=Transport Method] }
    { 80  ;   ;Attached to Line No.;Integer       ;TableRelation="Sales Cr.Memo Line"."Line No." WHERE (Document No.=FIELD(Document No.));
                                                   CaptionML=[ENU=Attached to Line No.;
                                                              ENN=Attached to Line No.] }
    { 81  ;   ;Exit Point          ;Code10        ;TableRelation="Entry/Exit Point";
                                                   CaptionML=[ENU=Exit Point;
                                                              ENN=Exit Point] }
    { 82  ;   ;Area                ;Code10        ;TableRelation=Area;
                                                   CaptionML=[ENU=Area;
                                                              ENN=Area] }
    { 83  ;   ;Transaction Specification;Code10   ;TableRelation="Transaction Specification";
                                                   CaptionML=[ENU=Transaction Specification;
                                                              ENN=Transaction Specification] }
    { 84  ;   ;Tax Category        ;Code10        ;CaptionML=[ENU=Tax Category;
                                                              ENN=Tax Category] }
    { 85  ;   ;Tax Area Code       ;Code20        ;TableRelation="Tax Area";
                                                   CaptionML=[ENU=Tax Area Code;
                                                              ENN=VAT Area Code] }
    { 86  ;   ;Tax Liable          ;Boolean       ;CaptionML=[ENU=Tax Liable;
                                                              ENN=VAT Liable] }
    { 87  ;   ;Tax Group Code      ;Code20        ;TableRelation="Tax Group";
                                                   CaptionML=[ENU=Tax Group Code;
                                                              ENN=VAT Group Code] }
    { 88  ;   ;VAT Clause Code     ;Code20        ;TableRelation="VAT Clause";
                                                   CaptionML=[ENU=VAT Clause Code;
                                                              ENN=VAT Clause Code] }
    { 89  ;   ;VAT Bus. Posting Group;Code20      ;TableRelation="VAT Business Posting Group";
                                                   CaptionML=[ENU=VAT Bus. Posting Group;
                                                              ENN=VAT Bus. Posting Group] }
    { 90  ;   ;VAT Prod. Posting Group;Code20     ;TableRelation="VAT Product Posting Group";
                                                   CaptionML=[ENU=VAT Prod. Posting Group;
                                                              ENN=VAT Prod. Posting Group] }
    { 97  ;   ;Blanket Order No.   ;Code20        ;TableRelation="Sales Header".No. WHERE (Document Type=CONST(Blanket Order));
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Blanket Order No.;
                                                              ENN=Blanket Order No.] }
    { 98  ;   ;Blanket Order Line No.;Integer     ;TableRelation="Sales Line"."Line No." WHERE (Document Type=CONST(Blanket Order),
                                                                                                Document No.=FIELD(Blanket Order No.));
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Blanket Order Line No.;
                                                              ENN=Blanket Order Line No.] }
    { 99  ;   ;VAT Base Amount     ;Decimal       ;CaptionML=[ENU=VAT Base Amount;
                                                              ENN=VAT Base Amount];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 100 ;   ;Unit Cost           ;Decimal       ;CaptionML=[ENU=Unit Cost;
                                                              ENN=Unit Cost];
                                                   Editable=No;
                                                   AutoFormatType=2;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 101 ;   ;System-Created Entry;Boolean       ;CaptionML=[ENU=System-Created Entry;
                                                              ENN=System-Created Entry];
                                                   Editable=No }
    { 103 ;   ;Line Amount         ;Decimal       ;CaptionML=[ENU=Line Amount;
                                                              ENN=Line Amount];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode;
                                                   CaptionClass=GetCaptionClass(FIELDNO("Line Amount")) }
    { 104 ;   ;VAT Difference      ;Decimal       ;CaptionML=[ENU=VAT Difference;
                                                              ENN=VAT Difference];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 106 ;   ;VAT Identifier      ;Code20        ;CaptionML=[ENU=VAT Identifier;
                                                              ENN=VAT Identifier];
                                                   Editable=No }
    { 107 ;   ;IC Partner Ref. Type;Option        ;CaptionML=[ENU=IC Partner Ref. Type;
                                                              ENN=IC Partner Ref. Type];
                                                   OptionCaptionML=[ENU=" ,G/L Account,Item,,,Charge (Item),Cross reference,Common Item No.";
                                                                    ENN=" ,G/L Account,Item,,,Charge (Item),Cross reference,Common Item No."];
                                                   OptionString=[ ,G/L Account,Item,,,Charge (Item),Cross reference,Common Item No.] }
    { 108 ;   ;IC Partner Reference;Code20        ;CaptionML=[ENU=IC Partner Reference;
                                                              ENN=IC Partner Reference] }
    { 123 ;   ;Prepayment Line     ;Boolean       ;CaptionML=[ENU=Prepayment Line;
                                                              ENN=Prepayment Line];
                                                   Editable=No }
    { 130 ;   ;IC Partner Code     ;Code20        ;TableRelation="IC Partner";
                                                   CaptionML=[ENU=IC Partner Code;
                                                              ENN=IC Partner Code] }
    { 131 ;   ;Posting Date        ;Date          ;CaptionML=[ENU=Posting Date;
                                                              ENN=Posting Date] }
    { 145 ;   ;Pmt. Discount Amount;Decimal       ;CaptionML=[ENU=Pmt. Discount Amount;
                                                              ENN=Pmt. Discount Amount];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 180 ;   ;Line Discount Calculation;Option   ;CaptionML=[ENU=Line Discount Calculation;
                                                              ENN=Line Discount Calculation];
                                                   OptionCaptionML=[ENU=None,%,Amount;
                                                                    ENN=None,%,Amount];
                                                   OptionString=None,%,Amount }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnLookup=BEGIN
                                                              ShowDimensions;
                                                            END;

                                                   CaptionML=[ENU=Dimension Set ID;
                                                              ENN=Dimension Set ID];
                                                   Editable=No }
    { 1001;   ;Job Task No.        ;Code20        ;TableRelation="Job Task"."Job Task No." WHERE (Job No.=FIELD(Job No.));
                                                   CaptionML=[ENU=Job Task No.;
                                                              ENN=Job Task No.];
                                                   Editable=No }
    { 1002;   ;Job Contract Entry No.;Integer     ;CaptionML=[ENU=Job Contract Entry No.;
                                                              ENN=Job Contract Entry No.];
                                                   Editable=No }
    { 1700;   ;Deferral Code       ;Code10        ;TableRelation="Deferral Template"."Deferral Code";
                                                   CaptionML=[ENU=Deferral Code;
                                                              ENN=Deferral Code] }
    { 5402;   ;Variant Code        ;Code10        ;TableRelation=IF (Type=CONST(Item)) "Item Variant".Code WHERE (Item No.=FIELD(No.));
                                                   CaptionML=[ENU=Variant Code;
                                                              ENN=Variant Code] }
    { 5403;   ;Bin Code            ;Code20        ;TableRelation=Bin.Code WHERE (Location Code=FIELD(Location Code),
                                                                                 Item Filter=FIELD(No.),
                                                                                 Variant Filter=FIELD(Variant Code));
                                                   CaptionML=[ENU=Bin Code;
                                                              ENN=Bin Code] }
    { 5404;   ;Qty. per Unit of Measure;Decimal   ;CaptionML=[ENU=Qty. per Unit of Measure;
                                                              ENN=Qty. per Unit of Measure];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5407;   ;Unit of Measure Code;Code10        ;TableRelation=IF (Type=CONST(Item)) "Item Unit of Measure".Code WHERE (Item No.=FIELD(No.))
                                                                 ELSE "Unit of Measure";
                                                   CaptionML=[ENU=Unit of Measure Code;
                                                              ENN=Unit of Measure Code] }
    { 5415;   ;Quantity (Base)     ;Decimal       ;CaptionML=[ENU=Quantity (Base);
                                                              ENN=Quantity (Base)];
                                                   DecimalPlaces=0:5 }
    { 5600;   ;FA Posting Date     ;Date          ;CaptionML=[ENU=FA Posting Date;
                                                              ENN=FA Posting Date] }
    { 5602;   ;Depreciation Book Code;Code10      ;TableRelation="Depreciation Book";
                                                   CaptionML=[ENU=Depreciation Book Code;
                                                              ENN=Depreciation Book Code] }
    { 5605;   ;Depr. until FA Posting Date;Boolean;CaptionML=[ENU=Depr. until FA Posting Date;
                                                              ENN=Depr. until FA Posting Date] }
    { 5612;   ;Duplicate in Depreciation Book;Code10;
                                                   TableRelation="Depreciation Book";
                                                   CaptionML=[ENU=Duplicate in Depreciation Book;
                                                              ENN=Duplicate in Depreciation Book] }
    { 5613;   ;Use Duplication List;Boolean       ;CaptionML=[ENU=Use Duplication List;
                                                              ENN=Use Duplication List] }
    { 5700;   ;Responsibility Center;Code10       ;TableRelation="Responsibility Center";
                                                   CaptionML=[ENU=Responsibility Center;
                                                              ENN=Responsibility Centre] }
    { 5705;   ;Cross-Reference No. ;Code20        ;AccessByPermission=TableData 5717=R;
                                                   CaptionML=[ENU=Cross-Reference No.;
                                                              ENN=Cross-Reference No.] }
    { 5706;   ;Unit of Measure (Cross Ref.);Code10;TableRelation=IF (Type=CONST(Item)) "Item Unit of Measure".Code WHERE (Item No.=FIELD(No.));
                                                   CaptionML=[ENU=Unit of Measure (Cross Ref.);
                                                              ENN=Unit of Measure (Cross Ref.)] }
    { 5707;   ;Cross-Reference Type;Option        ;CaptionML=[ENU=Cross-Reference Type;
                                                              ENN=Cross-Reference Type];
                                                   OptionCaptionML=[ENU=" ,Customer,Vendor,Bar Code";
                                                                    ENN=" ,Customer,Vendor,Bar Code"];
                                                   OptionString=[ ,Customer,Vendor,Bar Code] }
    { 5708;   ;Cross-Reference Type No.;Code30    ;CaptionML=[ENU=Cross-Reference Type No.;
                                                              ENN=Cross-Reference Type No.] }
    { 5709;   ;Item Category Code  ;Code20        ;TableRelation=IF (Type=CONST(Item)) "Item Category";
                                                   CaptionML=[ENU=Item Category Code;
                                                              ENN=Item Category Code] }
    { 5710;   ;Nonstock            ;Boolean       ;CaptionML=[ENU=Catalog;
                                                              ENN=Catalogue] }
    { 5711;   ;Purchasing Code     ;Code10        ;TableRelation=Purchasing;
                                                   CaptionML=[ENU=Purchasing Code;
                                                              ENN=Purchasing Code] }
    { 5712;   ;Product Group Code  ;Code10        ;TableRelation="Product Group".Code WHERE (Item Category Code=FIELD(Item Category Code));
                                                   ValidateTableRelation=No;
                                                   ObsoleteState=Removed;
                                                   ObsoleteReason=Product Groups became first level children of Item Categories.;
                                                   CaptionML=[ENU=Product Group Code;
                                                              ENN=Product Group Code] }
    { 5811;   ;Appl.-from Item Entry;Integer      ;AccessByPermission=TableData 27=R;
                                                   CaptionML=[ENU=Appl.-from Item Entry;
                                                              ENN=Appl.-from Item Entry] }
    { 6600;   ;Return Receipt No.  ;Code20        ;CaptionML=[ENU=Return Receipt No.;
                                                              ENN=Return Receipt No.];
                                                   Editable=No }
    { 6601;   ;Return Receipt Line No.;Integer    ;CaptionML=[ENU=Return Receipt Line No.;
                                                              ENN=Return Receipt Line No.];
                                                   Editable=No }
    { 6608;   ;Return Reason Code  ;Code10        ;TableRelation="Return Reason";
                                                   CaptionML=[ENU=Return Reason Code;
                                                              ENN=Return Reason Code] }
    { 7001;   ;Allow Line Disc.    ;Boolean       ;InitValue=Yes;
                                                   CaptionML=[ENU=Allow Line Disc.;
                                                              ENN=Allow Line Disc.] }
    { 7002;   ;Customer Disc. Group;Code20        ;TableRelation="Customer Discount Group";
                                                   CaptionML=[ENU=Customer Disc. Group;
                                                              ENN=Customer Disc. Group] }
    { 50001;  ;Billing Type        ;Option        ;OptionCaptionML=ENU=" ,Event Driven,Date Driven,Time Sheet Driven,Completion Driven";
                                                   OptionString=[ ,Event Driven,Date Driven,Time Sheet Driven,Completion Driven];
                                                   Description=AD_SD }
    { 50004;  ;Scope1              ;Text150       ;Description=AD_SD }
    { 50005;  ;Scope2              ;Text150       ;Description=AD_SD }
    { 50006;  ;Scope3              ;Text150       ;Description=AD_SD }
    { 50007;  ;Scope4              ;Text150       ;Description=AD_SD }
  }
  KEYS
  {
    {    ;Document No.,Line No.                   ;MaintainSIFTIndex=No;
                                                   Clustered=Yes }
    {    ;Blanket Order No.,Blanket Order Line No. }
    {    ;Sell-to Customer No.                     }
    {    ;Return Receipt No.,Return Receipt Line No. }
    {    ;Job Contract Entry No.                   }
    {    ;Bill-to Customer No.                     }
    {    ;Order No.,Order Line No.,Posting Date    }
    {    ;Document No.,Location Code              ;SumIndexFields=Amount,Amount Including VAT;
                                                   MaintainSQLIndex=No }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      SalesCrMemoHeader@1004 : Record 114;
      Currency@1005 : Record 4;
      DimMgt@1001 : Codeunit 408;
      DeferralUtilities@1000 : Codeunit 1720;

    [External]
    PROCEDURE GetCurrencyCode@1() : Code[10];
    BEGIN
      GetHeader;
      EXIT(SalesCrMemoHeader."Currency Code");
    END;

    [External]
    PROCEDURE ShowDimensions@25();
    BEGIN
      DimMgt.ShowDimensionSet("Dimension Set ID",STRSUBSTNO('%1 %2 %3',TABLECAPTION,"Document No.","Line No."));
    END;

    [External]
    PROCEDURE ShowItemTrackingLines@3();
    VAR
      ItemTrackingDocMgt@1000 : Codeunit 6503;
    BEGIN
      ItemTrackingDocMgt.ShowItemTrackingForInvoiceLine(RowID1);
    END;

    [External]
    PROCEDURE CalcVATAmountLines@2(SalesCrMemoHeader@1000 : Record 114;VAR TempVATAmountLine@1001 : TEMPORARY Record 290);
    BEGIN
      TempVATAmountLine.DELETEALL;
      SETRANGE("Document No.",SalesCrMemoHeader."No.");
      IF FIND('-') THEN
        REPEAT
          TempVATAmountLine.INIT;
          TempVATAmountLine.CopyFromSalesCrMemoLine(Rec);
          TempVATAmountLine.InsertLine;
        UNTIL NEXT = 0;
    END;

    [External]
    PROCEDURE GetLineAmountExclVAT@149() : Decimal;
    BEGIN
      GetHeader;
      IF NOT SalesCrMemoHeader."Prices Including VAT" THEN
        EXIT("Line Amount");

      EXIT(ROUND("Line Amount" / (1 + "VAT %" / 100),Currency."Amount Rounding Precision"));
    END;

    [External]
    PROCEDURE GetLineAmountInclVAT@151() : Decimal;
    BEGIN
      GetHeader;
      IF SalesCrMemoHeader."Prices Including VAT" THEN
        EXIT("Line Amount");

      EXIT(ROUND("Line Amount" * (1 + "VAT %" / 100),Currency."Amount Rounding Precision"));
    END;

    LOCAL PROCEDURE GetHeader@15();
    BEGIN
      IF SalesCrMemoHeader."No." = "Document No." THEN
        EXIT;
      IF NOT SalesCrMemoHeader.GET("Document No.") THEN
        SalesCrMemoHeader.INIT;

      IF SalesCrMemoHeader."Currency Code" = '' THEN
        Currency.InitRoundingPrecision
      ELSE
        IF NOT Currency.GET(SalesCrMemoHeader."Currency Code") THEN
          Currency.InitRoundingPrecision;
    END;

    LOCAL PROCEDURE GetFieldCaption@31(FieldNumber@1000 : Integer) : Text[100];
    VAR
      Field@1001 : Record 2000000041;
    BEGIN
      Field.GET(DATABASE::"Sales Cr.Memo Line",FieldNumber);
      EXIT(Field."Field Caption");
    END;

    [External]
    PROCEDURE GetCaptionClass@34(FieldNumber@1000 : Integer) : Text[80];
    BEGIN
      GetHeader;
      CASE FieldNumber OF
        FIELDNO("No."):
          EXIT(STRSUBSTNO('3,%1',GetFieldCaption(FieldNumber)));
        ELSE BEGIN
          IF SalesCrMemoHeader."Prices Including VAT" THEN
            EXIT('2,1,' + GetFieldCaption(FieldNumber));
          EXIT('2,0,' + GetFieldCaption(FieldNumber));
        END
      END;
    END;

    [External]
    PROCEDURE RowID1@44() : Text[250];
    VAR
      ItemTrackingMgt@1000 : Codeunit 6500;
    BEGIN
      EXIT(ItemTrackingMgt.ComposeRowID(DATABASE::"Sales Cr.Memo Line",
          0,"Document No.",'',0,"Line No."));
    END;

    [External]
    PROCEDURE GetReturnRcptLines@4(VAR TempReturnRcptLine@1000 : TEMPORARY Record 6661);
    VAR
      ReturnRcptLine@1003 : Record 6661;
      ItemLedgEntry@1002 : Record 32;
      ValueEntry@1001 : Record 5802;
    BEGIN
      TempReturnRcptLine.RESET;
      TempReturnRcptLine.DELETEALL;

      IF Type <> Type::Item THEN
        EXIT;

      FilterPstdDocLineValueEntries(ValueEntry);
      ValueEntry.SETFILTER("Invoiced Quantity",'<>0');
      IF ValueEntry.FINDSET THEN
        REPEAT
          ItemLedgEntry.GET(ValueEntry."Item Ledger Entry No.");
          IF ItemLedgEntry."Document Type" = ItemLedgEntry."Document Type"::"Sales Return Receipt" THEN
            IF ReturnRcptLine.GET(ItemLedgEntry."Document No.",ItemLedgEntry."Document Line No.") THEN BEGIN
              TempReturnRcptLine.INIT;
              TempReturnRcptLine := ReturnRcptLine;
              IF TempReturnRcptLine.INSERT THEN;
            END;
        UNTIL ValueEntry.NEXT = 0;
    END;

    [External]
    PROCEDURE GetItemLedgEntries@6(VAR TempItemLedgEntry@1000 : TEMPORARY Record 32;SetQuantity@1003 : Boolean);
    VAR
      ItemLedgEntry@1002 : Record 32;
      ValueEntry@1001 : Record 5802;
    BEGIN
      IF SetQuantity THEN BEGIN
        TempItemLedgEntry.RESET;
        TempItemLedgEntry.DELETEALL;

        IF Type <> Type::Item THEN
          EXIT;
      END;

      FilterPstdDocLineValueEntries(ValueEntry);
      ValueEntry.SETFILTER("Invoiced Quantity",'<>0');
      IF ValueEntry.FINDSET THEN
        REPEAT
          ItemLedgEntry.GET(ValueEntry."Item Ledger Entry No.");
          TempItemLedgEntry := ItemLedgEntry;
          IF SetQuantity THEN BEGIN
            TempItemLedgEntry.Quantity := ValueEntry."Invoiced Quantity";
            IF ABS(TempItemLedgEntry."Shipped Qty. Not Returned") > ABS(TempItemLedgEntry.Quantity) THEN
              TempItemLedgEntry."Shipped Qty. Not Returned" := TempItemLedgEntry.Quantity;
          END;
          OnGetItemLedgEntriesOnBeforeTempItemLedgEntryInsert(TempItemLedgEntry,ValueEntry,SetQuantity);
          IF TempItemLedgEntry.INSERT THEN;
        UNTIL ValueEntry.NEXT = 0;
    END;

    [External]
    PROCEDURE FilterPstdDocLineValueEntries@7(VAR ValueEntry@1000 : Record 5802);
    BEGIN
      ValueEntry.RESET;
      ValueEntry.SETCURRENTKEY("Document No.");
      ValueEntry.SETRANGE("Document No.","Document No.");
      ValueEntry.SETRANGE("Document Type",ValueEntry."Document Type"::"Sales Credit Memo");
      ValueEntry.SETRANGE("Document Line No.","Line No.");
    END;

    [External]
    PROCEDURE ShowItemReturnRcptLines@9();
    VAR
      TempReturnRcptLine@1000 : TEMPORARY Record 6661;
    BEGIN
      IF Type = Type::Item THEN BEGIN
        GetReturnRcptLines(TempReturnRcptLine);
        PAGE.RUNMODAL(0,TempReturnRcptLine);
      END;
    END;

    [External]
    PROCEDURE ShowLineComments@5();
    VAR
      SalesCommentLine@1000 : Record 44;
    BEGIN
      SalesCommentLine.ShowComments(SalesCommentLine."Document Type"::"Posted Credit Memo","Document No.","Line No.");
    END;

    [External]
    PROCEDURE ShowShortcutDimCode@27(VAR ShortcutDimCode@1000 : ARRAY [8] OF Code[20]);
    BEGIN
      DimMgt.GetShortcutDimensions("Dimension Set ID",ShortcutDimCode);
    END;

    [External]
    PROCEDURE InitFromSalesLine@8(SalesCrMemoHeader@1001 : Record 114;SalesLine@1002 : Record 37);
    BEGIN
      INIT;
      TRANSFERFIELDS(SalesLine);
      IF ("No." = '') AND (Type IN [Type::"G/L Account"..Type::"Charge (Item)"]) THEN
        Type := Type::" ";
      "Posting Date" := SalesCrMemoHeader."Posting Date";
      "Document No." := SalesCrMemoHeader."No.";
      Quantity := SalesLine."Qty. to Invoice";
      "Quantity (Base)" := SalesLine."Qty. to Invoice (Base)";

      OnAfterInitFromSalesLine(Rec,SalesCrMemoHeader,SalesLine);
    END;

    [External]
    PROCEDURE ShowDeferrals@12();
    BEGIN
      DeferralUtilities.OpenLineScheduleView(
        "Deferral Code",DeferralUtilities.GetSalesDeferralDocType,'','',
        GetDocumentType,"Document No.","Line No.");
    END;

    [External]
    PROCEDURE GetDocumentType@13() : Integer;
    VAR
      SalesCommentLine@1000 : Record 44;
    BEGIN
      EXIT(SalesCommentLine."Document Type"::"Posted Credit Memo")
    END;

    [External]
    PROCEDURE HasTypeToFillMandatoryFields@103() : Boolean;
    BEGIN
      EXIT(Type <> Type::" ");
    END;

    [External]
    PROCEDURE FormatType@144() : Text;
    VAR
      SalesLine@1000 : Record 37;
    BEGIN
      IF Type = Type::" " THEN
        EXIT(SalesLine.FormatType);

      EXIT(FORMAT(Type));
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterInitFromSalesLine@10(VAR SalesCrMemoLine@1002 : Record 115;SalesCrMemoHeader@1000 : Record 114;SalesLine@1001 : Record 37);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnGetItemLedgEntriesOnBeforeTempItemLedgEntryInsert@16(VAR TempItemLedgerEntry@1000 : TEMPORARY Record 32;ValueEntry@1001 : Record 5802;SetQuantity@1002 : Boolean);
    BEGIN
    END;

    BEGIN
    END.
  }
}

OBJECT Table 122 Purch. Inv. Header
{
  OBJECT-PROPERTIES
  {
    Date=02-10-21;
    Time=12:00:00;
    Modified=Yes;
    Version List=NAVW114.30;
  }
  PROPERTIES
  {
    DataCaptionFields=No.,Buy-from Vendor Name;
    OnDelete=VAR
               PostedDeferralHeader@1000 : Record 1704;
               PostPurchDelete@1002 : Codeunit 364;
               DeferralUtilities@1001 : Codeunit 1720;
             BEGIN
               PostPurchDelete.IsDocumentDeletionAllowed("Posting Date");
               LOCKTABLE;
               PostPurchDelete.DeletePurchInvLines(Rec);

               PurchCommentLine.SETRANGE("Document Type",PurchCommentLine."Document Type"::"Posted Invoice");
               PurchCommentLine.SETRANGE("No.","No.");
               PurchCommentLine.DELETEALL;

               ApprovalsMgmt.DeletePostedApprovalEntries(RECORDID);
               PostedDeferralHeader.DeleteForDoc(DeferralUtilities.GetPurchDeferralDocType,'','',
                 PurchCommentLine."Document Type"::"Posted Invoice","No.");
             END;

    CaptionML=[ENU=Purch. Inv. Header;
               ENN=Purch. Inv. Header];
    LookupPageID=Page146;
    DrillDownPageID=Page146;
  }
  FIELDS
  {
    { 2   ;   ;Buy-from Vendor No. ;Code20        ;TableRelation=Vendor;
                                                   CaptionML=[ENU=Buy-from Vendor No.;
                                                              ENN=Buy-from Vendor No.];
                                                   NotBlank=Yes }
    { 3   ;   ;No.                 ;Code20        ;CaptionML=[ENU=No.;
                                                              ENN=No.] }
    { 4   ;   ;Pay-to Vendor No.   ;Code20        ;TableRelation=Vendor;
                                                   CaptionML=[ENU=Pay-to Vendor No.;
                                                              ENN=Pay-to Vendor No.];
                                                   NotBlank=Yes }
    { 5   ;   ;Pay-to Name         ;Text100       ;CaptionML=[ENU=Pay-to Name;
                                                              ENN=Pay-to Name] }
    { 6   ;   ;Pay-to Name 2       ;Text50        ;CaptionML=[ENU=Pay-to Name 2;
                                                              ENN=Pay-to Name 2] }
    { 7   ;   ;Pay-to Address      ;Text100       ;CaptionML=[ENU=Pay-to Address;
                                                              ENN=Pay-to Address] }
    { 8   ;   ;Pay-to Address 2    ;Text50        ;CaptionML=[ENU=Pay-to Address 2;
                                                              ENN=Pay-to Address 2] }
    { 9   ;   ;Pay-to City         ;Text30        ;TableRelation="Post Code".City;
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Pay-to City;
                                                              ENN=Pay-to City] }
    { 10  ;   ;Pay-to Contact      ;Text100       ;CaptionML=[ENU=Pay-to Contact;
                                                              ENN=Pay-to Contact] }
    { 11  ;   ;Your Reference      ;Text35        ;CaptionML=[ENU=Your Reference;
                                                              ENN=Your Reference] }
    { 12  ;   ;Ship-to Code        ;Code10        ;TableRelation="Ship-to Address".Code WHERE (Customer No.=FIELD(Sell-to Customer No.));
                                                   CaptionML=[ENU=Ship-to Code;
                                                              ENN=Ship-to Code] }
    { 13  ;   ;Ship-to Name        ;Text100       ;CaptionML=[ENU=Ship-to Name;
                                                              ENN=Ship-to Name] }
    { 14  ;   ;Ship-to Name 2      ;Text50        ;CaptionML=[ENU=Ship-to Name 2;
                                                              ENN=Ship-to Name 2] }
    { 15  ;   ;Ship-to Address     ;Text100       ;CaptionML=[ENU=Ship-to Address;
                                                              ENN=Ship-to Address] }
    { 16  ;   ;Ship-to Address 2   ;Text50        ;CaptionML=[ENU=Ship-to Address 2;
                                                              ENN=Ship-to Address 2] }
    { 17  ;   ;Ship-to City        ;Text30        ;TableRelation="Post Code".City;
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Ship-to City;
                                                              ENN=Ship-to City] }
    { 18  ;   ;Ship-to Contact     ;Text100       ;CaptionML=[ENU=Ship-to Contact;
                                                              ENN=Ship-to Contact] }
    { 19  ;   ;Order Date          ;Date          ;CaptionML=[ENU=Order Date;
                                                              ENN=Order Date] }
    { 20  ;   ;Posting Date        ;Date          ;CaptionML=[ENU=Posting Date;
                                                              ENN=Posting Date] }
    { 21  ;   ;Expected Receipt Date;Date         ;CaptionML=[ENU=Expected Receipt Date;
                                                              ENN=Expected Receipt Date] }
    { 22  ;   ;Posting Description ;Text100       ;CaptionML=[ENU=Posting Description;
                                                              ENN=Posting Description] }
    { 23  ;   ;Payment Terms Code  ;Code10        ;TableRelation="Payment Terms";
                                                   CaptionML=[ENU=Payment Terms Code;
                                                              ENN=Payment Terms Code] }
    { 24  ;   ;Due Date            ;Date          ;CaptionML=[ENU=Due Date;
                                                              ENN=Due Date] }
    { 25  ;   ;Payment Discount %  ;Decimal       ;CaptionML=[ENU=Payment Discount %;
                                                              ENN=Payment Discount %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 26  ;   ;Pmt. Discount Date  ;Date          ;CaptionML=[ENU=Pmt. Discount Date;
                                                              ENN=Pmt. Discount Date] }
    { 27  ;   ;Shipment Method Code;Code10        ;TableRelation="Shipment Method";
                                                   CaptionML=[ENU=Shipment Method Code;
                                                              ENN=Shipment Method Code] }
    { 28  ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE (Use As In-Transit=CONST(No));
                                                   CaptionML=[ENU=Location Code;
                                                              ENN=Location Code] }
    { 29  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   CaptionML=[ENU=Shortcut Dimension 1 Code;
                                                              ENN=Shortcut Dimension 1 Code];
                                                   CaptionClass='1,2,1' }
    { 30  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   CaptionML=[ENU=Shortcut Dimension 2 Code;
                                                              ENN=Shortcut Dimension 2 Code];
                                                   CaptionClass='1,2,2' }
    { 31  ;   ;Vendor Posting Group;Code20        ;TableRelation="Vendor Posting Group";
                                                   CaptionML=[ENU=Vendor Posting Group;
                                                              ENN=Vendor Posting Group];
                                                   Editable=No }
    { 32  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   CaptionML=[ENU=Currency Code;
                                                              ENN=Currency Code];
                                                   Editable=No }
    { 33  ;   ;Currency Factor     ;Decimal       ;CaptionML=[ENU=Currency Factor;
                                                              ENN=Currency Factor];
                                                   DecimalPlaces=0:15;
                                                   MinValue=0 }
    { 35  ;   ;Prices Including VAT;Boolean       ;CaptionML=[ENU=Prices Including VAT;
                                                              ENN=Prices Including VAT] }
    { 37  ;   ;Invoice Disc. Code  ;Code20        ;CaptionML=[ENU=Invoice Disc. Code;
                                                              ENN=Invoice Disc. Code] }
    { 41  ;   ;Language Code       ;Code10        ;TableRelation=Language;
                                                   CaptionML=[ENU=Language Code;
                                                              ENN=Language Code] }
    { 43  ;   ;Purchaser Code      ;Code20        ;TableRelation=Salesperson/Purchaser;
                                                   CaptionML=[ENU=Purchaser Code;
                                                              ENN=Purchaser Code] }
    { 44  ;   ;Order No.           ;Code20        ;AccessByPermission=TableData 120=R;
                                                   CaptionML=[ENU=Order No.;
                                                              ENN=Order No.] }
    { 46  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Purch. Comment Line" WHERE (Document Type=CONST(Posted Invoice),
                                                                                                  No.=FIELD(No.),
                                                                                                  Document Line No.=CONST(0)));
                                                   CaptionML=[ENU=Comment;
                                                              ENN=Comment];
                                                   Editable=No }
    { 47  ;   ;No. Printed         ;Integer       ;CaptionML=[ENU=No. Printed;
                                                              ENN=No. Printed];
                                                   Editable=No }
    { 51  ;   ;On Hold             ;Code3         ;CaptionML=[ENU=On Hold;
                                                              ENN=On Hold] }
    { 52  ;   ;Applies-to Doc. Type;Option        ;CaptionML=[ENU=Applies-to Doc. Type;
                                                              ENN=Applies-to Doc. Type];
                                                   OptionCaptionML=[ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund";
                                                                    ENN=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund"];
                                                   OptionString=[ ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund] }
    { 53  ;   ;Applies-to Doc. No. ;Code20        ;OnLookup=BEGIN
                                                              VendLedgEntry.SETCURRENTKEY("Document No.");
                                                              VendLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
                                                              VendLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
                                                              PAGE.RUN(0,VendLedgEntry);
                                                            END;

                                                   CaptionML=[ENU=Applies-to Doc. No.;
                                                              ENN=Applies-to Doc. No.] }
    { 55  ;   ;Bal. Account No.    ;Code20        ;TableRelation=IF (Bal. Account Type=CONST(G/L Account)) "G/L Account"
                                                                 ELSE IF (Bal. Account Type=CONST(Bank Account)) "Bank Account";
                                                   CaptionML=[ENU=Bal. Account No.;
                                                              ENN=Bal. Account No.] }
    { 60  ;   ;Amount              ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Purch. Inv. Line".Amount WHERE (Document No.=FIELD(No.)));
                                                   CaptionML=[ENU=Amount;
                                                              ENN=Amount];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 61  ;   ;Amount Including VAT;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Purch. Inv. Line"."Amount Including VAT" WHERE (Document No.=FIELD(No.)));
                                                   CaptionML=[ENU=Amount Including VAT;
                                                              ENN=Amount Including VAT];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 66  ;   ;Vendor Order No.    ;Code35        ;CaptionML=[ENU=Vendor Order No.;
                                                              ENN=Vendor Order No.] }
    { 68  ;   ;Vendor Invoice No.  ;Code35        ;CaptionML=[ENU=Vendor Invoice No.;
                                                              ENN=Vendor Invoice No.] }
    { 70  ;   ;VAT Registration No.;Text20        ;CaptionML=[ENU=VAT Registration No.;
                                                              ENN=VAT Registration No.] }
    { 72  ;   ;Sell-to Customer No.;Code20        ;TableRelation=Customer;
                                                   CaptionML=[ENU=Sell-to Customer No.;
                                                              ENN=Sell-to Customer No.] }
    { 73  ;   ;Reason Code         ;Code10        ;TableRelation="Reason Code";
                                                   CaptionML=[ENU=Reason Code;
                                                              ENN=Reason Code] }
    { 74  ;   ;Gen. Bus. Posting Group;Code20     ;TableRelation="Gen. Business Posting Group";
                                                   CaptionML=[ENU=Gen. Bus. Posting Group;
                                                              ENN=Gen. Bus. Posting Group] }
    { 76  ;   ;Transaction Type    ;Code10        ;TableRelation="Transaction Type";
                                                   CaptionML=[ENU=Transaction Type;
                                                              ENN=Transaction Nature Code] }
    { 77  ;   ;Transport Method    ;Code10        ;TableRelation="Transport Method";
                                                   CaptionML=[ENU=Transport Method;
                                                              ENN=Transport Method] }
    { 78  ;   ;VAT Country/Region Code;Code10     ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=VAT Country/Region Code;
                                                              ENN=VAT Country/Region Code] }
    { 79  ;   ;Buy-from Vendor Name;Text100       ;CaptionML=[ENU=Buy-from Vendor Name;
                                                              ENN=Buy-from Vendor Name] }
    { 80  ;   ;Buy-from Vendor Name 2;Text50      ;CaptionML=[ENU=Buy-from Vendor Name 2;
                                                              ENN=Buy-from Vendor Name 2] }
    { 81  ;   ;Buy-from Address    ;Text100       ;CaptionML=[ENU=Buy-from Address;
                                                              ENN=Buy-from Address] }
    { 82  ;   ;Buy-from Address 2  ;Text50        ;CaptionML=[ENU=Buy-from Address 2;
                                                              ENN=Buy-from Address 2] }
    { 83  ;   ;Buy-from City       ;Text30        ;TableRelation="Post Code".City;
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Buy-from City;
                                                              ENN=Buy-from City] }
    { 84  ;   ;Buy-from Contact    ;Text100       ;CaptionML=[ENU=Buy-from Contact;
                                                              ENN=Buy-from Contact] }
    { 85  ;   ;Pay-to Post Code    ;Code20        ;TableRelation="Post Code";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Pay-to Post Code;
                                                              ENN=Pay-to Postcode] }
    { 86  ;   ;Pay-to County       ;Text30        ;CaptionML=[ENU=Pay-to County;
                                                              ENN=Pay-to County];
                                                   CaptionClass='5,1,' + "Pay-to Country/Region Code" }
    { 87  ;   ;Pay-to Country/Region Code;Code10  ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=Pay-to Country/Region Code;
                                                              ENN=Pay-to Country/Region Code] }
    { 88  ;   ;Buy-from Post Code  ;Code20        ;TableRelation="Post Code";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Buy-from Post Code;
                                                              ENN=Buy-from Postcode] }
    { 89  ;   ;Buy-from County     ;Text30        ;CaptionML=[ENU=Buy-from County;
                                                              ENN=Buy-from County];
                                                   CaptionClass='5,1,' + "Buy-from Country/Region Code" }
    { 90  ;   ;Buy-from Country/Region Code;Code10;TableRelation=Country/Region;
                                                   CaptionML=[ENU=Buy-from Country/Region Code;
                                                              ENN=Buy-from Country/Region Code] }
    { 91  ;   ;Ship-to Post Code   ;Code20        ;TableRelation="Post Code";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Ship-to Post Code;
                                                              ENN=Ship-to Postcode] }
    { 92  ;   ;Ship-to County      ;Text30        ;CaptionML=[ENU=Ship-to County;
                                                              ENN=Ship-to County];
                                                   CaptionClass='5,1,' + "Ship-to Country/Region Code" }
    { 93  ;   ;Ship-to Country/Region Code;Code10 ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=Ship-to Country/Region Code;
                                                              ENN=Ship-to Country/Region Code] }
    { 94  ;   ;Bal. Account Type   ;Option        ;CaptionML=[ENU=Bal. Account Type;
                                                              ENN=Bal. Account Type];
                                                   OptionCaptionML=[ENU=G/L Account,Bank Account;
                                                                    ENN=G/L Account,Bank Account];
                                                   OptionString=G/L Account,Bank Account }
    { 95  ;   ;Order Address Code  ;Code10        ;TableRelation="Order Address".Code WHERE (Vendor No.=FIELD(Buy-from Vendor No.));
                                                   CaptionML=[ENU=Order Address Code;
                                                              ENN=Order Address Code] }
    { 97  ;   ;Entry Point         ;Code10        ;TableRelation="Entry/Exit Point";
                                                   CaptionML=[ENU=Entry Point;
                                                              ENN=Entry Point] }
    { 98  ;   ;Correction          ;Boolean       ;CaptionML=[ENU=Correction;
                                                              ENN=Correction] }
    { 99  ;   ;Document Date       ;Date          ;CaptionML=[ENU=Document Date;
                                                              ENN=Document Date] }
    { 101 ;   ;Area                ;Code10        ;TableRelation=Area;
                                                   CaptionML=[ENU=Area;
                                                              ENN=Area] }
    { 102 ;   ;Transaction Specification;Code10   ;TableRelation="Transaction Specification";
                                                   CaptionML=[ENU=Transaction Specification;
                                                              ENN=Transaction Specification] }
    { 104 ;   ;Payment Method Code ;Code10        ;TableRelation="Payment Method";
                                                   CaptionML=[ENU=Payment Method Code;
                                                              ENN=Payment Method Code] }
    { 107 ;   ;Pre-Assigned No. Series;Code20     ;TableRelation="No. Series";
                                                   CaptionML=[ENU=Pre-Assigned No. Series;
                                                              ENN=Pre-Assigned No. Series] }
    { 108 ;   ;No. Series          ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=[ENU=No. Series;
                                                              ENN=No. Series];
                                                   Editable=No }
    { 110 ;   ;Order No. Series    ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=[ENU=Order No. Series;
                                                              ENN=Order No. Series] }
    { 111 ;   ;Pre-Assigned No.    ;Code20        ;CaptionML=[ENU=Pre-Assigned No.;
                                                              ENN=Pre-Assigned No.] }
    { 112 ;   ;User ID             ;Code50        ;TableRelation=User."User Name";
                                                   OnLookup=VAR
                                                              UserMgt@1000 : Codeunit 418;
                                                            BEGIN
                                                              UserMgt.LookupUserID("User ID");
                                                            END;

                                                   TestTableRelation=No;
                                                   DataClassification=EndUserIdentifiableInformation;
                                                   CaptionML=[ENU=User ID;
                                                              ENN=User ID] }
    { 113 ;   ;Source Code         ;Code10        ;TableRelation="Source Code";
                                                   CaptionML=[ENU=Source Code;
                                                              ENN=Source Code] }
    { 114 ;   ;Tax Area Code       ;Code20        ;TableRelation="Tax Area";
                                                   CaptionML=[ENU=Tax Area Code;
                                                              ENN=VAT Area Code] }
    { 115 ;   ;Tax Liable          ;Boolean       ;CaptionML=[ENU=Tax Liable;
                                                              ENN=VAT Liable] }
    { 116 ;   ;VAT Bus. Posting Group;Code20      ;TableRelation="VAT Business Posting Group";
                                                   CaptionML=[ENU=VAT Bus. Posting Group;
                                                              ENN=VAT Bus. Posting Group] }
    { 119 ;   ;VAT Base Discount % ;Decimal       ;CaptionML=[ENU=VAT Base Discount %;
                                                              ENN=VAT Base Discount %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 135 ;   ;Prepayment No. Series;Code20       ;TableRelation="No. Series";
                                                   CaptionML=[ENU=Prepayment No. Series;
                                                              ENN=Prepayment No. Series] }
    { 140 ;   ;Prepayment Invoice  ;Boolean       ;CaptionML=[ENU=Prepayment Invoice;
                                                              ENN=Prepayment Invoice] }
    { 141 ;   ;Prepayment Order No.;Code20        ;CaptionML=[ENU=Prepayment Order No.;
                                                              ENN=Prepayment Order No.] }
    { 151 ;   ;Quote No.           ;Code20        ;CaptionML=[ENU=Quote No.;
                                                              ENN=Quote No.];
                                                   Editable=No }
    { 170 ;   ;Creditor No.        ;Code20        ;CaptionML=[ENU=Creditor No.;
                                                              ENN=Creditor No.] }
    { 171 ;   ;Payment Reference   ;Code50        ;CaptionML=[ENU=Payment Reference;
                                                              ENN=Payment Reference];
                                                   Numeric=Yes }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnLookup=BEGIN
                                                              ShowDimensions;
                                                            END;

                                                   CaptionML=[ENU=Dimension Set ID;
                                                              ENN=Dimension Set ID];
                                                   Editable=No }
    { 1302;   ;Closed              ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=-Exist("Vendor Ledger Entry" WHERE (Entry No.=FIELD(Vendor Ledger Entry No.),
                                                                                                   Open=FILTER(Yes)));
                                                   CaptionML=[ENU=Closed;
                                                              ENN=Closed];
                                                   Editable=No }
    { 1303;   ;Remaining Amount    ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Detailed Vendor Ledg. Entry".Amount WHERE (Vendor Ledger Entry No.=FIELD(Vendor Ledger Entry No.)));
                                                   CaptionML=[ENU=Remaining Amount;
                                                              ENN=Remaining Amount];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 1304;   ;Vendor Ledger Entry No.;Integer    ;TableRelation="Vendor Ledger Entry"."Entry No.";
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Vendor Ledger Entry No.;
                                                              ENN=Vendor Ledger Entry No.];
                                                   Editable=No }
    { 1305;   ;Invoice Discount Amount;Decimal    ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Purch. Inv. Line"."Inv. Discount Amount" WHERE (Document No.=FIELD(No.)));
                                                   CaptionML=[ENU=Invoice Discount Amount;
                                                              ENN=Invoice Discount Amount];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1310;   ;Cancelled           ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Cancelled Document" WHERE (Source ID=CONST(122),
                                                                                                 Cancelled Doc. No.=FIELD(No.)));
                                                   CaptionML=[ENU=Cancelled;
                                                              ENN=Cancelled];
                                                   Editable=No }
    { 1311;   ;Corrective          ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Cancelled Document" WHERE (Source ID=CONST(124),
                                                                                                 Cancelled By Doc. No.=FIELD(No.)));
                                                   CaptionML=[ENU=Corrective;
                                                              ENN=Corrective];
                                                   Editable=No }
    { 5050;   ;Campaign No.        ;Code20        ;TableRelation=Campaign;
                                                   CaptionML=[ENU=Campaign No.;
                                                              ENN=Campaign No.] }
    { 5052;   ;Buy-from Contact No.;Code20        ;TableRelation=Contact;
                                                   CaptionML=[ENU=Buy-from Contact No.;
                                                              ENN=Buy-from Contact No.] }
    { 5053;   ;Pay-to Contact No.  ;Code20        ;TableRelation=Contact;
                                                   CaptionML=[ENU=Pay-to Contact No.;
                                                              ENN=Pay-to Contact No.] }
    { 5700;   ;Responsibility Center;Code10       ;TableRelation="Responsibility Center";
                                                   CaptionML=[ENU=Responsibility Center;
                                                              ENN=Responsibility Centre] }
    { 8000;   ;Id                  ;GUID          ;CaptionML=[ENU=Id;
                                                              ENN=Id] }
    { 50000;  ;Remarks             ;Text150       ;Description=Santosh }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Order No.                                }
    {    ;Pre-Assigned No.                         }
    {    ;Vendor Invoice No.,Posting Date          }
    {    ;Buy-from Vendor No.                      }
    {    ;Prepayment Order No.,Prepayment Invoice  }
    {    ;Pay-to Vendor No.                        }
    {    ;Posting Date                             }
    {    ;Due Date                                 }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;No.,Buy-from Vendor No.,Pay-to Vendor No.,Posting Date,Posting Description }
    { 2   ;Brick               ;No.,Buy-from Vendor Name,Amount,Due Date,Amount Including VAT }
  }
  CODE
  {
    VAR
      PurchInvHeader@1000 : Record 122;
      PurchCommentLine@1001 : Record 43;
      VendLedgEntry@1002 : Record 25;
      DimMgt@1004 : Codeunit 408;
      ApprovalsMgmt@1008 : Codeunit 1535;
      UserSetupMgt@1005 : Codeunit 5700;

    [External]
    PROCEDURE IsFullyOpen@8() : Boolean;
    BEGIN
      CALCFIELDS("Amount Including VAT","Remaining Amount");
      EXIT("Amount Including VAT" = "Remaining Amount");
    END;

    [External]
    PROCEDURE PrintRecords@1(ShowRequestPage@1000 : Boolean);
    VAR
      ReportSelection@1001 : Record 77;
      IsHandled@1002 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforePrintRecords(PurchInvHeader,ShowRequestPage,IsHandled);
      IF NOT IsHandled THEN
        WITH PurchInvHeader DO BEGIN
          COPY(Rec);
          ReportSelection.PrintWithGUIYesNoVendor(
            ReportSelection.Usage::"P.Invoice",PurchInvHeader,ShowRequestPage,FIELDNO("Buy-from Vendor No."));
        END;
    END;

    [External]
    PROCEDURE Navigate@2();
    VAR
      NavigateForm@1000 : Page 344;
    BEGIN
      NavigateForm.SetDoc("Posting Date","No.");
      NavigateForm.RUN;
    END;

    [External]
    PROCEDURE ShowDimensions@3();
    BEGIN
      DimMgt.ShowDimensionSet("Dimension Set ID",STRSUBSTNO('%1 %2',TABLECAPTION,"No."));
    END;

    [External]
    PROCEDURE SetSecurityFilterOnRespCenter@4();
    BEGIN
      IF UserSetupMgt.GetPurchasesFilter <> '' THEN BEGIN
        FILTERGROUP(2);
        SETRANGE("Responsibility Center",UserSetupMgt.GetPurchasesFilter);
        FILTERGROUP(0);
      END;
    END;

    [External]
    PROCEDURE ShowCanceledOrCorrCrMemo@6();
    BEGIN
      CALCFIELDS(Cancelled,Corrective);
      CASE TRUE OF
        Cancelled:
          ShowCorrectiveCreditMemo;
        Corrective:
          ShowCancelledCreditMemo;
      END;
    END;

    [External]
    PROCEDURE ShowCorrectiveCreditMemo@19();
    VAR
      CancelledDocument@1000 : Record 1900;
      PurchCrMemoHdr@1001 : Record 124;
    BEGIN
      CALCFIELDS(Cancelled);
      IF NOT Cancelled THEN
        EXIT;

      IF CancelledDocument.FindPurchCancelledInvoice("No.") THEN BEGIN
        PurchCrMemoHdr.GET(CancelledDocument."Cancelled By Doc. No.");
        PAGE.RUN(PAGE::"Posted Purchase Credit Memo",PurchCrMemoHdr);
      END;
    END;

    [External]
    PROCEDURE ShowCancelledCreditMemo@5();
    VAR
      CancelledDocument@1000 : Record 1900;
      PurchCrMemoHdr@1001 : Record 124;
    BEGIN
      CALCFIELDS(Corrective);
      IF NOT Corrective THEN
        EXIT;

      IF CancelledDocument.FindPurchCorrectiveInvoice("No.") THEN BEGIN
        PurchCrMemoHdr.GET(CancelledDocument."Cancelled Doc. No.");
        PAGE.RUN(PAGE::"Posted Purchase Credit Memo",PurchCrMemoHdr);
      END;
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePrintRecords@7(VAR PurchInvHeader@1000 : Record 122;ShowRequestPage@1002 : Boolean;VAR IsHandled@1001 : Boolean);
    BEGIN
    END;

    BEGIN
    END.
  }
}

OBJECT Table 124 Purch. Cr. Memo Hdr.
{
  OBJECT-PROPERTIES
  {
    Date=02-10-21;
    Time=12:00:00;
    Modified=Yes;
    Version List=NAVW114.30;
  }
  PROPERTIES
  {
    DataCaptionFields=No.,Buy-from Vendor Name;
    OnDelete=VAR
               PostedDeferralHeader@1000 : Record 1704;
               PostPurchDelete@1002 : Codeunit 364;
               DeferralUtilities@1001 : Codeunit 1720;
             BEGIN
               PostPurchDelete.IsDocumentDeletionAllowed("Posting Date");
               LOCKTABLE;
               PostPurchDelete.DeletePurchCrMemoLines(Rec);

               PurchCommentLine.SETRANGE("Document Type",PurchCommentLine."Document Type"::"Posted Credit Memo");
               PurchCommentLine.SETRANGE("No.","No.");
               PurchCommentLine.DELETEALL;

               ApprovalsMgmt.DeletePostedApprovalEntries(RECORDID);
               PostedDeferralHeader.DeleteForDoc(DeferralUtilities.GetPurchDeferralDocType,'','',
                 PurchCommentLine."Document Type"::"Posted Credit Memo","No.");
             END;

    CaptionML=[ENU=Purch. Cr. Memo Hdr.;
               ENN=Purch. Cr. Memo Hdr.];
    LookupPageID=Page147;
    DrillDownPageID=Page147;
  }
  FIELDS
  {
    { 2   ;   ;Buy-from Vendor No. ;Code20        ;TableRelation=Vendor;
                                                   CaptionML=[ENU=Buy-from Vendor No.;
                                                              ENN=Buy-from Vendor No.];
                                                   NotBlank=Yes }
    { 3   ;   ;No.                 ;Code20        ;CaptionML=[ENU=No.;
                                                              ENN=No.] }
    { 4   ;   ;Pay-to Vendor No.   ;Code20        ;TableRelation=Vendor;
                                                   CaptionML=[ENU=Pay-to Vendor No.;
                                                              ENN=Pay-to Vendor No.];
                                                   NotBlank=Yes }
    { 5   ;   ;Pay-to Name         ;Text100       ;CaptionML=[ENU=Pay-to Name;
                                                              ENN=Pay-to Name] }
    { 6   ;   ;Pay-to Name 2       ;Text50        ;CaptionML=[ENU=Pay-to Name 2;
                                                              ENN=Pay-to Name 2] }
    { 7   ;   ;Pay-to Address      ;Text100       ;CaptionML=[ENU=Pay-to Address;
                                                              ENN=Pay-to Address] }
    { 8   ;   ;Pay-to Address 2    ;Text50        ;CaptionML=[ENU=Pay-to Address 2;
                                                              ENN=Pay-to Address 2] }
    { 9   ;   ;Pay-to City         ;Text30        ;TableRelation="Post Code".City;
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Pay-to City;
                                                              ENN=Pay-to City] }
    { 10  ;   ;Pay-to Contact      ;Text100       ;CaptionML=[ENU=Pay-to Contact;
                                                              ENN=Pay-to Contact] }
    { 11  ;   ;Your Reference      ;Text35        ;CaptionML=[ENU=Your Reference;
                                                              ENN=Your Reference] }
    { 12  ;   ;Ship-to Code        ;Code10        ;TableRelation="Ship-to Address".Code WHERE (Customer No.=FIELD(Sell-to Customer No.));
                                                   CaptionML=[ENU=Ship-to Code;
                                                              ENN=Ship-to Code] }
    { 13  ;   ;Ship-to Name        ;Text100       ;CaptionML=[ENU=Ship-to Name;
                                                              ENN=Ship-to Name] }
    { 14  ;   ;Ship-to Name 2      ;Text50        ;CaptionML=[ENU=Ship-to Name 2;
                                                              ENN=Ship-to Name 2] }
    { 15  ;   ;Ship-to Address     ;Text100       ;CaptionML=[ENU=Ship-to Address;
                                                              ENN=Ship-to Address] }
    { 16  ;   ;Ship-to Address 2   ;Text50        ;CaptionML=[ENU=Ship-to Address 2;
                                                              ENN=Ship-to Address 2] }
    { 17  ;   ;Ship-to City        ;Text30        ;TableRelation="Post Code".City;
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Ship-to City;
                                                              ENN=Ship-to City] }
    { 18  ;   ;Ship-to Contact     ;Text100       ;CaptionML=[ENU=Ship-to Contact;
                                                              ENN=Ship-to Contact] }
    { 20  ;   ;Posting Date        ;Date          ;CaptionML=[ENU=Posting Date;
                                                              ENN=Posting Date] }
    { 21  ;   ;Expected Receipt Date;Date         ;CaptionML=[ENU=Expected Receipt Date;
                                                              ENN=Expected Receipt Date] }
    { 22  ;   ;Posting Description ;Text100       ;CaptionML=[ENU=Posting Description;
                                                              ENN=Posting Description] }
    { 23  ;   ;Payment Terms Code  ;Code10        ;TableRelation="Payment Terms";
                                                   CaptionML=[ENU=Payment Terms Code;
                                                              ENN=Payment Terms Code] }
    { 24  ;   ;Due Date            ;Date          ;CaptionML=[ENU=Due Date;
                                                              ENN=Due Date] }
    { 25  ;   ;Payment Discount %  ;Decimal       ;CaptionML=[ENU=Payment Discount %;
                                                              ENN=Payment Discount %];
                                                   DecimalPlaces=0:5 }
    { 26  ;   ;Pmt. Discount Date  ;Date          ;CaptionML=[ENU=Pmt. Discount Date;
                                                              ENN=Pmt. Discount Date] }
    { 27  ;   ;Shipment Method Code;Code10        ;TableRelation="Shipment Method";
                                                   CaptionML=[ENU=Shipment Method Code;
                                                              ENN=Shipment Method Code] }
    { 28  ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE (Use As In-Transit=CONST(No));
                                                   CaptionML=[ENU=Location Code;
                                                              ENN=Location Code] }
    { 29  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   CaptionML=[ENU=Shortcut Dimension 1 Code;
                                                              ENN=Shortcut Dimension 1 Code];
                                                   CaptionClass='1,2,1' }
    { 30  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   CaptionML=[ENU=Shortcut Dimension 2 Code;
                                                              ENN=Shortcut Dimension 2 Code];
                                                   CaptionClass='1,2,2' }
    { 31  ;   ;Vendor Posting Group;Code20        ;TableRelation="Vendor Posting Group";
                                                   CaptionML=[ENU=Vendor Posting Group;
                                                              ENN=Vendor Posting Group];
                                                   Editable=No }
    { 32  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   CaptionML=[ENU=Currency Code;
                                                              ENN=Currency Code];
                                                   Editable=No }
    { 33  ;   ;Currency Factor     ;Decimal       ;CaptionML=[ENU=Currency Factor;
                                                              ENN=Currency Factor];
                                                   DecimalPlaces=0:15;
                                                   MinValue=0 }
    { 35  ;   ;Prices Including VAT;Boolean       ;CaptionML=[ENU=Prices Including VAT;
                                                              ENN=Prices Including VAT] }
    { 37  ;   ;Invoice Disc. Code  ;Code20        ;CaptionML=[ENU=Invoice Disc. Code;
                                                              ENN=Invoice Disc. Code] }
    { 41  ;   ;Language Code       ;Code10        ;TableRelation=Language;
                                                   CaptionML=[ENU=Language Code;
                                                              ENN=Language Code] }
    { 43  ;   ;Purchaser Code      ;Code20        ;TableRelation=Salesperson/Purchaser;
                                                   CaptionML=[ENU=Purchaser Code;
                                                              ENN=Purchaser Code] }
    { 46  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Purch. Comment Line" WHERE (Document Type=CONST(Posted Credit Memo),
                                                                                                  No.=FIELD(No.),
                                                                                                  Document Line No.=CONST(0)));
                                                   CaptionML=[ENU=Comment;
                                                              ENN=Comment];
                                                   Editable=No }
    { 47  ;   ;No. Printed         ;Integer       ;CaptionML=[ENU=No. Printed;
                                                              ENN=No. Printed];
                                                   Editable=No }
    { 51  ;   ;On Hold             ;Code3         ;CaptionML=[ENU=On Hold;
                                                              ENN=On Hold] }
    { 52  ;   ;Applies-to Doc. Type;Option        ;CaptionML=[ENU=Applies-to Doc. Type;
                                                              ENN=Applies-to Doc. Type];
                                                   OptionCaptionML=[ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund";
                                                                    ENN=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund"];
                                                   OptionString=[ ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund] }
    { 53  ;   ;Applies-to Doc. No. ;Code20        ;OnLookup=BEGIN
                                                              VendLedgEntry.SETCURRENTKEY("Document No.");
                                                              VendLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
                                                              VendLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
                                                              PAGE.RUN(0,VendLedgEntry);
                                                            END;

                                                   CaptionML=[ENU=Applies-to Doc. No.;
                                                              ENN=Applies-to Doc. No.] }
    { 55  ;   ;Bal. Account No.    ;Code20        ;TableRelation=IF (Bal. Account Type=CONST(G/L Account)) "G/L Account"
                                                                 ELSE IF (Bal. Account Type=CONST(Bank Account)) "Bank Account";
                                                   CaptionML=[ENU=Bal. Account No.;
                                                              ENN=Bal. Account No.] }
    { 60  ;   ;Amount              ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Purch. Cr. Memo Line".Amount WHERE (Document No.=FIELD(No.)));
                                                   CaptionML=[ENU=Amount;
                                                              ENN=Amount];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 61  ;   ;Amount Including VAT;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Purch. Cr. Memo Line"."Amount Including VAT" WHERE (Document No.=FIELD(No.)));
                                                   CaptionML=[ENU=Amount Including VAT;
                                                              ENN=Amount Including VAT];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 69  ;   ;Vendor Cr. Memo No. ;Code35        ;CaptionML=[ENU=Vendor Cr. Memo No.;
                                                              ENN=Vendor Cr. Memo No.] }
    { 70  ;   ;VAT Registration No.;Text20        ;CaptionML=[ENU=VAT Registration No.;
                                                              ENN=VAT Registration No.] }
    { 72  ;   ;Sell-to Customer No.;Code20        ;TableRelation=Customer;
                                                   CaptionML=[ENU=Sell-to Customer No.;
                                                              ENN=Sell-to Customer No.] }
    { 73  ;   ;Reason Code         ;Code10        ;TableRelation="Reason Code";
                                                   CaptionML=[ENU=Reason Code;
                                                              ENN=Reason Code] }
    { 74  ;   ;Gen. Bus. Posting Group;Code20     ;TableRelation="Gen. Business Posting Group";
                                                   CaptionML=[ENU=Gen. Bus. Posting Group;
                                                              ENN=Gen. Bus. Posting Group] }
    { 76  ;   ;Transaction Type    ;Code10        ;TableRelation="Transaction Type";
                                                   CaptionML=[ENU=Transaction Type;
                                                              ENN=Transaction Nature Code] }
    { 77  ;   ;Transport Method    ;Code10        ;TableRelation="Transport Method";
                                                   CaptionML=[ENU=Transport Method;
                                                              ENN=Transport Method] }
    { 78  ;   ;VAT Country/Region Code;Code10     ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=VAT Country/Region Code;
                                                              ENN=VAT Country/Region Code] }
    { 79  ;   ;Buy-from Vendor Name;Text100       ;CaptionML=[ENU=Buy-from Vendor Name;
                                                              ENN=Buy-from Vendor Name] }
    { 80  ;   ;Buy-from Vendor Name 2;Text50      ;CaptionML=[ENU=Buy-from Vendor Name 2;
                                                              ENN=Buy-from Vendor Name 2] }
    { 81  ;   ;Buy-from Address    ;Text100       ;CaptionML=[ENU=Buy-from Address;
                                                              ENN=Buy-from Address] }
    { 82  ;   ;Buy-from Address 2  ;Text50        ;CaptionML=[ENU=Buy-from Address 2;
                                                              ENN=Buy-from Address 2] }
    { 83  ;   ;Buy-from City       ;Text30        ;TableRelation="Post Code".City;
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Buy-from City;
                                                              ENN=Buy-from City] }
    { 84  ;   ;Buy-from Contact    ;Text100       ;CaptionML=[ENU=Buy-from Contact;
                                                              ENN=Buy-from Contact] }
    { 85  ;   ;Pay-to Post Code    ;Code20        ;TableRelation="Post Code";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Pay-to Post Code;
                                                              ENN=Pay-to Postcode] }
    { 86  ;   ;Pay-to County       ;Text30        ;CaptionML=[ENU=Pay-to County;
                                                              ENN=Pay-to County];
                                                   CaptionClass='5,1,' + "Pay-to Country/Region Code" }
    { 87  ;   ;Pay-to Country/Region Code;Code10  ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=Pay-to Country/Region Code;
                                                              ENN=Pay-to Country/Region Code] }
    { 88  ;   ;Buy-from Post Code  ;Code20        ;TableRelation="Post Code";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Buy-from Post Code;
                                                              ENN=Buy-from Postcode] }
    { 89  ;   ;Buy-from County     ;Text30        ;CaptionML=[ENU=Buy-from County;
                                                              ENN=Buy-from County];
                                                   CaptionClass='5,1,' + "Buy-from Country/Region Code" }
    { 90  ;   ;Buy-from Country/Region Code;Code10;TableRelation=Country/Region;
                                                   CaptionML=[ENU=Buy-from Country/Region Code;
                                                              ENN=Buy-from Country/Region Code] }
    { 91  ;   ;Ship-to Post Code   ;Code20        ;TableRelation="Post Code";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Ship-to Post Code;
                                                              ENN=Ship-to Postcode] }
    { 92  ;   ;Ship-to County      ;Text30        ;CaptionML=[ENU=Ship-to County;
                                                              ENN=Ship-to County];
                                                   CaptionClass='5,1,' + "Ship-to Country/Region Code" }
    { 93  ;   ;Ship-to Country/Region Code;Code10 ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=Ship-to Country/Region Code;
                                                              ENN=Ship-to Country/Region Code] }
    { 94  ;   ;Bal. Account Type   ;Option        ;CaptionML=[ENU=Bal. Account Type;
                                                              ENN=Bal. Account Type];
                                                   OptionCaptionML=[ENU=G/L Account,Bank Account;
                                                                    ENN=G/L Account,Bank Account];
                                                   OptionString=G/L Account,Bank Account }
    { 95  ;   ;Order Address Code  ;Code10        ;TableRelation="Order Address".Code WHERE (Vendor No.=FIELD(Buy-from Vendor No.));
                                                   CaptionML=[ENU=Order Address Code;
                                                              ENN=Order Address Code] }
    { 97  ;   ;Entry Point         ;Code10        ;TableRelation="Entry/Exit Point";
                                                   CaptionML=[ENU=Entry Point;
                                                              ENN=Entry Point] }
    { 98  ;   ;Correction          ;Boolean       ;CaptionML=[ENU=Correction;
                                                              ENN=Correction] }
    { 99  ;   ;Document Date       ;Date          ;CaptionML=[ENU=Document Date;
                                                              ENN=Document Date] }
    { 101 ;   ;Area                ;Code10        ;TableRelation=Area;
                                                   CaptionML=[ENU=Area;
                                                              ENN=Area] }
    { 102 ;   ;Transaction Specification;Code10   ;TableRelation="Transaction Specification";
                                                   CaptionML=[ENU=Transaction Specification;
                                                              ENN=Transaction Specification] }
    { 104 ;   ;Payment Method Code ;Code10        ;TableRelation="Payment Method";
                                                   CaptionML=[ENU=Payment Method Code;
                                                              ENN=Payment Method Code] }
    { 107 ;   ;Pre-Assigned No. Series;Code20     ;TableRelation="No. Series";
                                                   CaptionML=[ENU=Pre-Assigned No. Series;
                                                              ENN=Pre-Assigned No. Series] }
    { 108 ;   ;No. Series          ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=[ENU=No. Series;
                                                              ENN=No. Series];
                                                   Editable=No }
    { 111 ;   ;Pre-Assigned No.    ;Code20        ;CaptionML=[ENU=Pre-Assigned No.;
                                                              ENN=Pre-Assigned No.] }
    { 112 ;   ;User ID             ;Code50        ;TableRelation=User."User Name";
                                                   OnLookup=VAR
                                                              UserMgt@1000 : Codeunit 418;
                                                            BEGIN
                                                              UserMgt.LookupUserID("User ID");
                                                            END;

                                                   TestTableRelation=No;
                                                   DataClassification=EndUserIdentifiableInformation;
                                                   CaptionML=[ENU=User ID;
                                                              ENN=User ID] }
    { 113 ;   ;Source Code         ;Code10        ;TableRelation="Source Code";
                                                   CaptionML=[ENU=Source Code;
                                                              ENN=Source Code] }
    { 114 ;   ;Tax Area Code       ;Code20        ;TableRelation="Tax Area";
                                                   CaptionML=[ENU=Tax Area Code;
                                                              ENN=VAT Area Code] }
    { 115 ;   ;Tax Liable          ;Boolean       ;CaptionML=[ENU=Tax Liable;
                                                              ENN=VAT Liable] }
    { 116 ;   ;VAT Bus. Posting Group;Code20      ;TableRelation="VAT Business Posting Group";
                                                   CaptionML=[ENU=VAT Bus. Posting Group;
                                                              ENN=VAT Bus. Posting Group] }
    { 119 ;   ;VAT Base Discount % ;Decimal       ;CaptionML=[ENU=VAT Base Discount %;
                                                              ENN=VAT Base Discount %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 138 ;   ;Prepmt. Cr. Memo No. Series;Code20 ;TableRelation="No. Series";
                                                   CaptionML=[ENU=Prepmt. Cr. Memo No. Series;
                                                              ENN=Prepmt. Cr. Memo No. Series] }
    { 140 ;   ;Prepayment Credit Memo;Boolean     ;CaptionML=[ENU=Prepayment Credit Memo;
                                                              ENN=Prepayment Credit Memo] }
    { 141 ;   ;Prepayment Order No.;Code20        ;CaptionML=[ENU=Prepayment Order No.;
                                                              ENN=Prepayment Order No.] }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnLookup=BEGIN
                                                              ShowDimensions;
                                                            END;

                                                   CaptionML=[ENU=Dimension Set ID;
                                                              ENN=Dimension Set ID];
                                                   Editable=No }
    { 1302;   ;Paid                ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=-Exist("Vendor Ledger Entry" WHERE (Entry No.=FIELD(Vendor Ledger Entry No.),
                                                                                                   Open=FILTER(Yes)));
                                                   CaptionML=[ENU=Paid;
                                                              ENN=Paid];
                                                   Editable=No }
    { 1303;   ;Remaining Amount    ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Detailed Vendor Ledg. Entry".Amount WHERE (Vendor Ledger Entry No.=FIELD(Vendor Ledger Entry No.)));
                                                   CaptionML=[ENU=Remaining Amount;
                                                              ENN=Remaining Amount];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 1304;   ;Vendor Ledger Entry No.;Integer    ;TableRelation="Vendor Ledger Entry"."Entry No.";
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Vendor Ledger Entry No.;
                                                              ENN=Vendor Ledger Entry No.];
                                                   Editable=No }
    { 1305;   ;Invoice Discount Amount;Decimal    ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Purch. Cr. Memo Line"."Inv. Discount Amount" WHERE (Document No.=FIELD(No.)));
                                                   CaptionML=[ENU=Invoice Discount Amount;
                                                              ENN=Invoice Discount Amount];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1310;   ;Cancelled           ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Cancelled Document" WHERE (Source ID=CONST(124),
                                                                                                 Cancelled Doc. No.=FIELD(No.)));
                                                   CaptionML=[ENU=Cancelled;
                                                              ENN=Cancelled];
                                                   Editable=No }
    { 1311;   ;Corrective          ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Cancelled Document" WHERE (Source ID=CONST(122),
                                                                                                 Cancelled By Doc. No.=FIELD(No.)));
                                                   CaptionML=[ENU=Corrective;
                                                              ENN=Corrective];
                                                   Editable=No }
    { 5050;   ;Campaign No.        ;Code20        ;TableRelation=Campaign;
                                                   CaptionML=[ENU=Campaign No.;
                                                              ENN=Campaign No.] }
    { 5052;   ;Buy-from Contact No.;Code20        ;TableRelation=Contact;
                                                   CaptionML=[ENU=Buy-from Contact No.;
                                                              ENN=Buy-from Contact No.] }
    { 5053;   ;Pay-to Contact No.  ;Code20        ;TableRelation=Contact;
                                                   CaptionML=[ENU=Pay-to Contact No.;
                                                              ENN=Pay-to Contact No.] }
    { 5700;   ;Responsibility Center;Code10       ;TableRelation="Responsibility Center";
                                                   CaptionML=[ENU=Responsibility Center;
                                                              ENN=Responsibility Centre] }
    { 6601;   ;Return Order No.    ;Code20        ;AccessByPermission=TableData 6650=R;
                                                   CaptionML=[ENU=Return Order No.;
                                                              ENN=Return Order No.] }
    { 6602;   ;Return Order No. Series;Code20     ;TableRelation="No. Series";
                                                   CaptionML=[ENU=Return Order No. Series;
                                                              ENN=Return Order No. Series] }
    { 50000;  ;Remarks             ;Text150       ;Description=Santosh }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Pre-Assigned No.                         }
    {    ;Vendor Cr. Memo No.,Posting Date         }
    {    ;Return Order No.                         }
    {    ;Buy-from Vendor No.                      }
    {    ;Prepayment Order No.                     }
    {    ;Pay-to Vendor No.                        }
    {    ;Posting Date                             }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;No.,Buy-from Vendor No.,Pay-to Vendor No.,Posting Date,Posting Description }
  }
  CODE
  {
    VAR
      PurchCrMemoHeader@1000 : Record 124;
      PurchCommentLine@1001 : Record 43;
      VendLedgEntry@1002 : Record 25;
      DimMgt@1004 : Codeunit 408;
      ApprovalsMgmt@1008 : Codeunit 1535;
      UserSetupMgt@1005 : Codeunit 5700;

    [External]
    PROCEDURE PrintRecords@1(ShowRequestPage@1000 : Boolean);
    VAR
      ReportSelection@1001 : Record 77;
      IsHandled@1002 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforePrintRecords(PurchCrMemoHeader,ShowRequestPage,IsHandled);
      IF NOT IsHandled THEN
        WITH PurchCrMemoHeader DO BEGIN
          COPY(Rec);
          ReportSelection.PrintWithGUIYesNoVendor(
            ReportSelection.Usage::"P.Cr.Memo",PurchCrMemoHeader,ShowRequestPage,FIELDNO("Buy-from Vendor No."));
        END;
    END;

    [External]
    PROCEDURE Navigate@2();
    VAR
      NavigateForm@1000 : Page 344;
    BEGIN
      NavigateForm.SetDoc("Posting Date","No.");
      NavigateForm.RUN;
    END;

    [External]
    PROCEDURE ShowDimensions@3();
    BEGIN
      DimMgt.ShowDimensionSet("Dimension Set ID",STRSUBSTNO('%1 %2',TABLECAPTION,"No."));
    END;

    [External]
    PROCEDURE SetSecurityFilterOnRespCenter@4();
    BEGIN
      IF UserSetupMgt.GetPurchasesFilter <> '' THEN BEGIN
        FILTERGROUP(2);
        SETRANGE("Responsibility Center",UserSetupMgt.GetPurchasesFilter);
        FILTERGROUP(0);
      END;
    END;

    [External]
    PROCEDURE ShowCanceledOrCorrInvoice@6();
    BEGIN
      CALCFIELDS(Cancelled,Corrective);
      CASE TRUE OF
        Cancelled:
          ShowCorrectiveInvoice;
        Corrective:
          ShowCancelledInvoice;
      END;
    END;

    [External]
    PROCEDURE ShowCorrectiveInvoice@16();
    VAR
      CancelledDocument@1000 : Record 1900;
      PurchInvHeader@1001 : Record 122;
    BEGIN
      CALCFIELDS(Cancelled);
      IF NOT Cancelled THEN
        EXIT;

      IF CancelledDocument.FindPurchCancelledCrMemo("No.") THEN BEGIN
        PurchInvHeader.GET(CancelledDocument."Cancelled By Doc. No.");
        PAGE.RUN(PAGE::"Posted Purchase Invoice",PurchInvHeader);
      END;
    END;

    [External]
    PROCEDURE ShowCancelledInvoice@5();
    VAR
      CancelledDocument@1000 : Record 1900;
      PurchInvHeader@1001 : Record 122;
    BEGIN
      CALCFIELDS(Corrective);
      IF NOT Corrective THEN
        EXIT;

      IF CancelledDocument.FindPurchCorrectiveCrMemo("No.") THEN BEGIN
        PurchInvHeader.GET(CancelledDocument."Cancelled Doc. No.");
        PAGE.RUN(PAGE::"Posted Purchase Invoice",PurchInvHeader);
      END;
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePrintRecords@7(VAR PurchCrMemoHdr@1000 : Record 124;ShowRequestPage@1002 : Boolean;VAR IsHandled@1001 : Boolean);
    BEGIN
    END;

    BEGIN
    END.
  }
}

OBJECT Table 270 Bank Account
{
  OBJECT-PROPERTIES
  {
    Date=02-10-21;
    Time=12:00:00;
    Modified=Yes;
    Version List=NAVW114.30;
  }
  PROPERTIES
  {
    Permissions=TableData 271=r;
    DataCaptionFields=No.,Name;
    OnInsert=BEGIN
               IF "No." = '' THEN BEGIN
                 GLSetup.GET;
                 GLSetup.TESTFIELD("Bank Account Nos.");
                 NoSeriesMgt.InitSeries(GLSetup."Bank Account Nos.",xRec."No. Series",0D,"No.","No. Series");
               END;

               IF NOT InsertFromContact THEN
                 UpdateContFromBank.OnInsert(Rec);

               DimMgt.UpdateDefaultDim(
                 DATABASE::"Bank Account","No.",
                 "Global Dimension 1 Code","Global Dimension 2 Code");
             END;

    OnModify=BEGIN
               "Last Date Modified" := TODAY;

               IF IsContactUpdateNeeded THEN BEGIN
                 MODIFY;
                 UpdateContFromBank.OnModify(Rec);
                 IF NOT FIND THEN BEGIN
                   RESET;
                   IF FIND THEN;
                 END;
               END;
             END;

    OnDelete=BEGIN
               CheckDeleteBalancingBankAccount;

               MoveEntries.MoveBankAccEntries(Rec);

               CommentLine.SETRANGE("Table Name",CommentLine."Table Name"::"Bank Account");
               CommentLine.SETRANGE("No.","No.");
               CommentLine.DELETEALL;

               UpdateContFromBank.OnDelete(Rec);

               DimMgt.DeleteDefaultDim(DATABASE::"Bank Account","No.");
             END;

    OnRename=BEGIN
               DimMgt.RenameDefaultDim(DATABASE::"Bank Account",xRec."No.","No.");
               "Last Date Modified" := TODAY;
             END;

    CaptionML=[ENU=Bank Account;
               ENN=Bank Account];
    LookupPageID=Page371;
    DrillDownPageID=Page371;
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;OnValidate=BEGIN
                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  GLSetup.GET;
                                                                  NoSeriesMgt.TestManual(GLSetup."Bank Account Nos.");
                                                                  "No. Series" := '';
                                                                END;
                                                              END;

                                                   AltSearchField=Search Name;
                                                   CaptionML=[ENU=No.;
                                                              ENN=No.] }
    { 2   ;   ;Name                ;Text100       ;OnValidate=BEGIN
                                                                IF ("Search Name" = UPPERCASE(xRec.Name)) OR ("Search Name" = '') THEN
                                                                  "Search Name" := Name;
                                                              END;

                                                   CaptionML=[ENU=Name;
                                                              ENN=Name] }
    { 3   ;   ;Search Name         ;Code100       ;CaptionML=[ENU=Search Name;
                                                              ENN=Search Name] }
    { 4   ;   ;Name 2              ;Text50        ;CaptionML=[ENU=Name 2;
                                                              ENN=Name 2] }
    { 5   ;   ;Address             ;Text100       ;CaptionML=[ENU=Address;
                                                              ENN=Address] }
    { 6   ;   ;Address 2           ;Text50        ;CaptionML=[ENU=Address 2;
                                                              ENN=Address 2] }
    { 7   ;   ;City                ;Text30        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   OnLookup=BEGIN
                                                              PostCode.LookupPostCode(City,"Post Code",County,"Country/Region Code");
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=City;
                                                              ENN=City] }
    { 8   ;   ;Contact             ;Text100       ;CaptionML=[ENU=Contact;
                                                              ENN=Contact] }
    { 9   ;   ;Phone No.           ;Text30        ;ExtendedDatatype=Phone No.;
                                                   CaptionML=[ENU=Phone No.;
                                                              ENN=Phone No.] }
    { 10  ;   ;Telex No.           ;Text20        ;CaptionML=[ENU=Telex No.;
                                                              ENN=Telex No.] }
    { 13  ;   ;Bank Account No.    ;Text30        ;CaptionML=[ENU=Bank Account No.;
                                                              ENN=Bank Account No.] }
    { 14  ;   ;Transit No.         ;Text20        ;CaptionML=[ENU=Transit No.;
                                                              ENN=Transit No.] }
    { 15  ;   ;Territory Code      ;Code10        ;TableRelation=Territory;
                                                   CaptionML=[ENU=Territory Code;
                                                              ENN=Territory Code] }
    { 16  ;   ;Global Dimension 1 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Global Dimension 1 Code");
                                                              END;

                                                   CaptionML=[ENU=Global Dimension 1 Code;
                                                              ENN=Global Dimension 1 Code];
                                                   CaptionClass='1,1,1' }
    { 17  ;   ;Global Dimension 2 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Global Dimension 2 Code");
                                                              END;

                                                   CaptionML=[ENU=Global Dimension 2 Code;
                                                              ENN=Global Dimension 2 Code];
                                                   CaptionClass='1,1,2' }
    { 18  ;   ;Chain Name          ;Code10        ;CaptionML=[ENU=Chain Name;
                                                              ENN=Chain Name] }
    { 20  ;   ;Min. Balance        ;Decimal       ;CaptionML=[ENU=Min. Balance;
                                                              ENN=Min. Balance];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 21  ;   ;Bank Acc. Posting Group;Code20     ;TableRelation="Bank Account Posting Group";
                                                   CaptionML=[ENU=Bank Acc. Posting Group;
                                                              ENN=Bank Acc. Posting Group] }
    { 22  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   OnValidate=BEGIN
                                                                IF "Currency Code" = xRec."Currency Code" THEN
                                                                  EXIT;

                                                                BankAcc.RESET;
                                                                BankAcc := Rec;
                                                                BankAcc.CALCFIELDS(Balance,"Balance (LCY)");
                                                                BankAcc.TESTFIELD(Balance,0);
                                                                BankAcc.TESTFIELD("Balance (LCY)",0);

                                                                IF NOT BankAccLedgEntry.SETCURRENTKEY("Bank Account No.",Open) THEN
                                                                  BankAccLedgEntry.SETCURRENTKEY("Bank Account No.");
                                                                BankAccLedgEntry.SETRANGE("Bank Account No.","No.");
                                                                BankAccLedgEntry.SETRANGE(Open,TRUE);
                                                                IF BankAccLedgEntry.FINDLAST THEN
                                                                  ERROR(
                                                                    Text000,
                                                                    FIELDCAPTION("Currency Code"));
                                                              END;

                                                   CaptionML=[ENU=Currency Code;
                                                              ENN=Currency Code] }
    { 24  ;   ;Language Code       ;Code10        ;TableRelation=Language;
                                                   CaptionML=[ENU=Language Code;
                                                              ENN=Language Code] }
    { 26  ;   ;Statistics Group    ;Integer       ;CaptionML=[ENU=Statistics Group;
                                                              ENN=Statistics Group] }
    { 29  ;   ;Our Contact Code    ;Code20        ;TableRelation=Salesperson/Purchaser;
                                                   CaptionML=[ENU=Our Contact Code;
                                                              ENN=Our Contact Code] }
    { 35  ;   ;Country/Region Code ;Code10        ;TableRelation=Country/Region;
                                                   OnValidate=BEGIN
                                                                PostCode.CheckClearPostCodeCityCounty(City,"Post Code",County,"Country/Region Code",xRec."Country/Region Code");
                                                              END;

                                                   CaptionML=[ENU=Country/Region Code;
                                                              ENN=Country/Region Code] }
    { 37  ;   ;Amount              ;Decimal       ;CaptionML=[ENU=Amount;
                                                              ENN=Amount];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 38  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Comment Line" WHERE (Table Name=CONST(Bank Account),
                                                                                           No.=FIELD(No.)));
                                                   CaptionML=[ENU=Comment;
                                                              ENN=Comment];
                                                   Editable=No }
    { 39  ;   ;Blocked             ;Boolean       ;CaptionML=[ENU=Blocked;
                                                              ENN=Blocked] }
    { 41  ;   ;Last Statement No.  ;Code20        ;CaptionML=[ENU=Last Statement No.;
                                                              ENN=Last Statement No.] }
    { 42  ;   ;Last Payment Statement No.;Code20  ;OnValidate=VAR
                                                                TextManagement@1000 : Codeunit 41;
                                                              BEGIN
                                                                TextManagement.EvaluateIncStr("Last Payment Statement No.",FIELDCAPTION("Last Payment Statement No."));
                                                              END;

                                                   CaptionML=[ENU=Last Payment Statement No.;
                                                              ENN=Last Payment Statement No.] }
    { 54  ;   ;Last Date Modified  ;Date          ;CaptionML=[ENU=Last Date Modified;
                                                              ENN=Last Date Modified];
                                                   Editable=No }
    { 55  ;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Date Filter;
                                                              ENN=Date Filter] }
    { 56  ;   ;Global Dimension 1 Filter;Code20   ;FieldClass=FlowFilter;
                                                   TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   CaptionML=[ENU=Global Dimension 1 Filter;
                                                              ENN=Global Dimension 1 Filter];
                                                   CaptionClass='1,3,1' }
    { 57  ;   ;Global Dimension 2 Filter;Code20   ;FieldClass=FlowFilter;
                                                   TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   CaptionML=[ENU=Global Dimension 2 Filter;
                                                              ENN=Global Dimension 2 Filter];
                                                   CaptionClass='1,3,2' }
    { 58  ;   ;Balance             ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Bank Account Ledger Entry".Amount WHERE (Bank Account No.=FIELD(No.),
                                                                                                             Global Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                             Global Dimension 2 Code=FIELD(Global Dimension 2 Filter)));
                                                   CaptionML=[ENU=Balance;
                                                              ENN=Balance];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 59  ;   ;Balance (LCY)       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Bank Account Ledger Entry"."Amount (LCY)" WHERE (Bank Account No.=FIELD(No.),
                                                                                                                     Global Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                     Global Dimension 2 Code=FIELD(Global Dimension 2 Filter)));
                                                   CaptionML=[ENU=Balance (LCY);
                                                              ENN=Balance (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 60  ;   ;Net Change          ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Bank Account Ledger Entry".Amount WHERE (Bank Account No.=FIELD(No.),
                                                                                                             Global Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                             Global Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                             Posting Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Net Change;
                                                              ENN=Net Change];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 61  ;   ;Net Change (LCY)    ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Bank Account Ledger Entry"."Amount (LCY)" WHERE (Bank Account No.=FIELD(No.),
                                                                                                                     Global Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                     Global Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                     Posting Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Net Change (LCY);
                                                              ENN=Net Change (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 62  ;   ;Total on Checks     ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Check Ledger Entry".Amount WHERE (Bank Account No.=FIELD(No.),
                                                                                                      Entry Status=FILTER(Posted),
                                                                                                      Statement Status=FILTER(<>Closed)));
                                                   CaptionML=[ENU=Total on Checks;
                                                              ENN=Total on Cheques];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 84  ;   ;Fax No.             ;Text30        ;CaptionML=[ENU=Fax No.;
                                                              ENN=Fax No.] }
    { 85  ;   ;Telex Answer Back   ;Text20        ;CaptionML=[ENU=Telex Answer Back;
                                                              ENN=Telex Answer Back] }
    { 89  ;   ;Picture             ;BLOB          ;ObsoleteState=Pending;
                                                   ObsoleteReason=Replaced by Image field;
                                                   CaptionML=[ENU=Picture;
                                                              ENN=Picture];
                                                   SubType=Bitmap }
    { 91  ;   ;Post Code           ;Code20        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code"
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   OnLookup=BEGIN
                                                              PostCode.LookupPostCode(City,"Post Code",County,"Country/Region Code");
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Post Code;
                                                              ENN=Postcode] }
    { 92  ;   ;County              ;Text30        ;CaptionML=[ENU=County;
                                                              ENN=County];
                                                   CaptionClass='5,1,' + "Country/Region Code" }
    { 93  ;   ;Last Check No.      ;Code20        ;AccessByPermission=TableData 272=R;
                                                   CaptionML=[ENU=Last Check No.;
                                                              ENN=Last Cheque No.] }
    { 94  ;   ;Balance Last Statement;Decimal     ;CaptionML=[ENU=Balance Last Statement;
                                                              ENN=Balance Last Statement];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 95  ;   ;Balance at Date     ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Bank Account Ledger Entry".Amount WHERE (Bank Account No.=FIELD(No.),
                                                                                                             Global Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                             Global Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                             Posting Date=FIELD(UPPERLIMIT(Date Filter))));
                                                   CaptionML=[ENU=Balance at Date;
                                                              ENN=Balance at Date];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 96  ;   ;Balance at Date (LCY);Decimal      ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Bank Account Ledger Entry"."Amount (LCY)" WHERE (Bank Account No.=FIELD(No.),
                                                                                                                     Global Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                     Global Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                     Posting Date=FIELD(UPPERLIMIT(Date Filter))));
                                                   CaptionML=[ENU=Balance at Date (LCY);
                                                              ENN=Balance at Date (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 97  ;   ;Debit Amount        ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Bank Account Ledger Entry"."Debit Amount" WHERE (Bank Account No.=FIELD(No.),
                                                                                                                     Global Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                     Global Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                     Posting Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Debit Amount;
                                                              ENN=Debit Amount];
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 98  ;   ;Credit Amount       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Bank Account Ledger Entry"."Credit Amount" WHERE (Bank Account No.=FIELD(No.),
                                                                                                                      Global Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                      Global Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                      Posting Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Credit Amount;
                                                              ENN=Credit Amount];
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 99  ;   ;Debit Amount (LCY)  ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Bank Account Ledger Entry"."Debit Amount (LCY)" WHERE (Bank Account No.=FIELD(No.),
                                                                                                                           Global Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                           Global Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                           Posting Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Debit Amount (LCY);
                                                              ENN=Debit Amount (LCY)];
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 100 ;   ;Credit Amount (LCY) ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Bank Account Ledger Entry"."Credit Amount (LCY)" WHERE (Bank Account No.=FIELD(No.),
                                                                                                                            Global Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                            Global Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                            Posting Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Credit Amount (LCY);
                                                              ENN=Credit Amount (LCY)];
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 101 ;   ;Bank Branch No.     ;Text20        ;CaptionML=[ENU=Bank Branch No.;
                                                              ENN=Bank Sort Code] }
    { 102 ;   ;E-Mail              ;Text80        ;OnValidate=VAR
                                                                MailManagement@1000 : Codeunit 9520;
                                                              BEGIN
                                                                MailManagement.ValidateEmailAddressField("E-Mail");
                                                              END;

                                                   ExtendedDatatype=E-Mail;
                                                   CaptionML=[ENU=Email;
                                                              ENN=Email] }
    { 103 ;   ;Home Page           ;Text80        ;ExtendedDatatype=URL;
                                                   CaptionML=[ENU=Home Page;
                                                              ENN=Home Page] }
    { 107 ;   ;No. Series          ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=[ENU=No. Series;
                                                              ENN=No. Series];
                                                   Editable=No }
    { 108 ;   ;Check Report ID     ;Integer       ;TableRelation=AllObjWithCaption."Object ID" WHERE (Object Type=CONST(Report));
                                                   CaptionML=[ENU=Check Report ID;
                                                              ENN=Cheque Report ID] }
    { 109 ;   ;Check Report Name   ;Text250       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(AllObjWithCaption."Object Name" WHERE (Object Type=CONST(Report),
                                                                                                             Object ID=FIELD(Check Report ID)));
                                                   CaptionML=[ENU=Check Report Name;
                                                              ENN=Cheque Report Name];
                                                   Editable=No }
    { 110 ;   ;IBAN                ;Code50        ;OnValidate=VAR
                                                                CompanyInfo@1000 : Record 79;
                                                              BEGIN
                                                                CompanyInfo.CheckIBAN(IBAN);
                                                              END;

                                                   CaptionML=[ENU=IBAN;
                                                              ENN=IBAN] }
    { 111 ;   ;SWIFT Code          ;Code20        ;TableRelation="SWIFT Code";
                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=SWIFT Code;
                                                              ENN=SWIFT Code] }
    { 113 ;   ;Bank Statement Import Format;Code20;TableRelation="Bank Export/Import Setup".Code WHERE (Direction=CONST(Import));
                                                   CaptionML=[ENU=Bank Statement Import Format;
                                                              ENN=Bank Statement Import Format] }
    { 115 ;   ;Credit Transfer Msg. Nos.;Code20   ;TableRelation="No. Series";
                                                   CaptionML=[ENU=Credit Transfer Msg. Nos.;
                                                              ENN=Credit Transfer Msg. Nos.] }
    { 116 ;   ;Direct Debit Msg. Nos.;Code20      ;TableRelation="No. Series";
                                                   CaptionML=[ENU=Direct Debit Msg. Nos.;
                                                              ENN=Direct Debit Msg. Nos.] }
    { 117 ;   ;SEPA Direct Debit Exp. Format;Code20;
                                                   TableRelation="Bank Export/Import Setup".Code WHERE (Direction=CONST(Export));
                                                   CaptionML=[ENU=SEPA Direct Debit Exp. Format;
                                                              ENN=SEPA Direct Debit Exp. Format] }
    { 121 ;   ;Bank Stmt. Service Record ID;RecordID;
                                                   OnValidate=VAR
                                                                Handled@1000 : Boolean;
                                                              BEGIN
                                                                IF FORMAT("Bank Stmt. Service Record ID") = '' THEN
                                                                  OnUnlinkStatementProviderEvent(Rec,Handled);
                                                              END;

                                                   DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Bank Stmt. Service Record ID;
                                                              ENN=Bank Stmt. Service Record ID] }
    { 123 ;   ;Transaction Import Timespan;Integer;CaptionML=[ENU=Transaction Import Timespan;
                                                              ENN=Transaction Import Timespan] }
    { 124 ;   ;Automatic Stmt. Import Enabled;Boolean;
                                                   OnValidate=BEGIN
                                                                IF "Automatic Stmt. Import Enabled" THEN BEGIN
                                                                  IF NOT IsAutoLogonPossible THEN
                                                                    ERROR(MFANotSupportedErr);

                                                                  IF NOT ("Transaction Import Timespan" IN [0..9999]) THEN
                                                                    ERROR(TransactionImportTimespanMustBePositiveErr);
                                                                  ScheduleBankStatementDownload
                                                                END ELSE
                                                                  UnscheduleBankStatementDownload;
                                                              END;

                                                   CaptionML=[ENU=Automatic Stmt. Import Enabled;
                                                              ENN=Automatic Stmt. Import Enabled] }
    { 140 ;   ;Image               ;Media         ;ExtendedDatatype=Person;
                                                   CaptionML=[ENU=Image;
                                                              ENN=Image] }
    { 170 ;   ;Creditor No.        ;Code35        ;CaptionML=[ENU=Creditor No.;
                                                              ENN=Creditor No.] }
    { 1210;   ;Payment Export Format;Code20       ;TableRelation="Bank Export/Import Setup".Code WHERE (Direction=CONST(Export));
                                                   CaptionML=[ENU=Payment Export Format;
                                                              ENN=Payment Export Format] }
    { 1211;   ;Bank Clearing Code  ;Text50        ;CaptionML=[ENU=Bank Clearing Code;
                                                              ENN=Bank Clearing Code] }
    { 1212;   ;Bank Clearing Standard;Text50      ;TableRelation="Bank Clearing Standard";
                                                   CaptionML=[ENU=Bank Clearing Standard;
                                                              ENN=Bank Clearing Standard] }
    { 1213;   ;Bank Name - Data Conversion;Text50 ;TableRelation="Bank Data Conv. Bank" WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   ValidateTableRelation=No;
                                                   ObsoleteState=Pending;
                                                   ObsoleteReason=Changed to AMC Banking 365 Fundamentals Extension;
                                                   CaptionML=[ENU=Bank Name - Data Conversion;
                                                              ENN=Bank Name - Data Conversion] }
    { 1250;   ;Match Tolerance Type;Option        ;OnValidate=BEGIN
                                                                IF "Match Tolerance Type" <> xRec."Match Tolerance Type" THEN
                                                                  "Match Tolerance Value" := 0;
                                                              END;

                                                   CaptionML=[ENU=Match Tolerance Type;
                                                              ENN=Match Tolerance Type];
                                                   OptionCaptionML=[ENU=Percentage,Amount;
                                                                    ENN=Percentage,Amount];
                                                   OptionString=Percentage,Amount }
    { 1251;   ;Match Tolerance Value;Decimal      ;OnValidate=BEGIN
                                                                IF "Match Tolerance Value" < 0 THEN
                                                                  ERROR(InvalidValueErr);

                                                                IF "Match Tolerance Type" = "Match Tolerance Type"::Percentage THEN
                                                                  IF "Match Tolerance Value" > 99 THEN
                                                                    ERROR(InvalidPercentageValueErr,FIELDCAPTION("Match Tolerance Type"),
                                                                      FORMAT("Match Tolerance Type"::Percentage));
                                                              END;

                                                   CaptionML=[ENU=Match Tolerance Value;
                                                              ENN=Match Tolerance Value];
                                                   DecimalPlaces=0:5 }
    { 1260;   ;Positive Pay Export Code;Code20    ;TableRelation="Bank Export/Import Setup".Code WHERE (Direction=CONST(Export-Positive Pay));
                                                   CaptionML=[ENU=Positive Pay Export Code;
                                                              ENN=Positive Pay Export Code] }
    { 50000;  ;Normal User Hide    ;Boolean       ;Description=Santosh }
    { 50001;  ;Super User Hide     ;Boolean       ;Description=Santosh }
    { 50002;  ;BLR Hide            ;Boolean       ;Description=Santosh }
    { 50003;  ;HYD Hide            ;Boolean       ;Description=Santosh }
    { 50004;  ;AUDIT Hide          ;Boolean       ;Description=Santosh }
    { 50005;  ;DEL Hide            ;Boolean       ;Description=Santosh }
    { 50006;  ;MUM Hide            ;Boolean       ;Description=Santosh }
    { 50007;  ;CHN FO Hide         ;Boolean       ;Description=Santosh }
    { 50008;  ;Invoice Hide        ;Boolean       ;Description=Santosh }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Search Name                              }
    {    ;Bank Acc. Posting Group                  }
    {    ;Currency Code                            }
    {    ;Country/Region Code                      }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;No.,Name,Bank Account No.,Currency Code  }
    { 2   ;Brick               ;No.,Name,Bank Account No.,Currency Code,Image }
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=You cannot change %1 because there are one or more open ledger entries for this bank account.;ENN=You cannot change %1 because there are one or more open ledger entries for this bank account.';
      Text003@1003 : TextConst 'ENU=Do you wish to create a contact for %1 %2?;ENN=Do you wish to create a contact for %1 %2?';
      GLSetup@1004 : Record 98;
      BankAcc@1005 : Record 270;
      BankAccLedgEntry@1006 : Record 271;
      CommentLine@1007 : Record 97;
      PostCode@1008 : Record 225;
      NoSeriesMgt@1009 : Codeunit 396;
      MoveEntries@1010 : Codeunit 361;
      UpdateContFromBank@1011 : Codeunit 5058;
      DimMgt@1012 : Codeunit 408;
      InsertFromContact@1013 : Boolean;
      Text004@1014 : TextConst 'ENU=Before you can use Online Map, you must fill in the Online Map Setup window.\See Setting Up Online Map in Help.;ENN=Before you can use Online Map, you must fill in the Online Map Setup window.\See Setting Up Online Map in Help.';
      BankAccIdentifierIsEmptyErr@1001 : TextConst 'ENU=You must specify either a %1 or an %2.;ENN=You must specify either a %1 or an %2.';
      InvalidPercentageValueErr@1002 : TextConst '@@@=%1 is "field caption and %2 is "Percentage";ENU=If %1 is %2, then the value must be between 0 and 99.;ENN=If %1 is %2, then the value must be between 0 and 99.';
      InvalidValueErr@1015 : TextConst 'ENU=The value must be positive.;ENN=The value must be positive.';
      DataExchNotSetErr@1016 : TextConst 'ENU=The Data Exchange Code field must be filled.;ENN=The Data Exchange Code field must be filled.';
      BankStmtScheduledDownloadDescTxt@1018 : TextConst '@@@=%1 - Bank Account name;ENU=%1 Bank Statement Import;ENN=%1 Bank Statement Import';
      JobQEntriesCreatedQst@1019 : TextConst 'ENU=A job queue entry for import of bank statements has been created.\\Do you want to open the Job Queue Entry window?;ENN=A job queue entry for import of bank statements has been created.\\Do you want to open the Job Queue Entry window?';
      TransactionImportTimespanMustBePositiveErr@1020 : TextConst 'ENU=The value in the Number of Days Included field must be a positive number not greater than 9999.;ENN=The value in the Number of Days Included field must be a positive number not greater than 9999.';
      MFANotSupportedErr@1021 : TextConst 'ENU=Cannot setup automatic bank statement import because the selected bank requires multi-factor authentication.;ENN=Cannot setup automatic bank statement import because the selected bank requires multi-factor authentication.';
      BankAccNotLinkedErr@1023 : TextConst 'ENU=This bank account is not linked to an online bank account.;ENN=This bank account is not linked to an online bank account.';
      AutoLogonNotPossibleErr@1024 : TextConst 'ENU=Automatic logon is not possible for this bank account.;ENN=Automatic logon is not possible for this bank account.';
      CancelTxt@1017 : TextConst 'ENU=Cancel;ENN=Cancel';
      OnlineFeedStatementStatus@1022 : 'Not Linked,Linked,Linked and Auto. Bank Statement Enabled';
      CannotDeleteBalancingBankAccountErr@1026 : TextConst '@@@={Locked};ENU=You cannot delete bank account that is used as balancing account in the Payment Registration Setup.;ENN=You cannot delete bank account that is used as balancing account in the Payment Registration Setup.';
      ConfirmDeleteBalancingBankAccountQst@1027 : TextConst 'ENU=This bank account is used as balancing account on the Payment Registration Setup page.\\Are you sure you want to delete it?;ENN=This bank account is used as balancing account on the Payment Registration Setup page.\\Are you sure you want to delete it?';

    [External]
    PROCEDURE AssistEdit@2(OldBankAcc@1000 : Record 270) : Boolean;
    BEGIN
      WITH BankAcc DO BEGIN
        BankAcc := Rec;
        GLSetup.GET;
        GLSetup.TESTFIELD("Bank Account Nos.");
        IF NoSeriesMgt.SelectSeries(GLSetup."Bank Account Nos.",OldBankAcc."No. Series","No. Series") THEN BEGIN
          GLSetup.GET;
          GLSetup.TESTFIELD("Bank Account Nos.");
          NoSeriesMgt.SetSeries("No.");
          Rec := BankAcc;
          EXIT(TRUE);
        END;
      END;
    END;

    [External]
    PROCEDURE ValidateShortcutDimCode@29(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.ValidateDimValueCode(FieldNumber,ShortcutDimCode);
      IF NOT ISTEMPORARY THEN BEGIN
        DimMgt.SaveDefaultDim(DATABASE::"Bank Account","No.",FieldNumber,ShortcutDimCode);
        MODIFY;
      END;
    END;

    [External]
    PROCEDURE ShowContact@1();
    VAR
      ContBusRel@1000 : Record 5054;
      Cont@1001 : Record 5050;
    BEGIN
      IF "No." = '' THEN
        EXIT;

      ContBusRel.SETCURRENTKEY("Link to Table","No.");
      ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::"Bank Account");
      ContBusRel.SETRANGE("No.","No.");
      IF NOT ContBusRel.FINDFIRST THEN BEGIN
        IF NOT CONFIRM(Text003,FALSE,TABLECAPTION,"No.") THEN
          EXIT;
        UpdateContFromBank.InsertNewContact(Rec,FALSE);
        ContBusRel.FINDFIRST;
      END;
      COMMIT;

      Cont.FILTERGROUP(2);
      Cont.SETCURRENTKEY("Company Name","Company No.",Type,Name);
      Cont.SETRANGE("Company No.",ContBusRel."Contact No.");
      PAGE.RUN(PAGE::"Contact List",Cont);
    END;

    [External]
    PROCEDURE SetInsertFromContact@3(FromContact@1000 : Boolean);
    BEGIN
      InsertFromContact := FromContact;
    END;

    [External]
    PROCEDURE GetPaymentExportCodeunitID@6() : Integer;
    VAR
      BankExportImportSetup@1000 : Record 1200;
    BEGIN
      GetBankExportImportSetup(BankExportImportSetup);
      EXIT(BankExportImportSetup."Processing Codeunit ID");
    END;

    [External]
    PROCEDURE GetPaymentExportXMLPortID@4() : Integer;
    VAR
      BankExportImportSetup@1000 : Record 1200;
    BEGIN
      GetBankExportImportSetup(BankExportImportSetup);
      BankExportImportSetup.TESTFIELD("Processing XMLport ID");
      EXIT(BankExportImportSetup."Processing XMLport ID");
    END;

    [External]
    PROCEDURE GetDDExportCodeunitID@11() : Integer;
    VAR
      BankExportImportSetup@1000 : Record 1200;
    BEGIN
      GetDDExportImportSetup(BankExportImportSetup);
      BankExportImportSetup.TESTFIELD("Processing Codeunit ID");
      EXIT(BankExportImportSetup."Processing Codeunit ID");
    END;

    [External]
    PROCEDURE GetDDExportXMLPortID@9() : Integer;
    VAR
      BankExportImportSetup@1000 : Record 1200;
    BEGIN
      GetDDExportImportSetup(BankExportImportSetup);
      BankExportImportSetup.TESTFIELD("Processing XMLport ID");
      EXIT(BankExportImportSetup."Processing XMLport ID");
    END;

    [External]
    PROCEDURE GetBankExportImportSetup@8(VAR BankExportImportSetup@1001 : Record 1200);
    BEGIN
      TESTFIELD("Payment Export Format");
      BankExportImportSetup.GET("Payment Export Format");
    END;

    [External]
    PROCEDURE GetDDExportImportSetup@12(VAR BankExportImportSetup@1001 : Record 1200);
    BEGIN
      TESTFIELD("SEPA Direct Debit Exp. Format");
      BankExportImportSetup.GET("SEPA Direct Debit Exp. Format");
    END;

    [External]
    PROCEDURE GetCreditTransferMessageNo@5() : Code[20];
    VAR
      NoSeriesManagement@1000 : Codeunit 396;
    BEGIN
      TESTFIELD("Credit Transfer Msg. Nos.");
      EXIT(NoSeriesManagement.GetNextNo("Credit Transfer Msg. Nos.",TODAY,TRUE));
    END;

    [External]
    PROCEDURE GetDirectDebitMessageNo@10() : Code[20];
    VAR
      NoSeriesManagement@1000 : Codeunit 396;
    BEGIN
      TESTFIELD("Direct Debit Msg. Nos.");
      EXIT(NoSeriesManagement.GetNextNo("Direct Debit Msg. Nos.",TODAY,TRUE));
    END;

    [External]
    PROCEDURE DisplayMap@7();
    VAR
      MapPoint@1001 : Record 800;
      MapMgt@1000 : Codeunit 802;
    BEGIN
      IF MapPoint.FINDFIRST THEN
        MapMgt.MakeSelection(DATABASE::"Bank Account",GETPOSITION)
      ELSE
        MESSAGE(Text004);
    END;

    [External]
    PROCEDURE GetDataExchDef@13(VAR DataExchDef@1000 : Record 1222);
    VAR
      BankExportImportSetup@1001 : Record 1200;
      DataExchDefCodeResponse@1002 : Code[20];
      Handled@1003 : Boolean;
    BEGIN
      OnGetDataExchangeDefinitionEvent(DataExchDefCodeResponse,Handled);
      IF NOT Handled THEN BEGIN
        TESTFIELD("Bank Statement Import Format");
        DataExchDefCodeResponse := "Bank Statement Import Format";
      END;

      IF DataExchDefCodeResponse = '' THEN
        ERROR(DataExchNotSetErr);

      BankExportImportSetup.GET(DataExchDefCodeResponse);
      BankExportImportSetup.TESTFIELD("Data Exch. Def. Code");

      DataExchDef.GET(BankExportImportSetup."Data Exch. Def. Code");
      DataExchDef.TESTFIELD(Type,DataExchDef.Type::"Bank Statement Import");
    END;

    [External]
    PROCEDURE GetDataExchDefPaymentExport@51(VAR DataExchDef@1000 : Record 1222);
    VAR
      BankExportImportSetup@1001 : Record 1200;
    BEGIN
      TESTFIELD("Payment Export Format");
      BankExportImportSetup.GET("Payment Export Format");
      BankExportImportSetup.TESTFIELD("Data Exch. Def. Code");
      DataExchDef.GET(BankExportImportSetup."Data Exch. Def. Code");
      DataExchDef.TESTFIELD(Type,DataExchDef.Type::"Payment Export");
    END;

    [External]
    PROCEDURE GetBankAccountNoWithCheck@14() AccountNo : Text;
    BEGIN
      AccountNo := GetBankAccountNo;
      IF AccountNo = '' THEN
        ERROR(BankAccIdentifierIsEmptyErr,FIELDCAPTION("Bank Account No."),FIELDCAPTION(IBAN));
    END;

    [External]
    PROCEDURE GetBankAccountNo@15() : Text;
    BEGIN
      IF IBAN <> '' THEN
        EXIT(DELCHR(IBAN,'=<>'));

      IF "Bank Account No." <> '' THEN
        EXIT("Bank Account No.");
    END;

    [External]
    PROCEDURE IsInLocalCurrency@16() : Boolean;
    VAR
      GeneralLedgerSetup@1000 : Record 98;
    BEGIN
      IF "Currency Code" = '' THEN
        EXIT(TRUE);

      GeneralLedgerSetup.GET;
      EXIT("Currency Code" = GeneralLedgerSetup.GetCurrencyCode(''));
    END;

    [External]
    PROCEDURE GetPosPayExportCodeunitID@17() : Integer;
    VAR
      BankExportImportSetup@1000 : Record 1200;
    BEGIN
      TESTFIELD("Positive Pay Export Code");
      BankExportImportSetup.GET("Positive Pay Export Code");
      EXIT(BankExportImportSetup."Processing Codeunit ID");
    END;

    [External]
    PROCEDURE IsLinkedToBankStatementServiceProvider@27() : Boolean;
    VAR
      IsBankAccountLinked@1000 : Boolean;
    BEGIN
      OnCheckLinkedToStatementProviderEvent(Rec,IsBankAccountLinked);
      EXIT(IsBankAccountLinked);
    END;

    [External]
    PROCEDURE StatementProvidersExist@37() : Boolean;
    VAR
      TempNameValueBuffer@1000 : TEMPORARY Record 823;
    BEGIN
      OnGetStatementProvidersEvent(TempNameValueBuffer);
      EXIT(NOT TempNameValueBuffer.ISEMPTY);
    END;

    [External]
    PROCEDURE LinkStatementProvider@32(VAR BankAccount@1001 : Record 270);
    VAR
      StatementProvider@1000 : Text;
    BEGIN
      StatementProvider := SelectBankLinkingService;

      IF StatementProvider <> '' THEN
        OnLinkStatementProviderEvent(BankAccount,StatementProvider);
    END;

    [External]
    PROCEDURE SimpleLinkStatementProvider@39(VAR OnlineBankAccLink@1001 : Record 777);
    VAR
      StatementProvider@1000 : Text;
    BEGIN
      StatementProvider := SelectBankLinkingService;

      IF StatementProvider <> '' THEN
        OnSimpleLinkStatementProviderEvent(OnlineBankAccLink,StatementProvider);
    END;

    [External]
    PROCEDURE UnlinkStatementProvider@31();
    VAR
      Handled@1000 : Boolean;
    BEGIN
      OnUnlinkStatementProviderEvent(Rec,Handled);
    END;

    [External]
    PROCEDURE RefreshStatementProvider@47(VAR BankAccount@1001 : Record 270);
    VAR
      StatementProvider@1000 : Text;
    BEGIN
      StatementProvider := SelectBankLinkingService;

      IF StatementProvider <> '' THEN
        OnRefreshStatementProviderEvent(BankAccount,StatementProvider);
    END;

    [External]
    PROCEDURE UpdateBankAccountLinking@35();
    VAR
      StatementProvider@1000 : Text;
    BEGIN
      StatementProvider := SelectBankLinkingService;

      IF StatementProvider <> '' THEN
        OnUpdateBankAccountLinkingEvent(Rec,StatementProvider);
    END;

    [External]
    PROCEDURE GetUnlinkedBankAccounts@30(VAR TempUnlinkedBankAccount@1000 : TEMPORARY Record 270);
    VAR
      BankAccount@1001 : Record 270;
    BEGIN
      IF BankAccount.FINDSET THEN
        REPEAT
          IF NOT BankAccount.IsLinkedToBankStatementServiceProvider THEN BEGIN
            TempUnlinkedBankAccount := BankAccount;
            TempUnlinkedBankAccount.INSERT;
          END;
        UNTIL BankAccount.NEXT = 0;
    END;

    [External]
    PROCEDURE GetLinkedBankAccounts@33(VAR TempUnlinkedBankAccount@1000 : TEMPORARY Record 270);
    VAR
      BankAccount@1001 : Record 270;
    BEGIN
      IF BankAccount.FINDSET THEN
        REPEAT
          IF BankAccount.IsLinkedToBankStatementServiceProvider THEN BEGIN
            TempUnlinkedBankAccount := BankAccount;
            TempUnlinkedBankAccount.INSERT;
          END;
        UNTIL BankAccount.NEXT = 0;
    END;

    LOCAL PROCEDURE SelectBankLinkingService@38() : Text;
    VAR
      TempNameValueBuffer@1002 : TEMPORARY Record 823;
      OptionStr@1001 : Text;
      OptionNo@1000 : Integer;
    BEGIN
      OnGetStatementProvidersEvent(TempNameValueBuffer);

      IF TempNameValueBuffer.ISEMPTY THEN
        EXIT(''); // Action should not be visible in this case so should not occur

      IF (TempNameValueBuffer.COUNT = 1) OR (NOT GUIALLOWED) THEN
        EXIT(TempNameValueBuffer.Name);

      TempNameValueBuffer.FINDSET;
      REPEAT
        OptionStr += STRSUBSTNO('%1,',TempNameValueBuffer.Value);
      UNTIL TempNameValueBuffer.NEXT = 0;
      OptionStr += CancelTxt;

      OptionNo := STRMENU(OptionStr);
      IF (OptionNo = 0) OR (OptionNo = TempNameValueBuffer.COUNT + 1) THEN
        EXIT;

      TempNameValueBuffer.SETRANGE(Value,SELECTSTR(OptionNo,OptionStr));
      TempNameValueBuffer.FINDFIRST;

      EXIT(TempNameValueBuffer.Name);
    END;

    [External]
    PROCEDURE IsAutoLogonPossible@28() : Boolean;
    VAR
      AutoLogonPossible@1000 : Boolean;
    BEGIN
      AutoLogonPossible := TRUE;
      OnCheckAutoLogonPossibleEvent(Rec,AutoLogonPossible);
      EXIT(AutoLogonPossible)
    END;

    LOCAL PROCEDURE ScheduleBankStatementDownload@18();
    VAR
      JobQueueEntry@1002 : Record 472;
    BEGIN
      IF NOT IsLinkedToBankStatementServiceProvider THEN
        ERROR(BankAccNotLinkedErr);
      IF NOT IsAutoLogonPossible THEN
        ERROR(AutoLogonNotPossibleErr);

      JobQueueEntry.ScheduleRecurrentJobQueueEntry(JobQueueEntry."Object Type to Run"::Codeunit,
        CODEUNIT::"Automatic Import of Bank Stmt.",RECORDID);
      JobQueueEntry."Timeout (sec.)" := 1800;
      JobQueueEntry.Description :=
        COPYSTR(STRSUBSTNO(BankStmtScheduledDownloadDescTxt,Name),1,MAXSTRLEN(JobQueueEntry.Description));
      JobQueueEntry."Notify On Success" := FALSE;
      JobQueueEntry."No. of Minutes between Runs" := 121;
      JobQueueEntry.MODIFY;
      IF CONFIRM(JobQEntriesCreatedQst) THEN
        ShowBankStatementDownloadJobQueueEntry;
    END;

    LOCAL PROCEDURE UnscheduleBankStatementDownload@20();
    VAR
      JobQueueEntry@1002 : Record 472;
    BEGIN
      SetAutomaticImportJobQueueEntryFilters(JobQueueEntry);
      IF NOT JobQueueEntry.ISEMPTY THEN
        JobQueueEntry.DELETEALL;
    END;

    [External]
    PROCEDURE CreateNewAccount@42(OnlineBankAccLink@1000 : Record 777);
    VAR
      GeneralLedgerSetup@1001 : Record 98;
      CurrencyCode@1002 : Code[10];
    BEGIN
      GeneralLedgerSetup.GET;
      INIT;
      VALIDATE("Bank Account No.",OnlineBankAccLink."Bank Account No.");
      VALIDATE(Name,OnlineBankAccLink.Name);
      IF OnlineBankAccLink."Currency Code" <> '' THEN
        CurrencyCode := GeneralLedgerSetup.GetCurrencyCode(OnlineBankAccLink."Currency Code");
      VALIDATE("Currency Code",CurrencyCode);
      VALIDATE(Contact,OnlineBankAccLink.Contact);
    END;

    LOCAL PROCEDURE ShowBankStatementDownloadJobQueueEntry@19();
    VAR
      JobQueueEntry@1000 : Record 472;
    BEGIN
      SetAutomaticImportJobQueueEntryFilters(JobQueueEntry);
      IF JobQueueEntry.FINDFIRST THEN
        PAGE.RUN(PAGE::"Job Queue Entry Card",JobQueueEntry);
    END;

    LOCAL PROCEDURE SetAutomaticImportJobQueueEntryFilters@21(VAR JobQueueEntry@1000 : Record 472);
    BEGIN
      JobQueueEntry.SETRANGE("Object Type to Run",JobQueueEntry."Object Type to Run"::Codeunit);
      JobQueueEntry.SETRANGE("Object ID to Run",CODEUNIT::"Automatic Import of Bank Stmt.");
      JobQueueEntry.SETRANGE("Record ID to Process",RECORDID);
    END;

    LOCAL PROCEDURE CheckDeleteBalancingBankAccount@52();
    VAR
      PaymentRegistrationSetup@1000 : Record 980;
    BEGIN
      PaymentRegistrationSetup.SETRANGE("Bal. Account Type",PaymentRegistrationSetup."Bal. Account Type"::"Bank Account");
      PaymentRegistrationSetup.SETRANGE("Bal. Account No.","No.");
      IF PaymentRegistrationSetup.ISEMPTY THEN
        EXIT;

      IF NOT GUIALLOWED THEN
        ERROR(CannotDeleteBalancingBankAccountErr);

      IF NOT CONFIRM(ConfirmDeleteBalancingBankAccountQst) THEN
        ERROR('');
    END;

    [External]
    PROCEDURE GetOnlineFeedStatementStatus@44(VAR OnlineFeedStatus@1000 : Option;VAR Linked@1001 : Boolean);
    BEGIN
      Linked := FALSE;
      OnlineFeedStatus := OnlineFeedStatementStatus::"Not Linked";
      IF IsLinkedToBankStatementServiceProvider THEN BEGIN
        Linked := TRUE;
        OnlineFeedStatus := OnlineFeedStatementStatus::Linked;
        IF IsScheduledBankStatement THEN
          OnlineFeedStatus := OnlineFeedStatementStatus::"Linked and Auto. Bank Statement Enabled";
      END;
    END;

    LOCAL PROCEDURE IsScheduledBankStatement@43() : Boolean;
    VAR
      JobQueueEntry@1000 : Record 472;
    BEGIN
      JobQueueEntry.SETRANGE("Record ID to Process",RECORDID);
      EXIT(JobQueueEntry.FINDFIRST);
    END;

    [External]
    PROCEDURE DisableStatementProviders@45();
    VAR
      TempNameValueBuffer@1000 : TEMPORARY Record 823;
    BEGIN
      OnGetStatementProvidersEvent(TempNameValueBuffer);
      IF TempNameValueBuffer.FINDSET THEN
        REPEAT
          OnDisableStatementProviderEvent(TempNameValueBuffer.Name);
        UNTIL TempNameValueBuffer.NEXT = 0;
    END;

    LOCAL PROCEDURE IsContactUpdateNeeded@49() : Boolean;
    VAR
      BankContUpdate@1001 : Codeunit 5058;
      UpdateNeeded@1000 : Boolean;
    BEGIN
      UpdateNeeded :=
        (Name <> xRec.Name) OR
        ("Search Name" <> xRec."Search Name") OR
        ("Name 2" <> xRec."Name 2") OR
        (Address <> xRec.Address) OR
        ("Address 2" <> xRec."Address 2") OR
        (City <> xRec.City) OR
        ("Phone No." <> xRec."Phone No.") OR
        ("Telex No." <> xRec."Telex No.") OR
        ("Territory Code" <> xRec."Territory Code") OR
        ("Currency Code" <> xRec."Currency Code") OR
        ("Language Code" <> xRec."Language Code") OR
        ("Our Contact Code" <> xRec."Our Contact Code") OR
        ("Country/Region Code" <> xRec."Country/Region Code") OR
        ("Fax No." <> xRec."Fax No.") OR
        ("Telex Answer Back" <> xRec."Telex Answer Back") OR
        ("Post Code" <> xRec."Post Code") OR
        (County <> xRec.County) OR
        ("E-Mail" <> xRec."E-Mail") OR
        ("Home Page" <> xRec."Home Page");

      IF NOT UpdateNeeded AND NOT ISTEMPORARY THEN
        UpdateNeeded := BankContUpdate.ContactNameIsBlank("No.");

      OnAfterIsUpdateNeeded(xRec,Rec,UpdateNeeded);
      EXIT(UpdateNeeded);
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterIsUpdateNeeded@50(BankAccount@1000 : Record 270;xBankAccount@1001 : Record 270;VAR UpdateNeeded@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnCheckLinkedToStatementProviderEvent@22(VAR BankAccount@1000 : Record 270;VAR IsLinked@1002 : Boolean);
    BEGIN
      // The subscriber of this event should answer whether the bank account is linked to a bank statement provider service
    END;

    [Integration]
    LOCAL PROCEDURE OnCheckAutoLogonPossibleEvent@23(VAR BankAccount@1000 : Record 270;VAR AutoLogonPossible@1001 : Boolean);
    BEGIN
      // The subscriber of this event should answer whether the bank account can be logged on to without multi-factor authentication
    END;

    [Integration]
    LOCAL PROCEDURE OnUnlinkStatementProviderEvent@24(VAR BankAccount@1000 : Record 270;VAR Handled@1002 : Boolean);
    BEGIN
      // The subscriber of this event should unlink the bank account from a bank statement provider service
    END;

    [Integration]
    [External]
    PROCEDURE OnMarkAccountLinkedEvent@41(VAR OnlineBankAccLink@1000 : Record 777;VAR BankAccount@1001 : Record 270);
    BEGIN
      // The subscriber of this event should Mark the account linked to a bank statement provider service
    END;

    [Integration]
    LOCAL PROCEDURE OnSimpleLinkStatementProviderEvent@40(VAR OnlineBankAccLink@1000 : Record 777;VAR StatementProvider@1002 : Text);
    BEGIN
      // The subscriber of this event should link the bank account to a bank statement provider service
    END;

    [Integration]
    LOCAL PROCEDURE OnLinkStatementProviderEvent@25(VAR BankAccount@1000 : Record 270;VAR StatementProvider@1002 : Text);
    BEGIN
      // The subscriber of this event should link the bank account to a bank statement provider service
    END;

    [Integration]
    LOCAL PROCEDURE OnRefreshStatementProviderEvent@48(VAR BankAccount@1000 : Record 270;VAR StatementProvider@1002 : Text);
    BEGIN
      // The subscriber of this event should refresh the bank account linked to a bank statement provider service
    END;

    [Integration(TRUE)]
    LOCAL PROCEDURE OnGetDataExchangeDefinitionEvent@26(VAR DataExchDefCodeResponse@1001 : Code[20];VAR Handled@1000 : Boolean);
    BEGIN
      // This event should retrieve the data exchange definition format for processing the online feeds
    END;

    [Integration]
    LOCAL PROCEDURE OnUpdateBankAccountLinkingEvent@34(VAR BankAccount@1000 : Record 270;VAR StatementProvider@1001 : Text);
    BEGIN
      // This event should handle updating of the single or multiple bank accounts
    END;

    [Integration]
    LOCAL PROCEDURE OnGetStatementProvidersEvent@36(VAR TempNameValueBuffer@1002 : TEMPORARY Record 823);
    BEGIN
      // The subscriber of this event should insert a unique identifier (Name) and friendly name of the provider (Value)
    END;

    [Integration]
    LOCAL PROCEDURE OnDisableStatementProviderEvent@46(ProviderName@1002 : Text);
    BEGIN
      // The subscriber of this event should disable the statement provider with the given name
    END;

    BEGIN
    END.
  }
}

OBJECT Table 274 Bank Acc. Reconciliation Line
{
  OBJECT-PROPERTIES
  {
    Date=02-10-21;
    Time=12:00:00;
    Modified=Yes;
    Version List=NAVW114.30;
  }
  PROPERTIES
  {
    Permissions=TableData 1221=rimd;
    OnInsert=BEGIN
               BankAccRecon.GET("Statement Type","Bank Account No.","Statement No.");
               "Applied Entries" := 0;
               VALIDATE("Applied Amount",0);
             END;

    OnModify=BEGIN
               IF xRec."Statement Amount" <> "Statement Amount" THEN
                 RemoveApplication(Type);
             END;

    OnDelete=BEGIN
               RemoveApplication(Type);
               ClearDataExchEntries;
               RemoveAppliedPaymentEntries;
               DeletePaymentMatchingDetails;
               UpdateParentLineStatementAmount;
               IF FIND THEN;
             END;

    OnRename=BEGIN
               ERROR(Text000,TABLECAPTION);
             END;

    CaptionML=[ENU=Bank Acc. Reconciliation Line;
               ENN=Bank Acc. Reconciliation Line];
  }
  FIELDS
  {
    { 1   ;   ;Bank Account No.    ;Code20        ;TableRelation="Bank Account";
                                                   CaptionML=[ENU=Bank Account No.;
                                                              ENN=Bank Account No.] }
    { 2   ;   ;Statement No.       ;Code20        ;TableRelation="Bank Acc. Reconciliation"."Statement No." WHERE (Bank Account No.=FIELD(Bank Account No.));
                                                   CaptionML=[ENU=Statement No.;
                                                              ENN=Statement No.] }
    { 3   ;   ;Statement Line No.  ;Integer       ;CaptionML=[ENU=Statement Line No.;
                                                              ENN=Statement Line No.] }
    { 4   ;   ;Document No.        ;Code20        ;CaptionML=[ENU=Document No.;
                                                              ENN=Document No.] }
    { 5   ;   ;Transaction Date    ;Date          ;CaptionML=[ENU=Transaction Date;
                                                              ENN=Transaction Date] }
    { 6   ;   ;Description         ;Text100       ;CaptionML=[ENU=Description;
                                                              ENN=Description] }
    { 7   ;   ;Statement Amount    ;Decimal       ;OnValidate=BEGIN
                                                                Difference := "Statement Amount" - "Applied Amount";
                                                              END;

                                                   CaptionML=[ENU=Statement Amount;
                                                              ENN=Statement Amount];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 8   ;   ;Difference          ;Decimal       ;OnValidate=BEGIN
                                                                "Statement Amount" := "Applied Amount" + Difference;
                                                              END;

                                                   CaptionML=[ENU=Difference;
                                                              ENN=Difference];
                                                   BlankZero=Yes;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 9   ;   ;Applied Amount      ;Decimal       ;OnValidate=BEGIN
                                                                Difference := "Statement Amount" - "Applied Amount";
                                                              END;

                                                   CaptionML=[ENU=Applied Amount;
                                                              ENN=Applied Amount];
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 10  ;   ;Type                ;Option        ;OnValidate=BEGIN
                                                                IF (Type <> xRec.Type) AND
                                                                   ("Applied Entries" <> 0)
                                                                THEN
                                                                  IF CONFIRM(Text001,FALSE) THEN BEGIN
                                                                    RemoveApplication(xRec.Type);
                                                                    VALIDATE("Applied Amount",0);
                                                                    "Applied Entries" := 0;
                                                                    "Check No." := '';
                                                                  END ELSE
                                                                    ERROR(Text002);
                                                              END;

                                                   CaptionML=[ENU=Type;
                                                              ENN=Type];
                                                   OptionCaptionML=[ENU=Bank Account Ledger Entry,Check Ledger Entry,Difference;
                                                                    ENN=Bank Account Ledger Entry,Cheque Ledger Entry,Difference];
                                                   OptionString=Bank Account Ledger Entry,Check Ledger Entry,Difference }
    { 11  ;   ;Applied Entries     ;Integer       ;OnLookup=BEGIN
                                                              DisplayApplication;
                                                            END;

                                                   CaptionML=[ENU=Applied Entries;
                                                              ENN=Applied Entries];
                                                   Editable=No }
    { 12  ;   ;Value Date          ;Date          ;CaptionML=[ENU=Value Date;
                                                              ENN=Value Date] }
    { 13  ;   ;Ready for Application;Boolean      ;CaptionML=[ENU=Ready for Application;
                                                              ENN=Ready for Application] }
    { 14  ;   ;Check No.           ;Code20        ;CaptionML=[ENU=Check No.;
                                                              ENN=Cheque No.] }
    { 15  ;   ;Related-Party Name  ;Text250       ;CaptionML=[ENU=Related-Party Name;
                                                              ENN=Related-Party Name] }
    { 16  ;   ;Additional Transaction Info;Text100;CaptionML=[ENU=Additional Transaction Info;
                                                              ENN=Additional Transaction Info] }
    { 17  ;   ;Data Exch. Entry No.;Integer       ;TableRelation="Data Exch.";
                                                   CaptionML=[ENU=Data Exch. Entry No.;
                                                              ENN=Data Exch. Entry No.];
                                                   Editable=No }
    { 18  ;   ;Data Exch. Line No. ;Integer       ;CaptionML=[ENU=Data Exch. Line No.;
                                                              ENN=Data Exch. Line No.];
                                                   Editable=No }
    { 20  ;   ;Statement Type      ;Option        ;CaptionML=[ENU=Statement Type;
                                                              ENN=Statement Type];
                                                   OptionCaptionML=[ENU=Bank Reconciliation,Payment Application;
                                                                    ENN=Bank Reconciliation,Payment Application];
                                                   OptionString=Bank Reconciliation,Payment Application }
    { 21  ;   ;Account Type        ;Option        ;OnValidate=BEGIN
                                                                TESTFIELD("Applied Amount",0);
                                                                IF "Account Type" = "Account Type"::"IC Partner" THEN
                                                                  IF NOT ConfirmManagement.ConfirmProcessUI(ICPartnerAccountTypeQst,FALSE) THEN BEGIN
                                                                    "Account Type" := xRec."Account Type";
                                                                    EXIT;
                                                                  END;
                                                                IF "Account Type" <> xRec."Account Type" THEN
                                                                  VALIDATE("Account No.",'');
                                                              END;

                                                   CaptionML=[ENU=Account Type;
                                                              ENN=Account Type];
                                                   OptionCaptionML=[ENU=G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner;
                                                                    ENN=G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner];
                                                   OptionString=G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner,Employee }
    { 22  ;   ;Account No.         ;Code20        ;TableRelation=IF (Account Type=CONST(G/L Account)) "G/L Account" WHERE (Account Type=CONST(Posting),
                                                                                                                           Blocked=CONST(No))
                                                                                                                           ELSE IF (Account Type=CONST(Customer)) Customer
                                                                                                                           ELSE IF (Account Type=CONST(Vendor)) Vendor
                                                                                                                           ELSE IF (Account Type=CONST(Bank Account)) "Bank Account"
                                                                                                                           ELSE IF (Account Type=CONST(Fixed Asset)) "Fixed Asset"
                                                                                                                           ELSE IF (Account Type=CONST(IC Partner)) "IC Partner";
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Applied Amount",0);
                                                                CreateDim(
                                                                  DimMgt.TypeToTableID1("Account Type"),"Account No.",
                                                                  DATABASE::"Salesperson/Purchaser",GetSalepersonPurchaserCode);
                                                                DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
                                                              END;

                                                   CaptionML=[ENU=Account No.;
                                                              ENN=Account No.] }
    { 23  ;   ;Transaction Text    ;Text140       ;OnValidate=BEGIN
                                                                IF ("Statement Type" = "Statement Type"::"Payment Application") OR (Description = '') THEN
                                                                  Description := COPYSTR("Transaction Text",1,MAXSTRLEN(Description));
                                                              END;

                                                   CaptionML=[ENU=Transaction Text;
                                                              ENN=Transaction Text] }
    { 24  ;   ;Related-Party Bank Acc. No.;Text100;CaptionML=[ENU=Related-Party Bank Acc. No.;
                                                              ENN=Related-Party Bank Acc. No.] }
    { 25  ;   ;Related-Party Address;Text100      ;CaptionML=[ENU=Related-Party Address;
                                                              ENN=Related-Party Address] }
    { 26  ;   ;Related-Party City  ;Text50        ;CaptionML=[ENU=Related-Party City;
                                                              ENN=Related-Party City] }
    { 27  ;   ;Payment Reference No.;Code50       ;CaptionML=[ENU=Payment Reference No.;
                                                              ENN=Payment Reference No.] }
    { 31  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 1 Code;
                                                              ENN=Shortcut Dimension 1 Code];
                                                   CaptionClass='1,2,1' }
    { 32  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 2 Code;
                                                              ENN=Shortcut Dimension 2 Code];
                                                   CaptionClass='1,2,2' }
    { 50  ;   ;Match Confidence    ;Option        ;FieldClass=FlowField;
                                                   InitValue=None;
                                                   CalcFormula=Max("Applied Payment Entry"."Match Confidence" WHERE (Statement Type=FIELD(Statement Type),
                                                                                                                     Bank Account No.=FIELD(Bank Account No.),
                                                                                                                     Statement No.=FIELD(Statement No.),
                                                                                                                     Statement Line No.=FIELD(Statement Line No.)));
                                                   CaptionML=[ENU=Match Confidence;
                                                              ENN=Match Confidence];
                                                   OptionCaptionML=[ENU=None,Low,Medium,High,High - Text-to-Account Mapping,Manual,Accepted;
                                                                    ENN=None,Low,Medium,High,High - Text-to-Account Mapping,Manual,Accepted];
                                                   OptionString=None,Low,Medium,High,High - Text-to-Account Mapping,Manual,Accepted;
                                                   Editable=No }
    { 51  ;   ;Match Quality       ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Max("Applied Payment Entry".Quality WHERE (Bank Account No.=FIELD(Bank Account No.),
                                                                                                          Statement No.=FIELD(Statement No.),
                                                                                                          Statement Line No.=FIELD(Statement Line No.),
                                                                                                          Statement Type=FIELD(Statement Type)));
                                                   CaptionML=[ENU=Match Quality;
                                                              ENN=Match Quality];
                                                   Editable=No }
    { 60  ;   ;Sorting Order       ;Integer       ;CaptionML=[ENU=Sorting Order;
                                                              ENN=Sorting Order] }
    { 61  ;   ;Parent Line No.     ;Integer       ;CaptionML=[ENU=Parent Line No.;
                                                              ENN=Parent Line No.];
                                                   Editable=No }
    { 70  ;   ;Transaction ID      ;Text50        ;CaptionML=[ENU=Transaction ID;
                                                              ENN=Transaction ID] }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnValidate=BEGIN
                                                                DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
                                                              END;

                                                   OnLookup=BEGIN
                                                              ShowDimensions;
                                                            END;

                                                   CaptionML=[ENU=Dimension Set ID;
                                                              ENN=Dimension Set ID];
                                                   Editable=No }
    { 50000;  ;External Document No.;Code25       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Bank Account Ledger Entry"."External Document No." WHERE (Bank Account No.=FIELD(Bank Account No.),
                                                                                                                                 Document No.=FIELD(Document No.)));
                                                   TableRelation="Bank Account Ledger Entry"."External Document No." WHERE (Bank Account No.=FIELD(Bank Account No.),
                                                                                                                            Document No.=FIELD(Document No.)) }
  }
  KEYS
  {
    {    ;Statement Type,Bank Account No.,Statement No.,Statement Line No.;
                                                   Clustered=Yes }
    {    ;Account Type,Statement Amount            }
    {    ;Type,Applied Amount                      }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=You cannot rename a %1.;ENN=You cannot rename a %1.';
      Text001@1001 : TextConst 'ENU=Delete application?;ENN=Delete application?';
      Text002@1002 : TextConst 'ENU=Update canceled.;ENN=Update cancelled.';
      BankAccLedgEntry@1003 : Record 271;
      CheckLedgEntry@1004 : Record 272;
      BankAccRecon@1005 : Record 273;
      BankAccSetStmtNo@1006 : Codeunit 375;
      CheckSetStmtNo@1007 : Codeunit 376;
      DimMgt@1009 : Codeunit 408;
      ConfirmManagement@1016 : Codeunit 27;
      AmountWithinToleranceRangeTok@1011 : TextConst '@@@={Locked};ENU=">=%1&<=%2";ENN=">=%1&<=%2"';
      AmountOustideToleranceRangeTok@1012 : TextConst '@@@={Locked};ENU=<%1|>%2;ENN=<%1|>%2';
      TransactionAmountMustNotBeZeroErr@1008 : TextConst 'ENU=The Transaction Amount field must have a value that is not 0.;ENN=The Transaction Amount field must have a value that is not 0.';
      CreditTheAccountQst@1013 : TextConst '@@@=%1 is the account name, %2 is the amount that is not applied (there is filed on the page named Remaining Amount To Apply);ENU=The remaining amount to apply is %2.\\Do you want to create a new payment application line that will debit or credit %1 with the remaining amount when you post the payment?;ENN=The remaining amount to apply is %2.\\Do you want to create a new payment application line that will debit or credit %1 with the remaining amount when you post the payment?';
      ExcessiveAmountErr@1010 : TextConst '@@@=%1 is the amount that is not applied (there is filed on the page named Remaining Amount To Apply);ENU=The remaining amount to apply is %1.;ENN=The remaining amount to apply is %1.';
      ImportPostedTransactionsQst@1014 : TextConst 'ENU=The bank statement contains payments that are already applied, but the related bank account ledger entries are not closed.\\Do you want to include these payments in the import?;ENN=The bank statement contains payments that are already applied, but the related bank account ledger entries are not closed.\\Do you want to include these payments in the import?';
      ICPartnerAccountTypeQst@1015 : TextConst 'ENU=The resulting entry will be of type IC Transaction, but no Intercompany Outbox transaction will be created. \\Do you want to use the IC Partner account type anyway?;ENN=The resulting entry will be of type IC Transaction, but no Intercompany Outbox transaction will be created. \\Do you want to use the IC Partner account type anyway?';

    [External]
    PROCEDURE DisplayApplication@2();
    VAR
      PaymentApplication@1000 : Page 1292;
    BEGIN
      CASE "Statement Type" OF
        "Statement Type"::"Bank Reconciliation":
          CASE Type OF
            Type::"Bank Account Ledger Entry":
              BEGIN
                BankAccLedgEntry.RESET;
                BankAccLedgEntry.SETCURRENTKEY("Bank Account No.",Open);
                BankAccLedgEntry.SETRANGE("Bank Account No.","Bank Account No.");
                BankAccLedgEntry.SETRANGE(Open,TRUE);
                BankAccLedgEntry.SETRANGE(
                  "Statement Status",BankAccLedgEntry."Statement Status"::"Bank Acc. Entry Applied");
                BankAccLedgEntry.SETRANGE("Statement No.","Statement No.");
                BankAccLedgEntry.SETRANGE("Statement Line No.","Statement Line No.");
                PAGE.RUN(0,BankAccLedgEntry);
              END;
            Type::"Check Ledger Entry":
              BEGIN
                CheckLedgEntry.RESET;
                CheckLedgEntry.SETCURRENTKEY("Bank Account No.",Open);
                CheckLedgEntry.SETRANGE("Bank Account No.","Bank Account No.");
                CheckLedgEntry.SETRANGE(Open,TRUE);
                CheckLedgEntry.SETRANGE(
                  "Statement Status",CheckLedgEntry."Statement Status"::"Check Entry Applied");
                CheckLedgEntry.SETRANGE("Statement No.","Statement No.");
                CheckLedgEntry.SETRANGE("Statement Line No.","Statement Line No.");
                PAGE.RUN(0,CheckLedgEntry);
              END;
          END;
        "Statement Type"::"Payment Application":
          BEGIN
            IF "Statement Amount" = 0 THEN
              ERROR(TransactionAmountMustNotBeZeroErr);
            PaymentApplication.SetBankAccReconcLine(Rec);
            PaymentApplication.RUNMODAL;
          END;
      END;
    END;

    [External]
    PROCEDURE GetCurrencyCode@3() : Code[10];
    VAR
      BankAcc@1000 : Record 270;
    BEGIN
      IF "Bank Account No." = BankAcc."No." THEN
        EXIT(BankAcc."Currency Code");

      IF BankAcc.GET("Bank Account No.") THEN
        EXIT(BankAcc."Currency Code");

      EXIT('');
    END;

    [External]
    PROCEDURE GetStyle@35() : Text;
    BEGIN
      IF "Applied Entries" <> 0 THEN
        EXIT('Favorable');

      EXIT('');
    END;

    [External]
    PROCEDURE ClearDataExchEntries@5();
    VAR
      DataExchField@1000 : Record 1221;
      BankAccReconciliationLine@1001 : Record 274;
    BEGIN
      DataExchField.DeleteRelatedRecords("Data Exch. Entry No.","Data Exch. Line No.");

      BankAccReconciliationLine.SETRANGE("Statement Type","Statement Type");
      BankAccReconciliationLine.SETRANGE("Bank Account No.","Bank Account No.");
      BankAccReconciliationLine.SETRANGE("Statement No.","Statement No.");
      BankAccReconciliationLine.SETRANGE("Data Exch. Entry No.","Data Exch. Entry No.");
      BankAccReconciliationLine.SETFILTER("Statement Line No.",'<>%1',"Statement Line No.");
      IF BankAccReconciliationLine.ISEMPTY THEN
        DataExchField.DeleteRelatedRecords("Data Exch. Entry No.",0);
    END;

    [External]
    PROCEDURE ShowDimensions@25();
    BEGIN
      "Dimension Set ID" :=
        DimMgt.EditDimensionSet("Dimension Set ID",STRSUBSTNO('%1 %2 %3',TABLECAPTION,"Statement No.","Statement Line No."));
      DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
    END;

    [External]
    PROCEDURE CreateDim@26(Type1@1000 : Integer;No1@1001 : Code[20];Type2@1007 : Integer;No2@1006 : Code[20]);
    VAR
      SourceCodeSetup@1002 : Record 242;
      BankAccReconciliation@1005 : Record 273;
      TableID@1003 : ARRAY [10] OF Integer;
      No@1004 : ARRAY [10] OF Code[20];
    BEGIN
      SourceCodeSetup.GET;
      TableID[1] := Type1;
      No[1] := No1;
      TableID[2] := Type2;
      No[2] := No2;
      OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No);

      "Shortcut Dimension 1 Code" := '';
      "Shortcut Dimension 2 Code" := '';
      BankAccReconciliation.GET("Statement Type","Bank Account No.","Statement No.");
      "Dimension Set ID" :=
        DimMgt.GetRecDefaultDimID(
          Rec,CurrFieldNo,TableID,No,SourceCodeSetup."Payment Reconciliation Journal",
          "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",BankAccReconciliation."Dimension Set ID",DATABASE::"Bank Account");
    END;

    [External]
    PROCEDURE SetUpNewLine@34();
    BEGIN
      "Transaction Date" := WORKDATE;
      "Match Confidence" := "Match Confidence"::None;
      "Document No." := '';
    END;

    [External]
    PROCEDURE ValidateShortcutDimCode@29(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.ValidateShortcutDimValues(FieldNumber,ShortcutDimCode,"Dimension Set ID");
    END;

    [External]
    PROCEDURE ShowShortcutDimCode@50(VAR ShortcutDimCode@1000 : ARRAY [8] OF Code[20]);
    BEGIN
      DimMgt.GetShortcutDimensions("Dimension Set ID",ShortcutDimCode);
    END;

    [External]
    PROCEDURE AcceptAppliedPaymentEntriesSelectedLines@12();
    BEGIN
      IF FINDSET THEN
        REPEAT
          AcceptApplication;
        UNTIL NEXT = 0;
    END;

    [External]
    PROCEDURE RejectAppliedPaymentEntriesSelectedLines@18();
    BEGIN
      IF FINDSET THEN
        REPEAT
          RejectAppliedPayment;
        UNTIL NEXT = 0;
    END;

    [External]
    PROCEDURE RejectAppliedPayment@6();
    BEGIN
      RemoveAppliedPaymentEntries;
      DeletePaymentMatchingDetails;
    END;

    [External]
    PROCEDURE AcceptApplication@4();
    VAR
      AppliedPaymentEntry@1000 : Record 1294;
    BEGIN
      // For customer payments, the applied amount is positive, so positive difference means excessive amount.
      // For vendor payments, the applied amount is negative, so negative difference means excessive amount.
      // If "Applied Amount" and Difference have the same sign, then this is an overpayment situation.
      // Two non-zero numbers have the same sign if and only if their product is a positive number.
      IF Difference * "Applied Amount" > 0 THEN BEGIN
        IF "Account Type" = "Account Type"::"Bank Account" THEN
          ERROR(ExcessiveAmountErr,Difference);
        SetAppliedPaymentEntryFromRec(AppliedPaymentEntry);
        IF NOT AppliedPaymentEntry.FIND THEN BEGIN
          IF NOT CONFIRM(STRSUBSTNO(CreditTheAccountQst,GetAppliedToName,Difference)) THEN
            EXIT;
          TransferRemainingAmountToAccount;
        END;
      END;

      AppliedPaymentEntry.FilterAppliedPmtEntry(Rec);
      AppliedPaymentEntry.MODIFYALL("Match Confidence","Match Confidence"::Accepted);
    END;

    LOCAL PROCEDURE RemoveApplication@1(AppliedType@1000 : Option);
    BEGIN
      IF "Statement Type" = "Statement Type"::"Bank Reconciliation" THEN
        CASE AppliedType OF
          Type::"Bank Account Ledger Entry":
            BEGIN
              BankAccLedgEntry.RESET;
              BankAccLedgEntry.SETCURRENTKEY("Bank Account No.",Open);
              BankAccLedgEntry.SETRANGE("Bank Account No.","Bank Account No.");
              BankAccLedgEntry.SETRANGE(Open,TRUE);
              BankAccLedgEntry.SETRANGE(
                "Statement Status",BankAccLedgEntry."Statement Status"::"Bank Acc. Entry Applied");
              BankAccLedgEntry.SETRANGE("Statement No.","Statement No.");
              BankAccLedgEntry.SETRANGE("Statement Line No.","Statement Line No.");
              BankAccLedgEntry.LOCKTABLE;
              CheckLedgEntry.LOCKTABLE;
              IF BankAccLedgEntry.FIND('-') THEN
                REPEAT
                  BankAccSetStmtNo.RemoveReconNo(BankAccLedgEntry,Rec,TRUE);
                UNTIL BankAccLedgEntry.NEXT = 0;
              "Applied Entries" := 0;
              VALIDATE("Applied Amount",0);
              MODIFY;
            END;
          Type::"Check Ledger Entry":
            BEGIN
              CheckLedgEntry.RESET;
              CheckLedgEntry.SETCURRENTKEY("Bank Account No.",Open);
              CheckLedgEntry.SETRANGE("Bank Account No.","Bank Account No.");
              CheckLedgEntry.SETRANGE(Open,TRUE);
              CheckLedgEntry.SETRANGE(
                "Statement Status",CheckLedgEntry."Statement Status"::"Check Entry Applied");
              CheckLedgEntry.SETRANGE("Statement No.","Statement No.");
              CheckLedgEntry.SETRANGE("Statement Line No.","Statement Line No.");
              BankAccLedgEntry.LOCKTABLE;
              CheckLedgEntry.LOCKTABLE;
              IF CheckLedgEntry.FIND('-') THEN
                REPEAT
                  CheckSetStmtNo.RemoveReconNo(CheckLedgEntry,Rec,TRUE);
                UNTIL CheckLedgEntry.NEXT = 0;
              "Applied Entries" := 0;
              VALIDATE("Applied Amount",0);
              "Check No." := '';
              MODIFY;
            END;
        END;
    END;

    [External]
    PROCEDURE SetManualApplication@33();
    VAR
      AppliedPaymentEntry@1000 : Record 1294;
    BEGIN
      AppliedPaymentEntry.FilterAppliedPmtEntry(Rec);
      AppliedPaymentEntry.MODIFYALL("Match Confidence","Match Confidence"::Manual)
    END;

    LOCAL PROCEDURE RemoveAppliedPaymentEntries@9();
    VAR
      AppliedPmtEntry@1000 : Record 1294;
    BEGIN
      VALIDATE("Applied Amount",0);
      VALIDATE("Applied Entries",0);
      VALIDATE("Account No.",'');
      MODIFY(TRUE);

      AppliedPmtEntry.FilterAppliedPmtEntry(Rec);
      AppliedPmtEntry.DELETEALL(TRUE);
    END;

    LOCAL PROCEDURE DeletePaymentMatchingDetails@10();
    VAR
      PaymentMatchingDetails@1000 : Record 1299;
    BEGIN
      PaymentMatchingDetails.SETRANGE("Statement Type","Statement Type");
      PaymentMatchingDetails.SETRANGE("Bank Account No.","Bank Account No.");
      PaymentMatchingDetails.SETRANGE("Statement No.","Statement No.");
      PaymentMatchingDetails.SETRANGE("Statement Line No.","Statement Line No.");
      PaymentMatchingDetails.DELETEALL(TRUE);
    END;

    [External]
    PROCEDURE GetAppliedEntryAccountName@47(AppliedToEntryNo@1000 : Integer) : Text;
    VAR
      AccountType@1005 : Option;
      AccountNo@1006 : Code[20];
    BEGIN
      AccountType := GetAppliedEntryAccountType(AppliedToEntryNo);
      AccountNo := GetAppliedEntryAccountNo(AppliedToEntryNo);
      EXIT(GetAccountName(AccountType,AccountNo));
    END;

    [External]
    PROCEDURE GetAppliedToName@14() : Text;
    VAR
      AccountType@1005 : Option;
      AccountNo@1006 : Code[20];
    BEGIN
      AccountType := GetAppliedToAccountType;
      AccountNo := GetAppliedToAccountNo;
      EXIT(GetAccountName(AccountType,AccountNo));
    END;

    [External]
    PROCEDURE GetAppliedEntryAccountType@43(AppliedToEntryNo@1000 : Integer) : Integer;
    VAR
      BankAccountLedgerEntry@1003 : Record 271;
    BEGIN
      IF "Account Type" = "Account Type"::"Bank Account" THEN
        IF BankAccountLedgerEntry.GET(AppliedToEntryNo) THEN
          EXIT(BankAccountLedgerEntry."Bal. Account Type");
      EXIT("Account Type");
    END;

    [External]
    PROCEDURE GetAppliedToAccountType@36() : Integer;
    VAR
      BankAccountLedgerEntry@1003 : Record 271;
    BEGIN
      IF "Account Type" = "Account Type"::"Bank Account" THEN
        IF BankAccountLedgerEntry.GET(GetFirstAppliedToEntryNo) THEN
          EXIT(BankAccountLedgerEntry."Bal. Account Type");
      EXIT("Account Type");
    END;

    [External]
    PROCEDURE GetAppliedEntryAccountNo@39(AppliedToEntryNo@1000 : Integer) : Code[20];
    VAR
      CustLedgerEntry@1001 : Record 21;
      VendorLedgerEntry@1002 : Record 25;
      BankAccountLedgerEntry@1003 : Record 271;
    BEGIN
      CASE "Account Type" OF
        "Account Type"::Customer:
          IF CustLedgerEntry.GET(AppliedToEntryNo) THEN
            EXIT(CustLedgerEntry."Customer No.");
        "Account Type"::Vendor:
          IF VendorLedgerEntry.GET(AppliedToEntryNo) THEN
            EXIT(VendorLedgerEntry."Vendor No.");
        "Account Type"::"Bank Account":
          IF BankAccountLedgerEntry.GET(AppliedToEntryNo) THEN
            EXIT(BankAccountLedgerEntry."Bal. Account No.");
      END;
      EXIT("Account No.");
    END;

    [External]
    PROCEDURE GetAppliedToAccountNo@37() : Code[20];
    VAR
      BankAccountLedgerEntry@1004 : Record 271;
    BEGIN
      IF "Account Type" = "Account Type"::"Bank Account" THEN
        IF BankAccountLedgerEntry.GET(GetFirstAppliedToEntryNo) THEN
          EXIT(BankAccountLedgerEntry."Bal. Account No.");
      EXIT("Account No.")
    END;

    LOCAL PROCEDURE GetAccountName@45(AccountType@1000 : Option;AccountNo@1001 : Code[20]) : Text;
    VAR
      Customer@1005 : Record 18;
      Vendor@1004 : Record 23;
      GLAccount@1003 : Record 15;
      BankAccount@1002 : Record 270;
      Name@1006 : Text;
    BEGIN
      CASE AccountType OF
        "Account Type"::Customer:
          IF Customer.GET(AccountNo) THEN
            Name := Customer.Name;
        "Account Type"::Vendor:
          IF Vendor.GET(AccountNo) THEN
            Name := Vendor.Name;
        "Account Type"::"G/L Account":
          IF GLAccount.GET(AccountNo) THEN
            Name := GLAccount.Name;
        "Account Type"::"Bank Account":
          IF BankAccount.GET(AccountNo) THEN
            Name := BankAccount.Name;
      END;

      EXIT(Name);
    END;

    LOCAL PROCEDURE SetAppliedPaymentEntryFromRec@54(VAR AppliedPaymentEntry@1000 : Record 1294);
    BEGIN
      AppliedPaymentEntry.TransferFromBankAccReconLine(Rec);
      AppliedPaymentEntry."Account Type" := GetAppliedToAccountType;
      AppliedPaymentEntry."Account No." := GetAppliedToAccountNo;
    END;

    [External]
    PROCEDURE AppliedEntryAccountDrillDown@46(AppliedEntryNo@1000 : Integer);
    VAR
      AccountType@1004 : Option;
      AccountNo@1003 : Code[20];
    BEGIN
      AccountType := GetAppliedEntryAccountType(AppliedEntryNo);
      AccountNo := GetAppliedEntryAccountNo(AppliedEntryNo);
      OpenAccountPage(AccountType,AccountNo);
    END;

    [External]
    PROCEDURE AppliedToDrillDown@16();
    VAR
      AccountType@1004 : Option;
      AccountNo@1003 : Code[20];
    BEGIN
      AccountType := GetAppliedToAccountType;
      AccountNo := GetAppliedToAccountNo;
      OpenAccountPage(AccountType,AccountNo);
    END;

    LOCAL PROCEDURE OpenAccountPage@40(AccountType@1006 : Option;AccountNo@1007 : Code[20]);
    VAR
      Customer@1002 : Record 18;
      Vendor@1001 : Record 23;
      GLAccount@1000 : Record 15;
      BankAccount@1005 : Record 270;
    BEGIN
      CASE AccountType OF
        "Account Type"::Customer:
          BEGIN
            Customer.GET(AccountNo);
            PAGE.RUN(PAGE::"Customer Card",Customer);
          END;
        "Account Type"::Vendor:
          BEGIN
            Vendor.GET(AccountNo);
            PAGE.RUN(PAGE::"Vendor Card",Vendor);
          END;
        "Account Type"::"G/L Account":
          BEGIN
            GLAccount.GET(AccountNo);
            PAGE.RUN(PAGE::"G/L Account Card",GLAccount);
          END;
        "Account Type"::"Bank Account":
          BEGIN
            BankAccount.GET(AccountNo);
            PAGE.RUN(PAGE::"Bank Account Card",BankAccount);
          END;
      END;
    END;

    [External]
    PROCEDURE DrillDownOnNoOfLedgerEntriesWithinAmountTolerance@21();
    BEGIN
      DrillDownOnNoOfLedgerEntriesBasedOnAmount(AmountWithinToleranceRangeTok);
    END;

    [External]
    PROCEDURE DrillDownOnNoOfLedgerEntriesOutsideOfAmountTolerance@23();
    BEGIN
      DrillDownOnNoOfLedgerEntriesBasedOnAmount(AmountOustideToleranceRangeTok);
    END;

    LOCAL PROCEDURE DrillDownOnNoOfLedgerEntriesBasedOnAmount@24(AmountFilter@1005 : Text);
    VAR
      CustLedgerEntry@1003 : Record 21;
      VendorLedgerEntry@1004 : Record 25;
      BankAccountLedgerEntry@1000 : Record 271;
      MinAmount@1001 : Decimal;
      MaxAmount@1002 : Decimal;
    BEGIN
      GetAmountRangeForTolerance(MinAmount,MaxAmount);

      CASE "Account Type" OF
        "Account Type"::Customer:
          BEGIN
            GetCustomerLedgerEntriesInAmountRange(CustLedgerEntry,"Account No.",AmountFilter,MinAmount,MaxAmount);
            PAGE.RUN(PAGE::"Customer Ledger Entries",CustLedgerEntry);
          END;
        "Account Type"::Vendor:
          BEGIN
            GetVendorLedgerEntriesInAmountRange(VendorLedgerEntry,"Account No.",AmountFilter,MinAmount,MaxAmount);
            PAGE.RUN(PAGE::"Vendor Ledger Entries",VendorLedgerEntry);
          END;
        "Account Type"::"Bank Account":
          BEGIN
            GetBankAccountLedgerEntriesInAmountRange(BankAccountLedgerEntry,AmountFilter,MinAmount,MaxAmount);
            PAGE.RUN(PAGE::"Bank Account Ledger Entries",BankAccountLedgerEntry);
          END;
      END;
    END;

    LOCAL PROCEDURE GetCustomerLedgerEntriesInAmountRange@41(VAR CustLedgerEntry@1004 : Record 21;AccountNo@1005 : Code[20];AmountFilter@1001 : Text;MinAmount@1002 : Decimal;MaxAmount@1003 : Decimal) : Integer;
    VAR
      BankAccount@1000 : Record 270;
    BEGIN
      CustLedgerEntry.SETAUTOCALCFIELDS("Remaining Amount","Remaining Amt. (LCY)");
      BankAccount.GET("Bank Account No.");
      GetApplicableCustomerLedgerEntries(CustLedgerEntry,BankAccount."Currency Code",AccountNo);

      IF BankAccount.IsInLocalCurrency THEN
        CustLedgerEntry.SETFILTER("Remaining Amt. (LCY)",AmountFilter,MinAmount,MaxAmount)
      ELSE
        CustLedgerEntry.SETFILTER("Remaining Amount",AmountFilter,MinAmount,MaxAmount);

      EXIT(CustLedgerEntry.COUNT);
    END;

    LOCAL PROCEDURE GetVendorLedgerEntriesInAmountRange@42(VAR VendorLedgerEntry@1004 : Record 25;AccountNo@1005 : Code[20];AmountFilter@1002 : Text;MinAmount@1001 : Decimal;MaxAmount@1000 : Decimal) : Integer;
    VAR
      BankAccount@1003 : Record 270;
    BEGIN
      VendorLedgerEntry.SETAUTOCALCFIELDS("Remaining Amount","Remaining Amt. (LCY)");

      BankAccount.GET("Bank Account No.");
      GetApplicableVendorLedgerEntries(VendorLedgerEntry,BankAccount."Currency Code",AccountNo);

      IF BankAccount.IsInLocalCurrency THEN
        VendorLedgerEntry.SETFILTER("Remaining Amt. (LCY)",AmountFilter,MinAmount,MaxAmount)
      ELSE
        VendorLedgerEntry.SETFILTER("Remaining Amount",AmountFilter,MinAmount,MaxAmount);

      EXIT(VendorLedgerEntry.COUNT);
    END;

    LOCAL PROCEDURE GetBankAccountLedgerEntriesInAmountRange@7(VAR BankAccountLedgerEntry@1004 : Record 271;AmountFilter@1002 : Text;MinAmount@1001 : Decimal;MaxAmount@1000 : Decimal) : Integer;
    VAR
      BankAccount@1003 : Record 270;
    BEGIN
      BankAccount.GET("Bank Account No.");
      GetApplicableBankAccountLedgerEntries(BankAccountLedgerEntry,BankAccount."Currency Code","Bank Account No.");

      BankAccountLedgerEntry.SETFILTER("Remaining Amount",AmountFilter,MinAmount,MaxAmount);

      EXIT(BankAccountLedgerEntry.COUNT);
    END;

    LOCAL PROCEDURE GetApplicableCustomerLedgerEntries@15(VAR CustLedgerEntry@1000 : Record 21;CurrencyCode@1001 : Code[10];AccountNo@1002 : Code[20]);
    BEGIN
      CustLedgerEntry.SETRANGE(Open,TRUE);
      CustLedgerEntry.SETRANGE("Applies-to ID",'');
      CustLedgerEntry.SETFILTER("Document Type",'<>%1&<>%2',
        CustLedgerEntry."Document Type"::Payment,
        CustLedgerEntry."Document Type"::Refund);

      IF CurrencyCode <> '' THEN
        CustLedgerEntry.SETRANGE("Currency Code",CurrencyCode);

      IF AccountNo <> '' THEN
        CustLedgerEntry.SETFILTER("Customer No.",AccountNo);
    END;

    LOCAL PROCEDURE GetApplicableVendorLedgerEntries@22(VAR VendorLedgerEntry@1000 : Record 25;CurrencyCode@1002 : Code[10];AccountNo@1001 : Code[20]);
    BEGIN
      VendorLedgerEntry.SETRANGE(Open,TRUE);
      VendorLedgerEntry.SETRANGE("Applies-to ID",'');
      VendorLedgerEntry.SETFILTER("Document Type",'<>%1&<>%2',
        VendorLedgerEntry."Document Type"::Payment,
        VendorLedgerEntry."Document Type"::Refund);

      IF CurrencyCode <> '' THEN
        VendorLedgerEntry.SETRANGE("Currency Code",CurrencyCode);

      IF AccountNo <> '' THEN
        VendorLedgerEntry.SETFILTER("Vendor No.",AccountNo);
    END;

    LOCAL PROCEDURE GetApplicableBankAccountLedgerEntries@11(VAR BankAccountLedgerEntry@1000 : Record 271;CurrencyCode@1002 : Code[10];AccountNo@1001 : Code[20]);
    BEGIN
      BankAccountLedgerEntry.SETRANGE(Open,TRUE);

      IF CurrencyCode <> '' THEN
        BankAccountLedgerEntry.SETRANGE("Currency Code",CurrencyCode);

      IF AccountNo <> '' THEN
        BankAccountLedgerEntry.SETRANGE("Bank Account No.",AccountNo);
    END;

    [External]
    PROCEDURE FilterBankRecLines@20(BankAccRecon@1000 : Record 273);
    BEGIN
      RESET;
      SETRANGE("Statement Type",BankAccRecon."Statement Type");
      SETRANGE("Bank Account No.",BankAccRecon."Bank Account No.");
      SETRANGE("Statement No.",BankAccRecon."Statement No.");
    END;

    [External]
    PROCEDURE LinesExist@19(BankAccRecon@1001 : Record 273) : Boolean;
    BEGIN
      FilterBankRecLines(BankAccRecon);
      EXIT(FINDSET);
    END;

    [External]
    PROCEDURE GetAppliedToDocumentNo@30() : Text;
    VAR
      ApplyType@1002 : 'Document No.,Entry No.';
    BEGIN
      EXIT(GetAppliedNo(ApplyType::"Document No."));
    END;

    [External]
    PROCEDURE GetAppliedToEntryNo@13() : Text;
    VAR
      ApplyType@1000 : 'Document No.,Entry No.';
    BEGIN
      EXIT(GetAppliedNo(ApplyType::"Entry No."));
    END;

    LOCAL PROCEDURE GetFirstAppliedToEntryNo@17() : Integer;
    VAR
      AppliedEntryNumbers@1001 : Text;
      AppliedToEntryNo@1003 : Integer;
    BEGIN
      AppliedEntryNumbers := GetAppliedToEntryNo;
      IF AppliedEntryNumbers = '' THEN
        EXIT(0);
      EVALUATE(AppliedToEntryNo,SELECTSTR(1,AppliedEntryNumbers));
      EXIT(AppliedToEntryNo);
    END;

    LOCAL PROCEDURE GetAppliedNo@32(ApplyType@1000 : 'Document No.,Entry No.') : Text;
    VAR
      AppliedPaymentEntry@1002 : Record 1294;
      AppliedNumbers@1001 : Text;
    BEGIN
      AppliedPaymentEntry.SETRANGE("Statement Type","Statement Type");
      AppliedPaymentEntry.SETRANGE("Bank Account No.","Bank Account No.");
      AppliedPaymentEntry.SETRANGE("Statement No.","Statement No.");
      AppliedPaymentEntry.SETRANGE("Statement Line No.","Statement Line No.");

      AppliedNumbers := '';
      IF AppliedPaymentEntry.FINDSET THEN BEGIN
        REPEAT
          IF ApplyType = ApplyType::"Document No." THEN BEGIN
            IF AppliedPaymentEntry."Document No." <> '' THEN
              IF AppliedNumbers = '' THEN
                AppliedNumbers := AppliedPaymentEntry."Document No."
              ELSE
                AppliedNumbers := AppliedNumbers + ', ' + AppliedPaymentEntry."Document No.";
          END ELSE BEGIN
            IF AppliedPaymentEntry."Applies-to Entry No." <> 0 THEN
              IF AppliedNumbers = '' THEN
                AppliedNumbers := FORMAT(AppliedPaymentEntry."Applies-to Entry No.")
              ELSE
                AppliedNumbers := AppliedNumbers + ', ' + FORMAT(AppliedPaymentEntry."Applies-to Entry No.");
          END;
        UNTIL AppliedPaymentEntry.NEXT = 0;
      END;

      EXIT(AppliedNumbers);
    END;

    [External]
    PROCEDURE TransferRemainingAmountToAccount@31();
    VAR
      AppliedPaymentEntry@1000 : Record 1294;
    BEGIN
      TESTFIELD("Account No.");

      SetAppliedPaymentEntryFromRec(AppliedPaymentEntry);
      AppliedPaymentEntry.VALIDATE("Applied Amount",Difference);
      AppliedPaymentEntry.VALIDATE("Match Confidence",AppliedPaymentEntry."Match Confidence"::Manual);
      AppliedPaymentEntry.INSERT(TRUE);
    END;

    [External]
    PROCEDURE GetAmountRangeForTolerance@8(VAR MinAmount@1001 : Decimal;VAR MaxAmount@1002 : Decimal);
    VAR
      BankAccount@1000 : Record 270;
      TempAmount@1003 : Decimal;
    BEGIN
      BankAccount.GET("Bank Account No.");
      CASE BankAccount."Match Tolerance Type" OF
        BankAccount."Match Tolerance Type"::Amount:
          BEGIN
            MinAmount := "Statement Amount" - BankAccount."Match Tolerance Value";
            MaxAmount := "Statement Amount" + BankAccount."Match Tolerance Value";

            IF ("Statement Amount" >= 0) AND (MinAmount < 0) THEN
              MinAmount := 0
            ELSE
              IF ("Statement Amount" < 0) AND (MaxAmount > 0) THEN
                MaxAmount := 0;
          END;
        BankAccount."Match Tolerance Type"::Percentage:
          BEGIN
            MinAmount := "Statement Amount" * (1 - BankAccount."Match Tolerance Value" / 100);
            MaxAmount := "Statement Amount" * (1 + BankAccount."Match Tolerance Value" / 100);

            IF "Statement Amount" < 0 THEN BEGIN
              TempAmount := MinAmount;
              MinAmount := MaxAmount;
              MaxAmount := TempAmount;
            END;
          END;
      END;

      MinAmount := ROUND(MinAmount);
      MaxAmount := ROUND(MaxAmount);
    END;

    [External]
    PROCEDURE GetAppliedPmtData@52(VAR AppliedPmtEntry@1000 : Record 1294;VAR RemainingAmountAfterPosting@1002 : Decimal;VAR DifferenceStatementAmtToApplEntryAmount@1001 : Decimal;PmtAppliedToTxt@1004 : Text);
    VAR
      CurrRemAmtAfterPosting@1003 : Decimal;
    BEGIN
      AppliedPmtEntry.INIT;
      RemainingAmountAfterPosting := 0;
      DifferenceStatementAmtToApplEntryAmount := 0;

      AppliedPmtEntry.FilterAppliedPmtEntry(Rec);
      AppliedPmtEntry.SETFILTER("Applies-to Entry No.",'<>0');
      IF AppliedPmtEntry.FINDSET THEN BEGIN
        DifferenceStatementAmtToApplEntryAmount := "Statement Amount";
        REPEAT
          CurrRemAmtAfterPosting :=
            AppliedPmtEntry.GetRemAmt -
            AppliedPmtEntry.GetAmtAppliedToOtherStmtLines;

          RemainingAmountAfterPosting += CurrRemAmtAfterPosting - AppliedPmtEntry."Applied Amount";
          DifferenceStatementAmtToApplEntryAmount -= CurrRemAmtAfterPosting - AppliedPmtEntry."Applied Pmt. Discount";
        UNTIL AppliedPmtEntry.NEXT = 0;
      END;

      IF "Applied Entries" > 1 THEN
        AppliedPmtEntry.Description := STRSUBSTNO(PmtAppliedToTxt,"Applied Entries");
    END;

    LOCAL PROCEDURE UpdateParentLineStatementAmount@38();
    VAR
      BankAccReconciliationLine@1000 : Record 274;
    BEGIN
      IF BankAccReconciliationLine.GET("Statement Type","Bank Account No.","Statement No.","Parent Line No.") THEN BEGIN
        BankAccReconciliationLine.VALIDATE("Statement Amount","Statement Amount" + BankAccReconciliationLine."Statement Amount");
        BankAccReconciliationLine.MODIFY(TRUE)
      END
    END;

    [External]
    PROCEDURE IsTransactionPostedAndReconciled@27() : Boolean;
    VAR
      PostedPaymentReconLine@1001 : Record 1296;
      BankAccountStatementLine@1000 : Record 276;
    BEGIN
      IF "Transaction ID" <> '' THEN BEGIN
        PostedPaymentReconLine.SETRANGE("Bank Account No.","Bank Account No.");
        PostedPaymentReconLine.SETRANGE("Transaction ID","Transaction ID");
        PostedPaymentReconLine.SETRANGE(Reconciled,TRUE);
        IF NOT PostedPaymentReconLine.ISEMPTY THEN
          EXIT(TRUE);
        BankAccountStatementLine.SETRANGE("Bank Account No.","Bank Account No.");
        BankAccountStatementLine.SETRANGE("Transaction ID","Transaction ID");
        EXIT(NOT BankAccountStatementLine.ISEMPTY);
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE IsTransactionPostedAndNotReconciled@48() : Boolean;
    VAR
      PostedPaymentReconLine@1001 : Record 1296;
    BEGIN
      IF "Transaction ID" <> '' THEN BEGIN
        PostedPaymentReconLine.SETRANGE("Bank Account No.","Bank Account No.");
        PostedPaymentReconLine.SETRANGE("Transaction ID","Transaction ID");
        PostedPaymentReconLine.SETRANGE(Reconciled,FALSE);
        EXIT(PostedPaymentReconLine.FINDFIRST)
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE IsTransactionAlreadyImported@28() : Boolean;
    VAR
      BankAccReconciliationLine@1001 : Record 274;
    BEGIN
      IF "Transaction ID" <> '' THEN BEGIN
        BankAccReconciliationLine.SETRANGE("Statement Type","Statement Type");
        BankAccReconciliationLine.SETRANGE("Bank Account No.","Bank Account No.");
        BankAccReconciliationLine.SETRANGE("Transaction ID","Transaction ID");
        EXIT(BankAccReconciliationLine.FINDFIRST)
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE AllowImportOfPostedNotReconciledTransactions@49() : Boolean;
    VAR
      BankAccReconciliation@1000 : Record 273;
    BEGIN
      BankAccReconciliation.GET("Statement Type","Bank Account No.","Statement No.");
      IF BankAccReconciliation."Import Posted Transactions" = BankAccReconciliation."Import Posted Transactions"::" " THEN BEGIN
        BankAccReconciliation."Import Posted Transactions" := BankAccReconciliation."Import Posted Transactions"::No;
        IF GUIALLOWED THEN
          IF CONFIRM(ImportPostedTransactionsQst) THEN
            BankAccReconciliation."Import Posted Transactions" := BankAccReconciliation."Import Posted Transactions"::Yes;
        BankAccReconciliation.MODIFY;
      END;

      EXIT(BankAccReconciliation."Import Posted Transactions" = BankAccReconciliation."Import Posted Transactions"::Yes);
    END;

    [External]
    PROCEDURE CanImport@44() : Boolean;
    BEGIN
      IF IsTransactionPostedAndReconciled OR IsTransactionAlreadyImported THEN
        EXIT(FALSE);

      IF IsTransactionPostedAndNotReconciled THEN
        EXIT(AllowImportOfPostedNotReconciledTransactions);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetSalepersonPurchaserCode@51() : Code[20];
    VAR
      Customer@1002 : Record 18;
      Vendor@1003 : Record 23;
    BEGIN
      CASE "Account Type" OF
        "Account Type"::Customer:
          IF Customer.GET("Account No.") THEN
            EXIT(Customer."Salesperson Code");
        "Account Type"::Vendor:
          IF Vendor.GET("Account No.") THEN
            EXIT(Vendor."Purchaser Code");
      END;
    END;

    [External]
    PROCEDURE GetAppliesToID@62() : Code[50];
    VAR
      CustLedgerEntry@1001 : Record 21;
    BEGIN
      EXIT(COPYSTR(FORMAT("Statement No.") + '-' + FORMAT("Statement Line No."),1,MAXSTRLEN(CustLedgerEntry."Applies-to ID")));
    END;

    [External]
    PROCEDURE GetDescription@53() : Text[100];
    VAR
      AppliedPaymentEntry@1000 : Record 1294;
    BEGIN
      IF Description <> '' THEN
        EXIT(Description);

      AppliedPaymentEntry.FilterAppliedPmtEntry(Rec);
      AppliedPaymentEntry.SETFILTER("Applies-to Entry No.",'<>%1',0);
      IF AppliedPaymentEntry.FINDSET THEN
        IF AppliedPaymentEntry.NEXT = 0 THEN
          EXIT(AppliedPaymentEntry.Description);

      EXIT('');
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCreateDimTableIDs@164(VAR BankAccReconciliationLine@1000 : Record 274;VAR FieldNo@1001 : Integer;VAR TableID@1003 : ARRAY [10] OF Integer;VAR No@1002 : ARRAY [10] OF Code[20]);
    BEGIN
    END;

    BEGIN
    END.
  }
}

OBJECT Table 348 Dimension
{
  OBJECT-PROPERTIES
  {
    Date=02-10-21;
    Time=12:00:00;
    Modified=Yes;
    Version List=NAVW114.30;
  }
  PROPERTIES
  {
    DataCaptionFields=Code,Name;
    OnInsert=BEGIN
               SetLastModifiedDateTime;
             END;

    OnModify=BEGIN
               SetLastModifiedDateTime;
             END;

    OnDelete=VAR
               GLSetup@1000 : Record 98;
             BEGIN
               DimVal.SETRANGE("Dimension Code",xRec.Code);
               IF CheckIfDimUsed(xRec.Code,0,'','',0) THEN BEGIN
                 IF DimVal.FINDSET THEN
                   REPEAT
                     IF DimVal.CheckIfDimValueUsed THEN
                       ERROR(Text000,GetCheckDimErr);
                   UNTIL DimVal.NEXT = 0;
                 ERROR(Text001,GetCheckDimErr);
               END;
               IF DimVal.FINDSET THEN
                 REPEAT
                   IF DimVal.CheckIfDimValueUsed THEN
                     ERROR(Text002);
                 UNTIL DimVal.NEXT = 0;

               DefaultDim.SETRANGE("Dimension Code",Code);
               DefaultDim.DELETEALL(TRUE);

               DimVal.SETRANGE("Dimension Code",Code);
               DimVal.DELETEALL(TRUE);

               DimComb.SETRANGE("Dimension 1 Code",Code);
               DimComb.DELETEALL;

               DimComb.RESET;
               DimComb.SETRANGE("Dimension 2 Code",Code);
               DimComb.DELETEALL;

               SelectedDim.SETRANGE("Dimension Code",Code);
               SelectedDim.DELETEALL;

               AnalysisSelectedDim.SETRANGE("Dimension Code",Code);
               AnalysisSelectedDim.DELETEALL;

               DimTrans.SETRANGE(Code,Code);
               DimTrans.DELETEALL;

               GLSetup.GET;
               CASE Code OF
                 GLSetup."Shortcut Dimension 3 Code":
                   BEGIN
                     GLSetup."Shortcut Dimension 3 Code" := '';
                     GLSetup.MODIFY;
                   END;
                 GLSetup."Shortcut Dimension 4 Code":
                   BEGIN
                     GLSetup."Shortcut Dimension 4 Code" := '';
                     GLSetup.MODIFY;
                   END;
                 GLSetup."Shortcut Dimension 5 Code":
                   BEGIN
                     GLSetup."Shortcut Dimension 5 Code" := '';
                     GLSetup.MODIFY;
                   END;
                 GLSetup."Shortcut Dimension 6 Code":
                   BEGIN
                     GLSetup."Shortcut Dimension 6 Code" := '';
                     GLSetup.MODIFY;
                   END;
                 GLSetup."Shortcut Dimension 7 Code":
                   BEGIN
                     GLSetup."Shortcut Dimension 7 Code" := '';
                     GLSetup.MODIFY;
                   END;
                 GLSetup."Shortcut Dimension 8 Code":
                   BEGIN
                     GLSetup."Shortcut Dimension 8 Code" := '';
                     GLSetup.MODIFY;
                   END;
               END;
             END;

    OnRename=BEGIN
               SetLastModifiedDateTime;
             END;

    CaptionML=[ENU=Dimension;
               ENN=Dimension];
    LookupPageID=Page548;
    DrillDownPageID=Page548;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code20        ;OnValidate=VAR
                                                                GLAcc@1000 : Record 15;
                                                                BusUnit@1001 : Record 220;
                                                                Item@1002 : Record 27;
                                                                Location@1003 : Record 14;
                                                              BEGIN
                                                                IF (UPPERCASE(Code) = UPPERCASE(GLAcc.TABLECAPTION)) OR
                                                                   (UPPERCASE(Code) = UPPERCASE(BusUnit.TABLECAPTION)) OR
                                                                   (UPPERCASE(Code) = UPPERCASE(Item.TABLECAPTION)) OR
                                                                   (UPPERCASE(Code) = UPPERCASE(Location.TABLECAPTION)) OR
                                                                   (UPPERCASE(Code) = UPPERCASE(Text006))
                                                                THEN
                                                                  ERROR(Text007,FIELDCAPTION(Code),GLAcc.TABLECAPTION,BusUnit.TABLECAPTION,Item.TABLECAPTION,Location.TABLECAPTION);

                                                                UpdateText(Code,'',Name);
                                                                UpdateText(Code,Text008,"Code Caption");
                                                                UpdateText(Code,Text009,"Filter Caption");
                                                              END;

                                                   CaptionML=[ENU=Code;
                                                              ENN=Code];
                                                   NotBlank=Yes }
    { 2   ;   ;Name                ;Text30        ;CaptionML=[ENU=Name;
                                                              ENN=Name] }
    { 3   ;   ;Code Caption        ;Text80        ;CaptionML=[ENU=Code Caption;
                                                              ENN=Code Caption] }
    { 4   ;   ;Filter Caption      ;Text80        ;CaptionML=[ENU=Filter Caption;
                                                              ENN=Filter Caption] }
    { 5   ;   ;Description         ;Text100       ;CaptionML=[ENU=Description;
                                                              ENN=Description] }
    { 6   ;   ;Blocked             ;Boolean       ;CaptionML=[ENU=Blocked;
                                                              ENN=Blocked] }
    { 7   ;   ;Consolidation Code  ;Code20        ;AccessByPermission=TableData 220=R;
                                                   CaptionML=[ENU=Consolidation Code;
                                                              ENN=Consolidation Code] }
    { 8   ;   ;Map-to IC Dimension Code;Code20    ;TableRelation="IC Dimension";
                                                   OnValidate=VAR
                                                                DimensionValue@1000 : Record 349;
                                                              BEGIN
                                                                IF "Map-to IC Dimension Code" <> xRec."Map-to IC Dimension Code" THEN BEGIN
                                                                  DimensionValue.SETRANGE("Dimension Code",Code);
                                                                  DimensionValue.MODIFYALL("Map-to IC Dimension Code","Map-to IC Dimension Code");
                                                                  DimensionValue.MODIFYALL("Map-to IC Dimension Value Code",'');
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Map-to IC Dimension Code;
                                                              ENN=Map-to IC Dimension Code] }
    { 8000;   ;Id                  ;GUID          ;CaptionML=[ENU=Id;
                                                              ENN=Id] }
    { 8001;   ;Last Modified Date Time;DateTime   ;CaptionML=[ENU=Last Modified Date Time;
                                                              ENN=Last Modified Date Time] }
    { 51001;  ;Print Dimension     ;Option        ;OptionCaptionML=ENU=" ,Line,Header";
                                                   OptionString=[ ,Line,Header] }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;Code,Name,Blocked                        }
    { 2   ;Brick               ;Code,Name                                }
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=%1\This dimension is also used in posted or budget entries.\You cannot delete it.;ENN=%1\This dimension is also used in posted or budget entries.\You cannot delete it.';
      Text001@1001 : TextConst 'ENU=%1\You cannot delete it.;ENN=%1\You cannot delete it.';
      Text002@1002 : TextConst 'ENU=You cannot delete this dimension value, because it has been used in one or more documents or budget entries.;ENN=You cannot delete this dimension value, because it has been used in one or more documents or budget entries.';
      Text006@1006 : TextConst 'ENU=Period;ENN=Period';
      Text007@1007 : TextConst 'ENU=%1 can not be %2, %3, %4, %5 or Period. These names are used internally by the system.;ENN=%1 can not be %2, %3, %4, %5 or Period. These names are used internally by the system.';
      Text008@1008 : TextConst 'ENU=Code;ENN=Code';
      Text009@1009 : TextConst 'ENU=Filter;ENN=Filter';
      Text010@1010 : TextConst 'ENU="This dimension is used in the following setup: ";ENN="This dimension is used in the following setup: "';
      Text011@1011 : TextConst 'ENU="General Ledger Setup, ";ENN="General Ledger Setup, "';
      Text012@1012 : TextConst 'ENU="G/L Budget Names, ";ENN="G/L Budget Names, "';
      Text013@1013 : TextConst 'ENU="Analysis View Card, ";ENN="Analysis View Card, "';
      DefaultDim@1003 : Record 352;
      DimVal@1014 : Record 349;
      DimComb@1015 : Record 350;
      SelectedDim@1016 : Record 369;
      AnalysisSelectedDim@1024 : Record 7159;
      DimTrans@1022 : Record 388;
      UsedAsGlobalDim@1017 : Boolean;
      UsedAsShortcutDim@1018 : Boolean;
      UsedAsBudgetDim@1019 : Boolean;
      UsedAsAnalysisViewDim@1020 : Boolean;
      UsedAsItemBudgetDim@1028 : Boolean;
      UsedAsItemAnalysisViewDim@1027 : Boolean;
      CheckDimErr@1021 : Text;
      Text014@1026 : TextConst 'ENU="Item Budget Names, ";ENN="Item Budget Names, "';
      Text015@1025 : TextConst 'ENU="Item Analysis View Card, ";ENN="Item Analysis View Card, "';

    LOCAL PROCEDURE UpdateText@1(Code@1000 : Code[20];AddText@1001 : Text[30];VAR Text@1002 : Text[80]);
    BEGIN
      IF Text = '' THEN BEGIN
        Text := LOWERCASE(Code);
        Text[1] := Code[1];
        IF AddText <> '' THEN
          Text := STRSUBSTNO('%1 %2',Text,AddText);
      END;
    END;

    [External]
    PROCEDURE CheckIfDimUsed@73(DimChecked@1000 : Code[20];DimTypeChecked@1001 : ' ,Global1,Global2,Shortcut3,Shortcut4,Shortcut5,Shortcut6,Shortcut7,Shortcut8,Budget1,Budget2,Budget3,Budget4,Analysis1,Analysis2,Analysis3,Analysis4,ItemBudget1,ItemBudget2,ItemBudget3,ItemAnalysis1,ItemAnalysis2,ItemAnalysis3';BudgetNameChecked@1002 : Code[10];AnalysisViewChecked@1003 : Code[10];AnalysisAreaChecked@1016 : Integer) : Boolean;
    VAR
      GLSetup@1004 : Record 98;
      GLBudgetName@1005 : Record 95;
      AnalysisView@1006 : Record 363;
      ItemBudgetName@1015 : Record 7132;
      ItemAnalysisView@1014 : Record 7152;
      CustomDimErr@1018 : Text;
      CheckAllDim@1007 : Boolean;
      CheckGlobalDim@1008 : Boolean;
      CheckShortcutDim@1009 : Boolean;
      CheckBudgetDim@1010 : Boolean;
      CheckAnalysisViewDim@1011 : Boolean;
      CheckItemBudgetDim@1013 : Boolean;
      CheckItemAnalysisViewDim@1012 : Boolean;
      UsedAsCustomDim@1017 : Boolean;
    BEGIN
      IF DimChecked = '' THEN
        EXIT;

      OnBeforeCheckIfDimUsed(DimChecked,DimTypeChecked,UsedAsCustomDim,CustomDimErr,AnalysisViewChecked,AnalysisAreaChecked);

      CheckAllDim := DimTypeChecked IN [DimTypeChecked::" "];
      CheckGlobalDim := DimTypeChecked IN [DimTypeChecked::Global1,DimTypeChecked::Global2];
      CheckShortcutDim := DimTypeChecked IN [DimTypeChecked::Shortcut3,DimTypeChecked::Shortcut4,DimTypeChecked::Shortcut5,
                                             DimTypeChecked::Shortcut6,DimTypeChecked::Shortcut7,DimTypeChecked::Shortcut8];
      CheckBudgetDim := DimTypeChecked IN [DimTypeChecked::Budget1,DimTypeChecked::Budget2,DimTypeChecked::Budget3,
                                           DimTypeChecked::Budget4];
      CheckAnalysisViewDim := DimTypeChecked IN [DimTypeChecked::Analysis1,DimTypeChecked::Analysis2,DimTypeChecked::Analysis3,
                                                 DimTypeChecked::Analysis4];
      CheckItemBudgetDim :=
        DimTypeChecked IN [DimTypeChecked::ItemBudget1,DimTypeChecked::ItemBudget2,DimTypeChecked::ItemBudget3];
      CheckItemAnalysisViewDim :=
        DimTypeChecked IN [DimTypeChecked::ItemAnalysis1,DimTypeChecked::ItemAnalysis2,DimTypeChecked::ItemAnalysis3];

      UsedAsGlobalDim := FALSE;
      UsedAsShortcutDim := FALSE;
      UsedAsBudgetDim := FALSE;
      UsedAsAnalysisViewDim := FALSE;
      UsedAsItemBudgetDim := FALSE;
      UsedAsItemAnalysisViewDim := FALSE;

      IF CheckAllDim OR CheckGlobalDim OR CheckShortcutDim OR CheckBudgetDim OR CheckItemBudgetDim THEN BEGIN
        GLSetup.GET;
        IF (DimTypeChecked <> DimTypeChecked::Global1) AND
           (DimChecked = GLSetup."Global Dimension 1 Code")
        THEN
          UsedAsGlobalDim := TRUE;
        IF (DimTypeChecked <> DimTypeChecked::Global2) AND
           (DimChecked = GLSetup."Global Dimension 2 Code")
        THEN
          UsedAsGlobalDim := TRUE;
      END;

      IF CheckGlobalDim OR CheckShortcutDim THEN BEGIN
        IF (DimTypeChecked <> DimTypeChecked::Shortcut3) AND
           (DimChecked = GLSetup."Shortcut Dimension 3 Code")
        THEN
          UsedAsShortcutDim := TRUE;
        IF (DimTypeChecked <> DimTypeChecked::Shortcut4) AND
           (DimChecked = GLSetup."Shortcut Dimension 4 Code")
        THEN
          UsedAsShortcutDim := TRUE;
        IF (DimTypeChecked <> DimTypeChecked::Shortcut5) AND
           (DimChecked = GLSetup."Shortcut Dimension 5 Code")
        THEN
          UsedAsShortcutDim := TRUE;
        IF (DimTypeChecked <> DimTypeChecked::Shortcut6) AND
           (DimChecked = GLSetup."Shortcut Dimension 6 Code")
        THEN
          UsedAsShortcutDim := TRUE;
        IF (DimTypeChecked <> DimTypeChecked::Shortcut7) AND
           (DimChecked = GLSetup."Shortcut Dimension 7 Code")
        THEN
          UsedAsShortcutDim := TRUE;
        IF (DimTypeChecked <> DimTypeChecked::Shortcut8) AND
           (DimChecked = GLSetup."Shortcut Dimension 8 Code")
        THEN
          UsedAsShortcutDim := TRUE;
      END;

      IF CheckAllDim OR CheckGlobalDim OR CheckBudgetDim THEN BEGIN
        IF BudgetNameChecked <> '' THEN
          GLBudgetName.SETRANGE(Name,BudgetNameChecked);
        IF GLBudgetName.FINDSET THEN
          REPEAT
            IF (DimTypeChecked <> DimTypeChecked::Budget1) AND
               (DimChecked = GLBudgetName."Budget Dimension 1 Code")
            THEN
              UsedAsBudgetDim := TRUE;
            IF (DimTypeChecked <> DimTypeChecked::Budget2) AND
               (DimChecked = GLBudgetName."Budget Dimension 2 Code")
            THEN
              UsedAsBudgetDim := TRUE;
            IF (DimTypeChecked <> DimTypeChecked::Budget3) AND
               (DimChecked = GLBudgetName."Budget Dimension 3 Code")
            THEN
              UsedAsBudgetDim := TRUE;
            IF (DimTypeChecked <> DimTypeChecked::Budget4) AND
               (DimChecked = GLBudgetName."Budget Dimension 4 Code")
            THEN
              UsedAsBudgetDim := TRUE;
          UNTIL GLBudgetName.NEXT = 0;
      END;

      IF CheckAllDim OR CheckGlobalDim OR CheckItemBudgetDim THEN BEGIN
        IF BudgetNameChecked <> '' THEN BEGIN
          ItemBudgetName.SETRANGE("Analysis Area",AnalysisAreaChecked);
          ItemBudgetName.SETRANGE(Name,BudgetNameChecked);
        END;
        IF ItemBudgetName.FINDSET THEN
          REPEAT
            IF (DimTypeChecked <> DimTypeChecked::ItemBudget1) AND
               (DimChecked = ItemBudgetName."Budget Dimension 1 Code")
            THEN
              UsedAsItemBudgetDim := TRUE;
            IF (DimTypeChecked <> DimTypeChecked::ItemBudget2) AND
               (DimChecked = ItemBudgetName."Budget Dimension 2 Code")
            THEN
              UsedAsItemBudgetDim := TRUE;
            IF (DimTypeChecked <> DimTypeChecked::ItemBudget3) AND
               (DimChecked = ItemBudgetName."Budget Dimension 3 Code")
            THEN
              UsedAsItemBudgetDim := TRUE;
          UNTIL ItemBudgetName.NEXT = 0;
      END;

      IF CheckAllDim OR CheckAnalysisViewDim THEN BEGIN
        IF AnalysisViewChecked <> '' THEN
          AnalysisView.SETRANGE(Code,AnalysisViewChecked);
        IF AnalysisView.FINDSET THEN
          REPEAT
            IF (DimTypeChecked <> DimTypeChecked::Analysis1) AND
               (DimChecked = AnalysisView."Dimension 1 Code")
            THEN
              UsedAsAnalysisViewDim := TRUE;
            IF (DimTypeChecked <> DimTypeChecked::Analysis2) AND
               (DimChecked = AnalysisView."Dimension 2 Code")
            THEN
              UsedAsAnalysisViewDim := TRUE;
            IF (DimTypeChecked <> DimTypeChecked::Analysis3) AND
               (DimChecked = AnalysisView."Dimension 3 Code")
            THEN
              UsedAsAnalysisViewDim := TRUE;
            IF (DimTypeChecked <> DimTypeChecked::Analysis4) AND
               (DimChecked = AnalysisView."Dimension 4 Code")
            THEN
              UsedAsAnalysisViewDim := TRUE;
          UNTIL AnalysisView.NEXT = 0;
      END;

      IF CheckAllDim OR CheckItemAnalysisViewDim THEN BEGIN
        IF AnalysisViewChecked <> '' THEN BEGIN
          ItemAnalysisView.SETRANGE("Analysis Area",AnalysisAreaChecked);
          ItemAnalysisView.SETRANGE(Code,AnalysisViewChecked);
        END;
        IF ItemAnalysisView.FINDSET THEN
          REPEAT
            IF (DimTypeChecked <> DimTypeChecked::ItemAnalysis1) AND
               (DimChecked = ItemAnalysisView."Dimension 1 Code")
            THEN
              UsedAsItemAnalysisViewDim := TRUE;
            IF (DimTypeChecked <> DimTypeChecked::ItemAnalysis2) AND
               (DimChecked = ItemAnalysisView."Dimension 2 Code")
            THEN
              UsedAsItemAnalysisViewDim := TRUE;
            IF (DimTypeChecked <> DimTypeChecked::ItemAnalysis3) AND
               (DimChecked = ItemAnalysisView."Dimension 3 Code")
            THEN
              UsedAsItemAnalysisViewDim := TRUE;
          UNTIL ItemAnalysisView.NEXT = 0;
      END;

      IF UsedAsGlobalDim OR
         UsedAsShortcutDim OR
         UsedAsBudgetDim OR
         UsedAsAnalysisViewDim OR
         UsedAsItemBudgetDim OR
         UsedAsItemAnalysisViewDim OR
         UsedAsCustomDim
      THEN BEGIN
        MakeCheckDimErr(CustomDimErr);
        EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE MakeCheckDimErr@6(CustomDimErr@1000 : Text);
    BEGIN
      CheckDimErr := Text010;
      IF UsedAsGlobalDim OR UsedAsShortcutDim THEN
        CheckDimErr := CheckDimErr + Text011;
      IF UsedAsBudgetDim THEN
        CheckDimErr := CheckDimErr + Text012;
      IF UsedAsAnalysisViewDim THEN
        CheckDimErr := CheckDimErr + Text013;
      IF UsedAsItemBudgetDim THEN
        CheckDimErr := CheckDimErr + Text014;
      IF UsedAsItemAnalysisViewDim THEN
        CheckDimErr := CheckDimErr + Text015;
      IF CustomDimErr <> '' THEN
        CheckDimErr := CheckDimErr + CustomDimErr;
      CheckDimErr := COPYSTR(CheckDimErr,1,STRLEN(CheckDimErr) - 2) + '.';
    END;

    [External]
    PROCEDURE GetCheckDimErr@13() : Text[250];
    BEGIN
      EXIT(CheckDimErr);
    END;

    [External]
    PROCEDURE GetMLName@3(LanguageID@1001 : Integer) : Text[30];
    BEGIN
      GetDimTrans(LanguageID);
      EXIT(DimTrans.Name);
    END;

    [External]
    PROCEDURE GetMLCodeCaption@4(LanguageID@1000 : Integer) : Text[80];
    BEGIN
      GetDimTrans(LanguageID);
      EXIT(DimTrans."Code Caption");
    END;

    [External]
    PROCEDURE GetMLFilterCaption@5(LanguageID@1000 : Integer) : Text[80];
    BEGIN
      GetDimTrans(LanguageID);
      EXIT(DimTrans."Filter Caption");
    END;

    [External]
    PROCEDURE SetMLName@11(NewMLName@1000 : Text[30];LanguageID@1001 : Integer);
    BEGIN
      IF IsApplicationLanguage(LanguageID) THEN BEGIN
        IF Name <> NewMLName THEN BEGIN
          Name := NewMLName;
          MODIFY;
        END;
      END ELSE BEGIN
        InsertDimTrans(LanguageID);
        IF DimTrans.Name <> NewMLName THEN BEGIN
          DimTrans.Name := NewMLName;
          DimTrans.MODIFY;
        END;
      END;
    END;

    [External]
    PROCEDURE SetMLCodeCaption@10(NewMLCodeCaption@1000 : Text[30];LanguageID@1001 : Integer);
    BEGIN
      IF IsApplicationLanguage(LanguageID) THEN BEGIN
        IF "Code Caption" <> NewMLCodeCaption THEN BEGIN
          "Code Caption" := NewMLCodeCaption;
          MODIFY;
        END;
      END ELSE BEGIN
        InsertDimTrans(LanguageID);
        IF DimTrans."Code Caption" <> NewMLCodeCaption THEN BEGIN
          DimTrans."Code Caption" := NewMLCodeCaption;
          DimTrans.MODIFY;
        END;
      END;
    END;

    [External]
    PROCEDURE SetMLFilterCaption@9(NewMLFilterCaption@1000 : Text[30];LanguageID@1001 : Integer);
    BEGIN
      IF IsApplicationLanguage(LanguageID) THEN BEGIN
        IF "Filter Caption" <> NewMLFilterCaption THEN BEGIN
          "Filter Caption" := NewMLFilterCaption;
          MODIFY;
        END;
      END ELSE BEGIN
        InsertDimTrans(LanguageID);
        IF DimTrans."Filter Caption" <> NewMLFilterCaption THEN BEGIN
          DimTrans."Filter Caption" := NewMLFilterCaption;
          DimTrans.MODIFY;
        END;
      END;
    END;

    [External]
    PROCEDURE SetMLDescription@8(NewMLDescription@1000 : Text[50];LanguageID@1001 : Integer);
    BEGIN
      IF IsApplicationLanguage(LanguageID) THEN BEGIN
        IF Description <> NewMLDescription THEN BEGIN
          Description := NewMLDescription;
          MODIFY;
        END;
      END ELSE
        InsertDimTrans(LanguageID);
    END;

    LOCAL PROCEDURE GetDimTrans@19(LanguageID@1001 : Integer);
    BEGIN
      IF (DimTrans.Code <> Code) OR (DimTrans."Language ID" <> LanguageID) THEN
        IF NOT DimTrans.GET(Code,LanguageID) THEN BEGIN
          DimTrans.INIT;
          DimTrans.Code := Code;
          DimTrans."Language ID" := LanguageID;
          DimTrans.Name := Name;
          DimTrans."Code Caption" := "Code Caption";
          DimTrans."Filter Caption" := "Filter Caption";
        END;
    END;

    LOCAL PROCEDURE InsertDimTrans@2(LanguageID@1000 : Integer);
    BEGIN
      IF NOT DimTrans.GET(Code,LanguageID) THEN BEGIN
        DimTrans.INIT;
        DimTrans.Code := Code;
        DimTrans."Language ID" := LanguageID;
        DimTrans.INSERT;
      END;
    END;

    LOCAL PROCEDURE IsApplicationLanguage@14(LanguageID@1000 : Integer) : Boolean;
    VAR
      LanguageManagement@1003 : Codeunit 43;
    BEGIN
      EXIT(LanguageID = LanguageManagement.ApplicationLanguage);
    END;

    LOCAL PROCEDURE SetLastModifiedDateTime@39();
    BEGIN
      "Last Modified Date Time" := CURRENTDATETIME;
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCheckIfDimUsed@15(DimChecked@1001 : Code[20];DimTypeChecked@1000 : ' ,Global1,Global2,Shortcut3,Shortcut4,Shortcut5,Shortcut6,Shortcut7,Shortcut8,Budget1,Budget2,Budget3,Budget4,Analysis1,Analysis2,Analysis3,Analysis4,ItemBudget1,ItemBudget2,ItemBudget3,ItemAnalysis1,ItemAnalysis2,ItemAnalysis3';VAR UsedAsCustomDim@1002 : Boolean;VAR CustomDimErr@1003 : Text;AnalysisViewChecked@1005 : Code[10];AnalysisAreaChecked@1004 : Integer);
    BEGIN
    END;

    BEGIN
    END.
  }
}

OBJECT Table 382 CV Ledger Entry Buffer
{
  OBJECT-PROPERTIES
  {
    Date=02-10-21;
    Time=12:00:00;
    Modified=Yes;
    Version List=NAVW114.30;
  }
  PROPERTIES
  {
    ReplicateData=No;
    CaptionML=[ENU=CV Ledger Entry Buffer;
               ENN=CV Ledger Entry Buffer];
  }
  FIELDS
  {
    { 1   ;   ;Entry No.           ;Integer       ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Entry No.;
                                                              ENN=Entry No.] }
    { 3   ;   ;CV No.              ;Code20        ;TableRelation=Customer;
                                                   DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=CV No.;
                                                              ENN=CV No.] }
    { 4   ;   ;Posting Date        ;Date          ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Posting Date;
                                                              ENN=Posting Date] }
    { 5   ;   ;Document Type       ;Option        ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Document Type;
                                                              ENN=Document Type];
                                                   OptionCaptionML=[ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund";
                                                                    ENN=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund"];
                                                   OptionString=[ ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund] }
    { 6   ;   ;Document No.        ;Code20        ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Document No.;
                                                              ENN=Document No.] }
    { 7   ;   ;Description         ;Text100       ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Description;
                                                              ENN=Description];
                                                   Description=SANTOSH }
    { 11  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Currency Code;
                                                              ENN=Currency Code] }
    { 13  ;   ;Amount              ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Amount;
                                                              ENN=Amount];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 14  ;   ;Remaining Amount    ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Remaining Amount;
                                                              ENN=Remaining Amount];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 15  ;   ;Original Amt. (LCY) ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Original Amt. (LCY);
                                                              ENN=Original Amt. (LCY)];
                                                   AutoFormatType=1 }
    { 16  ;   ;Remaining Amt. (LCY);Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Remaining Amt. (LCY);
                                                              ENN=Remaining Amt. (LCY)];
                                                   AutoFormatType=1 }
    { 17  ;   ;Amount (LCY)        ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Amount (LCY);
                                                              ENN=Amount (LCY)];
                                                   AutoFormatType=1 }
    { 18  ;   ;Sales/Purchase (LCY);Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Sales/Purchase (LCY);
                                                              ENN=Sales/Purchase (LCY)];
                                                   AutoFormatType=1 }
    { 19  ;   ;Profit (LCY)        ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Profit (LCY);
                                                              ENN=Profit (LCY)];
                                                   AutoFormatType=1 }
    { 20  ;   ;Inv. Discount (LCY) ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Inv. Discount (LCY);
                                                              ENN=Inv. Discount (LCY)];
                                                   AutoFormatType=1 }
    { 21  ;   ;Bill-to/Pay-to CV No.;Code20       ;TableRelation=Customer;
                                                   DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Bill-to/Pay-to CV No.;
                                                              ENN=Bill-to/Pay-to CV No.] }
    { 22  ;   ;CV Posting Group    ;Code20        ;TableRelation="Customer Posting Group";
                                                   DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=CV Posting Group;
                                                              ENN=CV Posting Group] }
    { 23  ;   ;Global Dimension 1 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Global Dimension 1 Code;
                                                              ENN=Global Dimension 1 Code];
                                                   CaptionClass='1,1,1' }
    { 24  ;   ;Global Dimension 2 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Global Dimension 2 Code;
                                                              ENN=Global Dimension 2 Code];
                                                   CaptionClass='1,1,2' }
    { 25  ;   ;Salesperson Code    ;Code20        ;TableRelation=Employee;
                                                   DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Salesperson Code;
                                                              ENN=Salesperson Code];
                                                   Description=AD_SD_Lookup was -Salesperson/Purchaser }
    { 27  ;   ;User ID             ;Code50        ;TableRelation=User."User Name";
                                                   OnLookup=VAR
                                                              UserMgt@1000 : Codeunit 418;
                                                            BEGIN
                                                              UserMgt.LookupUserID("User ID");
                                                            END;

                                                   TestTableRelation=No;
                                                   DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=User ID;
                                                              ENN=User ID] }
    { 28  ;   ;Source Code         ;Code10        ;TableRelation="Source Code";
                                                   DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Source Code;
                                                              ENN=Source Code] }
    { 33  ;   ;On Hold             ;Code3         ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=On Hold;
                                                              ENN=On Hold] }
    { 34  ;   ;Applies-to Doc. Type;Option        ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Applies-to Doc. Type;
                                                              ENN=Applies-to Doc. Type];
                                                   OptionCaptionML=[ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund";
                                                                    ENN=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund"];
                                                   OptionString=[ ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund] }
    { 35  ;   ;Applies-to Doc. No. ;Code20        ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Applies-to Doc. No.;
                                                              ENN=Applies-to Doc. No.] }
    { 36  ;   ;Open                ;Boolean       ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Open;
                                                              ENN=Open] }
    { 37  ;   ;Due Date            ;Date          ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Due Date;
                                                              ENN=Due Date] }
    { 38  ;   ;Pmt. Discount Date  ;Date          ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Pmt. Discount Date;
                                                              ENN=Pmt. Discount Date] }
    { 39  ;   ;Original Pmt. Disc. Possible;Decimal;
                                                   DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Original Pmt. Disc. Possible;
                                                              ENN=Original Pmt. Disc. Possible];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 40  ;   ;Pmt. Disc. Given (LCY);Decimal     ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Pmt. Disc. Given (LCY);
                                                              ENN=Pmt. Disc. Given (LCY)];
                                                   AutoFormatType=1 }
    { 43  ;   ;Positive            ;Boolean       ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Positive;
                                                              ENN=Positive] }
    { 44  ;   ;Closed by Entry No. ;Integer       ;TableRelation="Cust. Ledger Entry";
                                                   DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Closed by Entry No.;
                                                              ENN=Closed by Entry No.] }
    { 45  ;   ;Closed at Date      ;Date          ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Closed at Date;
                                                              ENN=Closed at Date] }
    { 46  ;   ;Closed by Amount    ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Closed by Amount;
                                                              ENN=Closed by Amount];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 47  ;   ;Applies-to ID       ;Code50        ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Applies-to ID;
                                                              ENN=Applies-to ID] }
    { 49  ;   ;Journal Batch Name  ;Code10        ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Journal Batch Name;
                                                              ENN=Journal Batch Name] }
    { 50  ;   ;Reason Code         ;Code10        ;TableRelation="Reason Code";
                                                   DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Reason Code;
                                                              ENN=Reason Code] }
    { 51  ;   ;Bal. Account Type   ;Option        ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Bal. Account Type;
                                                              ENN=Bal. Account Type];
                                                   OptionCaptionML=[ENU=G/L Account,Customer,Vendor,Bank Account,Fixed Asset;
                                                                    ENN=G/L Account,Customer,Vendor,Bank Account,Fixed Asset];
                                                   OptionString=G/L Account,Customer,Vendor,Bank Account,Fixed Asset }
    { 52  ;   ;Bal. Account No.    ;Code20        ;TableRelation=IF (Bal. Account Type=CONST(G/L Account)) "G/L Account"
                                                                 ELSE IF (Bal. Account Type=CONST(Customer)) Customer
                                                                 ELSE IF (Bal. Account Type=CONST(Vendor)) Vendor
                                                                 ELSE IF (Bal. Account Type=CONST(Bank Account)) "Bank Account"
                                                                 ELSE IF (Bal. Account Type=CONST(Fixed Asset)) "Fixed Asset";
                                                   DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Bal. Account No.;
                                                              ENN=Bal. Account No.] }
    { 53  ;   ;Transaction No.     ;Integer       ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Transaction No.;
                                                              ENN=Transaction No.] }
    { 54  ;   ;Closed by Amount (LCY);Decimal     ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Closed by Amount (LCY);
                                                              ENN=Closed by Amount (LCY)];
                                                   AutoFormatType=1 }
    { 58  ;   ;Debit Amount        ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Debit Amount;
                                                              ENN=Debit Amount];
                                                   BlankZero=Yes;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 59  ;   ;Credit Amount       ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Credit Amount;
                                                              ENN=Credit Amount];
                                                   BlankZero=Yes;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 60  ;   ;Debit Amount (LCY)  ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Debit Amount (LCY);
                                                              ENN=Debit Amount (LCY)];
                                                   BlankZero=Yes;
                                                   AutoFormatType=1 }
    { 61  ;   ;Credit Amount (LCY) ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Credit Amount (LCY);
                                                              ENN=Credit Amount (LCY)];
                                                   BlankZero=Yes;
                                                   AutoFormatType=1 }
    { 62  ;   ;Document Date       ;Date          ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Document Date;
                                                              ENN=Document Date] }
    { 63  ;   ;External Document No.;Code35       ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=External Document No.;
                                                              ENN=External Document No.] }
    { 64  ;   ;Calculate Interest  ;Boolean       ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Calculate Interest;
                                                              ENN=Calculate Interest] }
    { 65  ;   ;Closing Interest Calculated;Boolean;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Closing Interest Calculated;
                                                              ENN=Closing Interest Calculated] }
    { 66  ;   ;No. Series          ;Code20        ;TableRelation="No. Series";
                                                   DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=No. Series;
                                                              ENN=No. Series] }
    { 67  ;   ;Closed by Currency Code;Code10     ;TableRelation=Currency;
                                                   DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Closed by Currency Code;
                                                              ENN=Closed by Currency Code] }
    { 68  ;   ;Closed by Currency Amount;Decimal  ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Closed by Currency Amount;
                                                              ENN=Closed by Currency Amount];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Closed by Currency Code" }
    { 70  ;   ;Rounding Currency   ;Code10        ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Rounding Currency;
                                                              ENN=Rounding Currency] }
    { 71  ;   ;Rounding Amount     ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Rounding Amount;
                                                              ENN=Rounding Amount];
                                                   AutoFormatType=1 }
    { 72  ;   ;Rounding Amount (LCY);Decimal      ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Rounding Amount (LCY);
                                                              ENN=Rounding Amount (LCY)];
                                                   AutoFormatType=1 }
    { 73  ;   ;Adjusted Currency Factor;Decimal   ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Adjusted Currency Factor;
                                                              ENN=Adjusted Currency Factor];
                                                   AutoFormatType=1 }
    { 74  ;   ;Original Currency Factor;Decimal   ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Original Currency Factor;
                                                              ENN=Original Currency Factor];
                                                   AutoFormatType=1 }
    { 75  ;   ;Original Amount     ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Original Amount;
                                                              ENN=Original Amount];
                                                   AutoFormatType=1 }
    { 77  ;   ;Remaining Pmt. Disc. Possible;Decimal;
                                                   DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Remaining Pmt. Disc. Possible;
                                                              ENN=Remaining Pmt. Disc. Possible];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 78  ;   ;Pmt. Disc. Tolerance Date;Date     ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Pmt. Disc. Tolerance Date;
                                                              ENN=Pmt. Disc. Tolerance Date] }
    { 79  ;   ;Max. Payment Tolerance;Decimal     ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Max. Payment Tolerance;
                                                              ENN=Max. Payment Tolerance] }
    { 81  ;   ;Accepted Payment Tolerance;Decimal ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Accepted Payment Tolerance;
                                                              ENN=Accepted Payment Tolerance] }
    { 82  ;   ;Accepted Pmt. Disc. Tolerance;Boolean;
                                                   DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Accepted Pmt. Disc. Tolerance;
                                                              ENN=Accepted Pmt. Disc. Tolerance] }
    { 83  ;   ;Pmt. Tolerance (LCY);Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Pmt. Tolerance (LCY);
                                                              ENN=Pmt. Tolerance (LCY)] }
    { 84  ;   ;Amount to Apply     ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Amount to Apply;
                                                              ENN=Amount to Apply];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 90  ;   ;Prepayment          ;Boolean       ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Prepayment;
                                                              ENN=Prepayment] }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Dimension Set ID;
                                                              ENN=Dimension Set ID];
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Entry No.                               ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    [External]
    PROCEDURE CopyFromCustLedgEntry@1(CustLedgEntry@1001 : Record 21);
    BEGIN
      TRANSFERFIELDS(CustLedgEntry);
      Amount := CustLedgEntry.Amount;
      "Amount (LCY)" := CustLedgEntry."Amount (LCY)";
      "Remaining Amount" := CustLedgEntry."Remaining Amount";
      "Remaining Amt. (LCY)" := CustLedgEntry."Remaining Amt. (LCY)";
      "Original Amount" := CustLedgEntry."Original Amount";
      "Original Amt. (LCY)" := CustLedgEntry."Original Amt. (LCY)";

      OnAfterCopyFromCustLedgerEntry(Rec,CustLedgEntry);
    END;

    [External]
    PROCEDURE CopyFromVendLedgEntry@4(VendLedgEntry@1000 : Record 25);
    BEGIN
      "Entry No." := VendLedgEntry."Entry No.";
      "CV No." := VendLedgEntry."Vendor No.";
      "Posting Date" := VendLedgEntry."Posting Date";
      "Document Type" := VendLedgEntry."Document Type";
      "Document No." := VendLedgEntry."Document No.";
      Description := VendLedgEntry.Description;
      "Currency Code" := VendLedgEntry."Currency Code";
      Amount := VendLedgEntry.Amount;
      "Remaining Amount" := VendLedgEntry."Remaining Amount";
      "Original Amount" := VendLedgEntry."Original Amount";
      "Original Amt. (LCY)" := VendLedgEntry."Original Amt. (LCY)";
      "Remaining Amt. (LCY)" := VendLedgEntry."Remaining Amt. (LCY)";
      "Amount (LCY)" := VendLedgEntry."Amount (LCY)";
      "Sales/Purchase (LCY)" := VendLedgEntry."Purchase (LCY)";
      "Inv. Discount (LCY)" := VendLedgEntry."Inv. Discount (LCY)";
      "Bill-to/Pay-to CV No." := VendLedgEntry."Buy-from Vendor No.";
      "CV Posting Group" := VendLedgEntry."Vendor Posting Group";
      "Global Dimension 1 Code" := VendLedgEntry."Global Dimension 1 Code";
      "Global Dimension 2 Code" := VendLedgEntry."Global Dimension 2 Code";
      "Dimension Set ID" := VendLedgEntry."Dimension Set ID";
      "Salesperson Code" := VendLedgEntry."Purchaser Code";
      "User ID" := VendLedgEntry."User ID";
      "Source Code" := VendLedgEntry."Source Code";
      "On Hold" := VendLedgEntry."On Hold";
      "Applies-to Doc. Type" := VendLedgEntry."Applies-to Doc. Type";
      "Applies-to Doc. No." := VendLedgEntry."Applies-to Doc. No.";
      Open := VendLedgEntry.Open;
      "Due Date" := VendLedgEntry."Due Date" ;
      "Pmt. Discount Date" := VendLedgEntry."Pmt. Discount Date";
      "Original Pmt. Disc. Possible" := VendLedgEntry."Original Pmt. Disc. Possible";
      "Remaining Pmt. Disc. Possible" := VendLedgEntry."Remaining Pmt. Disc. Possible";
      "Pmt. Disc. Given (LCY)" := VendLedgEntry."Pmt. Disc. Rcd.(LCY)";
      Positive := VendLedgEntry.Positive;
      "Closed by Entry No." := VendLedgEntry."Closed by Entry No.";
      "Closed at Date" := VendLedgEntry."Closed at Date";
      "Closed by Amount" := VendLedgEntry."Closed by Amount";
      "Applies-to ID" := VendLedgEntry."Applies-to ID";
      "Journal Batch Name" := VendLedgEntry."Journal Batch Name";
      "Reason Code" := VendLedgEntry."Reason Code";
      "Bal. Account Type" := VendLedgEntry."Bal. Account Type";
      "Bal. Account No." := VendLedgEntry."Bal. Account No.";
      "Transaction No." := VendLedgEntry."Transaction No.";
      "Closed by Amount (LCY)" := VendLedgEntry."Closed by Amount (LCY)";
      "Debit Amount" := VendLedgEntry."Debit Amount";
      "Credit Amount" := VendLedgEntry."Credit Amount";
      "Debit Amount (LCY)" := VendLedgEntry."Debit Amount (LCY)";
      "Credit Amount (LCY)" := VendLedgEntry."Credit Amount (LCY)";
      "Document Date" := VendLedgEntry."Document Date";
      "External Document No." := VendLedgEntry."External Document No.";
      "No. Series" := VendLedgEntry."No. Series";
      "Closed by Currency Code" := VendLedgEntry."Closed by Currency Code";
      "Closed by Currency Amount" := VendLedgEntry."Closed by Currency Amount";
      "Adjusted Currency Factor" := VendLedgEntry."Adjusted Currency Factor";
      "Original Currency Factor" := VendLedgEntry."Original Currency Factor";
      "Pmt. Disc. Tolerance Date" := VendLedgEntry."Pmt. Disc. Tolerance Date";
      "Max. Payment Tolerance" := VendLedgEntry."Max. Payment Tolerance";
      "Accepted Payment Tolerance" := VendLedgEntry."Accepted Payment Tolerance";
      "Accepted Pmt. Disc. Tolerance" := VendLedgEntry."Accepted Pmt. Disc. Tolerance";
      "Pmt. Tolerance (LCY)" := VendLedgEntry."Pmt. Tolerance (LCY)";
      "Amount to Apply" := VendLedgEntry."Amount to Apply";
      Prepayment := VendLedgEntry.Prepayment;

      OnAfterCopyFromVendLedgerEntry(Rec,VendLedgEntry);
    END;

    [External]
    PROCEDURE CopyFromEmplLedgEntry@2(EmplLedgEntry@1000 : Record 5222);
    BEGIN
      "Entry No." := EmplLedgEntry."Entry No.";
      "CV No." := EmplLedgEntry."Employee No.";
      "Posting Date" := EmplLedgEntry."Posting Date";
      "Document Type" := EmplLedgEntry."Document Type";
      "Document No." := EmplLedgEntry."Document No.";
      Description := EmplLedgEntry.Description;
      "Currency Code" := EmplLedgEntry."Currency Code";
      Amount := EmplLedgEntry.Amount;
      "Remaining Amount" := EmplLedgEntry."Remaining Amount";
      "Original Amount" := EmplLedgEntry."Original Amount";
      "Original Amt. (LCY)" := EmplLedgEntry."Original Amt. (LCY)";
      "Remaining Amt. (LCY)" := EmplLedgEntry."Remaining Amt. (LCY)";
      "Amount (LCY)" := EmplLedgEntry."Amount (LCY)";
      "CV Posting Group" := EmplLedgEntry."Employee Posting Group";
      "Global Dimension 1 Code" := EmplLedgEntry."Global Dimension 1 Code";
      "Global Dimension 2 Code" := EmplLedgEntry."Global Dimension 2 Code";
      "Dimension Set ID" := EmplLedgEntry."Dimension Set ID";
      "Salesperson Code" := EmplLedgEntry."Salespers./Purch. Code";
      "User ID" := EmplLedgEntry."User ID";
      "Applies-to Doc. Type" := EmplLedgEntry."Applies-to Doc. Type";
      "Applies-to Doc. No." := EmplLedgEntry."Applies-to Doc. No.";
      Open := EmplLedgEntry.Open;
      Positive := EmplLedgEntry.Positive;
      "Closed by Entry No." := EmplLedgEntry."Closed by Entry No.";
      "Closed at Date" := EmplLedgEntry."Closed at Date";
      "Closed by Amount" := EmplLedgEntry."Closed by Amount";
      "Applies-to ID" := EmplLedgEntry."Applies-to ID";
      "Journal Batch Name" := EmplLedgEntry."Journal Batch Name";
      "Bal. Account Type" := EmplLedgEntry."Bal. Account Type";
      "Bal. Account No." := EmplLedgEntry."Bal. Account No.";
      "Transaction No." := EmplLedgEntry."Transaction No.";
      "Closed by Amount (LCY)" := EmplLedgEntry."Closed by Amount (LCY)";
      "Adjusted Currency Factor" := 1;
      "Original Currency Factor" := 1;
      "Debit Amount" := EmplLedgEntry."Debit Amount";
      "Credit Amount" := EmplLedgEntry."Credit Amount";
      "Debit Amount (LCY)" := EmplLedgEntry."Debit Amount (LCY)";
      "Credit Amount (LCY)" := EmplLedgEntry."Credit Amount (LCY)";
      "No. Series" := EmplLedgEntry."No. Series";
      "Amount to Apply" := EmplLedgEntry."Amount to Apply";

      OnAfterCopyFromEmplLedgerEntry(Rec,EmplLedgEntry);
    END;

    [External]
    PROCEDURE RecalculateAmounts@41(FromCurrencyCode@1002 : Code[10];ToCurrencyCode@1001 : Code[10];PostingDate@1000 : Date);
    VAR
      CurrExchRate@1004 : Record 330;
    BEGIN
      IF ToCurrencyCode = FromCurrencyCode THEN
        EXIT;

      "Remaining Amount" :=
        CurrExchRate.ExchangeAmount("Remaining Amount",FromCurrencyCode,ToCurrencyCode,PostingDate);
      "Remaining Pmt. Disc. Possible" :=
        CurrExchRate.ExchangeAmount("Remaining Pmt. Disc. Possible",FromCurrencyCode,ToCurrencyCode,PostingDate);
      "Amount to Apply" :=
        CurrExchRate.ExchangeAmount("Amount to Apply",FromCurrencyCode,ToCurrencyCode,PostingDate);
    END;

    [External]
    PROCEDURE SetClosedFields@5(EntryNo@1000 : Integer;PostingDate@1001 : Date;NewAmount@1002 : Decimal;AmountLCY@1003 : Decimal;CurrencyCode@1004 : Code[10];CurrencyAmount@1005 : Decimal);
    BEGIN
      "Closed by Entry No." := EntryNo;
      "Closed at Date" := PostingDate;
      "Closed by Amount" := NewAmount;
      "Closed by Amount (LCY)" := AmountLCY;
      "Closed by Currency Code" := CurrencyCode;
      "Closed by Currency Amount" := CurrencyAmount;
      OnAfterSetClosedFields(Rec);
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCopyFromCustLedgerEntry@8(VAR CVLedgerEntryBuffer@1000 : Record 382;CustLedgerEntry@1001 : Record 21);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCopyFromVendLedgerEntry@9(VAR CVLedgerEntryBuffer@1000 : Record 382;VendorLedgerEntry@1001 : Record 25);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCopyFromEmplLedgerEntry@3(VAR CVLedgerEntryBuffer@1000 : Record 382;EmployeeLedgerEntry@1001 : Record 5222);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterSetClosedFields@6(VAR CVLedgerEntryBuffer@1000 : Record 382);
    BEGIN
    END;

    BEGIN
    END.
  }
}

OBJECT Table 1221 Data Exch. Field
{
  OBJECT-PROPERTIES
  {
    Date=02-10-21;
    Time=12:00:00;
    Modified=Yes;
    Version List=NAVW114.30;
  }
  PROPERTIES
  {
    Permissions=TableData 1221=rimd;
    CaptionML=[ENU=Data Exch. Field;
               ENN=Data Exch. Field];
  }
  FIELDS
  {
    { 1   ;   ;Data Exch. No.      ;Integer       ;TableRelation="Data Exch.";
                                                   CaptionML=[ENU=Data Exch. No.;
                                                              ENN=Data Exch. No.];
                                                   NotBlank=Yes }
    { 2   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              ENN=Line No.];
                                                   NotBlank=Yes }
    { 3   ;   ;Column No.          ;Integer       ;CaptionML=[ENU=Column No.;
                                                              ENN=Column No.];
                                                   NotBlank=Yes }
    { 4   ;   ;Value               ;Text250       ;CaptionML=[ENU=Value;
                                                              ENN=Value] }
    { 5   ;   ;Node ID             ;Text250       ;CaptionML=[ENU=Node ID;
                                                              ENN=Node ID] }
    { 6   ;   ;Data Exch. Line Def Code;Code20    ;TableRelation="Data Exch. Line Def".Code;
                                                   CaptionML=[ENU=Data Exch. Line Def Code;
                                                              ENN=Data Exch. Line Def Code] }
    { 10  ;   ;Parent Node ID      ;Text250       ;CaptionML=[ENU=Parent Node ID;
                                                              ENN=Parent Node ID] }
    { 11  ;   ;Data Exch. Def Code ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Data Exch."."Data Exch. Def Code" WHERE (Entry No.=FIELD(Data Exch. No.)));
                                                   CaptionML=[ENU=Data Exch. Def Code;
                                                              ENN=Data Exch. Def Code] }
    { 16  ;   ;Value BLOB          ;BLOB          ;CaptionML=[ENU=Value BLOB;
                                                              ENN=Value BLOB] }
    { 50000;  ;Value2              ;Text250       ;DataClassification=ToBeClassified }
    { 50002;  ;Value3              ;Text250       ;DataClassification=ToBeClassified }
    { 50003;  ;Value4              ;Text250       ;DataClassification=ToBeClassified }
  }
  KEYS
  {
    {    ;Data Exch. No.,Line No.,Column No.,Node ID;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    [External]
    PROCEDURE InsertRec@2(DataExchNo@1000 : Integer;LineNo@1001 : Integer;ColumnNo@1002 : Integer;NewValue@1003 : Text;DataExchLineDefCode@1004 : Code[20]);
    BEGIN
      INIT;
      VALIDATE("Data Exch. No.",DataExchNo);
      VALIDATE("Line No.",LineNo);
      VALIDATE("Column No.",ColumnNo);
      SetValueWithoutModifying(NewValue);
      VALIDATE("Data Exch. Line Def Code",DataExchLineDefCode);
      INSERT;
    END;

    [External]
    PROCEDURE InsertRecXMLField@1(DataExchNo@1000 : Integer;LineNo@1001 : Integer;ColumnNo@1002 : Integer;NodeId@1004 : Text[250];NodeValue@1003 : Text;DataExchLineDefCode@1005 : Code[20]);
    BEGIN
      InsertRecXMLFieldWithParentNodeID(DataExchNo,LineNo,ColumnNo,NodeId,'',NodeValue,DataExchLineDefCode)
    END;

    [External]
    PROCEDURE InsertRecXMLFieldWithParentNodeID@4(DataExchNo@1000 : Integer;LineNo@1001 : Integer;ColumnNo@1002 : Integer;NodeId@1004 : Text[250];ParentNodeId@1006 : Text[250];NodeValue@1003 : Text;DataExchLineDefCode@1005 : Code[20]);
    BEGIN
      INIT;
      VALIDATE("Data Exch. No.",DataExchNo);
      VALIDATE("Line No.",LineNo);
      VALIDATE("Column No.",ColumnNo);
      VALIDATE("Node ID",NodeId);
      SetValueWithoutModifying(NodeValue);
      VALIDATE("Parent Node ID",ParentNodeId);
      VALIDATE("Data Exch. Line Def Code",DataExchLineDefCode);
      INSERT;
    END;

    [External]
    PROCEDURE InsertRecXMLFieldDefinition@5(DataExchNo@1000 : Integer;LineNo@1001 : Integer;NodeId@1004 : Text[250];ParentNodeId@1006 : Text[250];NewValue@1003 : Text[250];DataExchLineDefCode@1005 : Code[20]);
    BEGIN
      // this record represents the line definition and it has ColumnNo set to -1
      // even if we are not extracting anything from the line, we need to insert the definition
      // so that the child nodes can hook up to their parent.
      InsertRecXMLFieldWithParentNodeID(DataExchNo,LineNo,-1,NodeId,ParentNodeId,NewValue,DataExchLineDefCode)
    END;

    [External]
    PROCEDURE GetFieldName@1060() : Text;
    VAR
      DataExchColumnDef@1060 : Record 1223;
      DataExch@1061 : Record 1220;
    BEGIN
      DataExch.GET("Data Exch. No.");
      IF DataExchColumnDef.GET(DataExch."Data Exch. Def Code",DataExch."Data Exch. Line Def Code","Column No.") THEN
        EXIT(DataExchColumnDef.Name);
      EXIT('');
    END;

    [External]
    PROCEDURE DeleteRelatedRecords@3(DataExchNo@1000 : Integer;LineNo@1001 : Integer);
    BEGIN
      SETRANGE("Data Exch. No.",DataExchNo);
      SETRANGE("Line No.",LineNo);
      IF NOT ISEMPTY THEN
        DELETEALL(TRUE);
    END;

    [External]
    PROCEDURE GetValue@16() : Text;
    VAR
      TempBlob@1000 : Record 99008535;
      CR@1001 : Text[1];
    BEGIN
      IF NOT "Value BLOB".HASVALUE THEN
        EXIT(Value);
      CR[1] := 10;
      CALCFIELDS("Value BLOB");
      TempBlob.Blob := "Value BLOB";
      EXIT(TempBlob.ReadAsText(CR,TEXTENCODING::Windows));
    END;

    [External]
    PROCEDURE SetValue@17(NewValue@1001 : Text);
    BEGIN
      SetValueWithoutModifying(NewValue);
      MODIFY;
    END;

    [External]
    PROCEDURE SetValueWithoutModifying@12(NewValue@1001 : Text);
    VAR
      TempBlob@1000 : Record 99008535;
    BEGIN
      CLEAR("Value BLOB");
      Value := COPYSTR(NewValue,1,MAXSTRLEN(Value));
      IF STRLEN(NewValue) <= MAXSTRLEN(Value) THEN
        EXIT; // No need to store anything in the blob
      IF NewValue = '' THEN
        EXIT;
      TempBlob.WriteAsText(NewValue,TEXTENCODING::Windows);
      "Value BLOB" := TempBlob.Blob;
    END;

    BEGIN
    END.
  }
}

OBJECT Table 5107 Sales Header Archive
{
  OBJECT-PROPERTIES
  {
    Date=02-10-21;
    Time=12:00:00;
    Modified=Yes;
    Version List=NAVW114.30;
  }
  PROPERTIES
  {
    DataCaptionFields=No.,Sell-to Customer Name,Version No.;
    OnDelete=VAR
               SalesLineArchive@1000 : Record 5108;
               DeferralHeaderArchive@1001 : Record 5127;
               CatalogItemMgt@1002 : Codeunit 5703;
               DeferralUtilities@1003 : Codeunit 1720;
             BEGIN
               SalesLineArchive.SETRANGE("Document Type","Document Type");
               SalesLineArchive.SETRANGE("Document No.","No.");
               SalesLineArchive.SETRANGE("Doc. No. Occurrence","Doc. No. Occurrence");
               SalesLineArchive.SETRANGE("Version No.","Version No.");
               SalesLineArchive.SETRANGE(Nonstock,TRUE);
               IF SalesLineArchive.FINDSET(TRUE) THEN
                 REPEAT
                   CatalogItemMgt.DelNonStockSalesArch(SalesLineArchive);
                 UNTIL SalesLineArchive.NEXT = 0;
               SalesLineArchive.SETRANGE(Nonstock);
               SalesLineArchive.DELETEALL;

               SalesCommentLineArch.SETRANGE("Document Type","Document Type");
               SalesCommentLineArch.SETRANGE("No.","No.");
               SalesCommentLineArch.SETRANGE("Doc. No. Occurrence","Doc. No. Occurrence");
               SalesCommentLineArch.SETRANGE("Version No.","Version No.");
               SalesCommentLineArch.DELETEALL;

               DeferralHeaderArchive.SETRANGE("Deferral Doc. Type",DeferralUtilities.GetSalesDeferralDocType);
               DeferralHeaderArchive.SETRANGE("Document Type","Document Type");
               DeferralHeaderArchive.SETRANGE("Document No.","No.");
               DeferralHeaderArchive.SETRANGE("Doc. No. Occurrence","Doc. No. Occurrence");
               DeferralHeaderArchive.SETRANGE("Version No.","Version No.");
               DeferralHeaderArchive.DELETEALL(TRUE);
             END;

    CaptionML=[ENU=Sales Header Archive;
               ENN=Sales Header Archive];
    LookupPageID=Page5161;
    DrillDownPageID=Page5161;
  }
  FIELDS
  {
    { 1   ;   ;Document Type       ;Option        ;CaptionML=[ENU=Document Type;
                                                              ENN=Document Type];
                                                   OptionCaptionML=[ENU=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order;
                                                                    ENN=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order];
                                                   OptionString=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order }
    { 2   ;   ;Sell-to Customer No.;Code20        ;TableRelation=Customer;
                                                   CaptionML=[ENU=Sell-to Customer No.;
                                                              ENN=Sell-to Customer No.] }
    { 3   ;   ;No.                 ;Code20        ;CaptionML=[ENU=No.;
                                                              ENN=No.] }
    { 4   ;   ;Bill-to Customer No.;Code20        ;TableRelation=Customer;
                                                   CaptionML=[ENU=Bill-to Customer No.;
                                                              ENN=Bill-to Customer No.];
                                                   NotBlank=Yes }
    { 5   ;   ;Bill-to Name        ;Text100       ;CaptionML=[ENU=Bill-to Name;
                                                              ENN=Bill-to Name];
                                                   Description=AD_SD }
    { 6   ;   ;Bill-to Name 2      ;Text50        ;CaptionML=[ENU=Bill-to Name 2;
                                                              ENN=Bill-to Name 2] }
    { 7   ;   ;Bill-to Address     ;Text100       ;CaptionML=[ENU=Bill-to Address;
                                                              ENN=Bill-to Address];
                                                   Description=AD_SD }
    { 8   ;   ;Bill-to Address 2   ;Text60        ;CaptionML=[ENU=Bill-to Address 2;
                                                              ENN=Bill-to Address 2];
                                                   Description=AD_SD }
    { 9   ;   ;Bill-to City        ;Text30        ;TableRelation="Post Code".City;
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Bill-to City;
                                                              ENN=Bill-to City] }
    { 10  ;   ;Bill-to Contact     ;Text100       ;CaptionML=[ENU=Bill-to Contact;
                                                              ENN=Bill-to Contact] }
    { 11  ;   ;Your Reference      ;Text35        ;CaptionML=[ENU=Your Reference;
                                                              ENN=Your Reference] }
    { 12  ;   ;Ship-to Code        ;Code10        ;TableRelation="Ship-to Address".Code WHERE (Customer No.=FIELD(Sell-to Customer No.));
                                                   CaptionML=[ENU=Ship-to Code;
                                                              ENN=Ship-to Code] }
    { 13  ;   ;Ship-to Name        ;Text100       ;CaptionML=[ENU=Ship-to Name;
                                                              ENN=Ship-to Name];
                                                   Description=AD_SD }
    { 14  ;   ;Ship-to Name 2      ;Text50        ;CaptionML=[ENU=Ship-to Name 2;
                                                              ENN=Ship-to Name 2] }
    { 15  ;   ;Ship-to Address     ;Text100       ;CaptionML=[ENU=Ship-to Address;
                                                              ENN=Ship-to Address];
                                                   Description=AD_SD }
    { 16  ;   ;Ship-to Address 2   ;Text60        ;CaptionML=[ENU=Ship-to Address 2;
                                                              ENN=Ship-to Address 2];
                                                   Description=AD_SD }
    { 17  ;   ;Ship-to City        ;Text30        ;TableRelation="Post Code".City;
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Ship-to City;
                                                              ENN=Ship-to City] }
    { 18  ;   ;Ship-to Contact     ;Text100       ;CaptionML=[ENU=Ship-to Contact;
                                                              ENN=Ship-to Contact] }
    { 19  ;   ;Order Date          ;Date          ;CaptionML=[ENU=Order Date;
                                                              ENN=Order Date] }
    { 20  ;   ;Posting Date        ;Date          ;CaptionML=[ENU=Posting Date;
                                                              ENN=Posting Date] }
    { 21  ;   ;Shipment Date       ;Date          ;CaptionML=[ENU=Shipment Date;
                                                              ENN=Shipment Date] }
    { 22  ;   ;Posting Description ;Text100       ;CaptionML=[ENU=Posting Description;
                                                              ENN=Posting Description] }
    { 23  ;   ;Payment Terms Code  ;Code10        ;TableRelation="Payment Terms";
                                                   CaptionML=[ENU=Payment Terms Code;
                                                              ENN=Payment Terms Code] }
    { 24  ;   ;Due Date            ;Date          ;CaptionML=[ENU=Due Date;
                                                              ENN=Due Date] }
    { 25  ;   ;Payment Discount %  ;Decimal       ;CaptionML=[ENU=Payment Discount %;
                                                              ENN=Payment Discount %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 26  ;   ;Pmt. Discount Date  ;Date          ;CaptionML=[ENU=Pmt. Discount Date;
                                                              ENN=Pmt. Discount Date] }
    { 27  ;   ;Shipment Method Code;Code10        ;TableRelation="Shipment Method";
                                                   CaptionML=[ENU=Shipment Method Code;
                                                              ENN=Shipment Method Code] }
    { 28  ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE (Use As In-Transit=CONST(No));
                                                   CaptionML=[ENU=Location Code;
                                                              ENN=Location Code] }
    { 29  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   CaptionML=[ENU=Shortcut Dimension 1 Code;
                                                              ENN=Shortcut Dimension 1 Code];
                                                   CaptionClass='1,2,1' }
    { 30  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   CaptionML=[ENU=Shortcut Dimension 2 Code;
                                                              ENN=Shortcut Dimension 2 Code];
                                                   CaptionClass='1,2,2' }
    { 31  ;   ;Customer Posting Group;Code20      ;TableRelation="Customer Posting Group";
                                                   CaptionML=[ENU=Customer Posting Group;
                                                              ENN=Customer Posting Group] }
    { 32  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   CaptionML=[ENU=Currency Code;
                                                              ENN=Currency Code] }
    { 33  ;   ;Currency Factor     ;Decimal       ;CaptionML=[ENU=Currency Factor;
                                                              ENN=Currency Factor];
                                                   DecimalPlaces=0:15;
                                                   MinValue=0 }
    { 34  ;   ;Price Group Code    ;Code10        ;TableRelation="Customer Price Group";
                                                   CaptionML=[ENU=Price Group Code;
                                                              ENN=Price Group Code] }
    { 35  ;   ;Prices Including VAT;Boolean       ;CaptionML=[ENU=Prices Including VAT;
                                                              ENN=Prices Including VAT] }
    { 37  ;   ;Invoice Disc. Code  ;Code20        ;CaptionML=[ENU=Invoice Disc. Code;
                                                              ENN=Invoice Disc. Code] }
    { 40  ;   ;Cust./Item Disc. Gr.;Code20        ;TableRelation="Customer Discount Group";
                                                   CaptionML=[ENU=Cust./Item Disc. Gr.;
                                                              ENN=Cust./Item Disc. Gr.] }
    { 41  ;   ;Language Code       ;Code10        ;TableRelation=Language;
                                                   CaptionML=[ENU=Language Code;
                                                              ENN=Language Code] }
    { 43  ;   ;Salesperson Code    ;Code20        ;TableRelation="Employee LOB"."Emp No." WHERE (LOB=FIELD(LOB),
                                                                                                 Segment=FIELD(Segment));
                                                   CaptionML=[ENU=Salesperson Code;
                                                              ENN=Salesperson Code];
                                                   Description=AD Changed Lookup from Salesperson/Purchaser to "Employee LOB" }
    { 45  ;   ;Order Class         ;Code10        ;CaptionML=[ENU=Order Class;
                                                              ENN=Order Class] }
    { 46  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Sales Comment Line Archive" WHERE (Document Type=FIELD(Document Type),
                                                                                                         No.=FIELD(No.),
                                                                                                         Document Line No.=CONST(0),
                                                                                                         Doc. No. Occurrence=FIELD(Doc. No. Occurrence),
                                                                                                         Version No.=FIELD(Version No.)));
                                                   CaptionML=[ENU=Comment;
                                                              ENN=Comment];
                                                   Editable=No }
    { 47  ;   ;No. Printed         ;Integer       ;CaptionML=[ENU=No. Printed;
                                                              ENN=No. Printed] }
    { 51  ;   ;On Hold             ;Code3         ;CaptionML=[ENU=On Hold;
                                                              ENN=On Hold] }
    { 52  ;   ;Applies-to Doc. Type;Option        ;CaptionML=[ENU=Applies-to Doc. Type;
                                                              ENN=Applies-to Doc. Type];
                                                   OptionCaptionML=[ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund";
                                                                    ENN=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund"];
                                                   OptionString=[ ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund] }
    { 53  ;   ;Applies-to Doc. No. ;Code20        ;CaptionML=[ENU=Applies-to Doc. No.;
                                                              ENN=Applies-to Doc. No.] }
    { 55  ;   ;Bal. Account No.    ;Code20        ;TableRelation=IF (Bal. Account Type=CONST(G/L Account)) "G/L Account"
                                                                 ELSE IF (Bal. Account Type=CONST(Bank Account)) "Bank Account";
                                                   CaptionML=[ENU=Bal. Account No.;
                                                              ENN=Bal. Account No.] }
    { 57  ;   ;Ship                ;Boolean       ;CaptionML=[ENU=Ship;
                                                              ENN=Ship] }
    { 58  ;   ;Invoice             ;Boolean       ;CaptionML=[ENU=Invoice;
                                                              ENN=Invoice] }
    { 60  ;   ;Amount              ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Line Archive".Amount WHERE (Document Type=FIELD(Document Type),
                                                                                                      Document No.=FIELD(No.),
                                                                                                      Doc. No. Occurrence=FIELD(Doc. No. Occurrence),
                                                                                                      Version No.=FIELD(Version No.)));
                                                   CaptionML=[ENU=Amount;
                                                              ENN=Amount];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 61  ;   ;Amount Including VAT;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Line Archive"."Amount Including VAT" WHERE (Document Type=FIELD(Document Type),
                                                                                                                      Document No.=FIELD(No.),
                                                                                                                      Doc. No. Occurrence=FIELD(Doc. No. Occurrence),
                                                                                                                      Version No.=FIELD(Version No.)));
                                                   CaptionML=[ENU=Amount Including VAT;
                                                              ENN=Amount Including VAT];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 62  ;   ;Shipping No.        ;Code20        ;CaptionML=[ENU=Shipping No.;
                                                              ENN=Shipping No.] }
    { 63  ;   ;Posting No.         ;Code20        ;CaptionML=[ENU=Posting No.;
                                                              ENN=Posting No.] }
    { 64  ;   ;Last Shipping No.   ;Code20        ;TableRelation="Sales Shipment Header";
                                                   CaptionML=[ENU=Last Shipping No.;
                                                              ENN=Last Shipping No.] }
    { 65  ;   ;Last Posting No.    ;Code20        ;TableRelation="Sales Invoice Header";
                                                   CaptionML=[ENU=Last Posting No.;
                                                              ENN=Last Posting No.] }
    { 66  ;   ;Prepayment No.      ;Code20        ;CaptionML=[ENU=Prepayment No.;
                                                              ENN=Prepayment No.] }
    { 67  ;   ;Last Prepayment No. ;Code20        ;TableRelation="Sales Invoice Header";
                                                   CaptionML=[ENU=Last Prepayment No.;
                                                              ENN=Last Prepayment No.] }
    { 68  ;   ;Prepmt. Cr. Memo No.;Code20        ;CaptionML=[ENU=Prepmt. Cr. Memo No.;
                                                              ENN=Prepmt. Cr. Memo No.] }
    { 69  ;   ;Last Prepmt. Cr. Memo No.;Code20   ;TableRelation="Sales Invoice Header";
                                                   CaptionML=[ENU=Last Prepmt. Cr. Memo No.;
                                                              ENN=Last Prepmt. Cr. Memo No.] }
    { 70  ;   ;VAT Registration No.;Text20        ;CaptionML=[ENU=VAT Registration No.;
                                                              ENN=VAT Registration No.] }
    { 71  ;   ;Combine Shipments   ;Boolean       ;CaptionML=[ENU=Combine Shipments;
                                                              ENN=Combine Shipments] }
    { 73  ;   ;Reason Code         ;Code10        ;TableRelation="Reason Code";
                                                   CaptionML=[ENU=Reason Code;
                                                              ENN=Reason Code] }
    { 74  ;   ;Gen. Bus. Posting Group;Code20     ;TableRelation="Gen. Business Posting Group";
                                                   CaptionML=[ENU=Gen. Bus. Posting Group;
                                                              ENN=Gen. Bus. Posting Group] }
    { 75  ;   ;EU 3-Party Trade    ;Boolean       ;CaptionML=[ENU=EU 3-Party Trade;
                                                              ENN=EU 3-Party Trade] }
    { 76  ;   ;Transaction Type    ;Code10        ;TableRelation="Transaction Type";
                                                   CaptionML=[ENU=Transaction Type;
                                                              ENN=Transaction Nature Code] }
    { 77  ;   ;Transport Method    ;Code10        ;TableRelation="Transport Method";
                                                   CaptionML=[ENU=Transport Method;
                                                              ENN=Transport Method] }
    { 78  ;   ;VAT Country/Region Code;Code10     ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=VAT Country/Region Code;
                                                              ENN=VAT Country/Region Code] }
    { 79  ;   ;Sell-to Customer Name;Text100      ;CaptionML=[ENU=Sell-to Customer Name;
                                                              ENN=Sell-to Customer Name];
                                                   Description=AD_SD }
    { 80  ;   ;Sell-to Customer Name 2;Text50     ;CaptionML=[ENU=Sell-to Customer Name 2;
                                                              ENN=Sell-to Customer Name 2] }
    { 81  ;   ;Sell-to Address     ;Text100       ;CaptionML=[ENU=Sell-to Address;
                                                              ENN=Sell-to Address];
                                                   Description=AD_SD }
    { 82  ;   ;Sell-to Address 2   ;Text60        ;CaptionML=[ENU=Sell-to Address 2;
                                                              ENN=Sell-to Address 2];
                                                   Description=AD_SD }
    { 83  ;   ;Sell-to City        ;Text30        ;TableRelation="Post Code".City;
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Sell-to City;
                                                              ENN=Sell-to City] }
    { 84  ;   ;Sell-to Contact     ;Text100       ;CaptionML=[ENU=Sell-to Contact;
                                                              ENN=Sell-to Contact] }
    { 85  ;   ;Bill-to Post Code   ;Code20        ;TableRelation="Post Code";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Bill-to Post Code;
                                                              ENN=Bill-to Postcode] }
    { 86  ;   ;Bill-to County      ;Text30        ;CaptionML=[ENU=Bill-to County;
                                                              ENN=Bill-to County];
                                                   CaptionClass='5,1,' + "Bill-to Country/Region Code" }
    { 87  ;   ;Bill-to Country/Region Code;Code10 ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=Bill-to Country/Region Code;
                                                              ENN=Bill-to Country/Region Code] }
    { 88  ;   ;Sell-to Post Code   ;Code20        ;TableRelation="Post Code";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Sell-to Post Code;
                                                              ENN=Sell-to Postcode] }
    { 89  ;   ;Sell-to County      ;Text30        ;CaptionML=[ENU=Sell-to County;
                                                              ENN=Sell-to County];
                                                   CaptionClass='5,1,' + "Sell-to Country/Region Code" }
    { 90  ;   ;Sell-to Country/Region Code;Code10 ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=Sell-to Country/Region Code;
                                                              ENN=Sell-to Country/Region Code] }
    { 91  ;   ;Ship-to Post Code   ;Code20        ;TableRelation="Post Code";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Ship-to Post Code;
                                                              ENN=Ship-to Postcode] }
    { 92  ;   ;Ship-to County      ;Text30        ;CaptionML=[ENU=Ship-to County;
                                                              ENN=Ship-to County];
                                                   CaptionClass='5,1,' + "Ship-to Country/Region Code" }
    { 93  ;   ;Ship-to Country/Region Code;Code10 ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=Ship-to Country/Region Code;
                                                              ENN=Ship-to Country/Region Code] }
    { 94  ;   ;Bal. Account Type   ;Option        ;CaptionML=[ENU=Bal. Account Type;
                                                              ENN=Bal. Account Type];
                                                   OptionCaptionML=[ENU=G/L Account,Bank Account;
                                                                    ENN=G/L Account,Bank Account];
                                                   OptionString=G/L Account,Bank Account }
    { 97  ;   ;Exit Point          ;Code10        ;TableRelation="Entry/Exit Point";
                                                   CaptionML=[ENU=Exit Point;
                                                              ENN=Exit Point] }
    { 98  ;   ;Correction          ;Boolean       ;CaptionML=[ENU=Correction;
                                                              ENN=Correction] }
    { 99  ;   ;Document Date       ;Date          ;CaptionML=[ENU=Document Date;
                                                              ENN=Document Date] }
    { 100 ;   ;External Document No.;Code35       ;CaptionML=[ENU=External Document No.;
                                                              ENN=External Document No.] }
    { 101 ;   ;Area                ;Code10        ;TableRelation=Area;
                                                   CaptionML=[ENU=Area;
                                                              ENN=Area] }
    { 102 ;   ;Transaction Specification;Code10   ;TableRelation="Transaction Specification";
                                                   CaptionML=[ENU=Transaction Specification;
                                                              ENN=Transaction Specification] }
    { 104 ;   ;Payment Method Code ;Code10        ;TableRelation="Payment Method";
                                                   CaptionML=[ENU=Payment Method Code;
                                                              ENN=Payment Method Code] }
    { 105 ;   ;Shipping Agent Code ;Code10        ;TableRelation="Shipping Agent";
                                                   AccessByPermission=TableData 5790=R;
                                                   CaptionML=[ENU=Shipping Agent Code;
                                                              ENN=Shipping Agent Code] }
    { 106 ;   ;Package Tracking No.;Text30        ;CaptionML=[ENU=Package Tracking No.;
                                                              ENN=Package Tracking No.] }
    { 107 ;   ;No. Series          ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=[ENU=No. Series;
                                                              ENN=No. Series] }
    { 108 ;   ;Posting No. Series  ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=[ENU=Posting No. Series;
                                                              ENN=Posting No. Series] }
    { 109 ;   ;Shipping No. Series ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=[ENU=Shipping No. Series;
                                                              ENN=Shipping No. Series] }
    { 114 ;   ;Tax Area Code       ;Code20        ;TableRelation="Tax Area";
                                                   CaptionML=[ENU=Tax Area Code;
                                                              ENN=VAT Area Code] }
    { 115 ;   ;Tax Liable          ;Boolean       ;CaptionML=[ENU=Tax Liable;
                                                              ENN=VAT Liable] }
    { 116 ;   ;VAT Bus. Posting Group;Code20      ;TableRelation="VAT Business Posting Group";
                                                   CaptionML=[ENU=VAT Bus. Posting Group;
                                                              ENN=VAT Bus. Posting Group] }
    { 117 ;   ;Reserve             ;Option        ;CaptionML=[ENU=Reserve;
                                                              ENN=Reserve];
                                                   OptionCaptionML=[ENU=Never,Optional,Always;
                                                                    ENN=Never,Optional,Always];
                                                   OptionString=Never,Optional,Always }
    { 118 ;   ;Applies-to ID       ;Code50        ;CaptionML=[ENU=Applies-to ID;
                                                              ENN=Applies-to ID] }
    { 119 ;   ;VAT Base Discount % ;Decimal       ;CaptionML=[ENU=VAT Base Discount %;
                                                              ENN=VAT Base Discount %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 120 ;   ;Status              ;Option        ;CaptionML=[ENU=Status;
                                                              ENN=Status];
                                                   OptionCaptionML=[ENU=Open,Released,Pending Approval,Pending Prepayment;
                                                                    ENN=Open,Released,Pending Approval,Pending Prepayment];
                                                   OptionString=Open,Released,Pending Approval,Pending Prepayment }
    { 121 ;   ;Invoice Discount Calculation;Option;CaptionML=[ENU=Invoice Discount Calculation;
                                                              ENN=Invoice Discount Calculation];
                                                   OptionCaptionML=[ENU=None,%,Amount;
                                                                    ENN=None,%,Amount];
                                                   OptionString=None,%,Amount }
    { 122 ;   ;Invoice Discount Value;Decimal     ;CaptionML=[ENU=Invoice Discount Value;
                                                              ENN=Invoice Discount Value];
                                                   AutoFormatType=1 }
    { 123 ;   ;Send IC Document    ;Boolean       ;CaptionML=[ENU=Send IC Document;
                                                              ENN=Send IC Document] }
    { 124 ;   ;IC Status           ;Option        ;CaptionML=[ENU=IC Status;
                                                              ENN=IC Status];
                                                   OptionCaptionML=[ENU=New,Pending,Sent;
                                                                    ENN=New,Pending,Sent];
                                                   OptionString=New,Pending,Sent }
    { 125 ;   ;Sell-to IC Partner Code;Code20     ;TableRelation="IC Partner";
                                                   CaptionML=[ENU=Sell-to IC Partner Code;
                                                              ENN=Sell-to IC Partner Code];
                                                   Editable=No }
    { 126 ;   ;Bill-to IC Partner Code;Code20     ;TableRelation="IC Partner";
                                                   CaptionML=[ENU=Bill-to IC Partner Code;
                                                              ENN=Bill-to IC Partner Code];
                                                   Editable=No }
    { 129 ;   ;IC Direction        ;Option        ;CaptionML=[ENU=IC Direction;
                                                              ENN=IC Direction];
                                                   OptionCaptionML=[ENU=Outgoing,Incoming;
                                                                    ENN=Outgoing,Incoming];
                                                   OptionString=Outgoing,Incoming }
    { 130 ;   ;Prepayment %        ;Decimal       ;CaptionML=[ENU=Prepayment %;
                                                              ENN=Prepayment %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 131 ;   ;Prepayment No. Series;Code20       ;TableRelation="No. Series";
                                                   CaptionML=[ENU=Prepayment No. Series;
                                                              ENN=Prepayment No. Series] }
    { 132 ;   ;Compress Prepayment ;Boolean       ;InitValue=Yes;
                                                   CaptionML=[ENU=Compress Prepayment;
                                                              ENN=Compress Prepayment] }
    { 133 ;   ;Prepayment Due Date ;Date          ;CaptionML=[ENU=Prepayment Due Date;
                                                              ENN=Prepayment Due Date] }
    { 134 ;   ;Prepmt. Cr. Memo No. Series;Code20 ;TableRelation="No. Series";
                                                   CaptionML=[ENU=Prepmt. Cr. Memo No. Series;
                                                              ENN=Prepmt. Cr. Memo No. Series] }
    { 135 ;   ;Prepmt. Posting Description;Text100;CaptionML=[ENU=Prepmt. Posting Description;
                                                              ENN=Prepmt. Posting Description] }
    { 138 ;   ;Prepmt. Pmt. Discount Date;Date    ;CaptionML=[ENU=Prepmt. Pmt. Discount Date;
                                                              ENN=Prepmt. Pmt. Discount Date] }
    { 139 ;   ;Prepmt. Payment Terms Code;Code10  ;TableRelation="Payment Terms";
                                                   CaptionML=[ENU=Prepmt. Payment Terms Code;
                                                              ENN=Prepmt. Payment Terms Code] }
    { 140 ;   ;Prepmt. Payment Discount %;Decimal ;CaptionML=[ENU=Prepmt. Payment Discount %;
                                                              ENN=Prepmt. Payment Discount %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 145 ;   ;No. of Archived Versions;Integer   ;FieldClass=FlowField;
                                                   CalcFormula=Max("Sales Header Archive"."Version No." WHERE (Document Type=FIELD(Document Type),
                                                                                                               No.=FIELD(No.),
                                                                                                               Doc. No. Occurrence=FIELD(Doc. No. Occurrence)));
                                                   CaptionML=[ENU=No. of Archived Versions;
                                                              ENN=No. of Archived Versions];
                                                   Editable=No }
    { 151 ;   ;Sales Quote No.     ;Code20        ;TableRelation="Sales Header".No. WHERE (Document Type=CONST(Quote),
                                                                                           No.=FIELD(Sales Quote No.));
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Sales Quote No.;
                                                              ENN=Sales Quote No.];
                                                   Editable=No }
    { 152 ;   ;Quote Valid Until Date;Date        ;CaptionML=[ENU=Quote Valid To Date;
                                                              ENN=Quote Valid To Date] }
    { 153 ;   ;Quote Sent to Customer;DateTime    ;CaptionML=[ENU=Quote Sent to Customer;
                                                              ENN=Quote Sent to Customer] }
    { 154 ;   ;Quote Accepted      ;Boolean       ;CaptionML=[ENU=Quote Accepted;
                                                              ENN=Quote Accepted] }
    { 155 ;   ;Quote Accepted Date ;Date          ;CaptionML=[ENU=Quote Accepted Date;
                                                              ENN=Quote Accepted Date];
                                                   Editable=No }
    { 171 ;   ;Sell-to Phone No.   ;Text30        ;ExtendedDatatype=Phone No.;
                                                   DataClassification=CustomerContent;
                                                   CaptionML=[ENU=Sell-to Phone No.;
                                                              ENN=Sell-to Phone No.] }
    { 172 ;   ;Sell-to E-Mail      ;Text80        ;ExtendedDatatype=E-Mail;
                                                   DataClassification=CustomerContent;
                                                   CaptionML=[ENU=Sell-to E-Mail;
                                                              ENN=Sell-to E-Mail] }
    { 200 ;   ;Work Description    ;BLOB          ;CaptionML=[ENU=Work Description;
                                                              ENN=Work Description] }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnLookup=BEGIN
                                                              ShowDimensions;
                                                            END;

                                                   CaptionML=[ENU=Dimension Set ID;
                                                              ENN=Dimension Set ID];
                                                   Editable=No }
    { 827 ;   ;Credit Card No.     ;Code20        ;ObsoleteState=Removed;
                                                   ObsoleteReason=This field is not needed and it is not used anymore.;
                                                   CaptionML=[ENU=Credit Card No.;
                                                              ENN=Credit Card No.] }
    { 5043;   ;Interaction Exist   ;Boolean       ;CaptionML=[ENU=Interaction Exist;
                                                              ENN=Interaction Exist] }
    { 5044;   ;Time Archived       ;Time          ;CaptionML=[ENU=Time Archived;
                                                              ENN=Time Archived] }
    { 5045;   ;Date Archived       ;Date          ;CaptionML=[ENU=Date Archived;
                                                              ENN=Date Archived] }
    { 5046;   ;Archived By         ;Code50        ;TableRelation=User."User Name";
                                                   OnLookup=VAR
                                                              UserMgt@1000 : Codeunit 418;
                                                            BEGIN
                                                              UserMgt.LookupUserID("Archived By");
                                                            END;

                                                   TestTableRelation=No;
                                                   DataClassification=EndUserIdentifiableInformation;
                                                   CaptionML=[ENU=Archived By;
                                                              ENN=Archived By];
                                                   Editable=No }
    { 5047;   ;Version No.         ;Integer       ;CaptionML=[ENU=Version No.;
                                                              ENN=Version No.] }
    { 5048;   ;Doc. No. Occurrence ;Integer       ;CaptionML=[ENU=Doc. No. Occurrence;
                                                              ENN=Doc. No. Occurrence] }
    { 5050;   ;Campaign No.        ;Code20        ;TableRelation=Campaign;
                                                   CaptionML=[ENU=Campaign No.;
                                                              ENN=Campaign No.] }
    { 5051;   ;Sell-to Customer Template Code;Code10;
                                                   TableRelation="Customer Template";
                                                   CaptionML=[ENU=Sell-to Customer Template Code;
                                                              ENN=Sell-to Customer Template Code] }
    { 5052;   ;Sell-to Contact No. ;Code20        ;TableRelation=Contact;
                                                   CaptionML=[ENU=Sell-to Contact No.;
                                                              ENN=Sell-to Contact No.] }
    { 5053;   ;Bill-to Contact No. ;Code20        ;TableRelation=Contact;
                                                   CaptionML=[ENU=Bill-to Contact No.;
                                                              ENN=Bill-to Contact No.] }
    { 5054;   ;Bill-to Customer Template Code;Code10;
                                                   CaptionML=[ENU=Bill-to Customer Template Code;
                                                              ENN=Bill-to Customer Template Code] }
    { 5055;   ;Opportunity No.     ;Code20        ;TableRelation=Opportunity.No. WHERE (Contact No.=FIELD(Sell-to Contact No.),
                                                                                        Closed=CONST(No));
                                                   CaptionML=[ENU=Opportunity No.;
                                                              ENN=Opportunity No.] }
    { 5700;   ;Responsibility Center;Code10       ;TableRelation="Responsibility Center";
                                                   CaptionML=[ENU=Responsibility Center;
                                                              ENN=Responsibility Centre] }
    { 5750;   ;Shipping Advice     ;Option        ;AccessByPermission=TableData 110=R;
                                                   CaptionML=[ENU=Shipping Advice;
                                                              ENN=Shipping Advice];
                                                   OptionCaptionML=[ENU=Partial,Complete;
                                                                    ENN=Partial,Complete];
                                                   OptionString=Partial,Complete }
    { 5752;   ;Completely Shipped  ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Min("Sales Line Archive"."Completely Shipped" WHERE (Document Type=FIELD(Document Type),
                                                                                                                    Document No.=FIELD(No.),
                                                                                                                    Version No.=FIELD(Version No.),
                                                                                                                    Shipment Date=FIELD(Date Filter),
                                                                                                                    Location Code=FIELD(Location Filter)));
                                                   CaptionML=[ENU=Completely Shipped;
                                                              ENN=Completely Shipped];
                                                   Editable=No }
    { 5753;   ;Posting from Whse. Ref.;Integer    ;CaptionML=[ENU=Posting from Whse. Ref.;
                                                              ENN=Posting from Whse. Ref.] }
    { 5754;   ;Location Filter     ;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation=Location;
                                                   CaptionML=[ENU=Location Filter;
                                                              ENN=Location Filter] }
    { 5790;   ;Requested Delivery Date;Date       ;CaptionML=[ENU=Requested Delivery Date;
                                                              ENN=Requested Delivery Date] }
    { 5791;   ;Promised Delivery Date;Date        ;CaptionML=[ENU=Promised Delivery Date;
                                                              ENN=Promised Delivery Date] }
    { 5792;   ;Shipping Time       ;DateFormula   ;CaptionML=[ENU=Shipping Time;
                                                              ENN=Shipping Time] }
    { 5793;   ;Outbound Whse. Handling Time;DateFormula;
                                                   AccessByPermission=TableData 14=R;
                                                   CaptionML=[ENU=Outbound Whse. Handling Time;
                                                              ENN=Outbound Whse. Handling Time] }
    { 5794;   ;Shipping Agent Service Code;Code10 ;TableRelation="Shipping Agent Services".Code WHERE (Shipping Agent Code=FIELD(Shipping Agent Code));
                                                   CaptionML=[ENU=Shipping Agent Service Code;
                                                              ENN=Shipping Agent Service Code] }
    { 5795;   ;Late Order Shipping ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Sales Line Archive" WHERE (Document Type=FIELD(Document Type),
                                                                                                 Sell-to Customer No.=FIELD(Sell-to Customer No.),
                                                                                                 Document No.=FIELD(No.),
                                                                                                 Doc. No. Occurrence=FIELD(Doc. No. Occurrence),
                                                                                                 Version No.=FIELD(Version No.),
                                                                                                 Shipment Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Late Order Shipping;
                                                              ENN=Late Order Shipping];
                                                   Editable=No }
    { 5796;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Date Filter;
                                                              ENN=Date Filter] }
    { 5800;   ;Receive             ;Boolean       ;CaptionML=[ENU=Receive;
                                                              ENN=Receive] }
    { 5801;   ;Return Receipt No.  ;Code20        ;CaptionML=[ENU=Return Receipt No.;
                                                              ENN=Return Receipt No.] }
    { 5802;   ;Return Receipt No. Series;Code20   ;TableRelation="No. Series";
                                                   CaptionML=[ENU=Return Receipt No. Series;
                                                              ENN=Return Receipt No. Series] }
    { 5803;   ;Last Return Receipt No.;Code20     ;TableRelation="Return Receipt Header";
                                                   CaptionML=[ENU=Last Return Receipt No.;
                                                              ENN=Last Return Receipt No.] }
    { 7001;   ;Allow Line Disc.    ;Boolean       ;CaptionML=[ENU=Allow Line Disc.;
                                                              ENN=Allow Line Disc.] }
    { 7200;   ;Get Shipment Used   ;Boolean       ;CaptionML=[ENU=Get Shipment Used;
                                                              ENN=Get Shipment Used];
                                                   Editable=No }
    { 9000;   ;Assigned User ID    ;Code50        ;TableRelation="User Setup";
                                                   DataClassification=EndUserIdentifiableInformation;
                                                   CaptionML=[ENU=Assigned User ID;
                                                              ENN=Assigned User ID] }
    { 50000;  ;LOB                 ;Text40        ;TableRelation="Segment Master";
                                                   Description=AD_SD }
    { 50001;  ;Segment             ;Text100       ;TableRelation="Segment Master" WHERE (LOB=FIELD(LOB));
                                                   Description=AD_SD }
    { 50014;  ;Work Order No.      ;Code20        ;Description=AD_SD }
    { 50020;  ;Remarks             ;Text250       ;Description=AD_SD }
    { 50023;  ;Type of Invoice     ;Option        ;OptionCaptionML=ENU=" ,Settlement";
                                                   OptionString=[ ,Settlement];
                                                   Description=AD_SD }
    { 50025;  ;Invoice Types       ;Option        ;OptionCaptionML=ENU=" ,Fees,Expenses";
                                                   OptionString=[ ,Fees,Expenses];
                                                   Description=AD_SD }
    { 50033;  ;Team Leader         ;Code30        ;TableRelation=Employee WHERE (Type=FILTER(Partner|Others));
                                                   Description=AD_SD }
    { 50050;  ;Sales Currency      ;Option        ;OptionCaptionML=ENU=" ,USD,EURO,GBP,AED,BDT,AUD";
                                                   OptionString=[ ,USD,EURO,GBP,AED,BDT,AUD];
                                                   Description=AD_SD }
    { 50051;  ;Resp. Name          ;Text80        ;Description=AD_SD }
  }
  KEYS
  {
    {    ;Document Type,No.,Doc. No. Occurrence,Version No.;
                                                   Clustered=Yes }
    {    ;Document Type,Sell-to Customer No.       }
    {    ;Document Type,Bill-to Customer No.       }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      SalesCommentLineArch@1001 : Record 5126;
      DimMgt@1002 : Codeunit 408;
      UserSetupMgt@1000 : Codeunit 5700;

    [External]
    PROCEDURE ShowDimensions@1();
    BEGIN
      DimMgt.ShowDimensionSet("Dimension Set ID",STRSUBSTNO('%1 %2',"Document Type","No."));
    END;

    [External]
    PROCEDURE SetSecurityFilterOnRespCenter@5();
    BEGIN
      IF UserSetupMgt.GetSalesFilter <> '' THEN BEGIN
        FILTERGROUP(2);
        SETRANGE("Responsibility Center",UserSetupMgt.GetSalesFilter);
        FILTERGROUP(0);
      END;
    END;

    BEGIN
    END.
  }
}

OBJECT Table 5108 Sales Line Archive
{
  OBJECT-PROPERTIES
  {
    Date=02-10-21;
    Time=12:00:00;
    Modified=Yes;
    Version List=NAVW114.30;
  }
  PROPERTIES
  {
    OnDelete=VAR
               SalesCommentLinearch@1000 : Record 5126;
               DeferralHeaderArchive@1001 : Record 5127;
             BEGIN
               SalesCommentLinearch.SETRANGE("Document Type","Document Type");
               SalesCommentLinearch.SETRANGE("No.","Document No.");
               SalesCommentLinearch.SETRANGE("Document Line No.","Line No.");
               SalesCommentLinearch.SETRANGE("Doc. No. Occurrence","Doc. No. Occurrence");
               SalesCommentLinearch.SETRANGE("Version No.","Version No.");
               IF NOT SalesCommentLinearch.ISEMPTY THEN
                 SalesCommentLinearch.DELETEALL;

               IF "Deferral Code" <> '' THEN
                 DeferralHeaderArchive.DeleteHeader(DeferralUtilities.GetSalesDeferralDocType,
                   "Document Type","Document No.","Doc. No. Occurrence","Version No.","Line No.");
             END;

    CaptionML=[ENU=Sales Line Archive;
               ENN=Sales Line Archive];
    PasteIsValid=No;
  }
  FIELDS
  {
    { 1   ;   ;Document Type       ;Option        ;CaptionML=[ENU=Document Type;
                                                              ENN=Document Type];
                                                   OptionCaptionML=[ENU=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order;
                                                                    ENN=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order];
                                                   OptionString=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order }
    { 2   ;   ;Sell-to Customer No.;Code20        ;TableRelation=Customer;
                                                   CaptionML=[ENU=Sell-to Customer No.;
                                                              ENN=Sell-to Customer No.] }
    { 3   ;   ;Document No.        ;Code20        ;TableRelation="Sales Header Archive".No. WHERE (Document Type=FIELD(Document Type),
                                                                                                   Version No.=FIELD(Version No.));
                                                   CaptionML=[ENU=Document No.;
                                                              ENN=Document No.] }
    { 4   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              ENN=Line No.] }
    { 5   ;   ;Type                ;Option        ;CaptionML=[ENU=Type;
                                                              ENN=Type];
                                                   OptionCaptionML=[ENU=" ,G/L Account,Item,Resource,Fixed Asset,Charge (Item)";
                                                                    ENN=" ,G/L Account,Item,Resource,Fixed Asset,Charge (Item)"];
                                                   OptionString=[ ,G/L Account,Item,Resource,Fixed Asset,Charge (Item)] }
    { 6   ;   ;No.                 ;Code20        ;TableRelation=IF (Type=CONST(" ")) "Standard Text"
                                                                 ELSE IF (Type=CONST(G/L Account)) "G/L Account"
                                                                 ELSE IF (Type=CONST(Item)) Item
                                                                 ELSE IF (Type=CONST(Resource)) Resource
                                                                 ELSE IF (Type=CONST(Fixed Asset)) "Fixed Asset"
                                                                 ELSE IF (Type=CONST("Charge (Item)")) "Item Charge";
                                                   CaptionML=[ENU=No.;
                                                              ENN=No.] }
    { 7   ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE (Use As In-Transit=CONST(No));
                                                   CaptionML=[ENU=Location Code;
                                                              ENN=Location Code] }
    { 8   ;   ;Posting Group       ;Code20        ;TableRelation=IF (Type=CONST(Item)) "Inventory Posting Group"
                                                                 ELSE IF (Type=CONST(Fixed Asset)) "FA Posting Group";
                                                   CaptionML=[ENU=Posting Group;
                                                              ENN=Posting Group] }
    { 9   ;   ;Quantity Disc. Code ;Code20        ;CaptionML=[ENU=Quantity Disc. Code;
                                                              ENN=Quantity Disc. Code] }
    { 10  ;   ;Shipment Date       ;Date          ;CaptionML=[ENU=Shipment Date;
                                                              ENN=Shipment Date] }
    { 11  ;   ;Description         ;Text100       ;CaptionML=[ENU=Description;
                                                              ENN=Description];
                                                   Description=AD_SD }
    { 12  ;   ;Description 2       ;Text50        ;CaptionML=[ENU=Description 2;
                                                              ENN=Description 2] }
    { 13  ;   ;Unit of Measure     ;Text50        ;CaptionML=[ENU=Unit of Measure;
                                                              ENN=Unit of Measure] }
    { 15  ;   ;Quantity            ;Decimal       ;CaptionML=[ENU=Quantity;
                                                              ENN=Quantity];
                                                   DecimalPlaces=0:5 }
    { 16  ;   ;Outstanding Quantity;Decimal       ;CaptionML=[ENU=Outstanding Quantity;
                                                              ENN=Outstanding Quantity];
                                                   DecimalPlaces=0:5 }
    { 17  ;   ;Qty. to Invoice     ;Decimal       ;CaptionML=[ENU=Qty. to Invoice;
                                                              ENN=Qty. to Invoice];
                                                   DecimalPlaces=0:5 }
    { 18  ;   ;Qty. to Ship        ;Decimal       ;AccessByPermission=TableData 110=R;
                                                   CaptionML=[ENU=Qty. to Ship;
                                                              ENN=Qty. to Ship];
                                                   DecimalPlaces=0:5 }
    { 22  ;   ;Unit Price          ;Decimal       ;CaptionML=[ENU=Unit Price;
                                                              ENN=Unit Price];
                                                   AutoFormatType=2;
                                                   AutoFormatExpr="Currency Code";
                                                   CaptionClass=GetCaptionClass(FIELDNO("Unit Price")) }
    { 23  ;   ;Unit Cost (LCY)     ;Decimal       ;CaptionML=[ENU=Unit Cost (LCY);
                                                              ENN=Unit Cost (LCY)];
                                                   AutoFormatType=2 }
    { 25  ;   ;VAT %               ;Decimal       ;CaptionML=[ENU=VAT %;
                                                              ENN=VAT %];
                                                   DecimalPlaces=0:5 }
    { 26  ;   ;Quantity Disc. %    ;Decimal       ;CaptionML=[ENU=Quantity Disc. %;
                                                              ENN=Quantity Disc. %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 27  ;   ;Line Discount %     ;Decimal       ;CaptionML=[ENU=Line Discount %;
                                                              ENN=Line Discount %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 28  ;   ;Line Discount Amount;Decimal       ;CaptionML=[ENU=Line Discount Amount;
                                                              ENN=Line Discount Amount];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 29  ;   ;Amount              ;Decimal       ;CaptionML=[ENU=Amount;
                                                              ENN=Amount];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 30  ;   ;Amount Including VAT;Decimal       ;CaptionML=[ENU=Amount Including VAT;
                                                              ENN=Amount Including VAT];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 32  ;   ;Allow Invoice Disc. ;Boolean       ;InitValue=Yes;
                                                   CaptionML=[ENU=Allow Invoice Disc.;
                                                              ENN=Allow Invoice Disc.] }
    { 34  ;   ;Gross Weight        ;Decimal       ;CaptionML=[ENU=Gross Weight;
                                                              ENN=Gross Weight];
                                                   DecimalPlaces=0:5 }
    { 35  ;   ;Net Weight          ;Decimal       ;CaptionML=[ENU=Net Weight;
                                                              ENN=Net Weight];
                                                   DecimalPlaces=0:5 }
    { 36  ;   ;Units per Parcel    ;Decimal       ;CaptionML=[ENU=Units per Parcel;
                                                              ENN=Units per Parcel];
                                                   DecimalPlaces=0:5 }
    { 37  ;   ;Unit Volume         ;Decimal       ;CaptionML=[ENU=Unit Volume;
                                                              ENN=Unit Volume];
                                                   DecimalPlaces=0:5 }
    { 38  ;   ;Appl.-to Item Entry ;Integer       ;AccessByPermission=TableData 27=R;
                                                   CaptionML=[ENU=Appl.-to Item Entry;
                                                              ENN=Appl.-to Item Entry] }
    { 40  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   CaptionML=[ENU=Shortcut Dimension 1 Code;
                                                              ENN=Shortcut Dimension 1 Code];
                                                   CaptionClass='1,2,1' }
    { 41  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   CaptionML=[ENU=Shortcut Dimension 2 Code;
                                                              ENN=Shortcut Dimension 2 Code];
                                                   CaptionClass='1,2,2' }
    { 42  ;   ;Price Group Code    ;Code10        ;TableRelation="Customer Price Group";
                                                   CaptionML=[ENU=Price Group Code;
                                                              ENN=Price Group Code] }
    { 43  ;   ;Allow Quantity Disc.;Boolean       ;InitValue=Yes;
                                                   CaptionML=[ENU=Allow Quantity Disc.;
                                                              ENN=Allow Quantity Disc.] }
    { 45  ;   ;Job No.             ;Code20        ;TableRelation=Job;
                                                   CaptionML=[ENU=Job No.;
                                                              ENN=Job No.] }
    { 52  ;   ;Work Type Code      ;Code10        ;TableRelation="Work Type";
                                                   CaptionML=[ENU=Work Type Code;
                                                              ENN=Work Type Code] }
    { 55  ;   ;Cust./Item Disc. %  ;Decimal       ;CaptionML=[ENU=Cust./Item Disc. %;
                                                              ENN=Cust./Item Disc. %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 57  ;   ;Outstanding Amount  ;Decimal       ;CaptionML=[ENU=Outstanding Amount;
                                                              ENN=Outstanding Amount];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 58  ;   ;Qty. Shipped Not Invoiced;Decimal  ;CaptionML=[ENU=Qty. Shipped Not Invoiced;
                                                              ENN=Qty. Shipped Not Invoiced];
                                                   DecimalPlaces=0:5 }
    { 59  ;   ;Shipped Not Invoiced;Decimal       ;CaptionML=[ENU=Shipped Not Invoiced;
                                                              ENN=Shipped Not Invoiced];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 60  ;   ;Quantity Shipped    ;Decimal       ;AccessByPermission=TableData 110=R;
                                                   CaptionML=[ENU=Quantity Shipped;
                                                              ENN=Quantity Shipped];
                                                   DecimalPlaces=0:5 }
    { 61  ;   ;Quantity Invoiced   ;Decimal       ;CaptionML=[ENU=Quantity Invoiced;
                                                              ENN=Quantity Invoiced];
                                                   DecimalPlaces=0:5 }
    { 63  ;   ;Shipment No.        ;Code20        ;CaptionML=[ENU=Shipment No.;
                                                              ENN=Shipment No.] }
    { 64  ;   ;Shipment Line No.   ;Integer       ;CaptionML=[ENU=Shipment Line No.;
                                                              ENN=Shipment Line No.] }
    { 67  ;   ;Profit %            ;Decimal       ;CaptionML=[ENU=Profit %;
                                                              ENN=Profit %];
                                                   DecimalPlaces=0:5 }
    { 68  ;   ;Bill-to Customer No.;Code20        ;TableRelation=Customer;
                                                   CaptionML=[ENU=Bill-to Customer No.;
                                                              ENN=Bill-to Customer No.] }
    { 69  ;   ;Inv. Discount Amount;Decimal       ;CaptionML=[ENU=Inv. Discount Amount;
                                                              ENN=Inv. Discount Amount];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 71  ;   ;Purchase Order No.  ;Code20        ;TableRelation=IF (Drop Shipment=CONST(Yes)) "Purchase Header".No. WHERE (Document Type=CONST(Order));
                                                   CaptionML=[ENU=Purchase Order No.;
                                                              ENN=Purchase Order No.] }
    { 72  ;   ;Purch. Order Line No.;Integer      ;TableRelation=IF (Drop Shipment=CONST(Yes)) "Purchase Line"."Line No." WHERE (Document Type=CONST(Order),
                                                                                                                                 Document No.=FIELD(Purchase Order No.));
                                                   CaptionML=[ENU=Purch. Order Line No.;
                                                              ENN=Purch. Order Line No.] }
    { 73  ;   ;Drop Shipment       ;Boolean       ;AccessByPermission=TableData 223=R;
                                                   CaptionML=[ENU=Drop Shipment;
                                                              ENN=Drop Shipment] }
    { 74  ;   ;Gen. Bus. Posting Group;Code20     ;TableRelation="Gen. Business Posting Group";
                                                   CaptionML=[ENU=Gen. Bus. Posting Group;
                                                              ENN=Gen. Bus. Posting Group] }
    { 75  ;   ;Gen. Prod. Posting Group;Code20    ;TableRelation="Gen. Product Posting Group";
                                                   CaptionML=[ENU=Gen. Prod. Posting Group;
                                                              ENN=Gen. Prod. Posting Group] }
    { 77  ;   ;VAT Calculation Type;Option        ;CaptionML=[ENU=VAT Calculation Type;
                                                              ENN=VAT Calculation Type];
                                                   OptionCaptionML=[ENU=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                                    ENN=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax];
                                                   OptionString=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax }
    { 78  ;   ;Transaction Type    ;Code10        ;TableRelation="Transaction Type";
                                                   CaptionML=[ENU=Transaction Type;
                                                              ENN=Transaction Nature Code] }
    { 79  ;   ;Transport Method    ;Code10        ;TableRelation="Transport Method";
                                                   CaptionML=[ENU=Transport Method;
                                                              ENN=Transport Method] }
    { 80  ;   ;Attached to Line No.;Integer       ;TableRelation="Sales Line Archive"."Line No." WHERE (Document Type=FIELD(Document Type),
                                                                                                        Document No.=FIELD(Document No.),
                                                                                                        Doc. No. Occurrence=FIELD(Doc. No. Occurrence),
                                                                                                        Version No.=FIELD(Version No.));
                                                   CaptionML=[ENU=Attached to Line No.;
                                                              ENN=Attached to Line No.] }
    { 81  ;   ;Exit Point          ;Code10        ;TableRelation="Entry/Exit Point";
                                                   CaptionML=[ENU=Exit Point;
                                                              ENN=Exit Point] }
    { 82  ;   ;Area                ;Code10        ;TableRelation=Area;
                                                   CaptionML=[ENU=Area;
                                                              ENN=Area] }
    { 83  ;   ;Transaction Specification;Code10   ;TableRelation="Transaction Specification";
                                                   CaptionML=[ENU=Transaction Specification;
                                                              ENN=Transaction Specification] }
    { 85  ;   ;Tax Area Code       ;Code20        ;TableRelation="Tax Area";
                                                   CaptionML=[ENU=Tax Area Code;
                                                              ENN=VAT Area Code] }
    { 86  ;   ;Tax Liable          ;Boolean       ;CaptionML=[ENU=Tax Liable;
                                                              ENN=VAT Liable] }
    { 87  ;   ;Tax Group Code      ;Code20        ;TableRelation="Tax Group";
                                                   CaptionML=[ENU=Tax Group Code;
                                                              ENN=VAT Group Code] }
    { 88  ;   ;VAT Clause Code     ;Code20        ;TableRelation="VAT Clause";
                                                   CaptionML=[ENU=VAT Clause Code;
                                                              ENN=VAT Clause Code] }
    { 89  ;   ;VAT Bus. Posting Group;Code20      ;TableRelation="VAT Business Posting Group";
                                                   CaptionML=[ENU=VAT Bus. Posting Group;
                                                              ENN=VAT Bus. Posting Group] }
    { 90  ;   ;VAT Prod. Posting Group;Code20     ;TableRelation="VAT Product Posting Group";
                                                   CaptionML=[ENU=VAT Prod. Posting Group;
                                                              ENN=VAT Prod. Posting Group] }
    { 91  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   CaptionML=[ENU=Currency Code;
                                                              ENN=Currency Code] }
    { 92  ;   ;Outstanding Amount (LCY);Decimal   ;CaptionML=[ENU=Outstanding Amount (LCY);
                                                              ENN=Outstanding Amount (LCY)];
                                                   AutoFormatType=1 }
    { 93  ;   ;Shipped Not Invoiced (LCY);Decimal ;CaptionML=[ENU=Shipped Not Invoiced (LCY);
                                                              ENN=Shipped Not Invoiced (LCY)];
                                                   AutoFormatType=1 }
    { 96  ;   ;Reserve             ;Option        ;AccessByPermission=TableData 110=R;
                                                   CaptionML=[ENU=Reserve;
                                                              ENN=Reserve];
                                                   OptionCaptionML=[ENU=Never,Optional,Always;
                                                                    ENN=Never,Optional,Always];
                                                   OptionString=Never,Optional,Always }
    { 97  ;   ;Blanket Order No.   ;Code20        ;TableRelation="Sales Header".No. WHERE (Document Type=CONST(Blanket Order));
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Blanket Order No.;
                                                              ENN=Blanket Order No.] }
    { 98  ;   ;Blanket Order Line No.;Integer     ;TableRelation="Sales Line"."Line No." WHERE (Document Type=CONST(Blanket Order),
                                                                                                Document No.=FIELD(Blanket Order No.));
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Blanket Order Line No.;
                                                              ENN=Blanket Order Line No.] }
    { 99  ;   ;VAT Base Amount     ;Decimal       ;CaptionML=[ENU=VAT Base Amount;
                                                              ENN=VAT Base Amount];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 100 ;   ;Unit Cost           ;Decimal       ;CaptionML=[ENU=Unit Cost;
                                                              ENN=Unit Cost];
                                                   AutoFormatType=2;
                                                   AutoFormatExpr="Currency Code" }
    { 101 ;   ;System-Created Entry;Boolean       ;CaptionML=[ENU=System-Created Entry;
                                                              ENN=System-Created Entry] }
    { 103 ;   ;Line Amount         ;Decimal       ;CaptionML=[ENU=Line Amount;
                                                              ENN=Line Amount];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code";
                                                   CaptionClass=GetCaptionClass(FIELDNO("Line Amount")) }
    { 104 ;   ;VAT Difference      ;Decimal       ;CaptionML=[ENU=VAT Difference;
                                                              ENN=VAT Difference];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 105 ;   ;Inv. Disc. Amount to Invoice;Decimal;
                                                   CaptionML=[ENU=Inv. Disc. Amount to Invoice;
                                                              ENN=Inv. Disc. Amount to Invoice];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 106 ;   ;VAT Identifier      ;Code20        ;CaptionML=[ENU=VAT Identifier;
                                                              ENN=VAT Identifier] }
    { 107 ;   ;IC Partner Ref. Type;Option        ;CaptionML=[ENU=IC Partner Ref. Type;
                                                              ENN=IC Partner Ref. Type];
                                                   OptionCaptionML=[ENU=" ,G/L Account,Item,,,Charge (Item),Cross Reference,Common Item No.";
                                                                    ENN=" ,G/L Account,Item,,,Charge (Item),Cross Reference,Common Item No."];
                                                   OptionString=[ ,G/L Account,Item,,,Charge (Item),Cross Reference,Common Item No.] }
    { 108 ;   ;IC Partner Reference;Code20        ;CaptionML=[ENU=IC Partner Reference;
                                                              ENN=IC Partner Reference] }
    { 109 ;   ;Prepayment %        ;Decimal       ;CaptionML=[ENU=Prepayment %;
                                                              ENN=Prepayment %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 110 ;   ;Prepmt. Line Amount ;Decimal       ;CaptionML=[ENU=Prepmt. Line Amount;
                                                              ENN=Prepmt. Line Amount];
                                                   MinValue=0;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code";
                                                   CaptionClass=GetCaptionClass(FIELDNO("Prepmt. Line Amount")) }
    { 111 ;   ;Prepmt. Amt. Inv.   ;Decimal       ;CaptionML=[ENU=Prepmt. Amt. Inv.;
                                                              ENN=Prepmt. Amt. Inv.];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code";
                                                   CaptionClass=GetCaptionClass(FIELDNO("Prepmt. Amt. Inv.")) }
    { 112 ;   ;Prepmt. Amt. Incl. VAT;Decimal     ;CaptionML=[ENU=Prepmt. Amt. Incl. VAT;
                                                              ENN=Prepmt. Amt. Incl. VAT];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 113 ;   ;Prepayment Amount   ;Decimal       ;CaptionML=[ENU=Prepayment Amount;
                                                              ENN=Prepayment Amount];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 114 ;   ;Prepmt. VAT Base Amt.;Decimal      ;CaptionML=[ENU=Prepmt. VAT Base Amt.;
                                                              ENN=Prepmt. VAT Base Amt.];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 115 ;   ;Prepayment VAT %    ;Decimal       ;CaptionML=[ENU=Prepayment VAT %;
                                                              ENN=Prepayment VAT %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   Editable=No }
    { 116 ;   ;Prepmt. VAT Calc. Type;Option      ;CaptionML=[ENU=Prepmt. VAT Calc. Type;
                                                              ENN=Prepmt. VAT Calc. Type];
                                                   OptionCaptionML=[ENU=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                                    ENN=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax];
                                                   OptionString=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                   Editable=No }
    { 117 ;   ;Prepayment VAT Identifier;Code20   ;CaptionML=[ENU=Prepayment VAT Identifier;
                                                              ENN=Prepayment VAT Identifier];
                                                   Editable=No }
    { 118 ;   ;Prepayment Tax Area Code;Code20    ;TableRelation="Tax Area";
                                                   CaptionML=[ENU=Prepayment Tax Area Code;
                                                              ENN=Prepayment VAT Area Code] }
    { 119 ;   ;Prepayment Tax Liable;Boolean      ;CaptionML=[ENU=Prepayment Tax Liable;
                                                              ENN=Prepayment VAT Liable] }
    { 120 ;   ;Prepayment Tax Group Code;Code20   ;TableRelation="Tax Group";
                                                   CaptionML=[ENU=Prepayment Tax Group Code;
                                                              ENN=Prepayment VAT Group Code] }
    { 121 ;   ;Prepmt Amt to Deduct;Decimal       ;CaptionML=[ENU=Prepmt Amt to Deduct;
                                                              ENN=Prepmt Amt to Deduct];
                                                   MinValue=0;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code";
                                                   CaptionClass=GetCaptionClass(FIELDNO("Prepmt Amt to Deduct")) }
    { 122 ;   ;Prepmt Amt Deducted ;Decimal       ;CaptionML=[ENU=Prepmt Amt Deducted;
                                                              ENN=Prepmt Amt Deducted];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code";
                                                   CaptionClass=GetCaptionClass(FIELDNO("Prepmt Amt Deducted")) }
    { 123 ;   ;Prepayment Line     ;Boolean       ;CaptionML=[ENU=Prepayment Line;
                                                              ENN=Prepayment Line];
                                                   Editable=No }
    { 124 ;   ;Prepmt. Amount Inv. Incl. VAT;Decimal;
                                                   CaptionML=[ENU=Prepmt. Amount Inv. Incl. VAT;
                                                              ENN=Prepmt. Amount Inv. Incl. VAT];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 130 ;   ;IC Partner Code     ;Code20        ;TableRelation="IC Partner";
                                                   CaptionML=[ENU=IC Partner Code;
                                                              ENN=IC Partner Code] }
    { 145 ;   ;Pmt. Discount Amount;Decimal       ;CaptionML=[ENU=Pmt. Discount Amount;
                                                              ENN=Pmt. Discount Amount];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnLookup=BEGIN
                                                              ShowDimensions;
                                                            END;

                                                   CaptionML=[ENU=Dimension Set ID;
                                                              ENN=Dimension Set ID];
                                                   Editable=No }
    { 1700;   ;Deferral Code       ;Code10        ;TableRelation="Deferral Template"."Deferral Code";
                                                   CaptionML=[ENU=Deferral Code;
                                                              ENN=Deferral Code] }
    { 1702;   ;Returns Deferral Start Date;Date   ;CaptionML=[ENU=Returns Deferral Start Date;
                                                              ENN=Returns Deferral Start Date] }
    { 5047;   ;Version No.         ;Integer       ;CaptionML=[ENU=Version No.;
                                                              ENN=Version No.] }
    { 5048;   ;Doc. No. Occurrence ;Integer       ;CaptionML=[ENU=Doc. No. Occurrence;
                                                              ENN=Doc. No. Occurrence] }
    { 5402;   ;Variant Code        ;Code10        ;TableRelation=IF (Type=CONST(Item)) "Item Variant".Code WHERE (Item No.=FIELD(No.));
                                                   CaptionML=[ENU=Variant Code;
                                                              ENN=Variant Code] }
    { 5403;   ;Bin Code            ;Code20        ;TableRelation=Bin.Code WHERE (Location Code=FIELD(Location Code));
                                                   CaptionML=[ENU=Bin Code;
                                                              ENN=Bin Code] }
    { 5404;   ;Qty. per Unit of Measure;Decimal   ;InitValue=1;
                                                   CaptionML=[ENU=Qty. per Unit of Measure;
                                                              ENN=Qty. per Unit of Measure];
                                                   DecimalPlaces=0:5 }
    { 5405;   ;Planned             ;Boolean       ;CaptionML=[ENU=Planned;
                                                              ENN=Planned] }
    { 5407;   ;Unit of Measure Code;Code10        ;TableRelation=IF (Type=CONST(Item)) "Item Unit of Measure".Code WHERE (Item No.=FIELD(No.))
                                                                 ELSE "Unit of Measure";
                                                   CaptionML=[ENU=Unit of Measure Code;
                                                              ENN=Unit of Measure Code] }
    { 5415;   ;Quantity (Base)     ;Decimal       ;CaptionML=[ENU=Quantity (Base);
                                                              ENN=Quantity (Base)];
                                                   DecimalPlaces=0:5 }
    { 5416;   ;Outstanding Qty. (Base);Decimal    ;CaptionML=[ENU=Outstanding Qty. (Base);
                                                              ENN=Outstanding Qty. (Base)];
                                                   DecimalPlaces=0:5 }
    { 5417;   ;Qty. to Invoice (Base);Decimal     ;CaptionML=[ENU=Qty. to Invoice (Base);
                                                              ENN=Qty. to Invoice (Base)];
                                                   DecimalPlaces=0:5 }
    { 5418;   ;Qty. to Ship (Base) ;Decimal       ;CaptionML=[ENU=Qty. to Ship (Base);
                                                              ENN=Qty. to Ship (Base)];
                                                   DecimalPlaces=0:5 }
    { 5458;   ;Qty. Shipped Not Invd. (Base);Decimal;
                                                   CaptionML=[ENU=Qty. Shipped Not Invd. (Base);
                                                              ENN=Qty. Shipped Not Invd. (Base)];
                                                   DecimalPlaces=0:5 }
    { 5460;   ;Qty. Shipped (Base) ;Decimal       ;CaptionML=[ENU=Qty. Shipped (Base);
                                                              ENN=Qty. Shipped (Base)];
                                                   DecimalPlaces=0:5 }
    { 5461;   ;Qty. Invoiced (Base);Decimal       ;CaptionML=[ENU=Qty. Invoiced (Base);
                                                              ENN=Qty. Invoiced (Base)];
                                                   DecimalPlaces=0:5 }
    { 5600;   ;FA Posting Date     ;Date          ;CaptionML=[ENU=FA Posting Date;
                                                              ENN=FA Posting Date] }
    { 5602;   ;Depreciation Book Code;Code10      ;TableRelation="Depreciation Book";
                                                   CaptionML=[ENU=Depreciation Book Code;
                                                              ENN=Depreciation Book Code] }
    { 5605;   ;Depr. until FA Posting Date;Boolean;CaptionML=[ENU=Depr. until FA Posting Date;
                                                              ENN=Depr. until FA Posting Date] }
    { 5612;   ;Duplicate in Depreciation Book;Code10;
                                                   TableRelation="Depreciation Book";
                                                   CaptionML=[ENU=Duplicate in Depreciation Book;
                                                              ENN=Duplicate in Depreciation Book] }
    { 5613;   ;Use Duplication List;Boolean       ;CaptionML=[ENU=Use Duplication List;
                                                              ENN=Use Duplication List] }
    { 5700;   ;Responsibility Center;Code10       ;TableRelation="Responsibility Center";
                                                   CaptionML=[ENU=Responsibility Center;
                                                              ENN=Responsibility Centre] }
    { 5701;   ;Out-of-Stock Substitution;Boolean  ;CaptionML=[ENU=Out-of-Stock Substitution;
                                                              ENN=Out-of-Stock Substitution] }
    { 5702;   ;Substitution Available;Boolean     ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Item Substitution" WHERE (Type=CONST(Item),
                                                                                                No.=FIELD(No.),
                                                                                                Substitute Type=CONST(Item)));
                                                   CaptionML=[ENU=Substitution Available;
                                                              ENN=Substitution Available];
                                                   Editable=No }
    { 5703;   ;Originally Ordered No.;Code20      ;TableRelation=IF (Type=CONST(Item)) Item;
                                                   CaptionML=[ENU=Originally Ordered No.;
                                                              ENN=Originally Ordered No.] }
    { 5704;   ;Originally Ordered Var. Code;Code10;TableRelation=IF (Type=CONST(Item)) "Item Variant".Code WHERE (Item No.=FIELD(Originally Ordered No.));
                                                   CaptionML=[ENU=Originally Ordered Var. Code;
                                                              ENN=Originally Ordered Var. Code] }
    { 5705;   ;Cross-Reference No. ;Code20        ;AccessByPermission=TableData 5717=R;
                                                   CaptionML=[ENU=Cross-Reference No.;
                                                              ENN=Cross-Reference No.] }
    { 5706;   ;Unit of Measure (Cross Ref.);Code10;TableRelation=IF (Type=CONST(Item)) "Item Unit of Measure".Code WHERE (Item No.=FIELD(No.));
                                                   CaptionML=[ENU=Unit of Measure (Cross Ref.);
                                                              ENN=Unit of Measure (Cross Ref.)] }
    { 5707;   ;Cross-Reference Type;Option        ;CaptionML=[ENU=Cross-Reference Type;
                                                              ENN=Cross-Reference Type];
                                                   OptionCaptionML=[ENU=" ,Customer,Vendor,Bar Code";
                                                                    ENN=" ,Customer,Vendor,Bar Code"];
                                                   OptionString=[ ,Customer,Vendor,Bar Code] }
    { 5708;   ;Cross-Reference Type No.;Code30    ;CaptionML=[ENU=Cross-Reference Type No.;
                                                              ENN=Cross-Reference Type No.] }
    { 5709;   ;Item Category Code  ;Code20        ;TableRelation="Item Category";
                                                   CaptionML=[ENU=Item Category Code;
                                                              ENN=Item Category Code] }
    { 5710;   ;Nonstock            ;Boolean       ;CaptionML=[ENU=Catalog;
                                                              ENN=Catalogue] }
    { 5711;   ;Purchasing Code     ;Code10        ;TableRelation=Purchasing;
                                                   CaptionML=[ENU=Purchasing Code;
                                                              ENN=Purchasing Code] }
    { 5712;   ;Product Group Code  ;Code10        ;TableRelation="Product Group".Code WHERE (Item Category Code=FIELD(Item Category Code));
                                                   ValidateTableRelation=No;
                                                   ObsoleteState=Removed;
                                                   ObsoleteReason=Product Groups became first level children of Item Categories.;
                                                   CaptionML=[ENU=Product Group Code;
                                                              ENN=Product Group Code] }
    { 5713;   ;Special Order       ;Boolean       ;CaptionML=[ENU=Special Order;
                                                              ENN=Special Order] }
    { 5714;   ;Special Order Purchase No.;Code20  ;TableRelation=IF (Special Order=CONST(Yes)) "Purchase Header".No. WHERE (Document Type=CONST(Order));
                                                   CaptionML=[ENU=Special Order Purchase No.;
                                                              ENN=Special Order Purchase No.] }
    { 5715;   ;Special Order Purch. Line No.;Integer;
                                                   TableRelation=IF (Special Order=CONST(Yes)) "Purchase Line"."Line No." WHERE (Document Type=CONST(Order),
                                                                                                                                 Document No.=FIELD(Special Order Purchase No.));
                                                   CaptionML=[ENU=Special Order Purch. Line No.;
                                                              ENN=Special Order Purch. Line No.] }
    { 5752;   ;Completely Shipped  ;Boolean       ;CaptionML=[ENU=Completely Shipped;
                                                              ENN=Completely Shipped] }
    { 5790;   ;Requested Delivery Date;Date       ;CaptionML=[ENU=Requested Delivery Date;
                                                              ENN=Requested Delivery Date] }
    { 5791;   ;Promised Delivery Date;Date        ;CaptionML=[ENU=Promised Delivery Date;
                                                              ENN=Promised Delivery Date] }
    { 5792;   ;Shipping Time       ;DateFormula   ;AccessByPermission=TableData 5790=R;
                                                   CaptionML=[ENU=Shipping Time;
                                                              ENN=Shipping Time] }
    { 5793;   ;Outbound Whse. Handling Time;DateFormula;
                                                   AccessByPermission=TableData 14=R;
                                                   CaptionML=[ENU=Outbound Whse. Handling Time;
                                                              ENN=Outbound Whse. Handling Time] }
    { 5794;   ;Planned Delivery Date;Date         ;CaptionML=[ENU=Planned Delivery Date;
                                                              ENN=Planned Delivery Date] }
    { 5795;   ;Planned Shipment Date;Date         ;CaptionML=[ENU=Planned Shipment Date;
                                                              ENN=Planned Shipment Date] }
    { 5796;   ;Shipping Agent Code ;Code10        ;TableRelation="Shipping Agent";
                                                   AccessByPermission=TableData 5790=R;
                                                   CaptionML=[ENU=Shipping Agent Code;
                                                              ENN=Shipping Agent Code] }
    { 5797;   ;Shipping Agent Service Code;Code10 ;TableRelation="Shipping Agent Services".Code WHERE (Shipping Agent Code=FIELD(Shipping Agent Code));
                                                   CaptionML=[ENU=Shipping Agent Service Code;
                                                              ENN=Shipping Agent Service Code] }
    { 5800;   ;Allow Item Charge Assignment;Boolean;
                                                   InitValue=Yes;
                                                   AccessByPermission=TableData 5800=R;
                                                   CaptionML=[ENU=Allow Item Charge Assignment;
                                                              ENN=Allow Item Charge Assignment] }
    { 5803;   ;Return Qty. to Receive;Decimal     ;CaptionML=[ENU=Return Qty. to Receive;
                                                              ENN=Return Qty. to Receive];
                                                   DecimalPlaces=0:5 }
    { 5804;   ;Return Qty. to Receive (Base);Decimal;
                                                   CaptionML=[ENU=Return Qty. to Receive (Base);
                                                              ENN=Return Qty. to Receive (Base)];
                                                   DecimalPlaces=0:5 }
    { 5805;   ;Return Qty. Rcd. Not Invd.;Decimal ;CaptionML=[ENU=Return Qty. Rcd. Not Invd.;
                                                              ENN=Return Qty. Rcd. Not Invd.];
                                                   DecimalPlaces=0:5 }
    { 5806;   ;Ret. Qty. Rcd. Not Invd.(Base);Decimal;
                                                   CaptionML=[ENU=Ret. Qty. Rcd. Not Invd.(Base);
                                                              ENN=Ret. Qty. Rcd. Not Invd.(Base)];
                                                   DecimalPlaces=0:5 }
    { 5807;   ;Return Amt. Rcd. Not Invd.;Decimal ;CaptionML=[ENU=Return Amt. Rcd. Not Invd.;
                                                              ENN=Return Amt. Rcd. Not Invd.];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 5808;   ;Ret. Amt. Rcd. Not Invd. (LCY);Decimal;
                                                   CaptionML=[ENU=Ret. Amt. Rcd. Not Invd. (LCY);
                                                              ENN=Ret. Amt. Rcd. Not Invd. (LCY)];
                                                   AutoFormatType=1 }
    { 5809;   ;Return Qty. Received;Decimal       ;CaptionML=[ENU=Return Qty. Received;
                                                              ENN=Return Qty. Received];
                                                   DecimalPlaces=0:5 }
    { 5810;   ;Return Qty. Received (Base);Decimal;CaptionML=[ENU=Return Qty. Received (Base);
                                                              ENN=Return Qty. Received (Base)];
                                                   DecimalPlaces=0:5 }
    { 5811;   ;Appl.-from Item Entry;Integer      ;AccessByPermission=TableData 27=R;
                                                   CaptionML=[ENU=Appl.-from Item Entry;
                                                              ENN=Appl.-from Item Entry];
                                                   MinValue=0 }
    { 5900;   ;Service Contract No.;Code20        ;TableRelation="Service Contract Header"."Contract No." WHERE (Contract Type=CONST(Contract),
                                                                                                                 Customer No.=FIELD(Sell-to Customer No.),
                                                                                                                 Bill-to Customer No.=FIELD(Bill-to Customer No.));
                                                   CaptionML=[ENU=Service Contract No.;
                                                              ENN=Service Contract No.] }
    { 5901;   ;Service Order No.   ;Code20        ;CaptionML=[ENU=Service Order No.;
                                                              ENN=Service Order No.] }
    { 5902;   ;Service Item No.    ;Code20        ;TableRelation="Service Item".No. WHERE (Customer No.=FIELD(Sell-to Customer No.));
                                                   CaptionML=[ENU=Service Item No.;
                                                              ENN=Service Item No.] }
    { 5903;   ;Appl.-to Service Entry;Integer     ;CaptionML=[ENU=Appl.-to Service Entry;
                                                              ENN=Appl.-to Service Entry] }
    { 5904;   ;Service Item Line No.;Integer      ;CaptionML=[ENU=Service Item Line No.;
                                                              ENN=Service Item Line No.] }
    { 5907;   ;Serv. Price Adjmt. Gr. Code;Code10 ;TableRelation="Service Price Adjustment Group";
                                                   CaptionML=[ENU=Serv. Price Adjmt. Gr. Code;
                                                              ENN=Serv. Price Adjmt. Gr. Code] }
    { 5909;   ;BOM Item No.        ;Code20        ;TableRelation=Item;
                                                   CaptionML=[ENU=BOM Item No.;
                                                              ENN=BOM Item No.] }
    { 6600;   ;Return Receipt No.  ;Code20        ;CaptionML=[ENU=Return Receipt No.;
                                                              ENN=Return Receipt No.] }
    { 6601;   ;Return Receipt Line No.;Integer    ;CaptionML=[ENU=Return Receipt Line No.;
                                                              ENN=Return Receipt Line No.] }
    { 6608;   ;Return Reason Code  ;Code10        ;TableRelation="Return Reason";
                                                   CaptionML=[ENU=Return Reason Code;
                                                              ENN=Return Reason Code] }
    { 7001;   ;Allow Line Disc.    ;Boolean       ;InitValue=Yes;
                                                   CaptionML=[ENU=Allow Line Disc.;
                                                              ENN=Allow Line Disc.] }
    { 7002;   ;Customer Disc. Group;Code20        ;TableRelation="Customer Discount Group";
                                                   CaptionML=[ENU=Customer Disc. Group;
                                                              ENN=Customer Disc. Group] }
    { 50001;  ;Billing Type        ;Option        ;OptionCaptionML=ENU=" ,Event Driven,Date Driven,Time Sheet Driven,Completion Driven";
                                                   OptionString=[ ,Event Driven,Date Driven,Time Sheet Driven,Completion Driven];
                                                   Description=AD_SD }
    { 50004;  ;Scope1              ;Text150       ;Description=AD_SD }
    { 50005;  ;Scope2              ;Text150       ;Description=AD_SD }
    { 50006;  ;Scope3              ;Text150       ;Description=AD_SD }
    { 50007;  ;Scope4              ;Text150       ;Description=AD_SD }
  }
  KEYS
  {
    {    ;Document Type,Document No.,Doc. No. Occurrence,Version No.,Line No.;
                                                   Clustered=Yes }
    {    ;Document Type,Document No.,Line No.,Doc. No. Occurrence,Version No. }
    {    ;Sell-to Customer No.                     }
    {    ;Bill-to Customer No.                     }
    {    ;Type,No.                                 }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      DimMgt@1000 : Codeunit 408;
      DeferralUtilities@1001 : Codeunit 1720;

    [External]
    PROCEDURE GetCaptionClass@34(FieldNumber@1000 : Integer) : Text[80];
    VAR
      SalesHeaderArchive@1001 : Record 5107;
    BEGIN
      IF NOT SalesHeaderArchive.GET("Document Type","Document No.","Doc. No. Occurrence","Version No.") THEN BEGIN
        SalesHeaderArchive."No." := '';
        SalesHeaderArchive.INIT;
      END;
      IF SalesHeaderArchive."Prices Including VAT" THEN
        EXIT('2,1,' + GetFieldCaption(FieldNumber));

      EXIT('2,0,' + GetFieldCaption(FieldNumber));
    END;

    LOCAL PROCEDURE GetFieldCaption@31(FieldNumber@1000 : Integer) : Text[100];
    VAR
      Field@1001 : Record 2000000041;
    BEGIN
      Field.GET(DATABASE::"Sales Line",FieldNumber);
      EXIT(Field."Field Caption");
    END;

    [External]
    PROCEDURE ShowDimensions@25();
    BEGIN
      DimMgt.ShowDimensionSet("Dimension Set ID",STRSUBSTNO('%1 %2',"Document Type","Document No."));
    END;

    [External]
    PROCEDURE ShowLineComments@1();
    VAR
      SalesCommentLineArch@1000 : Record 5126;
      SalesArchCommentSheet@1001 : Page 5180;
    BEGIN
      SalesCommentLineArch.SETRANGE("Document Type","Document Type");
      SalesCommentLineArch.SETRANGE("No.","Document No.");
      SalesCommentLineArch.SETRANGE("Document Line No.","Line No.");
      SalesCommentLineArch.SETRANGE("Doc. No. Occurrence","Doc. No. Occurrence");
      SalesCommentLineArch.SETRANGE("Version No.","Version No.");
      CLEAR(SalesArchCommentSheet);
      SalesArchCommentSheet.SETTABLEVIEW(SalesCommentLineArch);
      SalesArchCommentSheet.RUNMODAL;
    END;

    [External]
    PROCEDURE ShowDeferrals@2();
    BEGIN
      DeferralUtilities.OpenLineScheduleArchive(
        "Deferral Code",DeferralUtilities.GetSalesDeferralDocType,
        "Document Type","Document No.",
        "Doc. No. Occurrence","Version No.","Line No.");
    END;

    [External]
    PROCEDURE CopyTempLines@4(SalesHeaderArchive@1003 : Record 5107;VAR TempSalesLine@1000 : TEMPORARY Record 37);
    VAR
      SalesLineArchive@1001 : Record 5108;
    BEGIN
      DELETEALL;

      SalesLineArchive.SETRANGE("Document Type",SalesHeaderArchive."Document Type");
      SalesLineArchive.SETRANGE("Document No.",SalesHeaderArchive."No.");
      SalesLineArchive.SETRANGE("Version No.",SalesHeaderArchive."Version No.");
      IF SalesLineArchive.FINDSET THEN
        REPEAT
          INIT;
          Rec := SalesLineArchive;
          INSERT;
          TempSalesLine.TRANSFERFIELDS(SalesLineArchive);
          TempSalesLine.INSERT;
        UNTIL SalesLineArchive.NEXT = 0;
    END;

    BEGIN
    END.
  }
}

OBJECT Table 5200 Employee
{
  OBJECT-PROPERTIES
  {
    Date=02-10-21;
    Time=12:00:00;
    Modified=Yes;
    Version List=NAVW114.30;
  }
  PROPERTIES
  {
    DataCaptionFields=No.,First Name,Middle Name,Last Name;
    OnInsert=VAR
               ResourcesSetup@1000 : Record 314;
               Resource@1001 : Record 156;
             BEGIN
               "Last Modified Date Time" := CURRENTDATETIME;
               HumanResSetup.GET;
               IF "No." = '' THEN BEGIN
                 HumanResSetup.TESTFIELD("Employee Nos.");
                 NoSeriesMgt.InitSeries(HumanResSetup."Employee Nos.",xRec."No. Series",0D,"No.","No. Series");
               END;
               IF HumanResSetup."Automatically Create Resource" THEN BEGIN
                 ResourcesSetup.GET;
                 Resource.INIT;
                 IF NoSeriesMgt.ManualNoAllowed(ResourcesSetup."Resource Nos.") THEN BEGIN
                   Resource."No." := "No.";
                   Resource.INSERT(TRUE);
                 END ELSE
                   Resource.INSERT(TRUE);
                 "Resource No." := Resource."No.";
               END;

               DimMgt.UpdateDefaultDim(
                 DATABASE::Employee,"No.",
                 "Global Dimension 1 Code","Global Dimension 2 Code");
               UpdateSearchName;
             END;

    OnModify=BEGIN
               "Last Modified Date Time" := CURRENTDATETIME;
               "Last Date Modified" := TODAY;
               IF Res.READPERMISSION THEN
                 EmployeeResUpdate.HumanResToRes(xRec,Rec);
               IF SalespersonPurchaser.READPERMISSION THEN
                 EmployeeSalespersonUpdate.HumanResToSalesPerson(xRec,Rec);
               UpdateSearchName;
             END;

    OnDelete=BEGIN
               AlternativeAddr.SETRANGE("Employee No.","No.");
               AlternativeAddr.DELETEALL;

               EmployeeQualification.SETRANGE("Employee No.","No.");
               EmployeeQualification.DELETEALL;

               Relative.SETRANGE("Employee No.","No.");
               Relative.DELETEALL;

               EmployeeAbsence.SETRANGE("Employee No.","No.");
               EmployeeAbsence.DELETEALL;

               MiscArticleInformation.SETRANGE("Employee No.","No.");
               MiscArticleInformation.DELETEALL;

               ConfidentialInformation.SETRANGE("Employee No.","No.");
               ConfidentialInformation.DELETEALL;

               HumanResComment.SETRANGE("No.","No.");
               HumanResComment.DELETEALL;

               DimMgt.DeleteDefaultDim(DATABASE::Employee,"No.");
             END;

    OnRename=BEGIN
               DimMgt.RenameDefaultDim(DATABASE::Employee,xRec."No.","No.");
               "Last Modified Date Time" := CURRENTDATETIME;
               "Last Date Modified" := TODAY;
               UpdateSearchName;
             END;

    CaptionML=[ENU=Employee;
               ENN=Employee];
    LookupPageID=Page5201;
    DrillDownPageID=Page5201;
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;OnValidate=BEGIN
                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  HumanResSetup.GET;
                                                                  NoSeriesMgt.TestManual(HumanResSetup."Employee Nos.");
                                                                  "No. Series" := '';
                                                                END;
                                                              END;

                                                   AltSearchField=Search Name;
                                                   CaptionML=[ENU=No.;
                                                              ENN=No.] }
    { 2   ;   ;First Name          ;Text30        ;CaptionML=[ENU=First Name;
                                                              ENN=First Name] }
    { 3   ;   ;Middle Name         ;Text30        ;CaptionML=[ENU=Middle Name;
                                                              ENN=Middle Name] }
    { 4   ;   ;Last Name           ;Text30        ;CaptionML=[ENU=Last Name;
                                                              ENN=Last Name] }
    { 5   ;   ;Initials            ;Text30        ;OnValidate=BEGIN
                                                                IF ("Search Name" = UPPERCASE(xRec.Initials)) OR ("Search Name" = '') THEN
                                                                  "Search Name" := Initials;
                                                              END;

                                                   CaptionML=[ENU=Initials;
                                                              ENN=Initials] }
    { 6   ;   ;Job Title           ;Text30        ;CaptionML=[ENU=Job Title;
                                                              ENN=Job Title] }
    { 7   ;   ;Search Name         ;Code250       ;OnValidate=BEGIN
                                                                IF "Search Name" = '' THEN
                                                                  "Search Name" := SetSearchNameToFullnameAndInitials;
                                                              END;

                                                   CaptionML=[ENU=Search Name;
                                                              ENN=Search Name] }
    { 8   ;   ;Address             ;Text100       ;CaptionML=[ENU=Address;
                                                              ENN=Address] }
    { 9   ;   ;Address 2           ;Text50        ;CaptionML=[ENU=Address 2;
                                                              ENN=Address 2] }
    { 10  ;   ;City                ;Text30        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   OnLookup=BEGIN
                                                              PostCode.LookupPostCode(City,"Post Code",County,"Country/Region Code");
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=City;
                                                              ENN=City] }
    { 11  ;   ;Post Code           ;Code20        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code"
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   OnLookup=BEGIN
                                                              PostCode.LookupPostCode(City,"Post Code",County,"Country/Region Code");
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Post Code;
                                                              ENN=Postcode] }
    { 12  ;   ;County              ;Text30        ;CaptionML=[ENU=County;
                                                              ENN=County];
                                                   CaptionClass='5,1,' + "Country/Region Code" }
    { 13  ;   ;Phone No.           ;Text30        ;ExtendedDatatype=Phone No.;
                                                   CaptionML=[ENU=Phone No.;
                                                              ENN=Phone No.] }
    { 14  ;   ;Mobile Phone No.    ;Text30        ;ExtendedDatatype=Phone No.;
                                                   CaptionML=[ENU=Mobile Phone No.;
                                                              ENN=Mobile Phone No.] }
    { 15  ;   ;E-Mail              ;Text80        ;OnValidate=VAR
                                                                MailManagement@1000 : Codeunit 9520;
                                                              BEGIN
                                                                MailManagement.ValidateEmailAddressField("E-Mail");
                                                              END;

                                                   ExtendedDatatype=E-Mail;
                                                   CaptionML=[ENU=Email;
                                                              ENN=Email] }
    { 16  ;   ;Alt. Address Code   ;Code10        ;TableRelation="Alternative Address".Code WHERE (Employee No.=FIELD(No.));
                                                   CaptionML=[ENU=Alt. Address Code;
                                                              ENN=Alt. Address Code] }
    { 17  ;   ;Alt. Address Start Date;Date       ;CaptionML=[ENU=Alt. Address Start Date;
                                                              ENN=Alt. Address Start Date] }
    { 18  ;   ;Alt. Address End Date;Date         ;CaptionML=[ENU=Alt. Address End Date;
                                                              ENN=Alt. Address End Date] }
    { 19  ;   ;Picture             ;BLOB          ;ObsoleteState=Pending;
                                                   ObsoleteReason=Replaced by Image field;
                                                   CaptionML=[ENU=Picture;
                                                              ENN=Picture];
                                                   SubType=Bitmap }
    { 20  ;   ;Birth Date          ;Date          ;CaptionML=[ENU=Birth Date;
                                                              ENN=Birth Date] }
    { 21  ;   ;Social Security No. ;Text30        ;CaptionML=[ENU=Social Security No.;
                                                              ENN=Social Security No.] }
    { 22  ;   ;Union Code          ;Code10        ;TableRelation=Union;
                                                   CaptionML=[ENU=Union Code;
                                                              ENN=Union Code] }
    { 23  ;   ;Union Membership No.;Text30        ;CaptionML=[ENU=Union Membership No.;
                                                              ENN=Union Membership No.] }
    { 24  ;   ;Gender              ;Option        ;CaptionML=[ENU=Gender;
                                                              ENN=Gender];
                                                   OptionCaptionML=[ENU=" ,Female,Male";
                                                                    ENN=" ,Female,Male"];
                                                   OptionString=[ ,Female,Male] }
    { 25  ;   ;Country/Region Code ;Code10        ;TableRelation=Country/Region;
                                                   OnValidate=BEGIN
                                                                PostCode.CheckClearPostCodeCityCounty(City,"Post Code",County,"Country/Region Code",xRec."Country/Region Code");
                                                              END;

                                                   CaptionML=[ENU=Country/Region Code;
                                                              ENN=Country/Region Code] }
    { 26  ;   ;Manager No.         ;Code20        ;TableRelation=Employee;
                                                   CaptionML=[ENU=Manager No.;
                                                              ENN=Manager No.] }
    { 27  ;   ;Emplymt. Contract Code;Code10      ;TableRelation="Employment Contract";
                                                   CaptionML=[ENU=Emplymt. Contract Code;
                                                              ENN=Emplymt. Contract Code] }
    { 28  ;   ;Statistics Group Code;Code10       ;TableRelation="Employee Statistics Group";
                                                   CaptionML=[ENU=Statistics Group Code;
                                                              ENN=Statistics Group Code] }
    { 29  ;   ;Employment Date     ;Date          ;CaptionML=[ENU=Employment Date;
                                                              ENN=Employment Date] }
    { 31  ;   ;Status              ;Option        ;OnValidate=BEGIN
                                                                EmployeeQualification.SETRANGE("Employee No.","No.");
                                                                EmployeeQualification.MODIFYALL("Employee Status",Status);
                                                                MODIFY;
                                                              END;

                                                   CaptionML=[ENU=Status;
                                                              ENN=Status];
                                                   OptionCaptionML=[ENU=Active,Inactive,Terminated;
                                                                    ENN=Active,Inactive,Terminated];
                                                   OptionString=Active,Inactive,Terminated }
    { 32  ;   ;Inactive Date       ;Date          ;CaptionML=[ENU=Inactive Date;
                                                              ENN=Inactive Date] }
    { 33  ;   ;Cause of Inactivity Code;Code10    ;TableRelation="Cause of Inactivity";
                                                   CaptionML=[ENU=Cause of Inactivity Code;
                                                              ENN=Cause of Inactivity Code] }
    { 34  ;   ;Termination Date    ;Date          ;CaptionML=[ENU=Termination Date;
                                                              ENN=Termination Date] }
    { 35  ;   ;Grounds for Term. Code;Code10      ;TableRelation="Grounds for Termination";
                                                   CaptionML=[ENU=Grounds for Term. Code;
                                                              ENN=Grounds for Term. Code] }
    { 36  ;   ;Global Dimension 1 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Global Dimension 1 Code");
                                                              END;

                                                   CaptionML=[ENU=Global Dimension 1 Code;
                                                              ENN=Global Dimension 1 Code];
                                                   CaptionClass='1,1,1' }
    { 37  ;   ;Global Dimension 2 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Global Dimension 2 Code");
                                                              END;

                                                   CaptionML=[ENU=Global Dimension 2 Code;
                                                              ENN=Global Dimension 2 Code];
                                                   CaptionClass='1,1,2' }
    { 38  ;   ;Resource No.        ;Code20        ;TableRelation=Resource WHERE (Type=CONST(Person));
                                                   OnValidate=BEGIN
                                                                IF ("Resource No." <> '') AND Res.WRITEPERMISSION THEN BEGIN
                                                                  CheckIfAnEmployeeIsLinkedToTheResource("Resource No.");
                                                                  EmployeeResUpdate.ResUpdate(Rec);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Resource No.;
                                                              ENN=Resource No.] }
    { 39  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Human Resource Comment Line" WHERE (Table Name=CONST(Employee),
                                                                                                          No.=FIELD(No.)));
                                                   CaptionML=[ENU=Comment;
                                                              ENN=Comment];
                                                   Editable=No }
    { 40  ;   ;Last Date Modified  ;Date          ;CaptionML=[ENU=Last Date Modified;
                                                              ENN=Last Date Modified];
                                                   Editable=No }
    { 41  ;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Date Filter;
                                                              ENN=Date Filter] }
    { 42  ;   ;Global Dimension 1 Filter;Code20   ;FieldClass=FlowFilter;
                                                   TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   CaptionML=[ENU=Global Dimension 1 Filter;
                                                              ENN=Global Dimension 1 Filter];
                                                   CaptionClass='1,3,1' }
    { 43  ;   ;Global Dimension 2 Filter;Code20   ;FieldClass=FlowFilter;
                                                   TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   CaptionML=[ENU=Global Dimension 2 Filter;
                                                              ENN=Global Dimension 2 Filter];
                                                   CaptionClass='1,3,2' }
    { 44  ;   ;Cause of Absence Filter;Code10     ;FieldClass=FlowFilter;
                                                   TableRelation="Cause of Absence";
                                                   CaptionML=[ENU=Cause of Absence Filter;
                                                              ENN=Cause of Absence Filter] }
    { 45  ;   ;Total Absence (Base);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Employee Absence"."Quantity (Base)" WHERE (Employee No.=FIELD(No.),
                                                                                                               Cause of Absence Code=FIELD(Cause of Absence Filter),
                                                                                                               From Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Total Absence (Base);
                                                              ENN=Total Absence (Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 46  ;   ;Extension           ;Text30        ;CaptionML=[ENU=Extension;
                                                              ENN=Extension] }
    { 47  ;   ;Employee No. Filter ;Code20        ;FieldClass=FlowFilter;
                                                   TableRelation=Employee;
                                                   CaptionML=[ENU=Employee No. Filter;
                                                              ENN=Employee No. Filter] }
    { 48  ;   ;Pager               ;Text30        ;CaptionML=[ENU=Pager;
                                                              ENN=Pager] }
    { 49  ;   ;Fax No.             ;Text30        ;CaptionML=[ENU=Fax No.;
                                                              ENN=Fax No.] }
    { 50  ;   ;Company E-Mail      ;Text80        ;OnValidate=VAR
                                                                MailManagement@1000 : Codeunit 9520;
                                                              BEGIN
                                                                MailManagement.ValidateEmailAddressField("Company E-Mail");
                                                              END;

                                                   ExtendedDatatype=E-Mail;
                                                   CaptionML=[ENU=Company Email;
                                                              ENN=Company Email] }
    { 51  ;   ;Title               ;Text30        ;CaptionML=[ENU=Title;
                                                              ENN=Title] }
    { 52  ;   ;Salespers./Purch. Code;Code20      ;TableRelation=Salesperson/Purchaser;
                                                   CaptionML=[ENU=Salespers./Purch. Code;
                                                              ENN=Salespers./Purch. Code] }
    { 53  ;   ;No. Series          ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=[ENU=No. Series;
                                                              ENN=No. Series];
                                                   Editable=No }
    { 54  ;   ;Last Modified Date Time;DateTime   ;CaptionML=[ENU=Last Modified Date Time;
                                                              ENN=Last Modified Date Time];
                                                   Editable=No }
    { 55  ;   ;Employee Posting Group;Code20      ;TableRelation="Employee Posting Group";
                                                   CaptionML=[ENU=Employee Posting Group;
                                                              ENN=Employee Posting Group] }
    { 56  ;   ;Bank Branch No.     ;Text20        ;CaptionML=[ENU=Bank Branch No.;
                                                              ENN=Bank Sort Code] }
    { 57  ;   ;Bank Account No.    ;Text30        ;CaptionML=[ENU=Bank Account No.;
                                                              ENN=Bank Account No.] }
    { 58  ;   ;IBAN                ;Code50        ;OnValidate=VAR
                                                                CompanyInfo@1000 : Record 79;
                                                              BEGIN
                                                                CompanyInfo.CheckIBAN(IBAN);
                                                              END;

                                                   CaptionML=[ENU=IBAN;
                                                              ENN=IBAN] }
    { 59  ;   ;Balance             ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Detailed Employee Ledger Entry".Amount WHERE (Employee No.=FIELD(No.),
                                                                                                                   Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                   Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                   Posting Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Balance;
                                                              ENN=Balance];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 60  ;   ;SWIFT Code          ;Code20        ;TableRelation="SWIFT Code";
                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=SWIFT Code;
                                                              ENN=SWIFT Code] }
    { 80  ;   ;Application Method  ;Option        ;CaptionML=[ENU=Application Method;
                                                              ENN=Application Method];
                                                   OptionCaptionML=[ENU=Manual,Apply to Oldest;
                                                                    ENN=Manual,Apply to Oldest];
                                                   OptionString=Manual,Apply to Oldest }
    { 140 ;   ;Image               ;Media         ;ExtendedDatatype=Person;
                                                   CaptionML=[ENU=Image;
                                                              ENN=Image] }
    { 150 ;   ;Privacy Blocked     ;Boolean       ;CaptionML=[ENU=Privacy Blocked;
                                                              ENN=Privacy Blocked] }
    { 1100;   ;Cost Center Code    ;Code20        ;TableRelation="Cost Center";
                                                   CaptionML=[ENU=Cost Center Code;
                                                              ENN=Cost Centre Code] }
    { 1101;   ;Cost Object Code    ;Code20        ;TableRelation="Cost Object";
                                                   CaptionML=[ENU=Cost Object Code;
                                                              ENN=Cost Object Code] }
    { 8000;   ;Id                  ;GUID          ;CaptionML=[ENU=Id;
                                                              ENN=Id] }
    { 50054;  ;Type                ;Option        ;OptionCaptionML=ENU=" ,Partner,Article,Others";
                                                   OptionString=[ ,Partner,Article,Others];
                                                   Description=AD_SD }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Search Name                              }
    {    ;Status,Union Code                        }
    {    ;Status,Emplymt. Contract Code            }
    {    ;Last Name,First Name,Middle Name         }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;No.,First Name,Last Name,Initials,Job Title }
    { 2   ;Brick               ;Last Name,First Name,Job Title,Image     }
  }
  CODE
  {
    VAR
      HumanResSetup@1000 : Record 5218;
      Res@1002 : Record 156;
      PostCode@1003 : Record 225;
      AlternativeAddr@1004 : Record 5201;
      EmployeeQualification@1005 : Record 5203;
      Relative@1006 : Record 5205;
      EmployeeAbsence@1007 : Record 5207;
      MiscArticleInformation@1008 : Record 5214;
      ConfidentialInformation@1009 : Record 5216;
      HumanResComment@1010 : Record 5208;
      SalespersonPurchaser@1011 : Record 13;
      NoSeriesMgt@1012 : Codeunit 396;
      EmployeeResUpdate@1013 : Codeunit 5200;
      EmployeeSalespersonUpdate@1014 : Codeunit 5201;
      DimMgt@1015 : Codeunit 408;
      Text000@1016 : TextConst 'ENU=Before you can use Online Map, you must fill in the Online Map Setup window.\See Setting Up Online Map in Help.;ENN=Before you can use Online Map, you must fill in the Online Map Setup window.\See Setting Up Online Map in Help.';
      BlockedEmplForJnrlErr@1001 : TextConst '@@@="%1 = employee no.";ENU=You cannot create this document because employee %1 is blocked due to privacy.;ENN=You cannot create this document because employee %1 is blocked due to privacy.';
      BlockedEmplForJnrlPostingErr@1017 : TextConst '@@@="%1 = employee no.";ENU=You cannot post this document because employee %1 is blocked due to privacy.;ENN=You cannot post this document because employee %1 is blocked due to privacy.';
      EmployeeLinkedToResourceErr@1018 : TextConst '@@@="%1 = employee no.";ENU=You cannot link multiple employees to the same resource. Employee %1 is already linked to that resource.;ENN=You cannot link multiple employees to the same resource. Employee %1 is already linked to that resource.';

    [External]
    PROCEDURE AssistEdit@2() : Boolean;
    BEGIN
      HumanResSetup.GET;
      HumanResSetup.TESTFIELD("Employee Nos.");
      IF NoSeriesMgt.SelectSeries(HumanResSetup."Employee Nos.",xRec."No. Series","No. Series") THEN BEGIN
        NoSeriesMgt.SetSeries("No.");
        EXIT(TRUE);
      END;
    END;

    [External]
    PROCEDURE FullName@1() : Text[100];
    VAR
      NewFullName@1000 : Text[100];
      Handled@1001 : Boolean;
    BEGIN
      OnBeforeGetFullName(Rec,NewFullName,Handled);
      IF Handled THEN
        EXIT(NewFullName);

      IF "Middle Name" = '' THEN
        EXIT("First Name" + ' ' + "Last Name");

      EXIT("First Name" + ' ' + "Middle Name" + ' ' + "Last Name");
    END;

    [External]
    PROCEDURE ValidateShortcutDimCode@29(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.ValidateDimValueCode(FieldNumber,ShortcutDimCode);
      IF NOT ISTEMPORARY THEN BEGIN
        DimMgt.SaveDefaultDim(DATABASE::Employee,"No.",FieldNumber,ShortcutDimCode);
        MODIFY;
      END;
    END;

    [External]
    PROCEDURE DisplayMap@7();
    VAR
      MapPoint@1001 : Record 800;
      MapMgt@1000 : Codeunit 802;
    BEGIN
      IF MapPoint.FINDFIRST THEN
        MapMgt.MakeSelection(DATABASE::Employee,GETPOSITION)
      ELSE
        MESSAGE(Text000);
    END;

    LOCAL PROCEDURE UpdateSearchName@4();
    VAR
      PrevSearchName@1000 : Code[250];
    BEGIN
      PrevSearchName := xRec.FullName + ' ' + xRec.Initials;
      IF ((("First Name" <> xRec."First Name") OR ("Middle Name" <> xRec."Middle Name") OR ("Last Name" <> xRec."Last Name") OR
           (Initials <> xRec.Initials)) AND ("Search Name" = PrevSearchName))
      THEN
        "Search Name" := SetSearchNameToFullnameAndInitials;
    END;

    LOCAL PROCEDURE SetSearchNameToFullnameAndInitials@3() : Code[250];
    BEGIN
      EXIT(FullName + ' ' + Initials);
    END;

    [External]
    PROCEDURE GetBankAccountNo@5() : Text;
    BEGIN
      IF IBAN <> '' THEN
        EXIT(DELCHR(IBAN,'=<>'));

      IF "Bank Account No." <> '' THEN
        EXIT("Bank Account No.");
    END;

    [External]
    PROCEDURE CheckBlockedEmployeeOnJnls@8(IsPosting@1000 : Boolean);
    BEGIN
      IF IsOnBeforeCheckBlockedEmployeeHandled(IsPosting) THEN
        EXIT;
      IF "Privacy Blocked" THEN BEGIN
        IF IsPosting THEN
          ERROR(BlockedEmplForJnrlPostingErr,"No.");
        ERROR(BlockedEmplForJnrlErr,"No.")
      END;
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeGetFullName@6(Employee@1000 : Record 5200;VAR NewFullName@1001 : Text[100];VAR Handled@1002 : Boolean);
    BEGIN
    END;

    LOCAL PROCEDURE CheckIfAnEmployeeIsLinkedToTheResource@10(ResourceNo@1000 : Code[20]);
    VAR
      Employee@1001 : Record 5200;
    BEGIN
      Employee.SETFILTER("No.",'<>%1',"No.");
      Employee.SETRANGE("Resource No.",ResourceNo);
      IF Employee.FINDFIRST THEN
        ERROR(EmployeeLinkedToResourceErr,Employee."No.");
    END;

    LOCAL PROCEDURE IsOnBeforeCheckBlockedEmployeeHandled@9(IsPosting@1000 : Boolean) IsHandled : Boolean;
    BEGIN
      OnBeforeCheckBlockedEmployee(Rec,IsPosting,IsHandled);
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCheckBlockedEmployee@11(Employee@1000 : Record 5200;IsPosting@1001 : Boolean;VAR IsHandled@1002 : Boolean);
    BEGIN
    END;

    BEGIN
    END.
  }
}

OBJECT Table 6660 Return Receipt Header
{
  OBJECT-PROPERTIES
  {
    Date=02-10-21;
    Time=12:00:00;
    Modified=Yes;
    Version List=NAVW114.30;
  }
  PROPERTIES
  {
    DataCaptionFields=No.,Sell-to Customer Name;
    OnDelete=VAR
               PostSalesDelete@1000 : Codeunit 363;
             BEGIN
               TESTFIELD("No. Printed");
               LOCKTABLE;
               PostSalesDelete.DeleteSalesRcptLines(Rec);

               SalesCommentLine.SETRANGE("Document Type",SalesCommentLine."Document Type"::"Posted Return Receipt");
               SalesCommentLine.SETRANGE("No.","No.");
               SalesCommentLine.DELETEALL;

               ApprovalsMgmt.DeletePostedApprovalEntries(RECORDID);
             END;

    CaptionML=[ENU=Return Receipt Header;
               ENN=Return Receipt Header];
    LookupPageID=Page6662;
  }
  FIELDS
  {
    { 2   ;   ;Sell-to Customer No.;Code20        ;TableRelation=Customer;
                                                   CaptionML=[ENU=Sell-to Customer No.;
                                                              ENN=Sell-to Customer No.];
                                                   NotBlank=Yes }
    { 3   ;   ;No.                 ;Code20        ;CaptionML=[ENU=No.;
                                                              ENN=No.] }
    { 4   ;   ;Bill-to Customer No.;Code20        ;TableRelation=Customer;
                                                   CaptionML=[ENU=Bill-to Customer No.;
                                                              ENN=Bill-to Customer No.];
                                                   NotBlank=Yes }
    { 5   ;   ;Bill-to Name        ;Text100       ;CaptionML=[ENU=Bill-to Name;
                                                              ENN=Bill-to Name];
                                                   Description=AD_SD }
    { 6   ;   ;Bill-to Name 2      ;Text50        ;CaptionML=[ENU=Bill-to Name 2;
                                                              ENN=Bill-to Name 2] }
    { 7   ;   ;Bill-to Address     ;Text100       ;CaptionML=[ENU=Bill-to Address;
                                                              ENN=Bill-to Address];
                                                   Description=AD_SD }
    { 8   ;   ;Bill-to Address 2   ;Text60        ;CaptionML=[ENU=Bill-to Address 2;
                                                              ENN=Bill-to Address 2];
                                                   Description=AD_SD }
    { 9   ;   ;Bill-to City        ;Text30        ;TableRelation=IF (Bill-to Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Bill-to Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Bill-to Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(
                                                                  "Bill-to City","Bill-to Post Code","Bill-to County","Bill-to Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Bill-to City;
                                                              ENN=Bill-to City] }
    { 10  ;   ;Bill-to Contact     ;Text100       ;CaptionML=[ENU=Bill-to Contact;
                                                              ENN=Bill-to Contact] }
    { 11  ;   ;Your Reference      ;Text35        ;CaptionML=[ENU=Your Reference;
                                                              ENN=Your Reference] }
    { 12  ;   ;Ship-to Code        ;Code10        ;TableRelation="Ship-to Address".Code WHERE (Customer No.=FIELD(Sell-to Customer No.));
                                                   CaptionML=[ENU=Ship-to Code;
                                                              ENN=Ship-to Code] }
    { 13  ;   ;Ship-to Name        ;Text100       ;CaptionML=[ENU=Ship-to Name;
                                                              ENN=Ship-to Name];
                                                   Description=AD_SD }
    { 14  ;   ;Ship-to Name 2      ;Text50        ;CaptionML=[ENU=Ship-to Name 2;
                                                              ENN=Ship-to Name 2] }
    { 15  ;   ;Ship-to Address     ;Text100       ;CaptionML=[ENU=Ship-to Address;
                                                              ENN=Ship-to Address];
                                                   Description=AD_SD }
    { 16  ;   ;Ship-to Address 2   ;Text60        ;CaptionML=[ENU=Ship-to Address 2;
                                                              ENN=Ship-to Address 2];
                                                   Description=AD_SD }
    { 17  ;   ;Ship-to City        ;Text30        ;TableRelation=IF (Ship-to Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Ship-to Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Ship-to Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(
                                                                  "Ship-to City","Ship-to Post Code","Ship-to County","Ship-to Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Ship-to City;
                                                              ENN=Ship-to City] }
    { 18  ;   ;Ship-to Contact     ;Text100       ;CaptionML=[ENU=Ship-to Contact;
                                                              ENN=Ship-to Contact] }
    { 19  ;   ;Order Date          ;Date          ;CaptionML=[ENU=Order Date;
                                                              ENN=Order Date] }
    { 20  ;   ;Posting Date        ;Date          ;CaptionML=[ENU=Posting Date;
                                                              ENN=Posting Date] }
    { 21  ;   ;Shipment Date       ;Date          ;CaptionML=[ENU=Shipment Date;
                                                              ENN=Shipment Date] }
    { 22  ;   ;Posting Description ;Text100       ;CaptionML=[ENU=Posting Description;
                                                              ENN=Posting Description] }
    { 23  ;   ;Payment Terms Code  ;Code10        ;TableRelation="Payment Terms";
                                                   CaptionML=[ENU=Payment Terms Code;
                                                              ENN=Payment Terms Code] }
    { 24  ;   ;Due Date            ;Date          ;CaptionML=[ENU=Due Date;
                                                              ENN=Due Date] }
    { 25  ;   ;Payment Discount %  ;Decimal       ;CaptionML=[ENU=Payment Discount %;
                                                              ENN=Payment Discount %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 26  ;   ;Pmt. Discount Date  ;Date          ;CaptionML=[ENU=Pmt. Discount Date;
                                                              ENN=Pmt. Discount Date] }
    { 27  ;   ;Shipment Method Code;Code10        ;TableRelation="Shipment Method";
                                                   CaptionML=[ENU=Shipment Method Code;
                                                              ENN=Shipment Method Code] }
    { 28  ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE (Use As In-Transit=CONST(No));
                                                   CaptionML=[ENU=Location Code;
                                                              ENN=Location Code] }
    { 29  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   CaptionML=[ENU=Shortcut Dimension 1 Code;
                                                              ENN=Shortcut Dimension 1 Code];
                                                   CaptionClass='1,2,1' }
    { 30  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   CaptionML=[ENU=Shortcut Dimension 2 Code;
                                                              ENN=Shortcut Dimension 2 Code];
                                                   CaptionClass='1,2,2' }
    { 31  ;   ;Customer Posting Group;Code20      ;TableRelation="Customer Posting Group";
                                                   CaptionML=[ENU=Customer Posting Group;
                                                              ENN=Customer Posting Group];
                                                   Editable=No }
    { 32  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   CaptionML=[ENU=Currency Code;
                                                              ENN=Currency Code];
                                                   Editable=No }
    { 33  ;   ;Currency Factor     ;Decimal       ;CaptionML=[ENU=Currency Factor;
                                                              ENN=Currency Factor];
                                                   DecimalPlaces=0:15;
                                                   MinValue=0 }
    { 34  ;   ;Customer Price Group;Code10        ;TableRelation="Customer Price Group";
                                                   CaptionML=[ENU=Customer Price Group;
                                                              ENN=Customer Price Group] }
    { 35  ;   ;Prices Including VAT;Boolean       ;CaptionML=[ENU=Prices Including VAT;
                                                              ENN=Prices Including VAT] }
    { 37  ;   ;Invoice Disc. Code  ;Code20        ;CaptionML=[ENU=Invoice Disc. Code;
                                                              ENN=Invoice Disc. Code] }
    { 40  ;   ;Customer Disc. Group;Code20        ;TableRelation="Customer Discount Group";
                                                   CaptionML=[ENU=Customer Disc. Group;
                                                              ENN=Customer Disc. Group] }
    { 41  ;   ;Language Code       ;Code10        ;TableRelation=Language;
                                                   CaptionML=[ENU=Language Code;
                                                              ENN=Language Code] }
    { 43  ;   ;Salesperson Code    ;Code20        ;TableRelation="Employee LOB"."Emp No." WHERE (LOB=FIELD(LOB),
                                                                                                 Segment=FIELD(Segment));
                                                   CaptionML=[ENU=Salesperson Code;
                                                              ENN=Salesperson Code];
                                                   Description=AD Changed Lookup from Salesperson/Purchaser to "Employee LOB" }
    { 46  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Sales Comment Line" WHERE (Document Type=CONST(Posted Return Receipt),
                                                                                                 No.=FIELD(No.),
                                                                                                 Document Line No.=CONST(0)));
                                                   CaptionML=[ENU=Comment;
                                                              ENN=Comment];
                                                   Editable=No }
    { 47  ;   ;No. Printed         ;Integer       ;CaptionML=[ENU=No. Printed;
                                                              ENN=No. Printed];
                                                   Editable=No }
    { 51  ;   ;On Hold             ;Code3         ;CaptionML=[ENU=On Hold;
                                                              ENN=On Hold] }
    { 52  ;   ;Applies-to Doc. Type;Option        ;CaptionML=[ENU=Applies-to Doc. Type;
                                                              ENN=Applies-to Doc. Type];
                                                   OptionCaptionML=[ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund";
                                                                    ENN=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund"];
                                                   OptionString=[ ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund] }
    { 53  ;   ;Applies-to Doc. No. ;Code20        ;OnLookup=BEGIN
                                                              CustLedgEntry.SETCURRENTKEY("Document No.");
                                                              CustLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
                                                              CustLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
                                                              PAGE.RUN(0,CustLedgEntry);
                                                            END;

                                                   CaptionML=[ENU=Applies-to Doc. No.;
                                                              ENN=Applies-to Doc. No.] }
    { 55  ;   ;Bal. Account No.    ;Code20        ;TableRelation=IF (Bal. Account Type=CONST(G/L Account)) "G/L Account"
                                                                 ELSE IF (Bal. Account Type=CONST(Bank Account)) "Bank Account";
                                                   CaptionML=[ENU=Bal. Account No.;
                                                              ENN=Bal. Account No.] }
    { 70  ;   ;VAT Registration No.;Text20        ;CaptionML=[ENU=VAT Registration No.;
                                                              ENN=VAT Registration No.] }
    { 73  ;   ;Reason Code         ;Code10        ;TableRelation="Reason Code";
                                                   CaptionML=[ENU=Reason Code;
                                                              ENN=Reason Code] }
    { 74  ;   ;Gen. Bus. Posting Group;Code20     ;TableRelation="Gen. Business Posting Group";
                                                   CaptionML=[ENU=Gen. Bus. Posting Group;
                                                              ENN=Gen. Bus. Posting Group] }
    { 75  ;   ;EU 3-Party Trade    ;Boolean       ;CaptionML=[ENU=EU 3-Party Trade;
                                                              ENN=EU 3-Party Trade] }
    { 76  ;   ;Transaction Type    ;Code10        ;TableRelation="Transaction Type";
                                                   CaptionML=[ENU=Transaction Type;
                                                              ENN=Transaction Nature Code] }
    { 77  ;   ;Transport Method    ;Code10        ;TableRelation="Transport Method";
                                                   CaptionML=[ENU=Transport Method;
                                                              ENN=Transport Method] }
    { 78  ;   ;VAT Country/Region Code;Code10     ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=VAT Country/Region Code;
                                                              ENN=VAT Country/Region Code] }
    { 79  ;   ;Sell-to Customer Name;Text100      ;CaptionML=[ENU=Sell-to Customer Name;
                                                              ENN=Sell-to Customer Name];
                                                   Description=AD_SD }
    { 80  ;   ;Sell-to Customer Name 2;Text50     ;CaptionML=[ENU=Sell-to Customer Name 2;
                                                              ENN=Sell-to Customer Name 2] }
    { 81  ;   ;Sell-to Address     ;Text100       ;CaptionML=[ENU=Sell-to Address;
                                                              ENN=Sell-to Address];
                                                   Description=AD_SD }
    { 82  ;   ;Sell-to Address 2   ;Text60        ;CaptionML=[ENU=Sell-to Address 2;
                                                              ENN=Sell-to Address 2];
                                                   Description=AD_SD }
    { 83  ;   ;Sell-to City        ;Text30        ;TableRelation=IF (Sell-to Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Sell-to Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Sell-to Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(
                                                                  "Sell-to City","Sell-to Post Code","Sell-to County","Sell-to Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Sell-to City;
                                                              ENN=Sell-to City] }
    { 84  ;   ;Sell-to Contact     ;Text100       ;CaptionML=[ENU=Sell-to Contact;
                                                              ENN=Sell-to Contact] }
    { 85  ;   ;Bill-to Post Code   ;Code20        ;TableRelation=IF (Bill-to Country/Region Code=CONST()) "Post Code"
                                                                 ELSE IF (Bill-to Country/Region Code=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Bill-to Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(
                                                                  "Bill-to City","Bill-to Post Code","Bill-to County","Bill-to Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Bill-to Post Code;
                                                              ENN=Bill-to Postcode] }
    { 86  ;   ;Bill-to County      ;Text30        ;CaptionML=[ENU=Bill-to County;
                                                              ENN=Bill-to County];
                                                   CaptionClass='5,1,' + "Bill-to Country/Region Code" }
    { 87  ;   ;Bill-to Country/Region Code;Code10 ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=Bill-to Country/Region Code;
                                                              ENN=Bill-to Country/Region Code] }
    { 88  ;   ;Sell-to Post Code   ;Code20        ;TableRelation=IF (Sell-to Country/Region Code=CONST()) "Post Code"
                                                                 ELSE IF (Sell-to Country/Region Code=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Sell-to Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(
                                                                  "Sell-to City","Sell-to Post Code","Sell-to County","Sell-to Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Sell-to Post Code;
                                                              ENN=Sell-to Postcode] }
    { 89  ;   ;Sell-to County      ;Text30        ;CaptionML=[ENU=Sell-to County;
                                                              ENN=Sell-to County];
                                                   CaptionClass='5,1,' + "Sell-to Country/Region Code" }
    { 90  ;   ;Sell-to Country/Region Code;Code10 ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=Sell-to Country/Region Code;
                                                              ENN=Sell-to Country/Region Code] }
    { 91  ;   ;Ship-to Post Code   ;Code20        ;TableRelation=IF (Ship-to Country/Region Code=CONST()) "Post Code"
                                                                 ELSE IF (Ship-to Country/Region Code=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Ship-to Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(
                                                                  "Ship-to City","Ship-to Post Code","Ship-to County","Ship-to Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Ship-to Post Code;
                                                              ENN=Ship-to Postcode] }
    { 92  ;   ;Ship-to County      ;Text30        ;CaptionML=[ENU=Ship-to County;
                                                              ENN=Ship-to County];
                                                   CaptionClass='5,1,' + "Ship-to Country/Region Code" }
    { 93  ;   ;Ship-to Country/Region Code;Code10 ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=Ship-to Country/Region Code;
                                                              ENN=Ship-to Country/Region Code] }
    { 94  ;   ;Bal. Account Type   ;Option        ;CaptionML=[ENU=Bal. Account Type;
                                                              ENN=Bal. Account Type];
                                                   OptionCaptionML=[ENU=G/L Account,Bank Account;
                                                                    ENN=G/L Account,Bank Account];
                                                   OptionString=G/L Account,Bank Account }
    { 97  ;   ;Exit Point          ;Code10        ;TableRelation="Entry/Exit Point";
                                                   CaptionML=[ENU=Exit Point;
                                                              ENN=Exit Point] }
    { 98  ;   ;Correction          ;Boolean       ;CaptionML=[ENU=Correction;
                                                              ENN=Correction] }
    { 99  ;   ;Document Date       ;Date          ;CaptionML=[ENU=Document Date;
                                                              ENN=Document Date] }
    { 100 ;   ;External Document No.;Code35       ;CaptionML=[ENU=External Document No.;
                                                              ENN=External Document No.] }
    { 101 ;   ;Area                ;Code10        ;TableRelation=Area;
                                                   CaptionML=[ENU=Area;
                                                              ENN=Area] }
    { 102 ;   ;Transaction Specification;Code10   ;TableRelation="Transaction Specification";
                                                   CaptionML=[ENU=Transaction Specification;
                                                              ENN=Transaction Specification] }
    { 104 ;   ;Payment Method Code ;Code10        ;TableRelation="Payment Method";
                                                   CaptionML=[ENU=Payment Method Code;
                                                              ENN=Payment Method Code] }
    { 105 ;   ;Shipping Agent Code ;Code10        ;TableRelation="Shipping Agent";
                                                   CaptionML=[ENU=Shipping Agent Code;
                                                              ENN=Shipping Agent Code] }
    { 106 ;   ;Package Tracking No.;Text30        ;CaptionML=[ENU=Package Tracking No.;
                                                              ENN=Package Tracking No.] }
    { 109 ;   ;No. Series          ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=[ENU=No. Series;
                                                              ENN=No. Series];
                                                   Editable=No }
    { 112 ;   ;User ID             ;Code50        ;TableRelation=User."User Name";
                                                   OnLookup=VAR
                                                              UserMgt@1000 : Codeunit 418;
                                                            BEGIN
                                                              UserMgt.LookupUserID("User ID");
                                                            END;

                                                   TestTableRelation=No;
                                                   DataClassification=EndUserIdentifiableInformation;
                                                   CaptionML=[ENU=User ID;
                                                              ENN=User ID] }
    { 113 ;   ;Source Code         ;Code10        ;TableRelation="Source Code";
                                                   CaptionML=[ENU=Source Code;
                                                              ENN=Source Code] }
    { 114 ;   ;Tax Area Code       ;Code20        ;TableRelation="Tax Area";
                                                   CaptionML=[ENU=Tax Area Code;
                                                              ENN=VAT Area Code] }
    { 115 ;   ;Tax Liable          ;Boolean       ;CaptionML=[ENU=Tax Liable;
                                                              ENN=VAT Liable] }
    { 116 ;   ;VAT Bus. Posting Group;Code20      ;TableRelation="VAT Business Posting Group";
                                                   CaptionML=[ENU=VAT Bus. Posting Group;
                                                              ENN=VAT Bus. Posting Group] }
    { 119 ;   ;VAT Base Discount % ;Decimal       ;CaptionML=[ENU=VAT Base Discount %;
                                                              ENN=VAT Base Discount %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnLookup=BEGIN
                                                              ShowDimensions;
                                                            END;

                                                   CaptionML=[ENU=Dimension Set ID;
                                                              ENN=Dimension Set ID];
                                                   Editable=No }
    { 5050;   ;Campaign No.        ;Code20        ;TableRelation=Campaign;
                                                   CaptionML=[ENU=Campaign No.;
                                                              ENN=Campaign No.] }
    { 5052;   ;Sell-to Contact No. ;Code20        ;TableRelation=Contact;
                                                   CaptionML=[ENU=Sell-to Contact No.;
                                                              ENN=Sell-to Contact No.] }
    { 5053;   ;Bill-to Contact No. ;Code20        ;TableRelation=Contact;
                                                   CaptionML=[ENU=Bill-to Contact No.;
                                                              ENN=Bill-to Contact No.] }
    { 5055;   ;Opportunity No.     ;Code20        ;TableRelation=Opportunity;
                                                   CaptionML=[ENU=Opportunity No.;
                                                              ENN=Opportunity No.] }
    { 5700;   ;Responsibility Center;Code10       ;TableRelation="Responsibility Center";
                                                   CaptionML=[ENU=Responsibility Center;
                                                              ENN=Responsibility Centre] }
    { 5790;   ;Requested Delivery Date;Date       ;CaptionML=[ENU=Requested Delivery Date;
                                                              ENN=Requested Delivery Date];
                                                   Editable=No }
    { 5791;   ;Promised Delivery Date;Date        ;CaptionML=[ENU=Promised Delivery Date;
                                                              ENN=Promised Delivery Date];
                                                   Editable=No }
    { 5792;   ;Shipping Time       ;DateFormula   ;CaptionML=[ENU=Shipping Time;
                                                              ENN=Shipping Time];
                                                   Editable=No }
    { 5793;   ;Warehouse Handling Time;DateFormula;CaptionML=[ENU=Warehouse Handling Time;
                                                              ENN=Warehouse Handling Time];
                                                   Editable=No }
    { 5797;   ;Late Order Shipping ;Boolean       ;CaptionML=[ENU=Late Order Shipping;
                                                              ENN=Late Order Shipping];
                                                   Editable=No }
    { 6601;   ;Return Order No.    ;Code20        ;CaptionML=[ENU=Return Order No.;
                                                              ENN=Return Order No.] }
    { 6602;   ;Return Order No. Series;Code20     ;TableRelation="No. Series";
                                                   CaptionML=[ENU=Return Order No. Series;
                                                              ENN=Return Order No. Series] }
    { 7001;   ;Allow Line Disc.    ;Boolean       ;CaptionML=[ENU=Allow Line Disc.;
                                                              ENN=Allow Line Disc.] }
    { 50000;  ;LOB                 ;Text40        ;TableRelation="Segment Master";
                                                   Description=AD_SD }
    { 50001;  ;Segment             ;Text100       ;TableRelation="Segment Master" WHERE (LOB=FIELD(LOB));
                                                   Description=AD_SD }
    { 50014;  ;Work Order No.      ;Code20        ;Description=AD_SD }
    { 50020;  ;Remarks             ;Text250       ;Description=AD_SD }
    { 50023;  ;Type of Invoice     ;Option        ;OptionCaptionML=ENU=" ,Settlement";
                                                   OptionString=[ ,Settlement];
                                                   Description=AD_SD }
    { 50025;  ;Invoice Types       ;Option        ;OptionCaptionML=ENU=" ,Fees,Expenses";
                                                   OptionString=[ ,Fees,Expenses];
                                                   Description=AD_SD }
    { 50033;  ;Team Leader         ;Code30        ;TableRelation=Employee WHERE (Type=FILTER(Partner|Others));
                                                   Description=AD_SD }
    { 50050;  ;Sales Currency      ;Option        ;OptionCaptionML=ENU=" ,USD,EURO,GBP,AED,BDT,AUD";
                                                   OptionString=[ ,USD,EURO,GBP,AED,BDT,AUD];
                                                   Description=AD_SD }
    { 50051;  ;Resp. Name          ;Text80        ;Description=AD_SD }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Return Order No.                         }
    {    ;Sell-to Customer No.,External Document No. }
    {    ;Bill-to Customer No.                     }
    {    ;Posting Date                             }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ReturnRcptHeader@1000 : Record 6660;
      SalesCommentLine@1001 : Record 44;
      CustLedgEntry@1002 : Record 21;
      PostCode@1007 : Record 225;
      DimMgt@1004 : Codeunit 408;
      ApprovalsMgmt@1008 : Codeunit 1535;
      UserSetupMgt@1005 : Codeunit 5700;
      Text001@1006 : TextConst 'ENU=Posted Document Dimensions;ENN=Posted Document Dimensions';

    [External]
    PROCEDURE PrintRecords@3(ShowRequestForm@1000 : Boolean);
    VAR
      ReportSelection@1001 : Record 77;
    BEGIN
      WITH ReturnRcptHeader DO BEGIN
        COPY(Rec);
        ReportSelection.PrintWithGUIYesNo(
          ReportSelection.Usage::"S.Ret.Rcpt.",ReturnRcptHeader,ShowRequestForm,FIELDNO("Bill-to Customer No."));
      END;
    END;

    [Internal]
    PROCEDURE EmailRecords@17(ShowDialog@1000 : Boolean);
    VAR
      DocumentSendingProfile@1003 : Record 60;
      DummyReportSelections@1001 : Record 77;
      ReportDistributionMgt@1002 : Codeunit 452;
    BEGIN
      DocumentSendingProfile.TrySendToEMail(
        DummyReportSelections.Usage::"S.Ret.Rcpt.",Rec,FIELDNO("No."),
        ReportDistributionMgt.GetFullDocumentTypeText(Rec),FIELDNO("Bill-to Customer No."),ShowDialog);
    END;

    [External]
    PROCEDURE Navigate@2();
    VAR
      NavigateForm@1000 : Page 344;
    BEGIN
      NavigateForm.SetDoc("Posting Date","No.");
      NavigateForm.RUN;
    END;

    [External]
    PROCEDURE ShowDimensions@1();
    BEGIN
      DimMgt.ShowDimensionSet("Dimension Set ID",STRSUBSTNO('%1 %2 - %3',TABLECAPTION,"No.",Text001));
    END;

    [External]
    PROCEDURE SetSecurityFilterOnRespCenter@4();
    BEGIN
      IF UserSetupMgt.GetSalesFilter <> '' THEN BEGIN
        FILTERGROUP(2);
        SETRANGE("Responsibility Center",UserSetupMgt.GetSalesFilter);
        FILTERGROUP(0);
      END;
    END;

    BEGIN
    END.
  }
}

OBJECT Table 6661 Return Receipt Line
{
  OBJECT-PROPERTIES
  {
    Date=02-10-21;
    Time=12:00:00;
    Modified=Yes;
    Version List=NAVW114.30;
  }
  PROPERTIES
  {
    Permissions=TableData 32=r,
                TableData 5802=r;
    OnDelete=VAR
               SalesDocLineComments@1000 : Record 44;
             BEGIN
               SalesDocLineComments.SETRANGE("Document Type",SalesDocLineComments."Document Type"::"Posted Return Receipt");
               SalesDocLineComments.SETRANGE("No.","Document No.");
               SalesDocLineComments.SETRANGE("Document Line No.","Line No.");
               IF NOT SalesDocLineComments.ISEMPTY THEN
                 SalesDocLineComments.DELETEALL;
             END;

    CaptionML=[ENU=Return Receipt Line;
               ENN=Return Receipt Line];
    LookupPageID=Page6663;
  }
  FIELDS
  {
    { 2   ;   ;Sell-to Customer No.;Code20        ;TableRelation=Customer;
                                                   CaptionML=[ENU=Sell-to Customer No.;
                                                              ENN=Sell-to Customer No.];
                                                   Editable=No }
    { 3   ;   ;Document No.        ;Code20        ;TableRelation="Return Receipt Header";
                                                   CaptionML=[ENU=Document No.;
                                                              ENN=Document No.] }
    { 4   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              ENN=Line No.] }
    { 5   ;   ;Type                ;Option        ;CaptionML=[ENU=Type;
                                                              ENN=Type];
                                                   OptionCaptionML=[ENU=" ,G/L Account,Item,Resource,Fixed Asset,Charge (Item)";
                                                                    ENN=" ,G/L Account,Item,Resource,Fixed Asset,Charge (Item)"];
                                                   OptionString=[ ,G/L Account,Item,Resource,Fixed Asset,Charge (Item)] }
    { 6   ;   ;No.                 ;Code20        ;TableRelation=IF (Type=CONST(G/L Account)) "G/L Account"
                                                                 ELSE IF (Type=CONST(Item)) Item
                                                                 ELSE IF (Type=CONST(Resource)) Resource
                                                                 ELSE IF (Type=CONST(Fixed Asset)) "Fixed Asset"
                                                                 ELSE IF (Type=CONST("Charge (Item)")) "Item Charge";
                                                   CaptionML=[ENU=No.;
                                                              ENN=No.] }
    { 7   ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE (Use As In-Transit=CONST(No));
                                                   CaptionML=[ENU=Location Code;
                                                              ENN=Location Code] }
    { 8   ;   ;Posting Group       ;Code20        ;TableRelation=IF (Type=CONST(Item)) "Inventory Posting Group"
                                                                 ELSE IF (Type=CONST(Fixed Asset)) "FA Posting Group";
                                                   CaptionML=[ENU=Posting Group;
                                                              ENN=Posting Group];
                                                   Editable=No }
    { 10  ;   ;Shipment Date       ;Date          ;CaptionML=[ENU=Shipment Date;
                                                              ENN=Shipment Date] }
    { 11  ;   ;Description         ;Text100       ;CaptionML=[ENU=Description;
                                                              ENN=Description];
                                                   Description=AD_SD }
    { 12  ;   ;Description 2       ;Text50        ;CaptionML=[ENU=Description 2;
                                                              ENN=Description 2] }
    { 13  ;   ;Unit of Measure     ;Text50        ;CaptionML=[ENU=Unit of Measure;
                                                              ENN=Unit of Measure] }
    { 15  ;   ;Quantity            ;Decimal       ;CaptionML=[ENU=Quantity;
                                                              ENN=Quantity];
                                                   DecimalPlaces=0:5 }
    { 22  ;   ;Unit Price          ;Decimal       ;CaptionML=[ENU=Unit Price;
                                                              ENN=Unit Price];
                                                   AutoFormatType=2;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 23  ;   ;Unit Cost (LCY)     ;Decimal       ;CaptionML=[ENU=Unit Cost (LCY);
                                                              ENN=Unit Cost (LCY)];
                                                   AutoFormatType=2 }
    { 25  ;   ;VAT %               ;Decimal       ;CaptionML=[ENU=VAT %;
                                                              ENN=VAT %];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 27  ;   ;Line Discount %     ;Decimal       ;CaptionML=[ENU=Line Discount %;
                                                              ENN=Line Discount %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 32  ;   ;Allow Invoice Disc. ;Boolean       ;InitValue=Yes;
                                                   CaptionML=[ENU=Allow Invoice Disc.;
                                                              ENN=Allow Invoice Disc.] }
    { 34  ;   ;Gross Weight        ;Decimal       ;CaptionML=[ENU=Gross Weight;
                                                              ENN=Gross Weight];
                                                   DecimalPlaces=0:5 }
    { 35  ;   ;Net Weight          ;Decimal       ;CaptionML=[ENU=Net Weight;
                                                              ENN=Net Weight];
                                                   DecimalPlaces=0:5 }
    { 36  ;   ;Units per Parcel    ;Decimal       ;CaptionML=[ENU=Units per Parcel;
                                                              ENN=Units per Parcel];
                                                   DecimalPlaces=0:5 }
    { 37  ;   ;Unit Volume         ;Decimal       ;CaptionML=[ENU=Unit Volume;
                                                              ENN=Unit Volume];
                                                   DecimalPlaces=0:5 }
    { 38  ;   ;Appl.-to Item Entry ;Integer       ;AccessByPermission=TableData 27=R;
                                                   CaptionML=[ENU=Appl.-to Item Entry;
                                                              ENN=Appl.-to Item Entry] }
    { 39  ;   ;Item Rcpt. Entry No.;Integer       ;CaptionML=[ENU=Item Rcpt. Entry No.;
                                                              ENN=Item Rcpt. Entry No.] }
    { 40  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   CaptionML=[ENU=Shortcut Dimension 1 Code;
                                                              ENN=Shortcut Dimension 1 Code];
                                                   CaptionClass='1,2,1' }
    { 41  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   CaptionML=[ENU=Shortcut Dimension 2 Code;
                                                              ENN=Shortcut Dimension 2 Code];
                                                   CaptionClass='1,2,2' }
    { 42  ;   ;Customer Price Group;Code10        ;TableRelation="Customer Price Group";
                                                   CaptionML=[ENU=Customer Price Group;
                                                              ENN=Customer Price Group] }
    { 45  ;   ;Job No.             ;Code20        ;TableRelation=Job;
                                                   CaptionML=[ENU=Job No.;
                                                              ENN=Job No.] }
    { 52  ;   ;Work Type Code      ;Code10        ;TableRelation="Work Type";
                                                   CaptionML=[ENU=Work Type Code;
                                                              ENN=Work Type Code] }
    { 61  ;   ;Quantity Invoiced   ;Decimal       ;CaptionML=[ENU=Quantity Invoiced;
                                                              ENN=Quantity Invoiced];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 68  ;   ;Bill-to Customer No.;Code20        ;TableRelation=Customer;
                                                   CaptionML=[ENU=Bill-to Customer No.;
                                                              ENN=Bill-to Customer No.];
                                                   Editable=No }
    { 74  ;   ;Gen. Bus. Posting Group;Code20     ;TableRelation="Gen. Business Posting Group";
                                                   CaptionML=[ENU=Gen. Bus. Posting Group;
                                                              ENN=Gen. Bus. Posting Group] }
    { 75  ;   ;Gen. Prod. Posting Group;Code20    ;TableRelation="Gen. Product Posting Group";
                                                   CaptionML=[ENU=Gen. Prod. Posting Group;
                                                              ENN=Gen. Prod. Posting Group] }
    { 77  ;   ;VAT Calculation Type;Option        ;CaptionML=[ENU=VAT Calculation Type;
                                                              ENN=VAT Calculation Type];
                                                   OptionCaptionML=[ENU=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                                    ENN=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax];
                                                   OptionString=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax }
    { 78  ;   ;Transaction Type    ;Code10        ;TableRelation="Transaction Type";
                                                   CaptionML=[ENU=Transaction Type;
                                                              ENN=Transaction Nature Code] }
    { 79  ;   ;Transport Method    ;Code10        ;TableRelation="Transport Method";
                                                   CaptionML=[ENU=Transport Method;
                                                              ENN=Transport Method] }
    { 80  ;   ;Attached to Line No.;Integer       ;TableRelation="Return Receipt Line"."Line No." WHERE (Document No.=FIELD(Document No.));
                                                   CaptionML=[ENU=Attached to Line No.;
                                                              ENN=Attached to Line No.] }
    { 81  ;   ;Exit Point          ;Code10        ;TableRelation="Entry/Exit Point";
                                                   CaptionML=[ENU=Exit Point;
                                                              ENN=Exit Point] }
    { 82  ;   ;Area                ;Code10        ;TableRelation=Area;
                                                   CaptionML=[ENU=Area;
                                                              ENN=Area] }
    { 83  ;   ;Transaction Specification;Code10   ;TableRelation="Transaction Specification";
                                                   CaptionML=[ENU=Transaction Specification;
                                                              ENN=Transaction Specification] }
    { 85  ;   ;Tax Area Code       ;Code20        ;TableRelation="Tax Area";
                                                   CaptionML=[ENU=Tax Area Code;
                                                              ENN=VAT Area Code] }
    { 86  ;   ;Tax Liable          ;Boolean       ;CaptionML=[ENU=Tax Liable;
                                                              ENN=VAT Liable] }
    { 87  ;   ;Tax Group Code      ;Code20        ;TableRelation="Tax Group";
                                                   CaptionML=[ENU=Tax Group Code;
                                                              ENN=VAT Group Code] }
    { 89  ;   ;VAT Bus. Posting Group;Code20      ;TableRelation="VAT Business Posting Group";
                                                   CaptionML=[ENU=VAT Bus. Posting Group;
                                                              ENN=VAT Bus. Posting Group] }
    { 90  ;   ;VAT Prod. Posting Group;Code20     ;TableRelation="VAT Product Posting Group";
                                                   CaptionML=[ENU=VAT Prod. Posting Group;
                                                              ENN=VAT Prod. Posting Group] }
    { 91  ;   ;Currency Code       ;Code10        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Return Receipt Header"."Currency Code" WHERE (No.=FIELD(Document No.)));
                                                   CaptionML=[ENU=Currency Code;
                                                              ENN=Currency Code];
                                                   Editable=No }
    { 97  ;   ;Blanket Order No.   ;Code20        ;TableRelation="Sales Header".No. WHERE (Document Type=CONST(Blanket Order));
                                                   TestTableRelation=No;
                                                   AccessByPermission=TableData 6660=R;
                                                   CaptionML=[ENU=Blanket Order No.;
                                                              ENN=Blanket Order No.] }
    { 98  ;   ;Blanket Order Line No.;Integer     ;TableRelation="Sales Line"."Line No." WHERE (Document Type=CONST(Blanket Order),
                                                                                                Document No.=FIELD(Blanket Order No.));
                                                   TestTableRelation=No;
                                                   AccessByPermission=TableData 6660=R;
                                                   CaptionML=[ENU=Blanket Order Line No.;
                                                              ENN=Blanket Order Line No.] }
    { 99  ;   ;VAT Base Amount     ;Decimal       ;CaptionML=[ENU=VAT Base Amount;
                                                              ENN=VAT Base Amount];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 100 ;   ;Unit Cost           ;Decimal       ;CaptionML=[ENU=Unit Cost;
                                                              ENN=Unit Cost];
                                                   Editable=No;
                                                   AutoFormatType=2;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 131 ;   ;Posting Date        ;Date          ;CaptionML=[ENU=Posting Date;
                                                              ENN=Posting Date] }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnLookup=BEGIN
                                                              ShowDimensions;
                                                            END;

                                                   CaptionML=[ENU=Dimension Set ID;
                                                              ENN=Dimension Set ID];
                                                   Editable=No }
    { 5402;   ;Variant Code        ;Code10        ;TableRelation=IF (Type=CONST(Item)) "Item Variant".Code WHERE (Item No.=FIELD(No.));
                                                   CaptionML=[ENU=Variant Code;
                                                              ENN=Variant Code] }
    { 5403;   ;Bin Code            ;Code20        ;TableRelation=Bin.Code WHERE (Location Code=FIELD(Location Code),
                                                                                 Item Filter=FIELD(No.),
                                                                                 Variant Filter=FIELD(Variant Code));
                                                   CaptionML=[ENU=Bin Code;
                                                              ENN=Bin Code] }
    { 5404;   ;Qty. per Unit of Measure;Decimal   ;CaptionML=[ENU=Qty. per Unit of Measure;
                                                              ENN=Qty. per Unit of Measure];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5407;   ;Unit of Measure Code;Code10        ;TableRelation=IF (Type=CONST(Item)) "Item Unit of Measure".Code WHERE (Item No.=FIELD(No.))
                                                                 ELSE "Unit of Measure";
                                                   CaptionML=[ENU=Unit of Measure Code;
                                                              ENN=Unit of Measure Code] }
    { 5415;   ;Quantity (Base)     ;Decimal       ;CaptionML=[ENU=Quantity (Base);
                                                              ENN=Quantity (Base)];
                                                   DecimalPlaces=0:5 }
    { 5461;   ;Qty. Invoiced (Base);Decimal       ;CaptionML=[ENU=Qty. Invoiced (Base);
                                                              ENN=Qty. Invoiced (Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5600;   ;FA Posting Date     ;Date          ;CaptionML=[ENU=FA Posting Date;
                                                              ENN=FA Posting Date] }
    { 5602;   ;Depreciation Book Code;Code10      ;TableRelation="Depreciation Book";
                                                   CaptionML=[ENU=Depreciation Book Code;
                                                              ENN=Depreciation Book Code] }
    { 5605;   ;Depr. until FA Posting Date;Boolean;CaptionML=[ENU=Depr. until FA Posting Date;
                                                              ENN=Depr. until FA Posting Date] }
    { 5612;   ;Duplicate in Depreciation Book;Code10;
                                                   TableRelation="Depreciation Book";
                                                   CaptionML=[ENU=Duplicate in Depreciation Book;
                                                              ENN=Duplicate in Depreciation Book] }
    { 5613;   ;Use Duplication List;Boolean       ;CaptionML=[ENU=Use Duplication List;
                                                              ENN=Use Duplication List] }
    { 5700;   ;Responsibility Center;Code10       ;TableRelation="Responsibility Center";
                                                   ValidateTableRelation=Yes;
                                                   CaptionML=[ENU=Responsibility Center;
                                                              ENN=Responsibility Centre] }
    { 5705;   ;Cross-Reference No. ;Code20        ;AccessByPermission=TableData 5717=R;
                                                   CaptionML=[ENU=Cross-Reference No.;
                                                              ENN=Cross-Reference No.] }
    { 5706;   ;Unit of Measure (Cross Ref.);Code10;TableRelation=IF (Type=CONST(Item)) "Item Unit of Measure".Code WHERE (Item No.=FIELD(No.));
                                                   CaptionML=[ENU=Unit of Measure (Cross Ref.);
                                                              ENN=Unit of Measure (Cross Ref.)] }
    { 5707;   ;Cross-Reference Type;Option        ;CaptionML=[ENU=Cross-Reference Type;
                                                              ENN=Cross-Reference Type];
                                                   OptionCaptionML=[ENU=" ,Customer,Vendor,Bar Code";
                                                                    ENN=" ,Customer,Vendor,Bar Code"];
                                                   OptionString=[ ,Customer,Vendor,Bar Code] }
    { 5708;   ;Cross-Reference Type No.;Code30    ;CaptionML=[ENU=Cross-Reference Type No.;
                                                              ENN=Cross-Reference Type No.] }
    { 5709;   ;Item Category Code  ;Code20        ;TableRelation=IF (Type=CONST(Item)) "Item Category";
                                                   CaptionML=[ENU=Item Category Code;
                                                              ENN=Item Category Code] }
    { 5710;   ;Nonstock            ;Boolean       ;CaptionML=[ENU=Catalog;
                                                              ENN=Catalogue] }
    { 5711;   ;Purchasing Code     ;Code10        ;TableRelation=Purchasing;
                                                   CaptionML=[ENU=Purchasing Code;
                                                              ENN=Purchasing Code] }
    { 5712;   ;Product Group Code  ;Code10        ;TableRelation="Product Group".Code WHERE (Item Category Code=FIELD(Item Category Code));
                                                   ValidateTableRelation=No;
                                                   ObsoleteState=Removed;
                                                   ObsoleteReason=Product Groups became first level children of Item Categories.;
                                                   CaptionML=[ENU=Product Group Code;
                                                              ENN=Product Group Code] }
    { 5805;   ;Return Qty. Rcd. Not Invd.;Decimal ;CaptionML=[ENU=Return Qty. Rcd. Not Invd.;
                                                              ENN=Return Qty. Rcd. Not Invd.];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5811;   ;Appl.-from Item Entry;Integer      ;AccessByPermission=TableData 27=R;
                                                   CaptionML=[ENU=Appl.-from Item Entry;
                                                              ENN=Appl.-from Item Entry];
                                                   MinValue=0 }
    { 5812;   ;Item Charge Base Amount;Decimal    ;CaptionML=[ENU=Item Charge Base Amount;
                                                              ENN=Item Charge Base Amount];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 5817;   ;Correction          ;Boolean       ;CaptionML=[ENU=Correction;
                                                              ENN=Correction];
                                                   Editable=No }
    { 6602;   ;Return Order No.    ;Code20        ;CaptionML=[ENU=Return Order No.;
                                                              ENN=Return Order No.];
                                                   Editable=No }
    { 6603;   ;Return Order Line No.;Integer      ;CaptionML=[ENU=Return Order Line No.;
                                                              ENN=Return Order Line No.];
                                                   Editable=No }
    { 6608;   ;Return Reason Code  ;Code10        ;TableRelation="Return Reason";
                                                   CaptionML=[ENU=Return Reason Code;
                                                              ENN=Return Reason Code] }
    { 7001;   ;Allow Line Disc.    ;Boolean       ;InitValue=Yes;
                                                   CaptionML=[ENU=Allow Line Disc.;
                                                              ENN=Allow Line Disc.] }
    { 7002;   ;Customer Disc. Group;Code20        ;TableRelation="Customer Discount Group";
                                                   CaptionML=[ENU=Customer Disc. Group;
                                                              ENN=Customer Disc. Group] }
    { 50001;  ;Billing Type        ;Option        ;OptionCaptionML=ENU=" ,Event Driven,Date Driven,Time Sheet Driven,Completion Driven";
                                                   OptionString=[ ,Event Driven,Date Driven,Time Sheet Driven,Completion Driven];
                                                   Description=AD_SD }
    { 50004;  ;Scope1              ;Text150       ;Description=AD_SD }
    { 50005;  ;Scope2              ;Text150       ;Description=AD_SD }
    { 50006;  ;Scope3              ;Text150       ;Description=AD_SD }
    { 50007;  ;Scope4              ;Text150       ;Description=AD_SD }
  }
  KEYS
  {
    {    ;Document No.,Line No.                   ;Clustered=Yes }
    {    ;Return Order No.,Return Order Line No.   }
    {    ;Blanket Order No.,Blanket Order Line No. }
    {    ;Item Rcpt. Entry No.                     }
    {    ;Bill-to Customer No.                     }
    {    ;Sell-to Customer No.                     }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Currency@1000 : Record 4;
      ReturnRcptHeader@1005 : Record 6660;
      Text000@1003 : TextConst 'ENU=Return Receipt No. %1:;ENN=Return Receipt No. %1:';
      Text001@1002 : TextConst 'ENU=The program cannot find this purchase line.;ENN=The program cannot find this purchase line.';
      LanguageManagement@1001 : Codeunit 43;
      CurrencyRead@1004 : Boolean;

    [External]
    PROCEDURE GetCurrencyCode@1() : Code[10];
    BEGIN
      IF "Document No." = ReturnRcptHeader."No." THEN
        EXIT(ReturnRcptHeader."Currency Code");
      IF ReturnRcptHeader.GET("Document No.") THEN
        EXIT(ReturnRcptHeader."Currency Code");
      EXIT('');
    END;

    [External]
    PROCEDURE ShowDimensions@25();
    VAR
      DimMgt@1000 : Codeunit 408;
    BEGIN
      DimMgt.ShowDimensionSet("Dimension Set ID",STRSUBSTNO('%1 %2 %3',TABLECAPTION,"Document No.","Line No."));
    END;

    [External]
    PROCEDURE ShowItemTrackingLines@3();
    VAR
      ItemTrackingDocMgt@1000 : Codeunit 6503;
    BEGIN
      ItemTrackingDocMgt.ShowItemTrackingForShptRcptLine(DATABASE::"Return Receipt Line",0,"Document No.",'',0,"Line No.");
    END;

    [External]
    PROCEDURE InsertInvLineFromRetRcptLine@2(VAR SalesLine@1000 : Record 37);
    VAR
      SalesHeader@1011 : Record 36;
      SalesHeader2@1012 : Record 36;
      SalesOrderHeader@1010 : Record 36;
      SalesOrderLine@1005 : Record 37;
      TempSalesLine@1002 : TEMPORARY Record 37;
      SalesSetup@1020 : Record 311;
      TransferOldExtLines@1007 : Codeunit 379;
      ItemTrackingMgt@1008 : Codeunit 6500;
      ExtTextLine@1006 : Boolean;
      NextLineNo@1001 : Integer;
      IsHandled@1003 : Boolean;
    BEGIN
      SETRANGE("Document No.","Document No.");

      TempSalesLine := SalesLine;
      IF SalesLine.FIND('+') THEN
        NextLineNo := SalesLine."Line No." + 10000
      ELSE
        NextLineNo := 10000;

      IF SalesHeader."No." <> TempSalesLine."Document No." THEN
        SalesHeader.GET(TempSalesLine."Document Type",TempSalesLine."Document No.");

      IF SalesLine."Return Receipt No." <> "Document No." THEN BEGIN
        OnInsertInvLineFromRetRcptLineOnBeforeInitSalesLine(Rec,SalesLine);
        SalesLine.INIT;
        SalesLine."Line No." := NextLineNo;
        SalesLine."Document Type" := TempSalesLine."Document Type";
        SalesLine."Document No." := TempSalesLine."Document No.";
        LanguageManagement.SetGlobalLanguageByCode(SalesHeader."Language Code");
        SalesLine.Description := STRSUBSTNO(Text000,"Document No.");
        LanguageManagement.RestoreGlobalLanguage;
        IsHandled := FALSE;
        OnBeforeInsertInvLineFromRetRcptLineBeforeInsertTextLine(Rec,SalesLine,NextLineNo,IsHandled);
        IF NOT IsHandled THEN BEGIN
          SalesLine.INSERT;
          NextLineNo := NextLineNo + 10000;
        END;
      END;

      TransferOldExtLines.ClearLineNumbers;
      SalesSetup.GET;
      REPEAT
        ExtTextLine := (TransferOldExtLines.GetNewLineNumber("Attached to Line No.") <> 0);

        IF NOT SalesOrderLine.GET(
             SalesOrderLine."Document Type"::"Return Order","Return Order No.","Return Order Line No.")
        THEN BEGIN
          IF ExtTextLine THEN BEGIN
            SalesOrderLine.INIT;
            SalesOrderLine."Line No." := "Return Order Line No.";
            SalesOrderLine.Description := Description;
            SalesOrderLine."Description 2" := "Description 2";
          END  ELSE
            ERROR(Text001);
        END ELSE BEGIN
          IF (SalesHeader2."Document Type" <> SalesOrderLine."Document Type"::"Return Order") OR
             (SalesHeader2."No." <> SalesOrderLine."Document No.")
          THEN
            SalesHeader2.GET(SalesOrderLine."Document Type"::"Return Order","Return Order No.");

          InitCurrency("Currency Code");

          IF SalesHeader."Prices Including VAT" THEN BEGIN
            IF NOT SalesHeader2."Prices Including VAT" THEN
              SalesOrderLine."Unit Price" :=
                ROUND(
                  SalesOrderLine."Unit Price" * (1 + SalesOrderLine."VAT %" / 100),
                  Currency."Unit-Amount Rounding Precision");
          END ELSE BEGIN
            IF SalesHeader2."Prices Including VAT" THEN
              SalesOrderLine."Unit Price" :=
                ROUND(
                  SalesOrderLine."Unit Price" / (1 + SalesOrderLine."VAT %" / 100),
                  Currency."Unit-Amount Rounding Precision");
          END;
        END;
        SalesLine := SalesOrderLine;
        SalesLine."Line No." := NextLineNo;
        SalesLine."Document Type" := TempSalesLine."Document Type";
        SalesLine."Document No." := TempSalesLine."Document No.";
        SalesLine."Variant Code" := "Variant Code";
        SalesLine."Location Code" := "Location Code";
        SalesLine."Return Reason Code" := "Return Reason Code";
        SalesLine."Quantity (Base)" := 0;
        SalesLine.Quantity := 0;
        SalesLine."Outstanding Qty. (Base)" := 0;
        SalesLine."Outstanding Quantity" := 0;
        SalesLine."Return Qty. Received" := 0;
        SalesLine."Return Qty. Received (Base)" := 0;
        SalesLine."Quantity Invoiced" := 0;
        SalesLine."Qty. Invoiced (Base)" := 0;
        SalesLine."Drop Shipment" := FALSE;
        SalesLine."Return Receipt No." := "Document No.";
        SalesLine."Return Receipt Line No." := "Line No.";
        SalesLine."Appl.-to Item Entry" := 0;
        SalesLine."Appl.-from Item Entry" := 0;
        OnAfterCopyFieldsFromReturnReceiptLine(Rec,SalesLine);

        IF NOT ExtTextLine THEN BEGIN
          IsHandled := FALSE;
          OnInsertInvLineFromRetRcptLineOnBeforeValidateSalesLineQuantity(Rec,SalesLine,IsHandled);
          IF NOT IsHandled THEN
            SalesLine.VALIDATE(Quantity,Quantity - "Quantity Invoiced");
          SalesLine.VALIDATE("Unit Price",SalesOrderLine."Unit Price");
          SalesLine."Allow Line Disc." := SalesOrderLine."Allow Line Disc.";
          SalesLine."Allow Invoice Disc." := SalesOrderLine."Allow Invoice Disc.";
          SalesLine.VALIDATE("Line Discount %",SalesOrderLine."Line Discount %");
          IF SalesOrderLine.Quantity = 0 THEN
            SalesLine.VALIDATE("Inv. Discount Amount",0)
          ELSE
            SalesLine.VALIDATE(
              "Inv. Discount Amount",
              ROUND(
                SalesOrderLine."Inv. Discount Amount" * SalesLine.Quantity / SalesOrderLine.Quantity,
                Currency."Amount Rounding Precision"));
        END;
        SalesLine."Attached to Line No." :=
          TransferOldExtLines.TransferExtendedText(
            SalesOrderLine."Line No.",
            NextLineNo,
            "Attached to Line No.");
        SalesLine."Shortcut Dimension 1 Code" := SalesOrderLine."Shortcut Dimension 1 Code";
        SalesLine."Shortcut Dimension 2 Code" := SalesOrderLine."Shortcut Dimension 2 Code";
        SalesLine."Dimension Set ID" := SalesOrderLine."Dimension Set ID";

        IsHandled := FALSE;
        OnBeforeInsertInvLineFromRetRcptLine(SalesLine,SalesOrderLine,Rec,IsHandled);
        IF NOT IsHandled THEN
          SalesLine.INSERT;
        OnAftertInsertInvLineFromRetRcptLine(SalesLine,SalesOrderLine,Rec);

        ItemTrackingMgt.CopyHandledItemTrkgToInvLine(SalesOrderLine,SalesLine);

        NextLineNo := NextLineNo + 10000;
        IF "Attached to Line No." = 0 THEN
          SETRANGE("Attached to Line No.","Line No.");

      UNTIL (NEXT = 0) OR ("Attached to Line No." = 0);

      IF SalesOrderHeader.GET(SalesOrderHeader."Document Type"::Order,"Return Order No.") THEN BEGIN
        SalesOrderHeader."Get Shipment Used" := TRUE;
        SalesOrderHeader.MODIFY;
      END;
    END;

    LOCAL PROCEDURE GetSalesCrMemoLines@4(VAR TempSalesCrMemoLine@1000 : TEMPORARY Record 115);
    VAR
      SalesCrMemoLine@1003 : Record 115;
      ItemLedgEntry@1002 : Record 32;
      ValueEntry@1001 : Record 5802;
    BEGIN
      TempSalesCrMemoLine.RESET;
      TempSalesCrMemoLine.DELETEALL;

      IF Type <> Type::Item THEN
        EXIT;

      FilterPstdDocLnItemLedgEntries(ItemLedgEntry);
      ItemLedgEntry.SETFILTER("Invoiced Quantity",'<>0');
      IF ItemLedgEntry.FINDSET THEN BEGIN
        ValueEntry.SETCURRENTKEY("Item Ledger Entry No.","Entry Type");
        ValueEntry.SETRANGE("Entry Type",ValueEntry."Entry Type"::"Direct Cost");
        ValueEntry.SETFILTER("Invoiced Quantity",'<>0');
        REPEAT
          ValueEntry.SETRANGE("Item Ledger Entry No.",ItemLedgEntry."Entry No.");
          IF ValueEntry.FINDSET THEN
            REPEAT
              IF ValueEntry."Document Type" = ValueEntry."Document Type"::"Sales Credit Memo" THEN
                IF SalesCrMemoLine.GET(ValueEntry."Document No.",ValueEntry."Document Line No.") THEN BEGIN
                  TempSalesCrMemoLine.INIT;
                  TempSalesCrMemoLine := SalesCrMemoLine;
                  IF TempSalesCrMemoLine.INSERT THEN;
                END;
            UNTIL ValueEntry.NEXT = 0;
        UNTIL ItemLedgEntry.NEXT = 0;
      END;
    END;

    [External]
    PROCEDURE FilterPstdDocLnItemLedgEntries@6(VAR ItemLedgEntry@1000 : Record 32);
    BEGIN
      ItemLedgEntry.RESET;
      ItemLedgEntry.SETCURRENTKEY("Document No.");
      ItemLedgEntry.SETRANGE("Document No.","Document No.");
      ItemLedgEntry.SETRANGE("Document Type",ItemLedgEntry."Document Type"::"Sales Return Receipt");
      ItemLedgEntry.SETRANGE("Document Line No.","Line No.");
    END;

    [External]
    PROCEDURE ShowItemSalesCrMemoLines@9();
    VAR
      TempSalesCrMemoLine@1000 : TEMPORARY Record 115;
    BEGIN
      IF Type = Type::Item THEN BEGIN
        GetSalesCrMemoLines(TempSalesCrMemoLine);
        PAGE.RUNMODAL(0,TempSalesCrMemoLine);
      END;
    END;

    LOCAL PROCEDURE InitCurrency@7(CurrencyCode@1001 : Code[10]);
    BEGIN
      IF (Currency.Code = CurrencyCode) AND CurrencyRead THEN
        EXIT;

      IF CurrencyCode <> '' THEN
        Currency.GET(CurrencyCode)
      ELSE
        Currency.InitRoundingPrecision;
      CurrencyRead := TRUE;
    END;

    [External]
    PROCEDURE ShowLineComments@5();
    VAR
      SalesCommentLine@1000 : Record 44;
    BEGIN
      SalesCommentLine.ShowComments(SalesCommentLine."Document Type"::"Posted Return Receipt","Document No.","Line No.");
    END;

    [External]
    PROCEDURE InitFromSalesLine@10(ReturnRcptHeader@1001 : Record 6660;SalesLine@1002 : Record 37);
    BEGIN
      INIT;
      TRANSFERFIELDS(SalesLine);
      IF ("No." = '') AND (Type IN [Type::"G/L Account"..Type::"Charge (Item)"]) THEN
        Type := Type::" ";
      "Posting Date" := ReturnRcptHeader."Posting Date";
      "Document No." := ReturnRcptHeader."No.";
      Quantity := SalesLine."Return Qty. to Receive";
      "Quantity (Base)" := SalesLine."Return Qty. to Receive (Base)";
      IF ABS(SalesLine."Qty. to Invoice") > ABS(SalesLine."Return Qty. to Receive") THEN BEGIN
        "Quantity Invoiced" := SalesLine."Return Qty. to Receive";
        "Qty. Invoiced (Base)" := SalesLine."Return Qty. to Receive (Base)";
      END ELSE BEGIN
        "Quantity Invoiced" := SalesLine."Qty. to Invoice";
        "Qty. Invoiced (Base)" := SalesLine."Qty. to Invoice (Base)";
      END;
      "Return Qty. Rcd. Not Invd." :=
        Quantity - "Quantity Invoiced";
      IF SalesLine."Document Type" = SalesLine."Document Type"::"Return Order" THEN BEGIN
        "Return Order No." := SalesLine."Document No.";
        "Return Order Line No." := SalesLine."Line No.";
      END;

      OnAfterInitFromSalesLine(ReturnRcptHeader,SalesLine,Rec);
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCopyFieldsFromReturnReceiptLine@13(VAR ReturnReceiptLine@1000 : Record 6661;VAR SalesLine@1001 : Record 37);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterInitFromSalesLine@8(ReturnRcptHeader@1000 : Record 6660;SalesLine@1001 : Record 37;VAR ReturnRcptLine@1002 : Record 6661);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAftertInsertInvLineFromRetRcptLine@19(VAR SalesLine@1000 : Record 37;VAR SalesOrderLine@1001 : Record 37;VAR ReturnReceiptLine@1002 : Record 6661);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeInsertInvLineFromRetRcptLine@11(VAR SalesLine@1000 : Record 37;SalesOrderLine@1001 : Record 37;VAR ReturnReceiptLine@1002 : Record 6661;VAR IsHandled@1003 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeInsertInvLineFromRetRcptLineBeforeInsertTextLine@12(VAR ReturnReceiptLine@1000 : Record 6661;VAR SalesLine@1001 : Record 37;VAR NextLineNo@1002 : Integer;VAR IsHandled@1003 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnInsertInvLineFromRetRcptLineOnBeforeInitSalesLine@14(VAR ReturnReceiptLine@1000 : Record 6661;SalesLine@1001 : Record 37);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnInsertInvLineFromRetRcptLineOnBeforeValidateSalesLineQuantity@17(VAR ReturnReceiptLine@1000 : Record 6661;SalesLine@1001 : Record 37;VAR IsHandled@1002 : Boolean);
    BEGIN
    END;

    BEGIN
    END.
  }
}

OBJECT Table 50000 Customer Group
{
  OBJECT-PROPERTIES
  {
    Date=18-05-17;
    Time=20:01:01;
    Modified=Yes;
    Version List=SDM;
  }
  PROPERTIES
  {
  }
  FIELDS
  {
    { 1   ;   ;Group Code          ;Code20         }
    { 2   ;   ;Customer Group      ;Text50         }
  }
  KEYS
  {
    {    ;Group Code                              ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    END.
  }
}

OBJECT Table 50001 Customer Group Code
{
  OBJECT-PROPERTIES
  {
    Date=18-05-17;
    Time=20:01:57;
    Modified=Yes;
    Version List=SDM;
  }
  PROPERTIES
  {
  }
  FIELDS
  {
    { 1   ;   ;Group Code          ;Code20         }
    { 2   ;   ;Group Description   ;Text30         }
  }
  KEYS
  {
    {    ;Group Code                              ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    END.
  }
}

OBJECT Table 50002 Portal User
{
  OBJECT-PROPERTIES
  {
    Date=02-09-20;
    Time=21:25:00;
    Modified=Yes;
    Version List=;
  }
  PROPERTIES
  {
  }
  FIELDS
  {
    { 1   ;   ;User Name           ;Code10         }
    { 2   ;   ;Full Name           ;Text100        }
    { 3   ;   ;Password            ;Text15         }
    { 4   ;   ;State               ;Option        ;CaptionML=[ENU=State;
                                                              ESM=Estado;
                                                              FRC=�tat;
                                                              ENC=State];
                                                   OptionCaptionML=[ENU=Enabled,Disabled;
                                                                    ESM=Activado,Desactivado;
                                                                    FRC=Activ�,D�sactiv�;
                                                                    ENC=Enabled,Disabled];
                                                   OptionString=Enabled,Disabled }
    { 5   ;   ;Super User          ;Boolean        }
    { 10  ;   ;Partner Code        ;Code20        ;TableRelation=Employee }
    { 11  ;   ;Contact Email       ;Text250       ;CaptionML=[ENU=Contact Email;
                                                              ESM=Correo electr�nico de contacto;
                                                              FRC=Courriel de contact;
                                                              ENC=Contact Email] }
  }
  KEYS
  {
    {    ;User Name                               ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    PROCEDURE VerifyLogin@1170000000(UName@1170000000 : Code[10];PPassword@1170000001 : Text[15];VAR PName@1170000002 : Text[100];VAR PEmail@1170000003 : Text[250];VAR PPartnerCode@1170000004 : Code[20];VAR PSuperUser@1000000000 : Boolean) RFound : Boolean;
    BEGIN
      SETRANGE("User Name",UName);
      SETRANGE(Password,PPassword);
      SETRANGE(State,State::Enabled);
      RFound := FINDFIRST;
      PEmail := "Contact Email";
      PName := "Full Name";
      PPartnerCode := "Partner Code";
      PSuperUser := "Super User";
    END;

    BEGIN
    END.
  }
}

OBJECT Table 50003 Primary Incharge
{
  OBJECT-PROPERTIES
  {
    Date=18-05-17;
    Time=20:03:10;
    Modified=Yes;
    Version List=SDM;
  }
  PROPERTIES
  {
  }
  FIELDS
  {
    { 1   ;   ;Incharge Code       ;Code50         }
    { 2   ;   ;Incharge Description;Text100        }
  }
  KEYS
  {
    {    ;Incharge Code                           ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    END.
  }
}

OBJECT Table 50004 LOB Master
{
  OBJECT-PROPERTIES
  {
    Date=18-05-17;
    Time=23:28:36;
    Modified=Yes;
    Version List=SDM;
  }
  PROPERTIES
  {
  }
  FIELDS
  {
    { 1   ;   ;LOB                 ;Text60         }
  }
  KEYS
  {
    {    ;LOB                                     ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    END.
  }
}

OBJECT Table 50005 Segment Master
{
  OBJECT-PROPERTIES
  {
    Date=18-05-17;
    Time=23:29:32;
    Modified=Yes;
    Version List=SDM;
  }
  PROPERTIES
  {
  }
  FIELDS
  {
    { 1   ;   ;LOB                 ;Text60        ;TableRelation="LOB Master" }
    { 2   ;   ;Segment             ;Text100        }
  }
  KEYS
  {
    {    ;LOB,Segment                             ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    END.
  }
}

OBJECT Table 50006 Employee LOB
{
  OBJECT-PROPERTIES
  {
    Date=03-06-17;
    Time=12:04:11;
    Modified=Yes;
    Version List=SDM;
  }
  PROPERTIES
  {
    LookupPageID=Page50010;
    DrillDownPageID=Page50010;
  }
  FIELDS
  {
    { 1   ;   ;LOB                 ;Text60        ;TableRelation="Segment Master".LOB }
    { 2   ;   ;Segment             ;Text99        ;TableRelation="Segment Master".Segment WHERE (LOB=FIELD(LOB)) }
    { 3   ;   ;Emp No.             ;Code20        ;TableRelation=Employee }
    { 4   ;   ;Emp Name            ;Text30         }
    { 5   ;   ;Contact No.         ;Text30         }
  }
  KEYS
  {
    {    ;LOB,Segment,Emp No.                     ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    END.
  }
}

OBJECT Table 50007 Beneficiary
{
  OBJECT-PROPERTIES
  {
    Date=20-01-21;
    Time=02:57:30;
    Modified=Yes;
    Version List=SDM;
  }
  PROPERTIES
  {
  }
  FIELDS
  {
    { 1   ;   ;Beneficiary Code    ;Code10         }
    { 2   ;   ;Beneficiary Name    ;Text60         }
    { 3   ;   ;Beneficiary A/C No. ;Code21         }
    { 4   ;   ;Beneficiary Bank Name;Text60        }
    { 5   ;   ;Beneficiary IFS Code;Code11         }
    { 6   ;   ;Beneficiary Branch Address;Text60   }
  }
  KEYS
  {
    {    ;Beneficiary Code                        ;Clustered=Yes }
    {    ;Beneficiary Name                         }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;Beneficiary Code,Beneficiary Name,Beneficiary A/C No.,Beneficiary Bank Name,Beneficiary IFS Code,Beneficiary Branch Address }
  }
  CODE
  {

    BEGIN
    END.
  }
}

OBJECT Table 50008 Reminder Type
{
  OBJECT-PROPERTIES
  {
    Date=31-05-22;
    Time=12:00:00;
    Modified=Yes;
    Version List=SDM.REM.00.01;
  }
  PROPERTIES
  {
    LookupPageID=Page50012;
    DrillDownPageID=Page50012;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code10        ;DataClassification=ToBeClassified }
    { 2   ;   ;Description         ;Text250       ;DataClassification=ToBeClassified }
    { 3   ;   ;Send To             ;Text250       ;TableRelation="User Setup";
                                                   DataClassification=ToBeClassified }
    { 4   ;   ;Send CC             ;Text250       ;TableRelation="User Setup";
                                                   DataClassification=ToBeClassified }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    END.
  }
}

OBJECT Table 50009 Reminder List
{
  OBJECT-PROPERTIES
  {
    Date=21-06-22;
    Time=14:19:06;
    Modified=Yes;
    Version List=SDM.REM.00.01;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               IF "No." = '' THEN BEGIN
                 GeneralLedgerSetup.GET;

                 GeneralLedgerSetup.TESTFIELD("Reminder Nos.");
                 NoSeriesMgt.InitSeries(GeneralLedgerSetup."Reminder Nos.",xRec."No. Series",0D,"No.","No. Series");
               END;
             END;

    LookupPageID=Page50014;
    DrillDownPageID=Page50014;
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code10        ;DataClassification=ToBeClassified }
    { 2   ;   ;Type                ;Code10        ;TableRelation="Reminder Type".Code;
                                                   DataClassification=ToBeClassified }
    { 3   ;   ;Decription          ;Text250       ;DataClassification=ToBeClassified }
    { 4   ;   ;Purchase Date       ;Date          ;DataClassification=ToBeClassified }
    { 5   ;   ;Purchase Amount     ;Decimal       ;DataClassification=ToBeClassified }
    { 6   ;   ;Start Period        ;Date          ;DataClassification=ToBeClassified }
    { 7   ;   ;End Period          ;Date          ;DataClassification=ToBeClassified }
    { 8   ;   ;Amount              ;Decimal       ;DataClassification=ToBeClassified }
    { 9   ;   ;Count               ;Integer       ;DataClassification=ToBeClassified }
    { 10  ;   ;Location            ;Text30        ;DataClassification=ToBeClassified }
    { 11  ;   ;Company             ;Text250       ;TableRelation=Company.Name;
                                                   DataClassification=ToBeClassified }
    { 12  ;   ;Status              ;Option        ;OnValidate=BEGIN
                                                                IF Status = Status::Closed THEN BEGIN
                                                                  IF "Payment Date" = 0D THEN
                                                                    ERROR('Payment date should not be have blank');

                                                                  IF CONFIRM(CofirmMsg,TRUE) THEN BEGIN
                                                                    ReminderList.INIT;

                                                                    ReminderList.TRANSFERFIELDS(xRec);
                                                                    ReminderList."No." := '' ;
                                                                    ReminderList."Payment Date" := 0D;
                                                                    ReminderList."Generated From Previous Entry" := TRUE;
                                                                    ReminderList.INSERT(TRUE);
                                                                   PAGE.RUN(50015,ReminderList);
                                                                  END ELSE
                                                                    EXIT;
                                                                END;
                                                              END;

                                                   DataClassification=ToBeClassified;
                                                   OptionCaptionML=ENU=Open,Closed;
                                                   OptionString=Open,Closed }
    { 13  ;   ;Payment Date        ;Date          ;DataClassification=ToBeClassified }
    { 14  ;   ;No. Series          ;Code10        ;TableRelation="No. Series";
                                                   DataClassification=ToBeClassified;
                                                   Editable=No }
    { 15  ;   ;Send To             ;Text250       ;TableRelation="User Setup";
                                                   DataClassification=ToBeClassified }
    { 16  ;   ;Send CC             ;Text250       ;TableRelation="User Setup";
                                                   DataClassification=ToBeClassified }
    { 17  ;   ;Generated From Previous Entry;Boolean;
                                                   DataClassification=ToBeClassified;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      GeneralLedgerSetup@1000000000 : Record 98;
      NoSeriesMgt@1000000001 : Codeunit 396;
      CofirmMsg@1000000002 : TextConst 'ENU=Do you want to create new Reminder ?';
      ReminderList@1000000003 : Record 50009;

    PROCEDURE AssistEdit@1000000000() : Boolean;
    BEGIN
      GeneralLedgerSetup.GET;
      GeneralLedgerSetup.TESTFIELD("Reminder Nos.");


      IF NoSeriesMgt.SelectSeries(GeneralLedgerSetup."Reminder Nos.",xRec."No. Series","No. Series") THEN BEGIN
        NoSeriesMgt.SetSeries("No.");
        EXIT(TRUE);
      END;
    END;

    BEGIN
    END.
  }
}

OBJECT Table 50010 E-Inv Integration Setup
{
  OBJECT-PROPERTIES
  {
    Date=10-04-22;
    Time=12:42:22;
    Modified=Yes;
    Version List=;
  }
  PROPERTIES
  {
  }
  FIELDS
  {
    { 1   ;   ;Primary Key         ;Code10        ;DataClassification=ToBeClassified }
    { 2   ;   ;User Name           ;Text30        ;DataClassification=ToBeClassified }
    { 3   ;   ;Password            ;Text30        ;DataClassification=ToBeClassified }
    { 4   ;   ;Client ID           ;Text250       ;DataClassification=ToBeClassified }
    { 5   ;   ;Client Secret       ;Text250       ;DataClassification=ToBeClassified }
    { 6   ;   ;Access Token        ;Text250       ;DataClassification=ToBeClassified;
                                                   Editable=Yes }
    { 7   ;   ;Access Token Validity;DateTime     ;DataClassification=ToBeClassified }
    { 8   ;   ;B2C E-Invoicing     ;Boolean       ;DataClassification=ToBeClassified }
    { 9   ;   ;Mode of E-Invoice - Sales;Option   ;DataClassification=ToBeClassified;
                                                   OptionCaptionML=ENU=On Post,BackGround Posting;
                                                   OptionString=On Post,BackGround Posting }
    { 10  ;   ;Mode of E-Invoice - Purchase;Option;DataClassification=ToBeClassified;
                                                   OptionCaptionML=ENU=On Post,BackGround Posting;
                                                   OptionString=On Post,BackGround Posting }
    { 11  ;   ;Mode of E-Invoice - Transfer;Option;DataClassification=ToBeClassified;
                                                   OptionCaptionML=ENU=On Post,BackGround Posting;
                                                   OptionString=On Post,BackGround Posting }
    { 12  ;   ;Access Token URL    ;Text250       ;DataClassification=ToBeClassified }
    { 13  ;   ;Generate E-Invoice URL;Text250     ;DataClassification=ToBeClassified }
    { 14  ;   ;Cancel E-Invoice URL;Text250       ;DataClassification=ToBeClassified }
    { 15  ;   ;Activation Date     ;Date          ;DataClassification=ToBeClassified }
    { 16  ;   ;Owner ID            ;Text250       ;DataClassification=ToBeClassified }
  }
  KEYS
  {
    {    ;Primary Key                             ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    END.
  }
}

OBJECT Table 50011 E-Invoicing Requests
{
  OBJECT-PROPERTIES
  {
    Date=12-04-22;
    Time=02:31:29;
    Modified=Yes;
    Version List=;
  }
  PROPERTIES
  {
  }
  FIELDS
  {
    { 1   ;   ;Entry No.           ;GUID          ;DataClassification=ToBeClassified }
    { 2   ;   ;Document Type       ;Option        ;DataClassification=ToBeClassified;
                                                   OptionCaptionML=ENU=" ,Sale Invoice,Sale Cr. Memo,Transfer";
                                                   OptionString=[ ,Sale Invoice,Sale Cr. Memo,Transfer] }
    { 3   ;   ;Document No.        ;Code20        ;DataClassification=ToBeClassified }
    { 4   ;   ;Acknowledgement No. ;Code20        ;DataClassification=ToBeClassified }
    { 5   ;   ;Acknowledgement Date;Text50        ;DataClassification=ToBeClassified }
    { 6   ;   ;IRN No.             ;Text250       ;DataClassification=ToBeClassified }
    { 7   ;   ;Signed QR Code      ;Text250       ;DataClassification=ToBeClassified }
    { 8   ;   ;Status              ;Text50        ;DataClassification=ToBeClassified }
    { 9   ;   ;Error Message       ;Text250       ;DataClassification=ToBeClassified }
    { 10  ;   ;Request ID          ;Text250       ;DataClassification=ToBeClassified }
    { 11  ;   ;Request Date        ;Date          ;DataClassification=ToBeClassified }
    { 12  ;   ;Request Time        ;Time          ;DataClassification=ToBeClassified }
    { 13  ;   ;Signed Invoice      ;Text250       ;DataClassification=ToBeClassified }
    { 14  ;   ;Signed QR Code2     ;Text250       ;DataClassification=ToBeClassified }
    { 15  ;   ;Signed QR Code3     ;Text250       ;DataClassification=ToBeClassified }
    { 16  ;   ;QR Image            ;BLOB          ;DataClassification=ToBeClassified }
    { 17  ;   ;Document Date       ;Date          ;DataClassification=ToBeClassified }
    { 18  ;   ;E-Invoice Generated ;Boolean       ;DataClassification=ToBeClassified;
                                                   Editable=No }
    { 19  ;   ;User Id             ;Code50        ;DataClassification=ToBeClassified }
    { 20  ;   ;E-Invoice Canceled  ;Boolean       ;DataClassification=ToBeClassified }
    { 21  ;   ;Cancel Date         ;Date          ;DataClassification=ToBeClassified }
    { 22  ;   ;Cancel Time         ;Time          ;DataClassification=ToBeClassified }
    { 23  ;   ;Cancel User Id      ;Code50        ;DataClassification=ToBeClassified }
    { 24  ;   ;Signed QR Code4     ;Text250       ;DataClassification=ToBeClassified }
    { 25  ;   ;Error Message2      ;Text250       ;DataClassification=ToBeClassified }
    { 26  ;   ;Error Message3      ;Text250       ;DataClassification=ToBeClassified }
    { 27  ;   ;Info Details        ;Text250       ;DataClassification=ToBeClassified }
    { 28  ;   ;Info Details2       ;Text250       ;DataClassification=ToBeClassified }
    { 29  ;   ;QR Code URL         ;Text250       ;DataClassification=ToBeClassified }
    { 30  ;   ;E Invoice PDF URL   ;Text250       ;DataClassification=ToBeClassified }
  }
  KEYS
  {
    {    ;Entry No.                               ;Clustered=Yes }
    {    ;Document Type,Document No.,E-Invoice Generated }
    {    ;Document No.                             }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    END.
  }
}

OBJECT Table 50012 Reminder Email Log
{
  OBJECT-PROPERTIES
  {
    Date=31-05-22;
    Time=15:38:45;
    Modified=Yes;
    Version List=SDM.REM.00.01;
  }
  PROPERTIES
  {
  }
  FIELDS
  {
    { 1   ;   ;Entry No.           ;Integer       ;DataClassification=ToBeClassified }
    { 2   ;   ;Reminder No.        ;Code20        ;DataClassification=ToBeClassified }
    { 3   ;   ;Period Start        ;Date          ;DataClassification=ToBeClassified }
    { 4   ;   ;Period End          ;Date          ;DataClassification=ToBeClassified }
    { 5   ;   ;Email Sending Status;Text250       ;DataClassification=ToBeClassified }
    { 6   ;   ;Error               ;Boolean       ;DataClassification=ToBeClassified }
    { 7   ;   ;Error Text          ;Text250       ;DataClassification=ToBeClassified }
  }
  KEYS
  {
    {    ;Entry No.                               ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    END.
  }
}

OBJECT Table 50013 Reminder List Buffer
{
  OBJECT-PROPERTIES
  {
    Date=25-06-22;
    Time=16:46:32;
    Modified=Yes;
    Version List=SDM.REM.00.01;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               IF "No." = '' THEN BEGIN
                 GeneralLedgerSetup.GET;

                 GeneralLedgerSetup.TESTFIELD("Reminder Nos.");
                 NoSeriesMgt.InitSeries(GeneralLedgerSetup."Reminder Nos.",xRec."No. Series",0D,"No.","No. Series");
               END;
             END;

    LookupPageID=Page50014;
    DrillDownPageID=Page50014;
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code10        ;DataClassification=ToBeClassified }
    { 2   ;   ;Type                ;Code10        ;TableRelation="Reminder Type".Code;
                                                   DataClassification=ToBeClassified }
    { 3   ;   ;Decription          ;Text250       ;DataClassification=ToBeClassified }
    { 4   ;   ;Purchase Date       ;Date          ;DataClassification=ToBeClassified }
    { 5   ;   ;Purchase Amount     ;Decimal       ;DataClassification=ToBeClassified }
    { 6   ;   ;Start Period        ;Date          ;DataClassification=ToBeClassified }
    { 7   ;   ;End Period          ;Date          ;DataClassification=ToBeClassified }
    { 8   ;   ;Amount              ;Decimal       ;DataClassification=ToBeClassified }
    { 9   ;   ;Count               ;Integer       ;DataClassification=ToBeClassified }
    { 10  ;   ;Location            ;Text30        ;DataClassification=ToBeClassified }
    { 11  ;   ;Company             ;Text250       ;TableRelation=Company.Name;
                                                   DataClassification=ToBeClassified }
    { 12  ;   ;Status              ;Option        ;OnValidate=BEGIN
                                                                IF Status = Status::Closed THEN BEGIN
                                                                  IF "Payment Date" = 0D THEN
                                                                    ERROR('Payment date should not be have blank');

                                                                  IF CONFIRM(CofirmMsg,TRUE) THEN BEGIN
                                                                    ReminderList.INIT;

                                                                    ReminderList.TRANSFERFIELDS(xRec);
                                                                    ReminderList."No." := '' ;
                                                                    ReminderList."Payment Date" := 0D;
                                                                    ReminderList."Generated From Previous Entry" := TRUE;
                                                                    ReminderList.INSERT(TRUE);
                                                                   PAGE.RUN(50015,ReminderList);
                                                                  END ELSE
                                                                    EXIT;
                                                                END;
                                                              END;

                                                   DataClassification=ToBeClassified;
                                                   OptionCaptionML=ENU=Open,Closed;
                                                   OptionString=Open,Closed }
    { 13  ;   ;Payment Date        ;Date          ;DataClassification=ToBeClassified }
    { 14  ;   ;No. Series          ;Code10        ;TableRelation="No. Series";
                                                   DataClassification=ToBeClassified;
                                                   Editable=No }
    { 15  ;   ;Send To             ;Text250       ;TableRelation="User Setup";
                                                   DataClassification=ToBeClassified }
    { 16  ;   ;Send CC             ;Text250       ;TableRelation="User Setup";
                                                   DataClassification=ToBeClassified }
    { 17  ;   ;Generated From Previous Entry;Boolean;
                                                   DataClassification=ToBeClassified;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      GeneralLedgerSetup@1000000000 : Record 98;
      NoSeriesMgt@1000000001 : Codeunit 396;
      CofirmMsg@1000000002 : TextConst 'ENU=Do you want to create new Reminder ?';
      ReminderList@1000000003 : Record 50009;

    PROCEDURE AssistEdit@1000000000() : Boolean;
    BEGIN
      GeneralLedgerSetup.GET;
      GeneralLedgerSetup.TESTFIELD("Reminder Nos.");


      IF NoSeriesMgt.SelectSeries(GeneralLedgerSetup."Reminder Nos.",xRec."No. Series","No. Series") THEN BEGIN
        NoSeriesMgt.SetSeries("No.");
        EXIT(TRUE);
      END;
    END;

    BEGIN
    END.
  }
}

OBJECT Table 50025 GL User Setup
{
  OBJECT-PROPERTIES
  {
    Date=29-10-24;
    Time=12:00:00;
    Modified=Yes;
    Version List=SDM.PKF.10.2024;
  }
  PROPERTIES
  {
    LookupPageID=Page50005;
    DrillDownPageID=Page50005;
  }
  FIELDS
  {
    { 1   ;   ;User ID             ;Code50        ;TableRelation=User."User Name";
                                                   ValidateTableRelation=No;
                                                   DataClassification=ToBeClassified;
                                                   NotBlank=Yes }
    { 2   ;   ;G/L Account No.     ;Code20        ;TableRelation="G/L Account" WHERE (Account Type=FILTER(Posting));
                                                   OnValidate=BEGIN
                                                                IF GLAccount.GET("G/L Account No.") THEN
                                                                  "G/L Account Name" := GLAccount.Name
                                                                ELSE
                                                                  "G/L Account Name" := '';
                                                              END;

                                                   DataClassification=ToBeClassified }
    { 3   ;   ;G/L Account Name    ;Text100       ;DataClassification=ToBeClassified;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;User ID,G/L Account No.                 ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      GLAccount@1000000000 : Record 15;

    PROCEDURE FilterGLAccount@1000000000() : Text;
    VAR
      GLUserSetup@1000000001 : Record 50025;
      GLFilter@1000000002 : Text;
      I@1000000000 : Integer;
    BEGIN
      I:=1;
      GLUserSetup.SETRANGE("User ID",USERID);
      IF GLUserSetup.COUNT > 1000 THEN
        EXIT('');
      IF GLUserSetup.FINDSET THEN REPEAT
          IF I = 1 THEN
             GLFilter += '<>' + GLUserSetup."G/L Account No."
          ELSE
            GLFilter += '&<>' + GLUserSetup."G/L Account No.";

        I := I + 1;
        UNTIL GLUserSetup.NEXT = 0;
      EXIT(GLFilter);
    END;

    BEGIN
    END.
  }
}

OBJECT Table 50038 Temp Buffer
{
  OBJECT-PROPERTIES
  {
    Date=03-06-17;
    Time=16:01:35;
    Modified=Yes;
    Version List=SDM;
  }
  PROPERTIES
  {
  }
  FIELDS
  {
    { 1   ;   ;Entry No.           ;Integer        }
    { 2   ;   ;Code 1              ;Code50         }
    { 3   ;   ;Code 2              ;Code50         }
    { 4   ;   ;Decimal 1           ;Decimal        }
    { 5   ;   ;Decimal 2           ;Decimal        }
    { 6   ;   ;Decimal 3           ;Decimal        }
    { 7   ;   ;Date 1              ;Date           }
    { 8   ;   ;Boolean 1           ;Boolean        }
  }
  KEYS
  {
    {    ;Entry No.                               ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    END.
  }
}

